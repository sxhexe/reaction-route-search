./doc/API/html/annotated.shtml:<tr id="row_0_8_" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structOpenBabel_1_1CharPtrLess.shtml" target="_self">CharPtrLess</a></td><td class="desc">Case insensitive string comparison for PluginMapType key </td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBChargeModel.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBDescriptor.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBFingerprint.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBForceField.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBFormat.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBGroupContrib.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBMoleculeFormat.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBOp-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBOp-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBOp.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBOp.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBOp.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBOp.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBOp.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBOp.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OBPlugin.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1OpTransform.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat-members.shtml:  <tr><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1XMLBaseFormat.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a>(PluginMapType &amp;Map, const char *ID)</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"><span class="mlabel">protected</span><span class="mlabel">static</span></td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat-members.shtml:  <tr class="even"><td class="entry"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> typedef</td><td class="entry"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td><td class="entry"></td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/classOpenBabel_1_1XMLMoleculeFormat.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/format_8h_source.shtml:<a href="format_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">obconversion.cpp -  Declarations for OBFormat</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2004-2007 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2005-2007 by Geoffrey Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef OB_FORMAT_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define OB_FORMAT_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keyword">class </span>OBBase;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keyword">class </span>OBConversion;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="format_8h.shtml#a5d766d529e097f852406cf0c434e54e0">   31</a></span>&#160;<span class="preprocessor">#define NOTREADABLE     0x01</span></div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="format_8h.shtml#aec13538a29f6a7d630b3a59ccce0e03c">   32</a></span>&#160;<span class="preprocessor">#define READONEONLY     0x02</span></div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="format_8h.shtml#a95479d1fb64936c936077e47356bf6e2">   33</a></span>&#160;<span class="preprocessor">#define READBINARY      0x04</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="format_8h.shtml#a0e12fffdb9815dc9bb44cb0635667146">   34</a></span>&#160;<span class="preprocessor">#define ZEROATOMSOK     0x08</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="format_8h.shtml#a201c57b6b8e95558ead652e391d2e157">   35</a></span>&#160;<span class="preprocessor">#define NOTWRITABLE     0x10</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="format_8h.shtml#ab95246c97f4ade91aee102631b6b8666">   36</a></span>&#160;<span class="preprocessor">#define WRITEONEONLY    0x20</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="format_8h.shtml#a655ed7589181707a2c6d18d7777cb1c6">   37</a></span>&#160;<span class="preprocessor">#define WRITEBINARY     0x40</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="format_8h.shtml#ac3cad6ca6aadd6aa9eccfc793e01b30e">   38</a></span>&#160;<span class="preprocessor">#define READXML         0x80</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="format_8h.shtml#ae90fae09f8caa6eaf7c3706f3e7cb87c">   39</a></span>&#160;<span class="preprocessor">#define DEPICTION2D     0x100</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="format_8h.shtml#a114620de287b71102355c29edc4b0115">   40</a></span>&#160;<span class="preprocessor">#define DEFAULTFORMAT   0x4000</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="comment">// class introduction in obconversion.cpp</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml">   44</a></span>&#160;<span class="keyword">class </span>OBCONV <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">//Macro to include functions to handle plugin operations</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a11590b0840c8360ab4c3b62476d49863">   52</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a11590b0840c8360ab4c3b62476d49863">OBFormat</a>(){}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">   54</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a>(){ <span class="keywordflow">return</span> <span class="stringliteral">&quot;formats&quot;</span>; }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a1e309febfaef70cc3c8d98afc1540931">   61</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a1e309febfaef70cc3c8d98afc1540931">ReadMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;HIER&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid input format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a6044ced825a2a83b7cfe7c45eea63c99">   70</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a6044ced825a2a83b7cfe7c45eea63c99">ReadChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid input format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a663171ec9788e2d1621d374848b3888b">   79</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a663171ec9788e2d1621d374848b3888b">WriteMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid output format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a5ea5d9623cd9594549a52e116caecaa2">   87</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a5ea5d9623cd9594549a52e116caecaa2">WriteChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid output format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description()=0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TargetClassDescription();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> std::type_info&amp; GetType();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a1d3a8785a0ad0c85b98fa3406a64d50f">  109</a></span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a>() { <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>; }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a0e10219d8aedefa78ef16fc7fded85ec">  112</a></span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a0e10219d8aedefa78ef16fc7fded85ec">GetMIMEType</a>() { <span class="keywordflow">return</span> pMime; }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a94a94537cc5ba96b1876db1b612b91a3">  119</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a94a94537cc5ba96b1876db1b612b91a3">Flags</a>() { <span class="keywordflow">return</span> 0;};</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a1f0ee7ba19cc62b53a7ee06fa4f91509">  124</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a1f0ee7ba19cc62b53a7ee06fa4f91509">SkipObjects</a>(<span class="keywordtype">int</span> <span class="comment">/*n*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> 0; <span class="comment">//shows not implemented in the format class</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      };</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">  134</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a>()</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> NULL; <span class="comment">//shows not implemented in the format class</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">//New functions since OBFormat is derived from OBPlugin</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">//\brief Called from, and an alternative to, OBConversion::RegisterFormat();</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">int</span> RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp; txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">static</span> <a class="code" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;FormatsMIMEMap()</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      <span class="keyword">static</span> <a class="code" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> m;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="keywordflow">return</span> m;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* pMime;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/* Functions provided by the MAKE_PLUGIN macro</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">  Not currently used for formats</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  OBFormat(const char* ID, bool IsDefault=false);</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  static OBFormat* FindType(const char* ID);</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">*/</span>};</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}<span class="comment">//namespace</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a0924b1a442d147fa036bff23a4cf04ef"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">OpenBabel::OBFormat::MakeNewInstance</a></div><div class="ttdeci">virtual OBFormat * MakeNewInstance()</div><div class="ttdef"><b>Definition:</b> format.h:134</div></div>
./doc/API/html/format_8h_source.shtml:<div class="ttc" id="group__plugins_shtml_ga0fd3c807ed3341c33070c93b14739bc8"><div class="ttname"><a href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">OpenBabel::OBPlugin::PluginMapType</a></div><div class="ttdeci">std::map&lt; const char *, OBPlugin *, CharPtrLess &gt; PluginMapType</div><div class="ttdef"><b>Definition:</b> plugin.h:59</div></div>
./doc/API/html/functions_p.shtml:<li>PluginMapType
./doc/API/html/functions_type.shtml:<li>PluginMapType
./doc/API/html/group__plugins.shtml:<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
./doc/API/html/group__plugins.shtml:<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
./doc/API/html/group__plugins.shtml:<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
./doc/API/html/group__plugins.shtml:<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
./doc/API/html/group__plugins.shtml:<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
./doc/API/html/group__plugins.shtml:<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
./doc/API/html/group__plugins.shtml:<h2 class="memtitle"><span class="permalink"><a href="#ga0fd3c807ed3341c33070c93b14739bc8">&sect;&nbsp;</a></span>PluginMapType</h2>
./doc/API/html/group__plugins.shtml:          <td class="memname">typedef std::map&lt;const char*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>*, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a>&gt; <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td>
./doc/API/html/group__plugins.shtml:          <td class="memname">typedef PluginMapType::const_iterator <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td>
./doc/API/html/group__plugins.shtml:          <td class="memname">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; GetMap </td>
./doc/API/html/group__plugins.shtml:          <td class="memname">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; PluginMap </td>
./doc/API/html/group__plugins.shtml:          <td class="memname"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">OBPlugin::PluginMapType</a> &amp; GetTypeMap </td>
./doc/API/html/group__plugins.shtml:          <td class="paramtype"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td>
./doc/API/html/hierarchy.shtml:<tr id="row_3_0_" class="even" style="display:none;"><td class="entry"><span style="width:32px;display:inline-block;">&#160;</span><span class="icona"><span class="icon">C</span></span><a class="el" href="structOpenBabel_1_1CharPtrLess.shtml" target="_self">CharPtrLess</a></td><td class="desc">Case insensitive string comparison for PluginMapType key </td></tr>
./doc/API/html/obconversion_8h_source.shtml:<div class="ttc" id="group__plugins_shtml_ga8fac85f5497f873a2dd8734b47f0bdc0"><div class="ttname"><a href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OpenBabel::OBPlugin::PluginIterator</a></div><div class="ttdeci">PluginMapType::const_iterator PluginIterator</div><div class="ttdef"><b>Definition:</b> plugin.h:60</div></div>
./doc/API/html/op_8h_source.shtml:<div class="ttc" id="group__plugins_shtml_ga8fac85f5497f873a2dd8734b47f0bdc0"><div class="ttname"><a href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OpenBabel::OBPlugin::PluginIterator</a></div><div class="ttdeci">PluginMapType::const_iterator PluginIterator</div><div class="ttdef"><b>Definition:</b> plugin.h:60</div></div>
./doc/API/html/plugin_8h.shtml:<p><a class="el" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN(YourBaseClass)</a> inserts the following code into YourBaseClass: </p><div class="fragment"><div class="line"><span class="keyword">protected</span>:</div><div class="line"></div><div class="line">  <span class="comment">//The collection of sub-types is in a local static variable to avoid</span></div><div class="line">  <span class="comment">//any difficulties with the order of initialization of static objects.</span></div><div class="line">  <span class="keyword">static</span> PluginMapType&amp; Map()</div><div class="line">  {</div><div class="line">    <span class="keyword">static</span> PluginMapType m;</div><div class="line">    <span class="keywordflow">return</span> m;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">//Making the map accessible to the base class (Cannot be used during construction)</span></div><div class="line">  <span class="keyword">virtual</span> PluginMapType&amp; GetMap()<span class="keyword">const</span></div><div class="line"><span class="keyword">  </span>{</div><div class="line">   <span class="keywordflow">return</span> Map();</div><div class="line">  }</div><div class="line"></div><div class="line"><span class="keyword">public</span>:</div><div class="line">  <span class="keyword">static</span> YourBaseClass*&amp; Default()</div><div class="line">  {</div><div class="line">    <span class="keyword">static</span> YourBaseClass* d;</div><div class="line">    <span class="keywordflow">return</span> d;</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="comment">//Constructor registers the sub-type</span></div><div class="line">  YourBaseClass(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>)</div><div class="line">  {</div><div class="line">    _id = ID;</div><div class="line">    <span class="keywordflow">if</span>(ID &amp;&amp; *ID &amp;&amp; *ID!=<span class="charliteral">&#39; &#39;</span>) <span class="comment">//do not register if ID is empty or starts with a space</span></div><div class="line">    {</div><div class="line">      <span class="keywordflow">if</span>(IsDefault || Map().empty())</div><div class="line">        Default() = <span class="keyword">this</span>;</div><div class="line">      Map()[ID]=<span class="keyword">this</span>;</div><div class="line">      <span class="comment">//Ensure YourBaseClass is registered in OBPlugin so it can be accessed from the commandline</span></div><div class="line">      PluginMap()[TypeID()] =<span class="keyword">this</span>;</div><div class="line">    }</div><div class="line">  }</div><div class="line"></div><div class="line">  <span class="keyword">static</span> YourBaseClass* FindType(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID)</div><div class="line">  {</div><div class="line">    <span class="keywordflow">if</span>(!ID || *ID==0)</div><div class="line">      <span class="keywordflow">return</span> Default();</div><div class="line">    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>YourBaseClass*<span class="keyword">&gt;</span>(BaseFindType(Map(),ID));</div><div class="line">  }</div></div><!-- fragment --> </div></div><!-- contents -->
./doc/API/html/plugin_8h_source.shtml:<a href="plugin_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">plugin.h - facilitates construction of plugin classes</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2007 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful, but</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">General Public License for more details.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef OB_PLUGIN_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define OB_PLUGIN_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="dlhandler_8h.shtml">openbabel/dlhandler.h</a>&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;cstring&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#ifndef OBERROR</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor"> #define OBERROR</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1CharPtrLess.shtml">   41</a></span>&#160;<span class="keyword">struct </span>OBERROR <a class="code" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> : <span class="keyword">public</span> std::binary_function&lt;const char*,const char*, bool&gt;</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga5232a08d3981144998353bafd17731fe">   43</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="group__plugins.shtml#ga5232a08d3981144998353bafd17731fe">operator()</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* p1,<span class="keyword">const</span> <span class="keywordtype">char</span>* p2)<span class="keyword"> const</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">  </span>{ <span class="keywordflow">return</span> strcasecmp(p1,p2)&lt;0; }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;};</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBPlugin.shtml">   52</a></span>&#160;<span class="keyword">class </span>OBERROR <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;{</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="comment">//Maps of thistype are used to store</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="comment">// (a)a list of the plugin types in OBPlugin, and</span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="comment">// (b)a list of the sub-types in each type class derived from OBPlugin.</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">   59</a></span>&#160;  <span class="keyword">typedef</span> std::map&lt;const char*, OBPlugin*, CharPtrLess&gt; <a class="code" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">   60</a></span>&#160;  <span class="keyword">typedef</span> PluginMapType::const_iterator <a class="code" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga2f6f0f4ddec879439f78de686c459fb0">   63</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="group__plugins.shtml#ga2f6f0f4ddec879439f78de686c459fb0">~OBPlugin</a>(){};</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">   66</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a>() { <span class="keywordflow">return</span> NULL;} ;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">   69</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">TypeID</a>(){ <span class="keywordflow">return</span> <span class="stringliteral">&quot;plugins&quot;</span>; }</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp;txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">   82</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* <a class="code" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">MakeInstance</a>(<span class="keyword">const</span> std::vector&lt;std::string&gt;&amp;){<span class="keywordflow">return</span> NULL;}</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">   86</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a>(){};</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* GetPlugin(<span class="keyword">const</span> <span class="keywordtype">char</span>* Type, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="group__plugins.shtml#gaa55e5ad893f2566c6874224f9174b7d2">   93</a></span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="group__plugins.shtml#gaa55e5ad893f2566c6874224f9174b7d2">GetID</a>()<span class="keyword">const</span>{<span class="keywordflow">return</span> _id;};</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> ListAsVector(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, std::vector&lt;std::string&gt;&amp; vlist);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> List(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param=NULL, std::ostream* os=&amp;std::cout);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">static</span> std::string ListAsString(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID, <span class="keyword">const</span> <span class="keywordtype">char</span>* param=NULL);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keyword">static</span> std::string FirstLine(<span class="keyword">const</span> <span class="keywordtype">char</span>* txt);</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">  111</a></span>&#160;  <span class="keyword">static</span> PluginIterator <a class="code" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID)</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  {</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span>( !strcmp(PluginID, <span class="stringliteral">&quot;plugins&quot;</span>) || GetTypeMap(PluginID)!=PluginMap())</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="keywordflow">return</span> GetTypeMap(PluginID).begin();</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="keywordflow">return</span> PluginMap().end();</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">  119</a></span>&#160;  <span class="keyword">static</span> PluginIterator <a class="code" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> GetTypeMap(PluginID).end();</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keyword">virtual</span> PluginMapType&amp; GetMap() <span class="keyword">const</span> =0;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> LoadAllPlugins();</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">  133</a></span>&#160;  <span class="keyword">static</span> PluginMapType&amp; <a class="code" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a>()</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">static</span> PluginMapType m;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> m;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga9d7dd3bbc482a65e28ca887b3faa2535">  140</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="group__plugins.shtml#ga9d7dd3bbc482a65e28ca887b3faa2535">AllPluginsLoaded</a>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="keyword">static</span> PluginMapType&amp; GetTypeMap(<span class="keyword">const</span> <span class="keywordtype">char</span>* PluginID);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* BaseFindType(PluginMapType&amp; Map, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">  150</a></span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a>;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;};</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor">#if defined(__CYGWIN__) || defined(__MINGW32__)</span></div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">//Macro to be added to definition of the base class</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor">#define MAKE_PLUGIN(BaseClass)\</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">protected:\</span></div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="preprocessor">  static PluginMapType&amp; Map();\</span></div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">  virtual PluginMapType&amp; GetMap() const {\</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="preprocessor">    return Map();\</span></div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">  }\</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="preprocessor">public:\</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">  static BaseClass*&amp; Default() {\</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="preprocessor">    static BaseClass* d;\</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="preprocessor">    return d;\</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="preprocessor">  }\</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="preprocessor">  BaseClass(const char* ID, bool IsDefault=false) {\</span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="preprocessor">    _id=ID;\</span></div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">    if (ID&amp;&amp;*ID) {\</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor">      if (IsDefault || Map().empty()) {\</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">        Default() = this;\</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="preprocessor">      }\</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="preprocessor">      if (Map().count(ID) == 0) {\</span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="preprocessor">        Map()[ID] = this;\</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">        PluginMap()[TypeID()] = this;\</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="preprocessor">      }\</span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">    }\</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="preprocessor">  }\</span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">  static BaseClass* FindType(const char* ID) {\</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="preprocessor">    if (!ID || *ID==0 || *ID==&#39; &#39;) {\</span></div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">      return Default();\</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">    }\</span></div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">    return static_cast&lt;BaseClass*&gt;(BaseFindType(Map(),ID));\</span></div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor">  }</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="preprocessor">#define PLUGIN_CPP_FILE(BaseClass)\</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="preprocessor">OBPlugin::PluginMapType&amp; BaseClass::Map() {\</span></div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="preprocessor">  static OBPlugin::PluginMapType map;\</span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">  return map;\</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor">}</span></div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="preprocessor">#else // __CYGWIN__ || __MINGW32__</span></div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">//Macro to be added to definition of the base class</span></div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">  195</a></span>&#160;<span class="preprocessor">#define MAKE_PLUGIN(BaseClass)\</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="preprocessor">protected:\</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="preprocessor">  static PluginMapType&amp; Map() {\</span></div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="preprocessor">    static PluginMapType m;\</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="preprocessor">    return m;\</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="preprocessor">  }\</span></div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="preprocessor">  virtual PluginMapType&amp; GetMap() const {\</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">    return Map();\</span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">  }\</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="preprocessor">public:\</span></div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">  static BaseClass*&amp; Default() {\</span></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">    static BaseClass* d;\</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">    return d;\</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">  }\</span></div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="preprocessor">  BaseClass(const char* ID, bool IsDefault=false) {\</span></div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">    _id=ID;\</span></div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">    if (ID&amp;&amp;*ID) {\</span></div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="preprocessor">      if (IsDefault || Map().empty()) {\</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">        Default() = this;\</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="preprocessor">      }\</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">      if (Map().count(ID) == 0) {\</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="preprocessor">        Map()[ID] = this;\</span></div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">        PluginMap()[TypeID()] = this;\</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="preprocessor">      }\</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="preprocessor">    }\</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">  }\</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="preprocessor">  static BaseClass* FindType(const char* ID) {\</span></div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">    if (!ID || *ID==0 || *ID==&#39; &#39;) {\</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="preprocessor">      return Default();\</span></div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="preprocessor">    }\</span></div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="preprocessor">    return static_cast&lt;BaseClass*&gt;(BaseFindType(Map(),ID));\</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="preprocessor">  }</span></div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="preprocessor">#endif // __CYGWIN__ || __MINGW32__</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment">/*\@}*/</span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="preprocessor">#ifndef SWIG // Skipped by SWIG (for the moment)</span></div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="preprocessor">#ifndef USING_DYNAMIC_LIBS</span></div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">  372</a></span>&#160;<span class="preprocessor">#define OB_STATIC_PLUGIN(className,instanceName) \</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="preprocessor">  class className; \</span></div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="preprocessor">  OBAPI EXTERN className instanceName;</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="comment">// formats</span></div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ABINITFormat, theABINITFormat)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(AcesOutputFormat, theAcesOutputFormat)</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(AcesInputFormat, theAcesInputFormat)</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ACRFormat, theACRFormat)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ADFOutputFormat, theADFOutputFormat)</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ADFInputFormat, theADFInputFormat)</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(AlchemyFormat, theAlchemyFormat)</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(AmberPrepFormat, theAmberPrepFormat)</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(AoforceFormat, theAoforceFormat)</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBAPIInterface, theOBAPIInterface)</div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(BallStickFormat, theBallStickFormat)</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(BGFFormat, theBGFFormat)</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(BoxFormat, theBoxFormat)</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CacaoFormat, theCacaoFormat)</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CacheFormat, theCacheFormat)</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CARFormat, theCARFormat)</div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CASTEPFormat, theCASTEPFormat)</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CCCFormat, theCCCFormat)</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CHEM3D1Format, theCHEM3D1Format)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CHEM3D2Format, theCHEM3D2Format)</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ChemDrawBinaryXFormat, theChemDrawBinaryXFormat)</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ChemDrawFormat, theChemDrawFormat)</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ChemKinFormat, theChemKinFormat)</div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CHTFormat, theCHTFormat)</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CIFFormat, theCIFFormat)</div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CopyFormat, theCopyFormat)</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CRK2DFormat, theCRK2DFormat)</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CRK3DFormat, theCRK3DFormat)</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CSRFormat, theCSRFormat)</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CSSRFormat, theCSSRFormat)</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(DlpolyConfigFormat, theDlpolyConfigFormat)</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(DlpolyHISTORYFormat, theDlpolyHISTORYFormat)</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(DMolFormat, theDMolFormat)</div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(EXYZFormat, theEXYZFormat)</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FASTAFormat, theFASTAFormat)</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FastSearchFormat, theFastSearchFormat)</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FCHKFormat, theFCHKFormat)</div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FEATFormat, theFEATFormat)</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FenskeZmatFormat, theFenskeZmatFormat)</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FHIaimsFormat,theFHIaimsFormat)</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FingerprintFormat, theFingerprintFormat)</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FreeFormFractionalFormat, theFreeFormFractionalFormat)</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GAMESSOutputFormat, theGAMESSOutputFormat)</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GAMESSInputFormat, theGAMESSInputFormat)</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBGaussianCubeFormat, theGaussianCubeFormat)</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GaussianOutputFormat, theGaussianOutputFormat)</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GaussianInputFormat, theGaussianInputFormat)</div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GaussianZMatrixInputFormat, theGaussianZMatrixInputFormat)</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GenBankFormat, theGenBankFormat)</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GhemicalFormat, theGhemicalFormat)</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GROFormat, theGROFormat)</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GROMOS96Format, theGROMOS96Format)</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GULPFormat, theGULPFormat)</div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(HINFormat, theHINFormat)</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(JaguarOutputFormat, theJaguarOutputFormat)</div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(JaguarInputFormat, theJaguarInputFormat)</div><div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(LMPDATFormat, theLMPDATFormat)</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MCDLFormat, theMCDLFormat)</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MOLFormat, theMOLFormat)</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SDFormat, theSDFormat)</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBT41Format, t41Format__)</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBMoldenFormat, moldenFormat__)</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(mmCIFFormat, themmCIFFormat)</div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MacroModFormat, theMacroModFormat)</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MNAFormat, theMNAFormat)</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MOL2Format, theMOL2Format)</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MolproOutputFormat, theMolproOutputFormat)</div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MolproInputFormat, theMolproInputFormat)</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MolReportFormat, theMolReportFormat)</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MOPACFormat, theMOPACFormat)</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MOPACCARTFormat, theMOPACCARTFormat)</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MOPACINTFormat, theMOPACINTFormat)</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MPDFormat, theMPDFormat)</div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MPQCFormat, theMPQCFormat)</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MPQCInputFormat, theMPQCInputFormat)</div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MSIFormat, theMSIFormat)</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBMSMSFormat, msmsFormat__)</div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(NulFormat, theNulFormat)</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(NWChemOutputFormat, theNWChemOutputFormat)</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(NWChemInputFormat, theNWChemInputFormat)</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBOpenDXCubeFormat, theOpenDXCubeFormat)</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OrcaOutputFormat, theOrcaOutputFormat)</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OrcaInputFormat, theOrcaInputFormat)</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OutputFormat, theOutputFormat)</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PCModelFormat, thePCModelFormat)</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PDBFormat, thePDBFormat)</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PDBQTFormat, thePDBQTFormat)</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="preprocessor">#ifdef HAVE_LIBZ</span></div><div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PNGFormat, thePNGFormat)</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PointCloudFormat, thePointCloudFormat)</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PovrayFormat, thePovrayFormat)</div><div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PQRFormat, thePQRFormat)</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PQSFormat, thePQSFormat)</div><div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PWscfFormat, thePWscfFormat)</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(QChemOutputFormat, theQChemOutputFormat)</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(QChemInputFormat, theQChemInputFormat)</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ReportFormat, theReportFormat)</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SmiReactFormat, theSmiReactFormat)</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(RXNFormat, theRXNFormat)</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ShelXFormat, theShelXFormat)</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SMIFormat, theSMIFormat)</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(STLFormat, theSTLFormat)</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CANSMIFormat, theCANSMIFormat)</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FIXFormat, theFIXFormat)</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SVGFormat, theSVGFormat)</div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(TextFormat, theTextFormat)</div><div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ThermoFormat, theThermoFormat)</div><div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(TinkerFormat, theTinkerFormat)</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(TitleFormat, theTitleFormat)</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(TurbomoleFormat, theTurbomoleFormat)</div><div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(UniChemFormat, theUniChemFormat)</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(VASPFormat, theVASPFormat)</div><div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ViewMolFormat, theViewMolFormat)</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(XEDFormat, theXEDFormat)</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(XSFFormat, theXSFFormat)</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(XYZFormat, theXYZFormat)</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(YOBFormat, theYOBFormat)</div><div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ZINDOFormat, theZINDOFormat)</div><div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="preprocessor">#ifdef HAVE_STATIC_LIBXML</span></div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(ChemDrawXMLFormat, theChemDrawXMLFormat)</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CMLFormat, theCMLFormat)</div><div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CMLReactFormat, theCMLReactFormat)</div><div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PubChemFormat, thePubChemFormat)</div><div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(XMLFormat, theXMLFormat)</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;<span class="preprocessor">#ifdef HAVE_STATIC_INCHI</span></div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(InChIFormat, theInChIFormat)</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;<span class="preprocessor">#ifdef HAVE_REGEX_H</span></div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GAMESSUKInputFormat, theGAMESSUKInputFormat)</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GAMESSUKOutputFormat, theGAMESSUKOutputFormat)</div><div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="preprocessor">#ifdef HAVE_RPC_XDR_H</span></div><div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(XTCFormat, theXTCFormat)</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  <span class="comment">// descriptors</span></div><div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CanSmiles, theCanSmiles)</div><div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(CompoundFilter, dummyCmpFilter)</div><div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MWFilter, theMWFilter)</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SmartsFilter, firstSmartsFilter)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SmartsFilter, secondSmartsFilter)</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(TitleFilter, theTitleFilter)</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FormulaDescriptor, TheFormulaDescriptor)</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;  <span class="comment">//OB_STATIC_PLUGIN(FPCount, theFPCount)</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(InChIFilter, theInChIFilter)</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  <span class="comment">// smarts descriptors</span></div><div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SmartsDescriptor, theHBD)</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SmartsDescriptor, theHBA1)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SmartsDescriptor, theHBA2)</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(SmartsDescriptor, thenF)</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;  <span class="comment">// group contribution descriptors</span></div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBGroupContrib, thelogP)</div><div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBGroupContrib, theTPSA)</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBGroupContrib, theMR)</div><div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;</div><div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;  <span class="comment">// fingerprints</span></div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(fingerprint2, thefingerprint2)</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PatternFP, FP3PatternFP)</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(PatternFP, FP4PatternFP)</div><div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(fingerprintECFP, theECFP0)</div><div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(fingerprintECFP, theECFP2)</div><div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(fingerprintECFP, theECFP4)</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(fingerprintECFP, theECFP6)</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(fingerprintECFP, theECFP8)</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(fingerprintECFP, theECFP10)</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  <span class="comment">// forcefields</span></div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBForceFieldGaff, theForceFieldGaff)</div><div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBForceFieldGhemical, theForceFieldGhemical)</div><div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBForceFieldMMFF94, theForceFieldMMFF94)</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBForceFieldMMFF94, theForceFieldMMFF94s)</div><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OBForceFieldUFF, theForceFieldUFF)</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;</div><div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;  <span class="comment">// operations</span></div><div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpAddInIndex, theOpAddInIndex)</div><div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpAddPolarH, theOpAddPolarH)</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpAddNonPolarH, theOpAddNonPolarH)</div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpChangeCell, theOpChangeCell)</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpCanonical, theOpCanonical)</div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpDelPolarH, theOpDelPolarH)</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpDelNonPolarH, theOpDelNonPolarH)</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpFillUC, theOpFillUC)</div><div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpEnergy, theOpEnergy)</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpMinimize, theOpMinimize)</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpGen2D, theOpGen2D)</div><div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpGen3D, theOpGen3D)</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpNewS, theOpNewS)</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpPartialCharge, theOpPartialCharge)</div><div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpReadConformers, theOpReadConformers)</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpSort, theOpSort)</div><div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpExtraOut, theOpExtraOut)</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="preprocessor">#ifdef HAVE_STATIC_INCHI</span></div><div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpUnique, theOpUnique)</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="preprocessor">#ifdef HAVE_EIGEN</span></div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(OpConformer, theOpConformer)</div><div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;  <span class="comment">// charges</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(GasteigerCharges, theGasteigerCharges)</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(MMFF94Charges, theMMFF94Charges)</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(NoCharges, theNoCharges)</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(FromFileCharges, theFromFileCharges)</div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="preprocessor">#ifdef HAVE_EIGEN</span></div><div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(QEqCharges, theQEqCharges)</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(QTPIECharges, theQTPIECharges)</div><div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="preprocessor">#ifdef HAVE_EIGEN3</span></div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  <a class="code" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(EQEqCharges, theEQEqCharges)</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  OBAPI std::vector&lt;std::string&gt; <a class="code" href="group__plugins.shtml#ga7a0297c3c2a3fa58bbd5e321b900ddec">EnableStaticPlugins</a>();</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;</div><div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="preprocessor">#endif // USING_DYNAMIC_LIBS</span></div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;</div><div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="preprocessor">#endif // SWIG</span></div><div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div><div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;} <span class="comment">// end namespce</span></div><div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;</div><div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="group__plugins_shtml_ga1f8d25dafb0bc13814ca451035f67955"><div class="ttname"><a href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">OpenBabel::OBPlugin::_id</a></div><div class="ttdeci">const char * _id</div><div class="ttdef"><b>Definition:</b> plugin.h:150</div></div>
./doc/API/html/plugin_8h_source.shtml:<div class="ttc" id="group__plugins_shtml_ga0fd3c807ed3341c33070c93b14739bc8"><div class="ttname"><a href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">OpenBabel::OBPlugin::PluginMapType</a></div><div class="ttdeci">std::map&lt; const char *, OBPlugin *, CharPtrLess &gt; PluginMapType</div><div class="ttdef"><b>Definition:</b> plugin.h:59</div></div>
./doc/API/html/plugin_8h_source.shtml:<div class="ttc" id="group__plugins_shtml_ga8fac85f5497f873a2dd8734b47f0bdc0"><div class="ttname"><a href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OpenBabel::OBPlugin::PluginIterator</a></div><div class="ttdeci">PluginMapType::const_iterator PluginIterator</div><div class="ttdef"><b>Definition:</b> plugin.h:60</div></div>
./doc/API/html/plugin_8h_source.shtml:<div class="ttc" id="structOpenBabel_1_1CharPtrLess_shtml"><div class="ttname"><a href="structOpenBabel_1_1CharPtrLess.shtml">OpenBabel::CharPtrLess</a></div><div class="ttdoc">Case insensitive string comparison for PluginMapType key. </div><div class="ttdef"><b>Definition:</b> plugin.h:41</div></div>
./doc/API/html/plugin_8h_source.shtml:<div class="ttc" id="group__plugins_shtml_gac40457336d7b12bb632b4ac4e8955a3a"><div class="ttname"><a href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">OpenBabel::OBPlugin::PluginMap</a></div><div class="ttdeci">static PluginMapType &amp; PluginMap()</div><div class="ttdoc">Returns a reference to the map of the plugin types. Is a function rather than a static member variabl...</div><div class="ttdef"><b>Definition:</b> plugin.h:133</div></div>
./doc/API/html/search/all_10.js:  ['pluginmaptype',['PluginMapType',['../group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8',1,'OpenBabel::OBPlugin']]],
./doc/API/html/search/typedefs_a.js:  ['pluginmaptype',['PluginMapType',['../group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8',1,'OpenBabel::OBPlugin']]]
./doc/API/html/structOpenBabel_1_1CharPtrLess.shtml:<div class="textblock"><p>Case insensitive string comparison for PluginMapType key. </p>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./doc/openbabel.tags:      <name>PluginMapType</name>
./doc/openbabel.tags:      <type>PluginMapType::const_iterator</type>
./doc/openbabel.tags:      <type>virtual PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <type>static PluginMapType &amp;</type>
./doc/openbabel.tags:      <arglist>(PluginMapType &amp;Map, const char *ID)</arglist>
./include/openbabel/format.h:    static PluginMapType &FormatsMIMEMap()
./include/openbabel/format.h:      static PluginMapType m;
./include/openbabel/plugin.h:/// @brief Case insensitive string comparison for PluginMapType key.
./include/openbabel/plugin.h:  typedef std::map<const char*, OBPlugin*, CharPtrLess> PluginMapType;
./include/openbabel/plugin.h:  typedef PluginMapType::const_iterator PluginIterator;
./include/openbabel/plugin.h:  virtual PluginMapType& GetMap() const =0;
./include/openbabel/plugin.h:  static PluginMapType& PluginMap()
./include/openbabel/plugin.h:    static PluginMapType m;
./include/openbabel/plugin.h:  static PluginMapType& GetTypeMap(const char* PluginID);
./include/openbabel/plugin.h:  static OBPlugin* BaseFindType(PluginMapType& Map, const char* ID);
./include/openbabel/plugin.h:  static PluginMapType& Map();\
./include/openbabel/plugin.h:  virtual PluginMapType& GetMap() const {\
./include/openbabel/plugin.h:OBPlugin::PluginMapType& BaseClass::Map() {\
./include/openbabel/plugin.h:  static OBPlugin::PluginMapType map;\
./include/openbabel/plugin.h:  static PluginMapType& Map() {\
./include/openbabel/plugin.h:    static PluginMapType m;\
./include/openbabel/plugin.h:  virtual PluginMapType& GetMap() const {\
./include/openbabel/plugin.h:  static PluginMapType& Map()
./include/openbabel/plugin.h:    static PluginMapType m;
./include/openbabel/plugin.h:  virtual PluginMapType& GetMap()const
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:#define SWIGTYPE_p_OpenBabel__OBPlugin__PluginMapType__const_iterator swig_types[90]
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:#define SWIGTYPE_p_PluginMapType swig_types[152]
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  r_ans = SWIG_R_NewPointerObj((new OpenBabel::OBPlugin::PluginIterator(static_cast< const OpenBabel::OBPlugin::PluginIterator& >(result))), SWIGTYPE_p_OpenBabel__OBPlugin__PluginMapType__const_iterator, SWIG_POINTER_OWN |  0 );
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  r_ans = SWIG_R_NewPointerObj((new OpenBabel::OBPlugin::PluginIterator(static_cast< const OpenBabel::OBPlugin::PluginIterator& >(result))), SWIGTYPE_p_OpenBabel__OBPlugin__PluginMapType__const_iterator, SWIG_POINTER_OWN |  0 );
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:SWIGEXPORT SEXP R_swig_OBPlugin_GetMap ( SEXP self, SEXP s_swig_copy) { OpenBabel::OBPlugin::PluginMapType *result = 0 ;
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  result = (OpenBabel::OBPlugin::PluginMapType *) &((OpenBabel::OBPlugin const *)arg1)->GetMap();
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  res1 = SWIG_R_ConvertPtr(itr, &argp1, SWIGTYPE_p_OpenBabel__OBPlugin__PluginMapType__const_iterator,  0 );
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:static swig_type_info _swigt__p_OpenBabel__OBPlugin__PluginMapType__const_iterator = {"_p_OpenBabel__OBPlugin__PluginMapType__const_iterator", "OpenBabel::OBPlugin::PluginMapType::const_iterator *|OpenBabel::OBPlugin::PluginIterator *|OpenBabel::Formatpos *", 0, 0, (void*)0, 0};
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:static swig_type_info _swigt__p_PluginMapType = {"_p_PluginMapType", "PluginMapType *", 0, 0, (void*)0, 0};
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:static swig_type_info _swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_std__allocatorT_std__pairT_char_const_pconst_OpenBabel__OBPlugin_p_t_t_t = {"_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_std__allocatorT_std__pairT_char_const_pconst_OpenBabel__OBPlugin_p_t_t_t", "OpenBabel::OBPlugin::PluginMapType *|std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess,std::allocator< std::pair< char const *const,OpenBabel::OBPlugin * > > > *", 0, 0, (void*)0, 0};
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  &_swigt__p_OpenBabel__OBPlugin__PluginMapType__const_iterator,
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  &_swigt__p_PluginMapType,
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:static swig_cast_info _swigc__p_OpenBabel__OBPlugin__PluginMapType__const_iterator[] = {  {&_swigt__p_OpenBabel__OBPlugin__PluginMapType__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:static swig_cast_info _swigc__p_PluginMapType[] = {  {&_swigt__p_PluginMapType, 0, 0, 0},{0, 0, 0, 0}};
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  _swigc__p_OpenBabel__OBPlugin__PluginMapType__const_iterator,
./scripts/R/examples/openbabelR/src/openbabel-R.cpp:  _swigc__p_PluginMapType,
./scripts/python/openbabel-python.cpp:#define SWIGTYPE_p_OpenBabel__OBPlugin__PluginMapType__const_iterator swig_types[92]
./scripts/python/openbabel-python.cpp:#define SWIGTYPE_p_PluginMapType swig_types[154]
./scripts/python/openbabel-python.cpp:  resultobj = SWIG_NewPointerObj((new OpenBabel::OBPlugin::PluginIterator(static_cast< const OpenBabel::OBPlugin::PluginIterator& >(result))), SWIGTYPE_p_OpenBabel__OBPlugin__PluginMapType__const_iterator, SWIG_POINTER_OWN |  0 );
./scripts/python/openbabel-python.cpp:  resultobj = SWIG_NewPointerObj((new OpenBabel::OBPlugin::PluginIterator(static_cast< const OpenBabel::OBPlugin::PluginIterator& >(result))), SWIGTYPE_p_OpenBabel__OBPlugin__PluginMapType__const_iterator, SWIG_POINTER_OWN |  0 );
./scripts/python/openbabel-python.cpp:  OpenBabel::OBPlugin::PluginMapType *result = 0 ; if (!args) SWIG_fail; swig_obj[0] = args;
./scripts/python/openbabel-python.cpp:  result = (OpenBabel::OBPlugin::PluginMapType *) &((OpenBabel::OBPlugin const *)arg1)->GetMap();
./scripts/python/openbabel-python.cpp:static swig_type_info _swigt__p_OpenBabel__OBPlugin__PluginMapType__const_iterator = {"_p_OpenBabel__OBPlugin__PluginMapType__const_iterator", "OpenBabel::OBPlugin::PluginMapType::const_iterator *|OpenBabel::OBPlugin::PluginIterator *|OpenBabel::Formatpos *", 0, 0, (void*)0, 0};
./scripts/python/openbabel-python.cpp:static swig_type_info _swigt__p_PluginMapType = {"_p_PluginMapType", "PluginMapType *", 0, 0, (void*)0, 0};
./scripts/python/openbabel-python.cpp:static swig_type_info _swigt__p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_std__allocatorT_std__pairT_char_const_pconst_OpenBabel__OBPlugin_p_t_t_t = {"_p_std__mapT_char_const_p_OpenBabel__OBPlugin_p_OpenBabel__CharPtrLess_std__allocatorT_std__pairT_char_const_pconst_OpenBabel__OBPlugin_p_t_t_t", "OpenBabel::OBPlugin::PluginMapType *|std::map< char const *,OpenBabel::OBPlugin *,OpenBabel::CharPtrLess,std::allocator< std::pair< char const *const,OpenBabel::OBPlugin * > > > *", 0, 0, (void*)0, 0};
./scripts/python/openbabel-python.cpp:  &_swigt__p_OpenBabel__OBPlugin__PluginMapType__const_iterator,
./scripts/python/openbabel-python.cpp:  &_swigt__p_PluginMapType,
./scripts/python/openbabel-python.cpp:static swig_cast_info _swigc__p_OpenBabel__OBPlugin__PluginMapType__const_iterator[] = {  {&_swigt__p_OpenBabel__OBPlugin__PluginMapType__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
./scripts/python/openbabel-python.cpp:static swig_cast_info _swigc__p_PluginMapType[] = {  {&_swigt__p_PluginMapType, 0, 0, 0},{0, 0, 0, 0}};
./scripts/python/openbabel-python.cpp:  _swigc__p_OpenBabel__OBPlugin__PluginMapType__const_iterator,
./scripts/python/openbabel-python.cpp:  _swigc__p_PluginMapType,
./src/chargemodel.cpp:  // macro to implement static OBPlugin::PluginMapType& Map()
./src/descriptor.cpp:  // macro to implement static OBPlugin::PluginMapType& Map()
./src/fingerprint.cpp:  // macro to implement static OBPlugin::PluginMapType& Map()
./src/forcefield.cpp:  // macro to implement static OBPlugin::PluginMapType& Map()
./src/format.cpp:  // macro to implement static OBPlugin::PluginMapType& Map()
./src/op.cpp:  // macro to implement static OBPlugin::PluginMapType& Map()
./src/ops/loader.cpp:// macro to implement static OBPlugin::PluginMapType& Map()
./src/ops/loader.cpp:    PluginMapType map = typeiter->second->GetMap();
./src/plugin.cpp:OBPlugin::PluginMapType& OBPlugin::GetTypeMap(const char* PluginID)
./src/plugin.cpp:  PluginMapType::iterator itr;
./src/plugin.cpp:OBPlugin* OBPlugin::BaseFindType(PluginMapType& Map, const char* ID)
./src/plugin.cpp:  PluginMapType::iterator itr = Map.find(ID);
./src/plugin.cpp:  PluginMapType::iterator itr;
./src/plugin.cpp:  PluginMapType::iterator itr;
./src/plugin.cpp:        PluginMapType Map = itr->second->GetMap();
./src/tags:BaseFindType	plugin.cpp	/^OBPlugin* OBPlugin::BaseFindType(PluginMapType& Map, const char* ID)$/;"	f	class:OpenBabel::OBPlugin
./src/tags:GetTypeMap	plugin.cpp	/^OBPlugin::PluginMapType& OBPlugin::GetTypeMap(const char* PluginID)$/;"	f	class:OpenBabel::OBPlugin
./tags:BaseFindType	src/plugin.cpp	/^OBPlugin* OBPlugin::BaseFindType(PluginMapType& Map, const char* ID)$/;"	f	class:OpenBabel::OBPlugin
./tags:FormatsMIMEMap	include/openbabel/format.h	/^    static PluginMapType &FormatsMIMEMap()$/;"	f	class:OpenBabel::OBFormat
./tags:GetTypeMap	src/plugin.cpp	/^OBPlugin::PluginMapType& OBPlugin::GetTypeMap(const char* PluginID)$/;"	f	class:OpenBabel::OBPlugin
./tags:PluginIterator	include/openbabel/plugin.h	/^  typedef PluginMapType::const_iterator PluginIterator;$/;"	t	class:OpenBabel::OBPlugin
./tags:PluginMap	include/openbabel/plugin.h	/^  static PluginMapType& PluginMap()$/;"	f	class:OpenBabel::OBPlugin
./tags:PluginMapType	include/openbabel/plugin.h	/^  typedef std::map<const char*, OBPlugin*, CharPtrLess> PluginMapType;$/;"	t	class:OpenBabel::OBPlugin
