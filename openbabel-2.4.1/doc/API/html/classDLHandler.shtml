<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>DLHandler Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classDLHandler-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">DLHandler Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="dlhandler_8h_source.shtml">openbabel/dlhandler.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a796e3b4c52affa6141048aa12d326ac5"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#a796e3b4c52affa6141048aa12d326ac5">getConvDirectory</a> (std::string &amp;convPath)</td></tr>
<tr class="separator:a796e3b4c52affa6141048aa12d326ac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbc430181268f2ea18cf3f5a9a6198ab"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#afbc430181268f2ea18cf3f5a9a6198ab">findFiles</a> (std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;pattern, const std::string &amp;path)</td></tr>
<tr class="separator:afbc430181268f2ea18cf3f5a9a6198ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87db0476cc4091a16b9e7a67309253dc"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#a87db0476cc4091a16b9e7a67309253dc">findFiles</a> (std::vector&lt; std::string &gt; &amp;file_list, const std::string &amp;filename)</td></tr>
<tr class="separator:a87db0476cc4091a16b9e7a67309253dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aace44b593957d50c6396a1e23d67189d"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#aace44b593957d50c6396a1e23d67189d">openLib</a> (const std::string &amp;lib_name)</td></tr>
<tr class="separator:aace44b593957d50c6396a1e23d67189d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a853b3b684971405e16e9f2b464b950bc"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#a853b3b684971405e16e9f2b464b950bc">getFormatFilePattern</a> ()</td></tr>
<tr class="separator:a853b3b684971405e16e9f2b464b950bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7b0bd97cdb5896fd2731f2d856f525a"><td class="memItemLeft" align="right" valign="top">static char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#ae7b0bd97cdb5896fd2731f2d856f525a">getSeparator</a> ()</td></tr>
<tr class="separator:ae7b0bd97cdb5896fd2731f2d856f525a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac640b35541b94f0d35525de80c2b003d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classDLHandler.shtml#ac640b35541b94f0d35525de80c2b003d">Sleep</a> (int n)</td></tr>
<tr class="separator:ac640b35541b94f0d35525de80c2b003d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Interface for dynamic libraries. </p>
<p>This class defines an interface for finding and opening dynamic loadable libraries on different platforms (e.g., modular plugins) via different source code files. It has only what is needed for <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> and is not intended to be general purpose. Internally, it is used for dynamic loading and unloading OBFormat file translation modules. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a796e3b4c52affa6141048aa12d326ac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a796e3b4c52affa6141048aa12d326ac5">&sect;&nbsp;</a></span>getConvDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool getConvDirectory </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>convPath</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the directory containing the dynamic library plugins.</p>
<p>The result is stored in <code>convPath</code> and depends on the operating system and build tools.</p>
<p>Linux: always returns OB_MODULE_PATH (defined in src/config.h.cmake).</p>
<p>Windows cygwin: Uses windows' GetModuleHandle to get a handle to the application module. From this, the applications path can be extracted. The appname.exe is removed and ..\lib\openbabel\BABEL_VERSION\ is appended.</p>
<p>Windows MSVC: Uses windows' GetModuleHandle to get a handle to the OBError dll module. From this, the dll's path can be extracted.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classDLHandler.shtml#afbc430181268f2ea18cf3f5a9a6198ab">findFiles</a> </dd></dl>

<p>Referenced by <a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">OBPlugin::LoadAllPlugins()</a>.</p>

</div>
</div>
<a id="afbc430181268f2ea18cf3f5a9a6198ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbc430181268f2ea18cf3f5a9a6198ab">&sect;&nbsp;</a></span>findFiles() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int findFiles </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>file_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>path</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Searches a directory specified by path for files whose name matches a pattern which can include * as a wildcard. If the BABEL_LIBDIR environment variable is set, this will override the <code>path</code> parameter. The path name should include a final separator (\ or /). The routine fills a vector of strings with the matching file names (including path). Note that this is not recursive: it only matches files in the specified path. For example, if path = e:\path\to\ and pattern = *.obf it will return vector entries lik e:\path\to\cmlformat.obf </p><dl class="section return"><dt>Returns</dt><dd>the number of valid files. </dd></dl>

<p>Referenced by <a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">OBPlugin::LoadAllPlugins()</a>.</p>

</div>
</div>
<a id="a87db0476cc4091a16b9e7a67309253dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87db0476cc4091a16b9e7a67309253dc">&sect;&nbsp;</a></span>findFiles() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int findFiles </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>file_list</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Searches for files which match a full filename (including the path) which contains a wildcard. The routine adds matching file names (including path) to a vector of strings . </p><dl class="section return"><dt>Returns</dt><dd>the number of matching files. If no wildcard in name adds name to vector and returns -1. </dd></dl>

</div>
</div>
<a id="aace44b593957d50c6396a1e23d67189d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aace44b593957d50c6396a1e23d67189d">&sect;&nbsp;</a></span>openLib()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool openLib </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>lib_name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Open a dynamic library with path <code>lib_name</code>. </p>

<p>Referenced by <a class="el" href="classDLHandler.shtml#a87db0476cc4091a16b9e7a67309253dc">findFiles()</a>, and <a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">OBPlugin::LoadAllPlugins()</a>.</p>

</div>
</div>
<a id="a853b3b684971405e16e9f2b464b950bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a853b3b684971405e16e9f2b464b950bc">&sect;&nbsp;</a></span>getFormatFilePattern()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * getFormatFilePattern </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The file extension pattern for Open Babel plugin modules (e.g. *.obf on Windows) </dd></dl>

<p>Referenced by <a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">OBPlugin::LoadAllPlugins()</a>, and <a class="el" href="dlhandler__unix_8cpp.shtml#a49757ecb4390f764ddd3af245302969a">matchFiles()</a>.</p>

</div>
</div>
<a id="ae7b0bd97cdb5896fd2731f2d856f525a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7b0bd97cdb5896fd2731f2d856f525a">&sect;&nbsp;</a></span>getSeparator()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char getSeparator </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The system directory separator (i.e. "\" on Windows, "/" on UNIX) </dd></dl>

</div>
</div>
<a id="ac640b35541b94f0d35525de80c2b003d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac640b35541b94f0d35525de80c2b003d">&sect;&nbsp;</a></span>Sleep()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Sleep </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call the system routine to wait (sleep) this process for <code>n</code> seconds. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="dlhandler_8h_source.shtml">dlhandler.h</a></li>
<li><a class="el" href="dlhandler__unix_8cpp.shtml">dlhandler_unix.cpp</a></li>
<li><a class="el" href="dlhandler__win32_8cpp.shtml">dlhandler_win32.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
