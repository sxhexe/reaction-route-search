<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>ring.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ring.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="ring_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">ring.h - Deal with rings, find smallest set of smallest rings (SSSR).</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_RING_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_RING_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;deque&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">// TODO: Make this work as a free-standing header</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">// Currently only used in ring.cpp which imports mol.h beforehand</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml">openbabel/bitvec.h</a>&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml">openbabel/typer.h</a>&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">class </span>OBMol;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keyword">class </span>OBAtom;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">class </span>OBBond;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="comment">// class introduction in ring.cpp</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml">   39</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  {</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent; </div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="comment">//public data members</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#ab121c8e013115dd3efb26601ad1975d0">   44</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml#ab121c8e013115dd3efb26601ad1975d0">ring_id</a>;            </div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#a86d1b14f3c439c5be01e0f6c9dc60a1d">   45</a></span>&#160;    std::vector&lt;int&gt; <a class="code" href="classOpenBabel_1_1OBRing.shtml#a86d1b14f3c439c5be01e0f6c9dc60a1d">_path</a>; </div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#ababc3e7a7e660eba9b2dfa3b2bc28782">   46</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <a class="code" href="classOpenBabel_1_1OBRing.shtml#ababc3e7a7e660eba9b2dfa3b2bc28782">_pathset</a>;      </div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#aca37bf71481749f6555e916555d9e7a2">   50</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml#aca37bf71481749f6555e916555d9e7a2">OBRing</a>()    {}</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>(std::vector&lt;int&gt;&amp; path, <span class="keywordtype">int</span> size);</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#a2abeced3e6e318f88abe9249833b6d25">   53</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml#a2abeced3e6e318f88abe9249833b6d25">OBRing</a>(std::vector&lt;int&gt;&amp; path, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <span class="keyword">set</span>) : _path(path), _pathset(set) {}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> &amp;src);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> &amp;src);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="comment">//member functions</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">   61</a></span>&#160;    <span class="keywordtype">size_t</span>    <a class="code" href="classOpenBabel_1_1OBRing.shtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">Size</a>()<span class="keyword">     const  </span>{    <span class="keywordflow">return</span>(_path.size());  }</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#ad2da624440e773d98fd9a35add3b5350">   64</a></span>&#160;    <span class="keywordtype">size_t</span>    <a class="code" href="classOpenBabel_1_1OBRing.shtml#ad2da624440e773d98fd9a35add3b5350">PathSize</a>()<span class="keyword"> const  </span>{    <span class="keywordflow">return</span>(_path.size());  }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">bool</span>   IsAromatic();</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordtype">void</span> SetType(<span class="keywordtype">char</span> *type);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">void</span> SetType(std::string &amp;type);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">char</span> *GetType();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetRootAtom();</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordtype">bool</span>   IsMember(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordtype">bool</span>         IsMember(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *b);</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#a87c9cc8c92936bd191dca74f78fb84cb">   88</a></span>&#160;    <span class="keywordtype">bool</span>   <a class="code" href="classOpenBabel_1_1OBRing.shtml#a87c9cc8c92936bd191dca74f78fb84cb">IsInRing</a>(<span class="keywordtype">int</span> i)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keywordflow">return</span>(_pathset.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#aebaf27b65d09f6f54c4d059e5ea6fbcb">BitIsOn</a>(i));</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#a82ba3a4d5db75e9f11d3ea8dd5ef32b8">   94</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBRing.shtml#a82ba3a4d5db75e9f11d3ea8dd5ef32b8">SetParent</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *m)  {    _parent = m;    }</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRing.shtml#ad8480b61159bc6cb861b17341dc2b29a">   96</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *<a class="code" href="classOpenBabel_1_1OBRing.shtml#ad8480b61159bc6cb861b17341dc2b29a">GetParent</a>()          {    <span class="keywordflow">return</span>(_parent);}</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">bool</span> findCenterAndNormal(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; center, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;norm1, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;norm2);</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">private</span>:</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordtype">char</span> _type[30];   </div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  };</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a8ae850aac19b7a1ff3c02b6f3c17d36f">CompareRingSize</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *,<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *);</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRingSearch.shtml">  117</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRingSearch.shtml">OBRingSearch</a></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    std::vector&lt;OBBond*&gt; _bonds; </div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    std::vector&lt;OBRing*&gt; _rlist; </div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRingSearch.shtml#af1211b4680e59ac34a16593ddcdb2761">  122</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#af1211b4680e59ac34a16593ddcdb2761">OBRingSearch</a>()    {}</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    ~<a class="code" href="classOpenBabel_1_1OBRingSearch.shtml">OBRingSearch</a>();</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503">  126</a></span>&#160;    <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503">SortRings</a>()</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    {</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;      std::vector&lt;OBRing*&gt;::iterator j;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keywordtype">int</span> ring_id; <span class="comment">// for each ring, assign a unique id to ensure a stable sort</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      </div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      <span class="keywordflow">for</span> (j = _rlist.begin(), ring_id = 0; j != _rlist.end(); ++j, ++ring_id)</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        (*j)-&gt;ring_id = ring_id;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      std::sort(_rlist.begin(),_rlist.end(),<a class="code" href="namespaceOpenBabel.shtml#a8ae850aac19b7a1ff3c02b6f3c17d36f">CompareRingSize</a>);</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">void</span>    RemoveRedundant(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordtype">void</span>    AddRingFromClosure(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *);</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">bool</span>    SaveUniqueRing(std::deque&lt;int&gt;&amp;,std::deque&lt;int&gt;&amp;);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">void</span>    WriteRings();</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    std::vector&lt;OBRing*&gt;::iterator BeginRings()</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      {</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="keywordflow">return</span>(_rlist.begin());</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      }</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRingSearch.shtml#a07ad405727c652a6a280d821b9d1ac47">  153</a></span>&#160;    std::vector&lt;OBRing*&gt;::iterator <a class="code" href="classOpenBabel_1_1OBRingSearch.shtml#a07ad405727c652a6a280d821b9d1ac47">EndRings</a>()</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">return</span>(_rlist.end());</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      }</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  };</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRTree.shtml">  164</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>  *_atom; </div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> *_prv;  </div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a>*);</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRTree.shtml#a552ea16c4bb845b80b7cd56c2bd5c87d">  171</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRTree.shtml#a552ea16c4bb845b80b7cd56c2bd5c87d">~OBRTree</a>()    {}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">int</span>  GetAtomIdx();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordtype">void</span> PathToRoot(std::vector&lt;OBAtom*&gt;&amp;);</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  };</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;} <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#endif // OB_RING_H</span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBRing_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml">OpenBabel::OBRing</a></div><div class="ttdoc">Stores information on rings in a molecule from SSSR perception. </div><div class="ttdef"><b>Definition:</b> ring.h:39</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRingSearch_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRingSearch.shtml">OpenBabel::OBRingSearch</a></div><div class="ttdoc">Internal class to facilitate OBMol::FindSSSR() </div><div class="ttdef"><b>Definition:</b> ring.h:117</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:69</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a8ae850aac19b7a1ff3c02b6f3c17d36f"><div class="ttname"><a href="namespaceOpenBabel.shtml#a8ae850aac19b7a1ff3c02b6f3c17d36f">OpenBabel::CompareRingSize</a></div><div class="ttdeci">bool CompareRingSize(const OBRing *, const OBRing *)</div><div class="ttdef"><b>Definition:</b> ring.cpp:480</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_aebaf27b65d09f6f54c4d059e5ea6fbcb"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#aebaf27b65d09f6f54c4d059e5ea6fbcb">OpenBabel::OBBitVec::BitIsOn</a></div><div class="ttdeci">bool BitIsOn(int bit_offset) const</div><div class="ttdef"><b>Definition:</b> bitvec.h:164</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_a2abeced3e6e318f88abe9249833b6d25"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#a2abeced3e6e318f88abe9249833b6d25">OpenBabel::OBRing::OBRing</a></div><div class="ttdeci">OBRing(std::vector&lt; int &gt; &amp;path, OBBitVec set)</div><div class="ttdef"><b>Definition:</b> ring.h:53</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_aca37bf71481749f6555e916555d9e7a2"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#aca37bf71481749f6555e916555d9e7a2">OpenBabel::OBRing::OBRing</a></div><div class="ttdeci">OBRing()</div><div class="ttdef"><b>Definition:</b> ring.h:50</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRTree_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRTree.shtml">OpenBabel::OBRTree</a></div><div class="ttdoc">Internal class for OBRing search algorithms to create a search tree of OBAtom objects. </div><div class="ttdef"><b>Definition:</b> ring.h:164</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRingSearch_shtml_acd7836d1e4e1ab6fbd3faa49403e5503"><div class="ttname"><a href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503">OpenBabel::OBRingSearch::SortRings</a></div><div class="ttdeci">void SortRings()</div><div class="ttdoc">Sort ring sizes from smallest to largest. </div><div class="ttdef"><b>Definition:</b> ring.h:126</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_a87c9cc8c92936bd191dca74f78fb84cb"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#a87c9cc8c92936bd191dca74f78fb84cb">OpenBabel::OBRing::IsInRing</a></div><div class="ttdeci">bool IsInRing(int i)</div><div class="ttdef"><b>Definition:</b> ring.h:88</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRingSearch_shtml_a07ad405727c652a6a280d821b9d1ac47"><div class="ttname"><a href="classOpenBabel_1_1OBRingSearch.shtml#a07ad405727c652a6a280d821b9d1ac47">OpenBabel::OBRingSearch::EndRings</a></div><div class="ttdeci">std::vector&lt; OBRing * &gt;::iterator EndRings()</div><div class="ttdef"><b>Definition:</b> ring.h:153</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_ab121c8e013115dd3efb26601ad1975d0"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#ab121c8e013115dd3efb26601ad1975d0">OpenBabel::OBRing::ring_id</a></div><div class="ttdeci">int ring_id</div><div class="ttdoc">a unique id to ensure a stable sort in SSSR determination </div><div class="ttdef"><b>Definition:</b> ring.h:44</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_ad2da624440e773d98fd9a35add3b5350"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#ad2da624440e773d98fd9a35add3b5350">OpenBabel::OBRing::PathSize</a></div><div class="ttdeci">size_t PathSize() const</div><div class="ttdef"><b>Definition:</b> ring.h:64</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_a86d1b14f3c439c5be01e0f6c9dc60a1d"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#a86d1b14f3c439c5be01e0f6c9dc60a1d">OpenBabel::OBRing::_path</a></div><div class="ttdeci">std::vector&lt; int &gt; _path</div><div class="ttdoc">the path of this ring (i.e., the atom indexes) </div><div class="ttdef"><b>Definition:</b> ring.h:45</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml">OpenBabel::vector3</a></div><div class="ttdoc">Represents a vector in 3-dimensional real space. </div><div class="ttdef"><b>Definition:</b> vector3.h:45</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_ababc3e7a7e660eba9b2dfa3b2bc28782"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#ababc3e7a7e660eba9b2dfa3b2bc28782">OpenBabel::OBRing::_pathset</a></div><div class="ttdeci">OBBitVec _pathset</div><div class="ttdoc">the path of this ring as a redundant bit vector </div><div class="ttdef"><b>Definition:</b> ring.h:46</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRTree_shtml_a552ea16c4bb845b80b7cd56c2bd5c87d"><div class="ttname"><a href="classOpenBabel_1_1OBRTree.shtml#a552ea16c4bb845b80b7cd56c2bd5c87d">OpenBabel::OBRTree::~OBRTree</a></div><div class="ttdeci">~OBRTree()</div><div class="ttdef"><b>Definition:</b> ring.h:171</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_ad8480b61159bc6cb861b17341dc2b29a"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#ad8480b61159bc6cb861b17341dc2b29a">OpenBabel::OBRing::GetParent</a></div><div class="ttdeci">OBMol * GetParent()</div><div class="ttdef"><b>Definition:</b> ring.h:96</div></div>
<div class="ttc" id="typer_8h_shtml"><div class="ttname"><a href="typer_8h.shtml">typer.h</a></div><div class="ttdoc">Open Babel atom and aromaticity typer. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_a58f4b9e873b7c1c7d512bd9f7d1489d8"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#a58f4b9e873b7c1c7d512bd9f7d1489d8">OpenBabel::OBRing::Size</a></div><div class="ttdeci">size_t Size() const</div><div class="ttdef"><b>Definition:</b> ring.h:61</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRingSearch_shtml_af1211b4680e59ac34a16593ddcdb2761"><div class="ttname"><a href="classOpenBabel_1_1OBRingSearch.shtml#af1211b4680e59ac34a16593ddcdb2761">OpenBabel::OBRingSearch::OBRingSearch</a></div><div class="ttdeci">OBRingSearch()</div><div class="ttdef"><b>Definition:</b> ring.h:122</div></div>
<div class="ttc" id="bitvec_8h_shtml"><div class="ttname"><a href="bitvec_8h.shtml">bitvec.h</a></div><div class="ttdoc">Fast and efficient bitstring class. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml_a82ba3a4d5db75e9f11d3ea8dd5ef32b8"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml#a82ba3a4d5db75e9f11d3ea8dd5ef32b8">OpenBabel::OBRing::SetParent</a></div><div class="ttdeci">void SetParent(OBMol *m)</div><div class="ttdoc">Set the parent of this ring to m. </div><div class="ttdef"><b>Definition:</b> ring.h:94</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml">OpenBabel::OBAtom</a></div><div class="ttdoc">Atom class. </div><div class="ttdef"><b>Definition:</b> atom.h:81</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
