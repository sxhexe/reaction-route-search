<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>AliasData Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1AliasData.shtml">AliasData</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1AliasData-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">AliasData Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="alias_8h_source.shtml">openbabel/alias.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for AliasData:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1AliasData.png" usemap="#AliasData_map" alt=""/>
  <map id="AliasData_map" name="AliasData_map">
<area href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. " alt="OBGenericData" shape="rect" coords="0,0,101,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a55d097a56763789d4b0d070e51a580fb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#a55d097a56763789d4b0d070e51a580fb">AliasData</a> ()</td></tr>
<tr class="separator:a55d097a56763789d4b0d070e51a580fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab00b0697ccbb41c687e4031c1f5e6761"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">Clone</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *) const</td></tr>
<tr class="separator:ab00b0697ccbb41c687e4031c1f5e6761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3cc04112e0d8320faff12cd8e70bcd4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#ad3cc04112e0d8320faff12cd8e70bcd4">SetAlias</a> (const std::string &amp;alias)</td></tr>
<tr class="separator:ad3cc04112e0d8320faff12cd8e70bcd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff1fad2cef60a4d52443058c69ec835d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#aff1fad2cef60a4d52443058c69ec835d">SetAlias</a> (const char *alias)</td></tr>
<tr class="separator:aff1fad2cef60a4d52443058c69ec835d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e2cb9e5bf50b76270d2cb419705e49c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#a1e2cb9e5bf50b76270d2cb419705e49c">GetAlias</a> (bool rightAligned=false) const</td></tr>
<tr class="separator:a1e2cb9e5bf50b76270d2cb419705e49c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e77a3ac3691c87e41f72e6b10c716e6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#a5e77a3ac3691c87e41f72e6b10c716e6">GetColor</a> () const</td></tr>
<tr class="separator:a5e77a3ac3691c87e41f72e6b10c716e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adae56afc36beb65bb8fb4cc32afd7d19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#adae56afc36beb65bb8fb4cc32afd7d19">SetColor</a> (std::string color)</td></tr>
<tr class="separator:adae56afc36beb65bb8fb4cc32afd7d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a227b63501b1490001ea9b21cf694b24d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#a227b63501b1490001ea9b21cf694b24d">IsExpanded</a> () const</td></tr>
<tr class="separator:a227b63501b1490001ea9b21cf694b24d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9370e865e83b4dfefbb8b6cb2c15535"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">Expand</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, const unsigned int atomindex)</td></tr>
<tr class="separator:ae9370e865e83b4dfefbb8b6cb2c15535"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3d15983201a2a115701b2c538fef77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#aae3d15983201a2a115701b2c538fef77">SetAttribute</a> (const std::string &amp;v)</td></tr>
<tr class="separator:aae3d15983201a2a115701b2c538fef77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45613e34598a9584fb0120ef3fdab9e0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a45613e34598a9584fb0120ef3fdab9e0">SetOrigin</a> (const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s)</td></tr>
<tr class="separator:a45613e34598a9584fb0120ef3fdab9e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac61fc66ef692e79290d6eaf7231db92c"><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac61fc66ef692e79290d6eaf7231db92c">GetAttribute</a> () const</td></tr>
<tr class="separator:ac61fc66ef692e79290d6eaf7231db92c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91834e24b299c63cdf2cb77795298446"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a91834e24b299c63cdf2cb77795298446">GetDataType</a> () const</td></tr>
<tr class="separator:a91834e24b299c63cdf2cb77795298446"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6145f0df06364b6d58c728368db8f992"><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a6145f0df06364b6d58c728368db8f992">GetValue</a> () const</td></tr>
<tr class="separator:a6145f0df06364b6d58c728368db8f992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf131b210114ba636246ffc8dcb2ea13"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adf131b210114ba636246ffc8dcb2ea13">GetOrigin</a> () const</td></tr>
<tr class="separator:adf131b210114ba636246ffc8dcb2ea13"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac14285658929bd5af45a1560cb1ec15b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">RevertToAliasForm</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:ac14285658929bd5af45a1560cb1ec15b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a7dd8464fd3023ffafa56a134e663a4ae"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#a7dd8464fd3023ffafa56a134e663a4ae">_alias</a></td></tr>
<tr class="separator:a7dd8464fd3023ffafa56a134e663a4ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8b232648a71f527f8a33b13d9562013"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#ac8b232648a71f527f8a33b13d9562013">_right_form</a></td></tr>
<tr class="separator:ac8b232648a71f527f8a33b13d9562013"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08d5887a8d97196910cb41a2d551f375"><td class="memItemLeft" align="right" valign="top">std::vector&lt; unsigned long &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#a08d5887a8d97196910cb41a2d551f375">_expandedatoms</a></td></tr>
<tr class="separator:a08d5887a8d97196910cb41a2d551f375"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1134e770ae4315ea8bc1201e2f21da8b"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml#a1134e770ae4315ea8bc1201e2f21da8b">_color</a></td></tr>
<tr class="separator:a1134e770ae4315ea8bc1201e2f21da8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adceb77134f15418a66cf1124dcef1b51"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adceb77134f15418a66cf1124dcef1b51">_attr</a></td></tr>
<tr class="separator:adceb77134f15418a66cf1124dcef1b51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31291823d487a4a47f24aae5870505ef"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a31291823d487a4a47f24aae5870505ef">_type</a></td></tr>
<tr class="separator:a31291823d487a4a47f24aae5870505ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a239606b62a534e4df7626ea0cfdfb856"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a239606b62a534e4df7626ea0cfdfb856">_source</a></td></tr>
<tr class="separator:a239606b62a534e4df7626ea0cfdfb856"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Indicate atoms as aliases for larger functional groups. </p>
<dl class="section since"><dt>Since</dt><dd>version 2.2</dd></dl>
<p>An object of this class can be attached to an <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class. ">OBAtom</a> if it is considered to be a placeholder for an alias, such as Ph, COOH, etc.</p>
<p>If the alias has not been interpreted chemically (expanded), the element type of the placeholder atom should be set to Xx so that the molecule is not interpreted incorrectly by formats which do not consider this class.</p>
<p>If the alias has been interpreted chemically (which formats, etc. should normally do immediately), the alias may remain as extra information or as a hint for an alternative representation, for example to a chemical drawing program. The _expandedatoms vector would then contains the ids of the atoms to which the alias is an alternative. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a55d097a56763789d4b0d070e51a580fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55d097a56763789d4b0d070e51a580fb">&sect;&nbsp;</a></span>AliasData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1AliasData.shtml">AliasData</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab00b0697ccbb41c687e4031c1f5e6761"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab00b0697ccbb41c687e4031c1f5e6761">&sect;&nbsp;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBGenericData</a>.</p>

</div>
</div>
<a id="ad3cc04112e0d8320faff12cd8e70bcd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3cc04112e0d8320faff12cd8e70bcd4">&sect;&nbsp;</a></span>SetAlias() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAlias </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>alias</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add an alias. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">AliasData::RevertToAliasForm()</a>.</p>

</div>
</div>
<a id="aff1fad2cef60a4d52443058c69ec835d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff1fad2cef60a4d52443058c69ec835d">&sect;&nbsp;</a></span>SetAlias() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAlias </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>alias</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e2cb9e5bf50b76270d2cb419705e49c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e2cb9e5bf50b76270d2cb419705e49c">&sect;&nbsp;</a></span>GetAlias()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetAlias </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>rightAligned</em> = <code>false</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>/return value of alias or its version intended to be connected at its right hand end. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>.</p>

</div>
</div>
<a id="a5e77a3ac3691c87e41f72e6b10c716e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e77a3ac3691c87e41f72e6b10c716e6">&sect;&nbsp;</a></span>GetColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetColor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the color which has been assigned to this alias. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>.</p>

</div>
</div>
<a id="adae56afc36beb65bb8fb4cc32afd7d19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adae56afc36beb65bb8fb4cc32afd7d19">&sect;&nbsp;</a></span>SetColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetColor </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assign a color to this alias. </p>

</div>
</div>
<a id="a227b63501b1490001ea9b21cf694b24d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a227b63501b1490001ea9b21cf694b24d">&sect;&nbsp;</a></span>IsExpanded()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsExpanded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">AliasData::RevertToAliasForm()</a>.</p>

</div>
</div>
<a id="ac14285658929bd5af45a1560cb1ec15b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac14285658929bd5af45a1560cb1ec15b">&sect;&nbsp;</a></span>RevertToAliasForm()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RevertToAliasForm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Converts all the expanded aliases in a molecule to the alias form. Note that this deletes atoms and bonds. Use only as a preparation for display. </p>

</div>
</div>
<a id="ae9370e865e83b4dfefbb8b6cb2c15535"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9370e865e83b4dfefbb8b6cb2c15535">&sect;&nbsp;</a></span>Expand()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Expand </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>atomindex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Interprets the alias text and adds atoms as appropriate to mol. </p>

</div>
</div>
<a id="aae3d15983201a2a115701b2c538fef77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3d15983201a2a115701b2c538fef77">&sect;&nbsp;</a></span>SetAttribute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAttribute </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the attribute (key), which can be used to retrieve this data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a id="a45613e34598a9584fb0120ef3fdab9e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45613e34598a9584fb0120ef3fdab9e0">&sect;&nbsp;</a></span>SetOrigin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetOrigin </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the origin of this data, which can be used to filter the data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abee51ea4be988357bb17c4e5fd3d7e12">OBMol::FindAngles()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a id="ac61fc66ef692e79290d6eaf7231db92c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac61fc66ef692e79290d6eaf7231db92c">&sect;&nbsp;</a></span>GetAttribute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetAttribute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The attribute (key), which can be used to retrieve this data </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a632be87a51811b515f7e9a5fc18e4476">OpenBabel::extract_thermochemistry()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a id="a91834e24b299c63cdf2cb77795298446"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91834e24b299c63cdf2cb77795298446">&sect;&nbsp;</a></span>GetDataType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetDataType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the data type for this object as defined in <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a id="a6145f0df06364b6d58c728368db8f992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6145f0df06364b6d58c728368db8f992">&sect;&nbsp;</a></span>GetValue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base class returns a default value (the attribute type) but should never be called. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBPairData.shtml#a6145f0df06364b6d58c728368db8f992">OBPairData</a>, and <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#a6145f0df06364b6d58c728368db8f992">OBCommentData</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>.</p>

</div>
</div>
<a id="adf131b210114ba636246ffc8dcb2ea13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf131b210114ba636246ffc8dcb2ea13">&sect;&nbsp;</a></span>GetOrigin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a7dd8464fd3023ffafa56a134e663a4ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7dd8464fd3023ffafa56a134e663a4ae">&sect;&nbsp;</a></span>_alias</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _alias</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac8b232648a71f527f8a33b13d9562013"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8b232648a71f527f8a33b13d9562013">&sect;&nbsp;</a></span>_right_form</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _right_form</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a08d5887a8d97196910cb41a2d551f375"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08d5887a8d97196910cb41a2d551f375">&sect;&nbsp;</a></span>_expandedatoms</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;unsigned long&gt; _expandedatoms</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1134e770ae4315ea8bc1201e2f21da8b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1134e770ae4315ea8bc1201e2f21da8b">&sect;&nbsp;</a></span>_color</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _color</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adceb77134f15418a66cf1124dcef1b51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adceb77134f15418a66cf1124dcef1b51">&sect;&nbsp;</a></span>_attr</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _attr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>attribute tag (e.g., "UnitCell", "Comment" or "Author") </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#ab7b6bdffe6ade9a2965ceaae38bb9340">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a id="a31291823d487a4a47f24aae5870505ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31291823d487a4a47f24aae5870505ef">&sect;&nbsp;</a></span>_type</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int _type</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>attribute type &ndash; declared for each subclass </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#ab7b6bdffe6ade9a2965ceaae38bb9340">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a id="a239606b62a534e4df7626ea0cfdfb856"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a239606b62a534e4df7626ea0cfdfb856">&sect;&nbsp;</a></span>_source</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> _source</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>source of data for accounting </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConformerData.shtml#a7c2db1828edcca7ff07c8591744ec3a4">OBConformerData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml#ae1e415e9a406f4965be7352a3c66fa3a">OBSymmetryData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml#ab526e7eddb908b711e19aa355d133241">OBTorsionData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBAngleData.shtml#af0af03b552fac05db59787be08a443eb">OBAngleData::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a2d8a571296610389b9427aef139b1d8d">OBChiralData::operator=()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="alias_8h_source.shtml">alias.h</a></li>
<li><a class="el" href="alias_8cpp.shtml">alias.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
