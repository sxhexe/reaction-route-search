<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>obiter.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">obiter.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="obiter_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">obiter.h - STL-style iterators for Open Babel.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_OBITER_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_OBITER_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml">openbabel/bitvec.h</a>&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;stack&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">class </span>OBMol;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keyword">class </span>OBAtom;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">class </span>OBBond;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keyword">class </span>OBResidue;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="comment">// more detailed descriptions and documentation in obiter.cpp</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomIter.shtml">   42</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a> {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    std::vector&lt;OBAtom*&gt;::iterator _i;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_ptr;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomIter.shtml#a0e0a0033461ca2e8bd7d3553613acb68">   48</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#a0e0a0033461ca2e8bd7d3553613acb68">OBMolAtomIter</a>() :_parent(NULL), _ptr(NULL) { }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a> &amp;ai);</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomIter.shtml#ab41faac5de2b33826f98ef32e67d99fa">   52</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#ab41faac5de2b33826f98ef32e67d99fa">~OBMolAtomIter</a>() { }</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a> &amp;ai);</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomIter.shtml#a67b76affb3b5d35fa419ac234144038b">   56</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a>&amp; operator++();</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">   62</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">   64</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="classOpenBabel_1_1OBMolAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  };</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">   68</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a> {</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>               *_parent;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>              *_ptr;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>             _notVisited;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    std::stack&lt;OBAtom *&gt; _stack;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a28577ca5de6b95b9ac0d4210be8d9fde">   75</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a28577ca5de6b95b9ac0d4210be8d9fde">OBMolAtomDFSIter</a>() : _parent(NULL), _ptr(NULL) { }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex=1);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex=1);</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a> &amp;ai);</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a6d1833f8401794abf419e65503bb4fb2">   79</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a6d1833f8401794abf419e65503bb4fb2">~OBMolAtomDFSIter</a>() { }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a> &amp;ai);</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a67b76affb3b5d35fa419ac234144038b">   83</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a>&amp; operator++();</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">   89</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }</div><div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#af241c91f41082d06b84533064eaa5b21">   91</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#af241c91f41082d06b84533064eaa5b21">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }</div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaaffd1bb24cbcff3418b09c755f2b5bc">   93</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaaffd1bb24cbcff3418b09c755f2b5bc">next</a>()</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="keywordflow">if</span>(_stack.empty())</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> NULL; <span class="comment">//end of a disconnected fragment</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      <span class="keywordflow">else</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">return</span> _stack.top(); <span class="comment">//the next atom</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  };</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">  103</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a> {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>               *_parent;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>              *_ptr;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>             _notVisited;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    std::queue&lt;OBAtom *&gt; _queue;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    std::vector&lt;int&gt;     _depth;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a1afe0a6b964c9975a5eab78a4fe6012f">  111</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a1afe0a6b964c9975a5eab78a4fe6012f">OBMolAtomBFSIter</a>(): _parent(NULL), _ptr(NULL) { }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex = 1);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex = 1);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a> &amp;ai);</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a0ed2011d285caf87692d837c05b3ab37">  115</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a0ed2011d285caf87692d837c05b3ab37">~OBMolAtomBFSIter</a>() { }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a> &amp;ai);</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a67b76affb3b5d35fa419ac234144038b">  119</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a>&amp; operator++();</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">  125</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#af241c91f41082d06b84533064eaa5b21">  127</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#af241c91f41082d06b84533064eaa5b21">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordtype">int</span> CurrentDepth() <span class="keyword">const</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  };</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">  134</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a> {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>               *_parent;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>              *_ptr;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>             _notVisited;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    std::queue&lt;OBBond *&gt; _queue;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    std::vector&lt;int&gt;     _depth;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a6b7e76f2e1633a6575727328f3b4fa26">  142</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a6b7e76f2e1633a6575727328f3b4fa26">OBMolBondBFSIter</a>(): _parent(NULL), _ptr(NULL) { }</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">int</span> StartIndex = 0);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">int</span> StartIndex = 0);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a> &amp;ai);</div><div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ad2f55c3e4c0ddd03a44f2ad8a4b24e13">  146</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ad2f55c3e4c0ddd03a44f2ad8a4b24e13">~OBMolBondBFSIter</a>() { }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a> &amp;ai);</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a67b76affb3b5d35fa419ac234144038b">  150</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a>&amp; operator++();</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">  156</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">  158</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordtype">int</span> CurrentDepth() <span class="keyword">const</span>;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  };</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondIter.shtml">  165</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a> {</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    std::vector&lt;OBBond*&gt;::iterator _i;</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_ptr;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondIter.shtml#a455059ecfe54c9a0c32e8456aa848569">  171</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#a455059ecfe54c9a0c32e8456aa848569">OBMolBondIter</a>() : _parent(NULL), _ptr(NULL) {}</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a> &amp;bi);</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondIter.shtml#a6ab51a3738ec0fa144ed6b3e49545cd7">  175</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#a6ab51a3738ec0fa144ed6b3e49545cd7">~OBMolBondIter</a>() { }</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a> &amp;bi);</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondIter.shtml#a67b76affb3b5d35fa419ac234144038b">  179</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a>&amp; operator++();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">  185</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolBondIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">  187</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="classOpenBabel_1_1OBMolBondIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  };</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomAtomIter.shtml">  191</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a> {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    std::vector&lt;OBBond*&gt;::iterator _i;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_parent;</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_ptr;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomAtomIter.shtml#af8a4eb72f4e027a2f7d2649b01b847f1">  197</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#af8a4eb72f4e027a2f7d2649b01b847f1">OBAtomAtomIter</a>() : _parent(NULL), _ptr(NULL) { }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;atm);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a> &amp;ai);</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomAtomIter.shtml#ae08b3633f489a115c0708df48a086337">  201</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#ae08b3633f489a115c0708df48a086337">~OBAtomAtomIter</a>() { }</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a> &amp;ai);</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomAtomIter.shtml#a67b76affb3b5d35fa419ac234144038b">  205</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a>&amp; operator++();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">  211</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr;      }</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">  213</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; <a class="code" href="classOpenBabel_1_1OBAtomAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;     }</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  };</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomBondIter.shtml">  217</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a> {</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    std::vector&lt;OBBond*&gt;::iterator _i;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *_parent;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_ptr;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomBondIter.shtml#af28bfccc1ea71cb3c90d4131fd0ffaac">  223</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#af28bfccc1ea71cb3c90d4131fd0ffaac">OBAtomBondIter</a>(): _parent(NULL), _ptr(NULL) { }</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a>(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;atm);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a> &amp;bi);</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomBondIter.shtml#a8049d0d3287127c18a69a03a0ada3389">  227</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#a8049d0d3287127c18a69a03a0ada3389">~OBAtomBondIter</a>() { }</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a> &amp;bi);</div><div class="line"><a name="l00231"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomBondIter.shtml#a67b76affb3b5d35fa419ac234144038b">  231</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a>&amp; operator++();</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomBondIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">  237</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }</div><div class="line"><a name="l00239"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBAtomBondIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">  239</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp; <a class="code" href="classOpenBabel_1_1OBAtomBondIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  };</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueIter.shtml">  243</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a> {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    std::vector&lt;OBResidue*&gt;::iterator _i;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *_ptr;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueIter.shtml#a222f27c41a5414c4fb612d260c21a5fc">  249</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#a222f27c41a5414c4fb612d260c21a5fc">OBResidueIter</a>() : _ptr(NULL), _parent(NULL) { }</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a> &amp;ri);</div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueIter.shtml#af01b06a6ef42d96b03e8026780e87365">  253</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#af01b06a6ef42d96b03e8026780e87365">~OBResidueIter</a>() { }</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a> &amp;ri);</div><div class="line"><a name="l00257"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueIter.shtml#a67b76affb3b5d35fa419ac234144038b">  257</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a>&amp; operator++();</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueIter.shtml#a7e04dfb68e7cea085c06bc0dc993dacb">  263</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#a7e04dfb68e7cea085c06bc0dc993dacb">operator-&gt;</a>()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _ptr; }</div><div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueIter.shtml#ac49837b732d53b494d70c115ae130cf8">  265</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>&amp; <a class="code" href="classOpenBabel_1_1OBResidueIter.shtml#ac49837b732d53b494d70c115ae130cf8">operator*</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *_ptr;}</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  };</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueAtomIter.shtml">  269</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a> {</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    std::vector&lt;OBAtom*&gt;::iterator _i;</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *_parent;</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>    *_ptr;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a248fb7bc3b3279d171bfa2d1bf9eeb41">  275</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a248fb7bc3b3279d171bfa2d1bf9eeb41">OBResidueAtomIter</a>() : _parent(NULL), _ptr(NULL) { }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *res);</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a>(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;res);</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a> &amp;ri);</div><div class="line"><a name="l00279"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a2a89fef9e1122bf74748b6312c9852dc">  279</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a2a89fef9e1122bf74748b6312c9852dc">~OBResidueAtomIter</a>() { }</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a> &amp;operator = (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a> &amp;ri);</div><div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a67b76affb3b5d35fa419ac234144038b">  283</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a>&amp; operator++ ();</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a>  operator++ (<span class="keywordtype">int</span>);</div><div class="line"><a name="l00289"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">  289</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *<a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">operator-&gt;</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span> _ptr; }</div><div class="line"><a name="l00291"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBResidueAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">  291</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;<a class="code" href="classOpenBabel_1_1OBResidueAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> *_ptr;}</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  };</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAngleIter.shtml">  295</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a> {</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>     *_parent;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vangle;</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    std::vector&lt;unsigned int&gt; _angle;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;</div><div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAngleIter.shtml#a482e4131f901dd1ec3c1d6305b1df9b4">  302</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#a482e4131f901dd1ec3c1d6305b1df9b4">OBMolAngleIter</a>() :_parent(NULL) { }</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a> &amp;ai);</div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAngleIter.shtml#a917fefa24816b0e6bca7497496cdb918">  306</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#a917fefa24816b0e6bca7497496cdb918">~OBMolAngleIter</a>() { }</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a> &amp;ai);</div><div class="line"><a name="l00310"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAngleIter.shtml#a67b76affb3b5d35fa419ac234144038b">  310</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vangle.end()); }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a>&amp; operator++();</div><div class="line"><a name="l00315"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolAngleIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">  315</a></span>&#160;    std::vector&lt;unsigned int&gt; <a class="code" href="classOpenBabel_1_1OBMolAngleIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _angle;     }</div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  };</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolTorsionIter.shtml">  319</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a> {</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vtorsion;</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    std::vector&lt;unsigned int&gt; _torsion;</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a2e6d7ebd2d9d520ecd18112ac456da81">  326</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a2e6d7ebd2d9d520ecd18112ac456da81">OBMolTorsionIter</a>() :_parent(NULL) { }</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a> &amp;ai);</div><div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolTorsionIter.shtml#ac739d51704add695fff280e299ea91d5">  330</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#ac739d51704add695fff280e299ea91d5">~OBMolTorsionIter</a>() { }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a> &amp;ai);</div><div class="line"><a name="l00334"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a67b76affb3b5d35fa419ac234144038b">  334</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> (_i != _vtorsion.end()); }</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a>&amp; operator++();</div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolTorsionIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">  339</a></span>&#160;    std::vector&lt;unsigned int&gt; <a class="code" href="classOpenBabel_1_1OBMolTorsionIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _torsion;     }</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  };</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00343"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolPairIter.shtml">  343</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a> {</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    std::vector&lt;OBAtom*&gt;::iterator _i;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    std::vector&lt;OBAtom*&gt;::iterator _j;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="comment">//std::vector&lt;std::vector&lt;unsigned int&gt; &gt; _vpair;</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="comment">//std::vector&lt;std::vector&lt;unsigned int&gt; &gt;::iterator _i;</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    std::vector&lt;unsigned int&gt; _pair;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolPairIter.shtml#aa604593cfb41d4c23618d71b4b26ea6d">  353</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#aa604593cfb41d4c23618d71b4b26ea6d">OBMolPairIter</a>() :_parent(NULL) { }</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a> &amp;ai);</div><div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolPairIter.shtml#adaa9e198d76f5f97560146d1673205b6">  357</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#adaa9e198d76f5f97560146d1673205b6">~OBMolPairIter</a>() { }</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a> &amp;ai);</div><div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolPairIter.shtml#a67b76affb3b5d35fa419ac234144038b">  361</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword"> const        </span>{ <span class="keywordflow">return</span> _pair.size()&gt;0; }</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a>&amp; operator++();</div><div class="line"><a name="l00366"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolPairIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">  366</a></span>&#160;    std::vector&lt;unsigned int&gt; <a class="code" href="classOpenBabel_1_1OBMolPairIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">operator*</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span> _pair;     }</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  };</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBRingData.shtml">OBRingData</a>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;</div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolRingIter.shtml">  373</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a> {</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    std::vector&lt;OBRing*&gt;::iterator _i;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *_ptr;</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *_parent;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRingData.shtml">OBRingData</a> *_rings;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolRingIter.shtml#a4201ae784613cc343f4c85aff073f8b6">  380</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#a4201ae784613cc343f4c85aff073f8b6">OBMolRingIter</a>() : _ptr(NULL), _parent(NULL), _rings(NULL) { }</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a> &amp;ri);</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolRingIter.shtml#a1d382621222fab3106bbf62d88d12c16">  384</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#a1d382621222fab3106bbf62d88d12c16">~OBMolRingIter</a>() { }</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a> &amp;ri);</div><div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolRingIter.shtml#a67b76affb3b5d35fa419ac234144038b">  388</a></span>&#160;    <span class="keyword">operator</span> bool()<span class="keyword">      const </span>{ <span class="keywordflow">return</span> _ptr != NULL; }</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a>&amp; operator++();</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a>  operator++(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolRingIter.shtml#af19aafb1ac310e24268489943d2b396c">  394</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>* <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#af19aafb1ac310e24268489943d2b396c">operator-&gt;</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _ptr; }</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMolRingIter.shtml#ac317fc2b4760f26e505cae63ef43d721">  396</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRing.shtml">OBRing</a>&amp; <a class="code" href="classOpenBabel_1_1OBMolRingIter.shtml#ac317fc2b4760f26e505cae63ef43d721">operator*</a>()<span class="keyword">  const </span>{ <span class="keywordflow">return</span> *_ptr;}</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  };</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">  399</a></span>&#160;<span class="preprocessor">#define FOR_ATOMS_OF_MOL(a,m)     for( OpenBabel::OBMolAtomIter     a(m); a; ++a )</span></div><div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a16c0f68c4f2d476fae98338b31e77e46">  400</a></span>&#160;<span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OpenBabel::OBMolBondIter     b(m); b; ++b )</span></div><div class="line"><a name="l00401"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a18326b3c74bff171f5807ce9725e0c47">  401</a></span>&#160;<span class="preprocessor">#define FOR_NBORS_OF_ATOM(a,p)    for( OpenBabel::OBAtomAtomIter    a(p); a; ++a )</span></div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#aa102b7f8200028ba654f022dc63fdf35">  402</a></span>&#160;<span class="preprocessor">#define FOR_BONDS_OF_ATOM(b,p)    for( OpenBabel::OBAtomBondIter    b(p); b; ++b )</span></div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a483bbcfb9673a775c47ab6adf8e53451">  403</a></span>&#160;<span class="preprocessor">#define FOR_RESIDUES_OF_MOL(r,m)  for( OpenBabel::OBResidueIter     r(m); r; ++r )</span></div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#aa4f83897733e3f3a1fb1ff9a1a85db1f">  404</a></span>&#160;<span class="preprocessor">#define FOR_ATOMS_OF_RESIDUE(a,r) for( OpenBabel::OBResidueAtomIter a(r); a; ++a )</span></div><div class="line"><a name="l00405"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a15820464f7b1f60c2d343932d5eda8cd">  405</a></span>&#160;<span class="preprocessor">#define FOR_DFS_OF_MOL(a,m)       for( OpenBabel::OBMolAtomDFSIter  a(m); a; ++a )</span></div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a7c427f32f67339fb215933423bace3e4">  406</a></span>&#160;<span class="preprocessor">#define FOR_BFS_OF_MOL(a,m)       for( OpenBabel::OBMolAtomBFSIter  a(m); a; ++a )</span></div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a4cccdc28607ea86191978c1473f09a40">  407</a></span>&#160;<span class="preprocessor">#define FOR_BONDBFS_OF_MOL(b,m)   for( OpenBabel::OBMolBondBFSIter  b(m); b; ++b )</span></div><div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a9205e106e30c7af1cafcca57d52c7692">  408</a></span>&#160;<span class="preprocessor">#define FOR_RINGS_OF_MOL(r,m)     for( OpenBabel::OBMolRingIter     r(m); r; ++r )</span></div><div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a1fc0ae63791285f6155fa53658c2e4ae">  409</a></span>&#160;<span class="preprocessor">#define FOR_ANGLES_OF_MOL(a,m)    for( OpenBabel::OBMolAngleIter    a(m); a; ++a )</span></div><div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#aee758b2fef3dcacb197e41b5819d7465">  410</a></span>&#160;<span class="preprocessor">#define FOR_TORSIONS_OF_MOL(t,m)  for( OpenBabel::OBMolTorsionIter  t(m); t; ++t )</span></div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="obiter_8h.shtml#a640062d330b1455694059113b560a4aa">  411</a></span>&#160;<span class="preprocessor">#define FOR_PAIRS_OF_MOL(p,m)     for( OpenBabel::OBMolPairIter     p(m); p; ++p )</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;} <span class="comment">// namespace OpenBabel</span></div><div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="preprocessor">#endif // OB_OBITER_H</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBRingData_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRingData.shtml">OpenBabel::OBRingData</a></div><div class="ttdoc">Used to store the SSSR set (filled in by OBMol::GetSSSR()) </div><div class="ttdef"><b>Definition:</b> generic.h:262</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomBondIter_shtml_a8049d0d3287127c18a69a03a0ada3389"><div class="ttname"><a href="classOpenBabel_1_1OBAtomBondIter.shtml#a8049d0d3287127c18a69a03a0ada3389">OpenBabel::OBAtomBondIter::~OBAtomBondIter</a></div><div class="ttdeci">~OBAtomBondIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:227</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondIter_shtml_a7225af7c4126cfe1bec7485ad6feb25b"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">OpenBabel::OBMolBondIter::operator*</a></div><div class="ttdeci">OBBond &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:187</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomDFSIter_shtml_a28577ca5de6b95b9ac0d4210be8d9fde"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a28577ca5de6b95b9ac0d4210be8d9fde">OpenBabel::OBMolAtomDFSIter::OBMolAtomDFSIter</a></div><div class="ttdeci">OBMolAtomDFSIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:75</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondIter_shtml_a6ab51a3738ec0fa144ed6b3e49545cd7"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondIter.shtml#a6ab51a3738ec0fa144ed6b3e49545cd7">OpenBabel::OBMolBondIter::~OBMolBondIter</a></div><div class="ttdeci">~OBMolBondIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:175</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomAtomIter_shtml_ae08b3633f489a115c0708df48a086337"><div class="ttname"><a href="classOpenBabel_1_1OBAtomAtomIter.shtml#ae08b3633f489a115c0708df48a086337">OpenBabel::OBAtomAtomIter::~OBAtomAtomIter</a></div><div class="ttdeci">~OBAtomAtomIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:201</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomAtomIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtomAtomIter.shtml">OpenBabel::OBAtomAtomIter</a></div><div class="ttdoc">Iterate over all neighboring atoms to an OBAtom. </div><div class="ttdef"><b>Definition:</b> obiter.h:191</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolRingIter_shtml_a4201ae784613cc343f4c85aff073f8b6"><div class="ttname"><a href="classOpenBabel_1_1OBMolRingIter.shtml#a4201ae784613cc343f4c85aff073f8b6">OpenBabel::OBMolRingIter::OBMolRingIter</a></div><div class="ttdeci">OBMolRingIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:380</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAngleIter_shtml_ad62a63eed1c42c4600a69c850b5bd9bd"><div class="ttname"><a href="classOpenBabel_1_1OBMolAngleIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">OpenBabel::OBMolAngleIter::operator*</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:315</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRing_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRing.shtml">OpenBabel::OBRing</a></div><div class="ttdoc">Stores information on rings in a molecule from SSSR perception. </div><div class="ttdef"><b>Definition:</b> ring.h:39</div></div>
<div class="ttc" id="base_8h_shtml"><div class="ttname"><a href="base_8h.shtml">base.h</a></div><div class="ttdoc">Base classes to build a graph. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolRingIter_shtml_af19aafb1ac310e24268489943d2b396c"><div class="ttname"><a href="classOpenBabel_1_1OBMolRingIter.shtml#af19aafb1ac310e24268489943d2b396c">OpenBabel::OBMolRingIter::operator-&gt;</a></div><div class="ttdeci">OBRing * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:394</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondIter_shtml_a8c23da904e7b838d0482d3fce70e55b8"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">OpenBabel::OBMolBondIter::operator-&gt;</a></div><div class="ttdeci">OBBond * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:185</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolRingIter_shtml_a1d382621222fab3106bbf62d88d12c16"><div class="ttname"><a href="classOpenBabel_1_1OBMolRingIter.shtml#a1d382621222fab3106bbf62d88d12c16">OpenBabel::OBMolRingIter::~OBMolRingIter</a></div><div class="ttdeci">~OBMolRingIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:384</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:69</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomIter.shtml">OpenBabel::OBMolAtomIter</a></div><div class="ttdoc">Iterate over all atoms in an OBMol. </div><div class="ttdef"><b>Definition:</b> obiter.h:42</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueIter_shtml_af01b06a6ef42d96b03e8026780e87365"><div class="ttname"><a href="classOpenBabel_1_1OBResidueIter.shtml#af01b06a6ef42d96b03e8026780e87365">OpenBabel::OBResidueIter::~OBResidueIter</a></div><div class="ttdeci">~OBResidueIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:253</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomBFSIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OpenBabel::OBMolAtomBFSIter</a></div><div class="ttdoc">Iterate over all atoms in an OBMol in a breadth-first search (BFS) </div><div class="ttdef"><b>Definition:</b> obiter.h:103</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolRingIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolRingIter.shtml">OpenBabel::OBMolRingIter</a></div><div class="ttdoc">Iterate over all rings in an OBMol. </div><div class="ttdef"><b>Definition:</b> obiter.h:373</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBResidueIter.shtml">OpenBabel::OBResidueIter</a></div><div class="ttdoc">Iterate over all residues in an OBMol. </div><div class="ttdef"><b>Definition:</b> obiter.h:243</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondBFSIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OpenBabel::OBMolBondBFSIter</a></div><div class="ttdoc">Iterate over all bonds in an OBMol in a breadth-first search (BFS) </div><div class="ttdef"><b>Definition:</b> obiter.h:134</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomBFSIter_shtml_af241c91f41082d06b84533064eaa5b21"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#af241c91f41082d06b84533064eaa5b21">OpenBabel::OBMolAtomBFSIter::operator*</a></div><div class="ttdeci">OBAtom &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:127</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomIter_shtml_a0e0a0033461ca2e8bd7d3553613acb68"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomIter.shtml#a0e0a0033461ca2e8bd7d3553613acb68">OpenBabel::OBMolAtomIter::OBMolAtomIter</a></div><div class="ttdeci">OBMolAtomIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:48</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolPairIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolPairIter.shtml">OpenBabel::OBMolPairIter</a></div><div class="ttdoc">Iterate over all pairs of atoms (&gt;1-4) in an OBMol. </div><div class="ttdef"><b>Definition:</b> obiter.h:343</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolRingIter_shtml_ac317fc2b4760f26e505cae63ef43d721"><div class="ttname"><a href="classOpenBabel_1_1OBMolRingIter.shtml#ac317fc2b4760f26e505cae63ef43d721">OpenBabel::OBMolRingIter::operator*</a></div><div class="ttdeci">OBRing &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:396</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomBFSIter_shtml_a1afe0a6b964c9975a5eab78a4fe6012f"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a1afe0a6b964c9975a5eab78a4fe6012f">OpenBabel::OBMolAtomBFSIter::OBMolAtomBFSIter</a></div><div class="ttdeci">OBMolAtomBFSIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:111</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomDFSIter_shtml_a6d1833f8401794abf419e65503bb4fb2"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a6d1833f8401794abf419e65503bb4fb2">OpenBabel::OBMolAtomDFSIter::~OBMolAtomDFSIter</a></div><div class="ttdeci">~OBMolAtomDFSIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:79</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAngleIter_shtml_a917fefa24816b0e6bca7497496cdb918"><div class="ttname"><a href="classOpenBabel_1_1OBMolAngleIter.shtml#a917fefa24816b0e6bca7497496cdb918">OpenBabel::OBMolAngleIter::~OBMolAngleIter</a></div><div class="ttdeci">~OBMolAngleIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:306</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueIter_shtml_a222f27c41a5414c4fb612d260c21a5fc"><div class="ttname"><a href="classOpenBabel_1_1OBResidueIter.shtml#a222f27c41a5414c4fb612d260c21a5fc">OpenBabel::OBResidueIter::OBResidueIter</a></div><div class="ttdeci">OBResidueIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:249</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondBFSIter_shtml_a7225af7c4126cfe1bec7485ad6feb25b"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">OpenBabel::OBMolBondBFSIter::operator*</a></div><div class="ttdeci">OBBond &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:158</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolTorsionIter_shtml_a2e6d7ebd2d9d520ecd18112ac456da81"><div class="ttname"><a href="classOpenBabel_1_1OBMolTorsionIter.shtml#a2e6d7ebd2d9d520ecd18112ac456da81">OpenBabel::OBMolTorsionIter::OBMolTorsionIter</a></div><div class="ttdeci">OBMolTorsionIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:326</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueAtomIter_shtml_a2a89fef9e1122bf74748b6312c9852dc"><div class="ttname"><a href="classOpenBabel_1_1OBResidueAtomIter.shtml#a2a89fef9e1122bf74748b6312c9852dc">OpenBabel::OBResidueAtomIter::~OBResidueAtomIter</a></div><div class="ttdeci">~OBResidueAtomIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:279</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueAtomIter_shtml_af241c91f41082d06b84533064eaa5b21"><div class="ttname"><a href="classOpenBabel_1_1OBResidueAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">OpenBabel::OBResidueAtomIter::operator*</a></div><div class="ttdeci">OBAtom &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:291</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondBFSIter_shtml_a8c23da904e7b838d0482d3fce70e55b8"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">OpenBabel::OBMolBondBFSIter::operator-&gt;</a></div><div class="ttdeci">OBBond * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:156</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueAtomIter_shtml_a227568f5015b62dce6f62b9eca4c90bb"><div class="ttname"><a href="classOpenBabel_1_1OBResidueAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">OpenBabel::OBResidueAtomIter::operator-&gt;</a></div><div class="ttdeci">OBAtom * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:289</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolTorsionIter_shtml_ad62a63eed1c42c4600a69c850b5bd9bd"><div class="ttname"><a href="classOpenBabel_1_1OBMolTorsionIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">OpenBabel::OBMolTorsionIter::operator*</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:339</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondBFSIter_shtml_a6b7e76f2e1633a6575727328f3b4fa26"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a6b7e76f2e1633a6575727328f3b4fa26">OpenBabel::OBMolBondBFSIter::OBMolBondBFSIter</a></div><div class="ttdeci">OBMolBondBFSIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:142</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomBondIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtomBondIter.shtml">OpenBabel::OBAtomBondIter</a></div><div class="ttdoc">Iterate over all bonds on an OBAtom. </div><div class="ttdef"><b>Definition:</b> obiter.h:217</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomBondIter_shtml_af28bfccc1ea71cb3c90d4131fd0ffaac"><div class="ttname"><a href="classOpenBabel_1_1OBAtomBondIter.shtml#af28bfccc1ea71cb3c90d4131fd0ffaac">OpenBabel::OBAtomBondIter::OBAtomBondIter</a></div><div class="ttdeci">OBAtomBondIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:223</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomAtomIter_shtml_a227568f5015b62dce6f62b9eca4c90bb"><div class="ttname"><a href="classOpenBabel_1_1OBAtomAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">OpenBabel::OBAtomAtomIter::operator-&gt;</a></div><div class="ttdeci">OBAtom * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:211</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomBFSIter_shtml_a0ed2011d285caf87692d837c05b3ab37"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a0ed2011d285caf87692d837c05b3ab37">OpenBabel::OBMolAtomBFSIter::~OBMolAtomBFSIter</a></div><div class="ttdeci">~OBMolAtomBFSIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:115</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolPairIter_shtml_ad62a63eed1c42c4600a69c850b5bd9bd"><div class="ttname"><a href="classOpenBabel_1_1OBMolPairIter.shtml#ad62a63eed1c42c4600a69c850b5bd9bd">OpenBabel::OBMolPairIter::operator*</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:366</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondBFSIter_shtml_ad2f55c3e4c0ddd03a44f2ad8a4b24e13"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ad2f55c3e4c0ddd03a44f2ad8a4b24e13">OpenBabel::OBMolBondBFSIter::~OBMolBondBFSIter</a></div><div class="ttdeci">~OBMolBondBFSIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:146</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondIter.shtml">OpenBabel::OBMolBondIter</a></div><div class="ttdoc">Iterate over all bonds in an OBMol. </div><div class="ttdef"><b>Definition:</b> obiter.h:165</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomIter_shtml_ab41faac5de2b33826f98ef32e67d99fa"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomIter.shtml#ab41faac5de2b33826f98ef32e67d99fa">OpenBabel::OBMolAtomIter::~OBMolAtomIter</a></div><div class="ttdeci">~OBMolAtomIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomAtomIter_shtml_af241c91f41082d06b84533064eaa5b21"><div class="ttname"><a href="classOpenBabel_1_1OBAtomAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">OpenBabel::OBAtomAtomIter::operator*</a></div><div class="ttdeci">OBAtom &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:213</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueIter_shtml_ac49837b732d53b494d70c115ae130cf8"><div class="ttname"><a href="classOpenBabel_1_1OBResidueIter.shtml#ac49837b732d53b494d70c115ae130cf8">OpenBabel::OBResidueIter::operator*</a></div><div class="ttdeci">OBResidue &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:265</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueAtomIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBResidueAtomIter.shtml">OpenBabel::OBResidueAtomIter</a></div><div class="ttdoc">Iterate over all atoms in an OBResidue. </div><div class="ttdef"><b>Definition:</b> obiter.h:269</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomDFSIter_shtml_aaaffd1bb24cbcff3418b09c755f2b5bc"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaaffd1bb24cbcff3418b09c755f2b5bc">OpenBabel::OBMolAtomDFSIter::next</a></div><div class="ttdeci">OBAtom * next()</div><div class="ttdef"><b>Definition:</b> obiter.h:93</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAngleIter_shtml_a482e4131f901dd1ec3c1d6305b1df9b4"><div class="ttname"><a href="classOpenBabel_1_1OBMolAngleIter.shtml#a482e4131f901dd1ec3c1d6305b1df9b4">OpenBabel::OBMolAngleIter::OBMolAngleIter</a></div><div class="ttdeci">OBMolAngleIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:302</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomBondIter_shtml_a8c23da904e7b838d0482d3fce70e55b8"><div class="ttname"><a href="classOpenBabel_1_1OBAtomBondIter.shtml#a8c23da904e7b838d0482d3fce70e55b8">OpenBabel::OBAtomBondIter::operator-&gt;</a></div><div class="ttdeci">OBBond * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:237</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolTorsionIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolTorsionIter.shtml">OpenBabel::OBMolTorsionIter</a></div><div class="ttdoc">Iterate over all torsions in an OBMol. </div><div class="ttdef"><b>Definition:</b> obiter.h:319</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueAtomIter_shtml_a248fb7bc3b3279d171bfa2d1bf9eeb41"><div class="ttname"><a href="classOpenBabel_1_1OBResidueAtomIter.shtml#a248fb7bc3b3279d171bfa2d1bf9eeb41">OpenBabel::OBResidueAtomIter::OBResidueAtomIter</a></div><div class="ttdeci">OBResidueAtomIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:275</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomBFSIter_shtml_a227568f5015b62dce6f62b9eca4c90bb"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">OpenBabel::OBMolAtomBFSIter::operator-&gt;</a></div><div class="ttdeci">OBAtom * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:125</div></div>
<div class="ttc" id="bitvec_8h_shtml"><div class="ttname"><a href="bitvec_8h.shtml">bitvec.h</a></div><div class="ttdoc">Fast and efficient bitstring class. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolPairIter_shtml_adaa9e198d76f5f97560146d1673205b6"><div class="ttname"><a href="classOpenBabel_1_1OBMolPairIter.shtml#adaa9e198d76f5f97560146d1673205b6">OpenBabel::OBMolPairIter::~OBMolPairIter</a></div><div class="ttdeci">~OBMolPairIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:357</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomIter_shtml_a227568f5015b62dce6f62b9eca4c90bb"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">OpenBabel::OBMolAtomIter::operator-&gt;</a></div><div class="ttdeci">OBAtom * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:62</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomAtomIter_shtml_af8a4eb72f4e027a2f7d2649b01b847f1"><div class="ttname"><a href="classOpenBabel_1_1OBAtomAtomIter.shtml#af8a4eb72f4e027a2f7d2649b01b847f1">OpenBabel::OBAtomAtomIter::OBAtomAtomIter</a></div><div class="ttdeci">OBAtomAtomIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:197</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomDFSIter_shtml_af241c91f41082d06b84533064eaa5b21"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#af241c91f41082d06b84533064eaa5b21">OpenBabel::OBMolAtomDFSIter::operator*</a></div><div class="ttdeci">OBAtom &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:91</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomBondIter_shtml_a7225af7c4126cfe1bec7485ad6feb25b"><div class="ttname"><a href="classOpenBabel_1_1OBAtomBondIter.shtml#a7225af7c4126cfe1bec7485ad6feb25b">OpenBabel::OBAtomBondIter::operator*</a></div><div class="ttdeci">OBBond &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:239</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolBondIter_shtml_a455059ecfe54c9a0c32e8456aa848569"><div class="ttname"><a href="classOpenBabel_1_1OBMolBondIter.shtml#a455059ecfe54c9a0c32e8456aa848569">OpenBabel::OBMolBondIter::OBMolBondIter</a></div><div class="ttdeci">OBMolBondIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:171</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolPairIter_shtml_aa604593cfb41d4c23618d71b4b26ea6d"><div class="ttname"><a href="classOpenBabel_1_1OBMolPairIter.shtml#aa604593cfb41d4c23618d71b4b26ea6d">OpenBabel::OBMolPairIter::OBMolPairIter</a></div><div class="ttdeci">OBMolPairIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:353</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAngleIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolAngleIter.shtml">OpenBabel::OBMolAngleIter</a></div><div class="ttdoc">Iterate over all angles in an OBMol. </div><div class="ttdef"><b>Definition:</b> obiter.h:295</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomDFSIter_shtml_a227568f5015b62dce6f62b9eca4c90bb"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a227568f5015b62dce6f62b9eca4c90bb">OpenBabel::OBMolAtomDFSIter::operator-&gt;</a></div><div class="ttdeci">OBAtom * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:89</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomIter_shtml_af241c91f41082d06b84533064eaa5b21"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomIter.shtml#af241c91f41082d06b84533064eaa5b21">OpenBabel::OBMolAtomIter::operator*</a></div><div class="ttdeci">OBAtom &amp; operator*() const</div><div class="ttdef"><b>Definition:</b> obiter.h:64</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidue_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBResidue.shtml">OpenBabel::OBResidue</a></div><div class="ttdoc">Residue information. </div><div class="ttdef"><b>Definition:</b> residue.h:50</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueIter_shtml_a7e04dfb68e7cea085c06bc0dc993dacb"><div class="ttname"><a href="classOpenBabel_1_1OBResidueIter.shtml#a7e04dfb68e7cea085c06bc0dc993dacb">OpenBabel::OBResidueIter::operator-&gt;</a></div><div class="ttdeci">OBResidue * operator-&gt;() const</div><div class="ttdef"><b>Definition:</b> obiter.h:263</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolTorsionIter_shtml_ac739d51704add695fff280e299ea91d5"><div class="ttname"><a href="classOpenBabel_1_1OBMolTorsionIter.shtml#ac739d51704add695fff280e299ea91d5">OpenBabel::OBMolTorsionIter::~OBMolTorsionIter</a></div><div class="ttdeci">~OBMolTorsionIter()</div><div class="ttdef"><b>Definition:</b> obiter.h:330</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomDFSIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a></div><div class="ttdoc">Iterate over all atoms in an OBMol in a depth-first search (DFS) </div><div class="ttdef"><b>Definition:</b> obiter.h:68</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml">OpenBabel::OBAtom</a></div><div class="ttdoc">Atom class. </div><div class="ttdef"><b>Definition:</b> atom.h:81</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
