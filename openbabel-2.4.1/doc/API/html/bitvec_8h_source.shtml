<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>bitvec.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">bitvec.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="bitvec_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">bitvec.h - Vector of bits.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_BITVEC_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_BITVEC_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#if defined(_MSC_VER) &amp;&amp; _MSC_VER &lt;= 1600</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="comment">// Assuming 32bit integer</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> uint32_t;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">  #include &lt;inttypes.h&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">// Use uint32_t</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="bitvec_8h.shtml#a9fe4f0c47a767fe2d6e2c365059a5a65">   36</a></span>&#160;<span class="preprocessor">#define SETWORD 32</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">// SETWORD = 2 ^ WORDROLL</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="bitvec_8h.shtml#a887ff76464a78f746a33cad3d7610766">   38</a></span>&#160;<span class="preprocessor">#define WORDROLL 5</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// WORDMASK = SETWORD - 1</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="bitvec_8h.shtml#a076926595d98cea736e59225f32e2dd2">   40</a></span>&#160;<span class="preprocessor">#define WORDMASK 31</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="bitvec_8h.shtml#adb43d23e9968ccbacca3dad700e17b7d">   42</a></span>&#160;<span class="preprocessor">#define WORDSIZE_OF_BITSIZE( bit_size ) ( ( bit_size &gt;&gt; WORDROLL ) + (( bit_size &amp; WORDMASK ) ? 1 : 0) )</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#ifndef STARTWORDS</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="bitvec_8h.shtml#ab0d0da65f8c1f9e86e1c16294dc572aa">   45</a></span>&#160;<span class="preprocessor">#define STARTWORDS 10</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#endif // STARTWORDS</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml">   57</a></span>&#160;  <span class="keyword">class </span>OBERROR <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a1484c05faf3c871ececf8e62ebfee262">   60</a></span>&#160;      <span class="keyword">typedef</span> std::vector&lt;uint32_t&gt; <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a1484c05faf3c871ececf8e62ebfee262">word_vector</a>;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keyword">private</span>:</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordtype">size_t</span> _size; <span class="comment">//was unsigned</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment"></span>      word_vector       _set;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#af0100bd07b2642e38b29dc8e74ff765b">   73</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#af0100bd07b2642e38b29dc8e74ff765b">OBBitVec</a>()</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;          :_set(<a class="code" href="bitvec_8h.shtml#ab0d0da65f8c1f9e86e1c16294dc572aa">STARTWORDS</a>, 0)</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        { _size = _set.size(); }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#ac5a4c3682c88b8d666b5d7d33183fb55">   82</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#ac5a4c3682c88b8d666b5d7d33183fb55">OBBitVec</a>(<span class="keywordtype">unsigned</span> size_in_bits)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;          :_set(<a class="code" href="bitvec_8h.shtml#adb43d23e9968ccbacca3dad700e17b7d">WORDSIZE_OF_BITSIZE</a>(size_in_bits), 0)</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        { _size = _set.size(); }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a1a1bd9c96031c99d3209b04ef50b4d6c">   90</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a1a1bd9c96031c99d3209b04ef50b4d6c">OBBitVec</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv)</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;          :_size(0)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                { (*this) = bv; }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <span class="keywordtype">void</span> SetBitOn(<span class="keywordtype">unsigned</span> bit_offset);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="keywordtype">void</span> SetBitOff(<span class="keywordtype">unsigned</span> bit_offset);</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      <span class="keywordtype">void</span> SetRangeOn(<span class="keywordtype">unsigned</span> lo_bit_offset, <span class="keywordtype">unsigned</span> hi_bit_offset);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      <span class="keywordtype">void</span> SetRangeOff(<span class="keywordtype">unsigned</span> lo_bit_offset, <span class="keywordtype">unsigned</span> hi_bit_offset);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordtype">void</span> Fold(<span class="keywordtype">unsigned</span> new_bit_size);</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#acfdc1251f35ecb2e2d16e236f033911b">  108</a></span>&#160;      <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#acfdc1251f35ecb2e2d16e236f033911b">FirstBit</a>(<span class="keywordtype">unsigned</span> bit_offset = 0)<span class="keyword"> const</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;          <span class="keywordflow">return</span> (BitIsSet(bit_offset) ? 0  : NextBit(bit_offset));</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      <span class="keywordtype">int</span> NextBit(<span class="keywordtype">int</span> last_bit_offset) <span class="keyword">const</span>;</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a2f09c673396856ae954abe2d02011f08">  115</a></span>&#160;      <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a2f09c673396856ae954abe2d02011f08">EndBit</a>()<span class="keyword"> const </span>{  <span class="keywordflow">return</span> -1; }</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a0af4f3bf511770f64efd9b03197fe05d">  117</a></span>&#160;      <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a0af4f3bf511770f64efd9b03197fe05d">GetSize</a>()<span class="keyword"> const    </span>{ <span class="keywordflow">return</span>(_size);    }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <span class="keywordtype">unsigned</span> CountBits() <span class="keyword">const</span>;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#abcfbdba215d3b15fbb4b682969943a6e">  122</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#abcfbdba215d3b15fbb4b682969943a6e">Empty</a>()<span class="keyword"> const   </span>{ <span class="keywordflow">return</span>(IsEmpty()); }</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="keywordtype">bool</span> IsEmpty() <span class="keyword">const</span>;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a7bc2d3a9e8b18736d47932ba327afd38">  130</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a7bc2d3a9e8b18736d47932ba327afd38">Resize</a>(<span class="keywordtype">unsigned</span> size_in_bits)</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                {</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="keywordflow">return</span> ResizeWords( <a class="code" href="bitvec_8h.shtml#adb43d23e9968ccbacca3dad700e17b7d">WORDSIZE_OF_BITSIZE</a>(size_in_bits) );</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                }</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a6b57d4f315f27f863dfaba863f9d6c4c">  139</a></span>&#160;          <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a6b57d4f315f27f863dfaba863f9d6c4c">ResizeWords</a>(<span class="keywordtype">unsigned</span> size_in_words)</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                {</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">if</span> (size_in_words &lt;= _size)</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                _set.resize(size_in_words, 0); <span class="comment">// increase the vector with zeroed bits</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                _size = _set.size();</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                }</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#acd22841cc20ecbc46453494ebe2e1151">  152</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#acd22841cc20ecbc46453494ebe2e1151">BitIsSet</a>(<span class="keywordtype">unsigned</span> bit_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                  <span class="keywordtype">bool</span> rtn = <span class="keyword">false</span>;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                  <span class="keywordtype">unsigned</span> word_offset = bit_offset &gt;&gt; <a class="code" href="bitvec_8h.shtml#a887ff76464a78f746a33cad3d7610766">WORDROLL</a>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                  <span class="keywordflow">if</span> (word_offset &lt; GetSize())</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                          bit_offset &amp;= <a class="code" href="bitvec_8h.shtml#a076926595d98cea736e59225f32e2dd2">WORDMASK</a>;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                          rtn = (( _set[word_offset] &gt;&gt; bit_offset ) &amp; 1);</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                        }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;          <span class="keywordflow">return</span> rtn;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        }</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#aebaf27b65d09f6f54c4d059e5ea6fbcb">  164</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#aebaf27b65d09f6f54c4d059e5ea6fbcb">BitIsOn</a>(<span class="keywordtype">int</span> bit_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword">        </span>{ <span class="keywordflow">return</span> BitIsSet((<span class="keywordtype">unsigned</span>)bit_offset); }</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;          <span class="keywordtype">void</span> FromVecInt(<span class="keyword">const</span> std::vector&lt;int&gt; &amp; bit_offsets);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;          <span class="keywordtype">void</span> FromString(<span class="keyword">const</span> std::string &amp; line, <span class="keywordtype">int</span> bits);</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;          <span class="keywordtype">void</span> ToVecInt(std::vector&lt;int&gt; &amp; bit_offsets) <span class="keyword">const</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      <span class="keywordtype">void</span> Clear();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a00e05e1bb6f3185b1a40728679be5274">  180</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a00e05e1bb6f3185b1a40728679be5274">Negate</a>()</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                  <span class="keywordflow">for</span> (word_vector::iterator wx = _set.begin(), wy = _set.end(); wx != wy; ++wx)</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    * wx = ~(* wx);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        }</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a56df5cb29ee1da7ea5626ab4c0f35882">  190</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml#a56df5cb29ee1da7ea5626ab4c0f35882">GetWords</a>(word_vector &amp; vec)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                vec.insert(vec.end(), _set.begin(),_set.end());</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator= (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator&amp;= (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv);</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator|= (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a3f7949c8ca082670fa93310be6576854">  204</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator|= (<span class="keywordtype">int</span> bit_offset)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        {</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;          SetBitOn(bit_offset);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;          <span class="keywordflow">return</span>(*<span class="keyword">this</span>);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator^= (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator-= (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; operator+= (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv);</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">  220</a></span>&#160;      <span class="keywordtype">bool</span> operator[] (<span class="keywordtype">int</span> bit_offset)<span class="keyword"> const</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">        </span>{ <span class="keywordflow">return</span> BitIsSet(bit_offset); }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      <span class="keyword">friend</span> OBERROR <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <a class="code" href="namespaceOpenBabel.shtml#a48ed8b37310a8d7153a64309f09901a0">operator| </a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv2);</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keyword">friend</span> OBERROR <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <a class="code" href="namespaceOpenBabel.shtml#ac62bb11738b0a28ee90eb260813e33f3">operator&amp; </a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv1,<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv2);</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      <span class="keyword">friend</span> OBERROR <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <a class="code" href="namespaceOpenBabel.shtml#aa2cf1233a6c6ce53b79f94b7a60d2d2a">operator^ </a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv1,<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv2);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="keyword">friend</span> OBERROR <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> <a class="code" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">operator- </a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv1,<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv2);</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      <span class="keyword">friend</span> OBERROR <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator== </a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv1,<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv2);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      <span class="keyword">friend</span> OBERROR <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a3ba5fcca1ecb1241049411be7017186d">operator&lt; </a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv2);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <span class="keyword">friend</span> OBERROR std::istream&amp; <a class="code" href="namespaceOpenBabel.shtml#a54358a339fc06df028bb5fbe403b0032">operator&gt;&gt; </a>( std::istream &amp; is, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv );</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="keyword">friend</span> OBERROR std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">operator&lt;&lt; </a>( std::ostream &amp; os, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv ) ;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    };</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  OBERROR <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#aeb3b137500bda8573ee1aa5757011a66">Tanimoto</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp; bv2);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  } <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="preprocessor">#endif // OB_BITVEC_H</span></div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_af0100bd07b2642e38b29dc8e74ff765b"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#af0100bd07b2642e38b29dc8e74ff765b">OpenBabel::OBBitVec::OBBitVec</a></div><div class="ttdeci">OBBitVec()</div><div class="ttdoc">Construct a bit vector of the default size. </div><div class="ttdef"><b>Definition:</b> bitvec.h:73</div></div>
<div class="ttc" id="bitvec_8h_shtml_adb43d23e9968ccbacca3dad700e17b7d"><div class="ttname"><a href="bitvec_8h.shtml#adb43d23e9968ccbacca3dad700e17b7d">WORDSIZE_OF_BITSIZE</a></div><div class="ttdeci">#define WORDSIZE_OF_BITSIZE(bit_size)</div><div class="ttdef"><b>Definition:</b> bitvec.h:42</div></div>
<div class="ttc" id="bitvec_8h_shtml_a887ff76464a78f746a33cad3d7610766"><div class="ttname"><a href="bitvec_8h.shtml#a887ff76464a78f746a33cad3d7610766">WORDROLL</a></div><div class="ttdeci">#define WORDROLL</div><div class="ttdef"><b>Definition:</b> bitvec.h:38</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac62bb11738b0a28ee90eb260813e33f3"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac62bb11738b0a28ee90eb260813e33f3">OpenBabel::operator &amp;</a></div><div class="ttdeci">OBBitVec operator &amp;(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:487</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a3ba5fcca1ecb1241049411be7017186d"><div class="ttname"><a href="namespaceOpenBabel.shtml#a3ba5fcca1ecb1241049411be7017186d">OpenBabel::operator&lt;</a></div><div class="ttdeci">bool operator&lt;(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:556</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a7bc2d3a9e8b18736d47932ba327afd38"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a7bc2d3a9e8b18736d47932ba327afd38">OpenBabel::OBBitVec::Resize</a></div><div class="ttdeci">bool Resize(unsigned size_in_bits)</div><div class="ttdoc">Reserve space for size_in_bits bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:130</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_acd22841cc20ecbc46453494ebe2e1151"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#acd22841cc20ecbc46453494ebe2e1151">OpenBabel::OBBitVec::BitIsSet</a></div><div class="ttdeci">bool BitIsSet(unsigned bit_offset) const</div><div class="ttdoc">Asks if the bit_offset &amp;#39;th bit is set. </div><div class="ttdef"><b>Definition:</b> bitvec.h:152</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a00e05e1bb6f3185b1a40728679be5274"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a00e05e1bb6f3185b1a40728679be5274">OpenBabel::OBBitVec::Negate</a></div><div class="ttdeci">void Negate()</div><div class="ttdoc">Inverts every bit in the vector. </div><div class="ttdef"><b>Definition:</b> bitvec.h:180</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a48ed8b37310a8d7153a64309f09901a0"><div class="ttname"><a href="namespaceOpenBabel.shtml#a48ed8b37310a8d7153a64309f09901a0">OpenBabel::operator|</a></div><div class="ttdeci">OBBitVec operator|(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:475</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_aebaf27b65d09f6f54c4d059e5ea6fbcb"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#aebaf27b65d09f6f54c4d059e5ea6fbcb">OpenBabel::OBBitVec::BitIsOn</a></div><div class="ttdeci">bool BitIsOn(int bit_offset) const</div><div class="ttdef"><b>Definition:</b> bitvec.h:164</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a6b57d4f315f27f863dfaba863f9d6c4c"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a6b57d4f315f27f863dfaba863f9d6c4c">OpenBabel::OBBitVec::ResizeWords</a></div><div class="ttdeci">bool ResizeWords(unsigned size_in_words)</div><div class="ttdoc">Reserve space for size_in_words words. </div><div class="ttdef"><b>Definition:</b> bitvec.h:139</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a1a1bd9c96031c99d3209b04ef50b4d6c"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a1a1bd9c96031c99d3209b04ef50b4d6c">OpenBabel::OBBitVec::OBBitVec</a></div><div class="ttdeci">OBBitVec(const OBBitVec &amp;bv)</div><div class="ttdoc">Copy constructor (result has same number of bits) </div><div class="ttdef"><b>Definition:</b> bitvec.h:90</div></div>
<div class="ttc" id="bitvec_8h_shtml_ab0d0da65f8c1f9e86e1c16294dc572aa"><div class="ttname"><a href="bitvec_8h.shtml#ab0d0da65f8c1f9e86e1c16294dc572aa">STARTWORDS</a></div><div class="ttdeci">#define STARTWORDS</div><div class="ttdef"><b>Definition:</b> bitvec.h:45</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aa2e0e5d4e59766809b5b61ab9b513a2e"><div class="ttname"><a href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-</a></div><div class="ttdeci">vector3 operator-(const vector3 &amp;v1, const vector3 &amp;v2)</div><div class="ttdoc">Vector subtraction. </div><div class="ttdef"><b>Definition:</b> vector3.h:321</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a0af4f3bf511770f64efd9b03197fe05d"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a0af4f3bf511770f64efd9b03197fe05d">OpenBabel::OBBitVec::GetSize</a></div><div class="ttdeci">size_t GetSize() const</div><div class="ttdoc">Return the number of words ( NOT the number of bits ). </div><div class="ttdef"><b>Definition:</b> bitvec.h:117</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_ac5a4c3682c88b8d666b5d7d33183fb55"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#ac5a4c3682c88b8d666b5d7d33183fb55">OpenBabel::OBBitVec::OBBitVec</a></div><div class="ttdeci">OBBitVec(unsigned size_in_bits)</div><div class="ttdoc">Construct a bit vector of maxbits bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:82</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aa2cf1233a6c6ce53b79f94b7a60d2d2a"><div class="ttname"><a href="namespaceOpenBabel.shtml#aa2cf1233a6c6ce53b79f94b7a60d2d2a">OpenBabel::operator^</a></div><div class="ttdeci">OBBitVec operator^(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:499</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a56df5cb29ee1da7ea5626ab4c0f35882"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a56df5cb29ee1da7ea5626ab4c0f35882">OpenBabel::OBBitVec::GetWords</a></div><div class="ttdeci">void GetWords(word_vector &amp;vec)</div><div class="ttdoc">Return a copy of the internal vector of words, at the end of vec. </div><div class="ttdef"><b>Definition:</b> bitvec.h:190</div></div>
<div class="ttc" id="bitvec_8h_shtml_a076926595d98cea736e59225f32e2dd2"><div class="ttname"><a href="bitvec_8h.shtml#a076926595d98cea736e59225f32e2dd2">WORDMASK</a></div><div class="ttdeci">#define WORDMASK</div><div class="ttdef"><b>Definition:</b> bitvec.h:40</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_abcfbdba215d3b15fbb4b682969943a6e"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#abcfbdba215d3b15fbb4b682969943a6e">OpenBabel::OBBitVec::Empty</a></div><div class="ttdeci">bool Empty() const</div><div class="ttdef"><b>Definition:</b> bitvec.h:122</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aeb3b137500bda8573ee1aa5757011a66"><div class="ttname"><a href="namespaceOpenBabel.shtml#aeb3b137500bda8573ee1aa5757011a66">OpenBabel::Tanimoto</a></div><div class="ttdeci">double Tanimoto(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdoc">The Tanimoto coefficient, which may be regarded as the proportion of the &quot;on-bits&quot; which are shared...</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:660</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a70c653ee69fdbd27f77d430e4aed3cad"><div class="ttname"><a href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;, const vector3 &amp;)</div><div class="ttdoc">Prints a representation of the vector as a row vector of the form &quot;&lt;0.1,1,2&gt;&quot;. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:117</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a54358a339fc06df028bb5fbe403b0032"><div class="ttname"><a href="namespaceOpenBabel.shtml#a54358a339fc06df028bb5fbe403b0032">OpenBabel::operator&gt;&gt;</a></div><div class="ttdeci">std::istream &amp; operator&gt;&gt;(std::istream &amp;is, OBBitVec &amp;bv)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:592</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a2f09c673396856ae954abe2d02011f08"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a2f09c673396856ae954abe2d02011f08">OpenBabel::OBBitVec::EndBit</a></div><div class="ttdeci">int EndBit() const</div><div class="ttdoc">Return the bit offset of the last bit (for iterating) i.e. -1. </div><div class="ttdef"><b>Definition:</b> bitvec.h:115</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_a1484c05faf3c871ececf8e62ebfee262"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#a1484c05faf3c871ececf8e62ebfee262">OpenBabel::OBBitVec::word_vector</a></div><div class="ttdeci">std::vector&lt; uint32_t &gt; word_vector</div><div class="ttdef"><b>Definition:</b> bitvec.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_acfdc1251f35ecb2e2d16e236f033911b"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#acfdc1251f35ecb2e2d16e236f033911b">OpenBabel::OBBitVec::FirstBit</a></div><div class="ttdeci">int FirstBit(unsigned bit_offset=0) const</div><div class="ttdoc">Find the first true bit at or after bit_offset. </div><div class="ttdef"><b>Definition:</b> bitvec.h:108</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac001b331f648fbbd8590576f59d4d2ab"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">OpenBabel::operator==</a></div><div class="ttdeci">bool operator==(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:525</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:28 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
