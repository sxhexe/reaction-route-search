<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>squareplanar.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li><li class="navelem"><a class="el" href="dir_8fb503b1b9ed5a853b0ce57a9277e655.shtml">stereo</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">squareplanar.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="squareplanar_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">  squareplanar.h - Class for handling and storing squareplanar stereochemistry.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">  Copyright (C) 2009-2010 by Tim Vandermeersch</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">  This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">  For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">  This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">  it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">  the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">  (at your option) any later version.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">  This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">  GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">  You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">  along with this program; if not, write to the Free Software</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">  02110-1301, USA.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> **********************************************************************/</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef OB_SQUAREPLANAR_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define OB_SQUAREPLANAR_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="tetraplanar_8h.shtml">openbabel/stereo/tetraplanar.h</a>&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a> {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">   48</a></span>&#160;<span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml">OBTetraPlanarStereo</a></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">   71</a></span>&#160;    <span class="keyword">struct </span>OBAPI <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a539a941e29cde8d13e413c515d9801cd">   77</a></span>&#160;      <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a539a941e29cde8d13e413c515d9801cd">Config</a>() : center(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::NoRef), shape(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::ShapeU),</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;          specified(true)</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      {  }</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a3932e85a5b2cc866ab349584485a5b1c">   87</a></span>&#160;      <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a3932e85a5b2cc866ab349584485a5b1c">Config</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _center, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">OBStereo::Refs</a> &amp;_refs,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;          <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> _shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">OBStereo::ShapeU</a>) : center(_center),</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;          refs(_refs), shape(_shape), specified(true)</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      {  }</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator==</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> &amp;other) <span class="keyword">const</span>;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a91ab02a035905b00f8d490818067dce7">  161</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a91ab02a035905b00f8d490818067dce7">operator!=</a>(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> &amp;other)<span class="keyword"> const</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      }</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a822b3ed2ceea391277903da02d1fd0a2">  170</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a822b3ed2ceea391277903da02d1fd0a2">center</a>; <span class="comment">//&lt;! The central atom id.</span></div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a3e3f2a8fefc9f694040bbb8685cb61e1">  171</a></span>&#160;      <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">OBStereo::Refs</a> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a3e3f2a8fefc9f694040bbb8685cb61e1">refs</a>; </div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a77f6538bd30b4203bd2b2bba33c28c85">  172</a></span>&#160;      <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a77f6538bd30b4203bd2b2bba33c28c85">shape</a>; </div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#ad137707f900f599f5f403d9639e2aec3">  173</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#ad137707f900f599f5f403d9639e2aec3">specified</a>; </div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    };</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a>();</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a498fb01456d4134b9730009c7af11da6">  193</a></span>&#160;    <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a498fb01456d4134b9730009c7af11da6">GetType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3">OBStereo::SquarePlanar</a>; }</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordtype">bool</span> IsValid() <span class="keyword">const</span>;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordtype">void</span> SetConfig(<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> &amp;config);</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> GetConfig(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">OBStereo::ShapeU</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> GetConfig(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> start,</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OBStereo::Shape</a> shape = <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">OBStereo::ShapeU</a>) <span class="keyword">const</span>;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator==</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> &amp;other) <span class="keyword">const</span>;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ae94bb7fc8559e36bb7c94f49b9d84098">  228</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ae94bb7fc8559e36bb7c94f49b9d84098">operator!=</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a> &amp;other)<span class="keyword"> const</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == other);</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">     * Implement OBGenericData::Clone().</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">     */</span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *mol) <span class="keyword">const</span>;</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">bool</span> IsTrans(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id1, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id2) <span class="keyword">const</span>;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordtype">bool</span> IsCis(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id1, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> id2) <span class="keyword">const</span>;</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetTransRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    std::vector&lt;unsigned long&gt; GetCisRefs(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  <span class="keyword">private</span>:</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">Config</a> m_cfg; </div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="comment">// The following function sits behind GetCisRef and GetTransRef</span></div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> GetCisOrTransRef(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> getcisref) <span class="keyword">const</span>;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;};</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment">// end addtogroup doxygen</span></div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;} <span class="comment">// namespace OpenBabel</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacestd.shtml">std</a> {</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;OBAPI ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OpenBabel::OBSquarePlanarStereo</a> &amp;ct);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;OBAPI ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">operator&lt;&lt;</a>(ostream &amp;out, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">OpenBabel::OBSquarePlanarStereo::Config</a> &amp;cfg);</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;} <span class="comment">// namespace std</span></div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">#endif // Not SWIG</span></div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml_ad137707f900f599f5f403d9639e2aec3"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#ad137707f900f599f5f403d9639e2aec3">OpenBabel::OBSquarePlanarStereo::Config::specified</a></div><div class="ttdeci">bool specified</div><div class="ttdef"><b>Definition:</b> squareplanar.h:173</div></div>
<div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml">OpenBabel::OBSquarePlanarStereo::Config</a></div><div class="ttdoc">Stereochemical configuration for square planar stereocenters. </div><div class="ttdef"><b>Definition:</b> squareplanar.h:71</div></div>
<div class="ttc" id="classOpenBabel_1_1OBGenericData_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBGenericData.shtml">OpenBabel::OBGenericData</a></div><div class="ttdoc">Base class for generic data. </div><div class="ttdef"><b>Definition:</b> base.h:189</div></div>
<div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml_a77f6538bd30b4203bd2b2bba33c28c85"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a77f6538bd30b4203bd2b2bba33c28c85">OpenBabel::OBSquarePlanarStereo::Config::shape</a></div><div class="ttdeci">OBStereo::Shape shape</div><div class="ttdoc">The shape of the 4 reference ids. </div><div class="ttdef"><b>Definition:</b> squareplanar.h:172</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSquarePlanarStereo_shtml_a498fb01456d4134b9730009c7af11da6"><div class="ttname"><a href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a498fb01456d4134b9730009c7af11da6">OpenBabel::OBSquarePlanarStereo::GetType</a></div><div class="ttdeci">OBStereo::Type GetType() const</div><div class="ttdef"><b>Definition:</b> squareplanar.h:193</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml">OpenBabel::OBStereo</a></div><div class="ttdoc">Placeholder for enums &amp; Ref/Refs related functions. </div><div class="ttdef"><b>Definition:</b> stereo.h:75</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">OpenBabel::OBStereo::ShapeU</a></div><div class="ttdef"><b>Definition:</b> stereo.h:109</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBTetraPlanarStereo_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBTetraPlanarStereo.shtml">OpenBabel::OBTetraPlanarStereo</a></div><div class="ttdoc">Base class for handling and storing planar stereochemistry with 4 reference atoms. </div><div class="ttdef"><b>Definition:</b> tetraplanar.h:83</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a55b506070847a13554f8b879c1bfb37c"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OpenBabel::OBStereo::Shape</a></div><div class="ttdeci">Shape</div><div class="ttdef"><b>Definition:</b> stereo.h:108</div></div>
<div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml_a91ab02a035905b00f8d490818067dce7"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a91ab02a035905b00f8d490818067dce7">OpenBabel::OBSquarePlanarStereo::Config::operator!=</a></div><div class="ttdeci">bool operator!=(const Config &amp;other) const</div><div class="ttdef"><b>Definition:</b> squareplanar.h:161</div></div>
<div class="ttc" id="namespacestd_shtml"><div class="ttname"><a href="namespacestd.shtml">std</a></div><div class="ttdoc">STL namespace. </div></div>
<div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml_a3932e85a5b2cc866ab349584485a5b1c"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a3932e85a5b2cc866ab349584485a5b1c">OpenBabel::OBSquarePlanarStereo::Config::Config</a></div><div class="ttdeci">Config(unsigned long _center, const OBStereo::Refs &amp;_refs, OBStereo::Shape _shape=OBStereo::ShapeU)</div><div class="ttdef"><b>Definition:</b> squareplanar.h:87</div></div>
<div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml_a822b3ed2ceea391277903da02d1fd0a2"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a822b3ed2ceea391277903da02d1fd0a2">OpenBabel::OBSquarePlanarStereo::Config::center</a></div><div class="ttdeci">unsigned long center</div><div class="ttdef"><b>Definition:</b> squareplanar.h:170</div></div>
<div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml_a3e3f2a8fefc9f694040bbb8685cb61e1"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a3e3f2a8fefc9f694040bbb8685cb61e1">OpenBabel::OBSquarePlanarStereo::Config::refs</a></div><div class="ttdeci">OBStereo::Refs refs</div><div class="ttdoc">The 4 reference ids. </div><div class="ttdef"><b>Definition:</b> squareplanar.h:171</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a70c653ee69fdbd27f77d430e4aed3cad"><div class="ttname"><a href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;, const vector3 &amp;)</div><div class="ttdoc">Prints a representation of the vector as a row vector of the form &quot;&lt;0.1,1,2&gt;&quot;. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:117</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_aa6d4491769cb9af32f3ea22e9f9a66c4"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">OpenBabel::OBStereo::Refs</a></div><div class="ttdeci">std::vector&lt; Ref &gt; Refs</div><div class="ttdef"><b>Definition:</b> stereo.h:156</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSquarePlanarStereo_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OpenBabel::OBSquarePlanarStereo</a></div><div class="ttdoc">Class for handling and storing square planar stereochemistry. </div><div class="ttdef"><b>Definition:</b> squareplanar.h:48</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSquarePlanarStereo_shtml_ae94bb7fc8559e36bb7c94f49b9d84098"><div class="ttname"><a href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ae94bb7fc8559e36bb7c94f49b9d84098">OpenBabel::OBSquarePlanarStereo::operator!=</a></div><div class="ttdeci">bool operator!=(const OBSquarePlanarStereo &amp;other) const</div><div class="ttdef"><b>Definition:</b> squareplanar.h:228</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3">OpenBabel::OBStereo::SquarePlanar</a></div><div class="ttdoc">Square-planar stereochemistry. </div><div class="ttdef"><b>Definition:</b> stereo.h:83</div></div>
<div class="ttc" id="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config_shtml_a539a941e29cde8d13e413c515d9801cd"><div class="ttname"><a href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a539a941e29cde8d13e413c515d9801cd">OpenBabel::OBSquarePlanarStereo::Config::Config</a></div><div class="ttdeci">Config()</div><div class="ttdef"><b>Definition:</b> squareplanar.h:77</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a1d1cfd8ffb84e947f82999c682b666a7"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OpenBabel::OBStereo::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> stereo.h:80</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="tetraplanar_8h_shtml"><div class="ttname"><a href="tetraplanar_8h.shtml">tetraplanar.h</a></div><div class="ttdoc">Base class for handling and storing planar stereochemistry with 4 reference atoms. </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac001b331f648fbbd8590576f59d4d2ab"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">OpenBabel::operator==</a></div><div class="ttdeci">bool operator==(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:525</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
