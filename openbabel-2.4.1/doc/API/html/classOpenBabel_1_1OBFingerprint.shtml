<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBFingerprint Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1OBFingerprint-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBFingerprint Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="fingerprint_8h_source.shtml">openbabel/fingerprint.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBFingerprint:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBFingerprint.png" usemap="#OBFingerprint_map" alt=""/>
  <map id="OBFingerprint_map" name="OBFingerprint_map">
<area href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime. " alt="OBPlugin" shape="rect" coords="0,0,92,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a48c2b72feb2607662249c83e85ce665b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a48c2b72feb2607662249c83e85ce665b">FptFlag</a> { <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a48c2b72feb2607662249c83e85ce665baa6c1016f52874254ed7604c44df21cca">FPT_UNIQUEBITS</a> =1, 
<a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a48c2b72feb2607662249c83e85ce665ba9220882080beed735edfcbc3175bc62d">FPT_NOINFO</a> =2
 }</td></tr>
<tr class="separator:a48c2b72feb2607662249c83e85ce665b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
<tr class="separator:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
<tr class="separator:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a55f9725c7e338f4d4c2d9f7a7c34f0cb"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a55f9725c7e338f4d4c2d9f7a7c34f0cb">~OBFingerprint</a> ()</td></tr>
<tr class="separator:a55f9725c7e338f4d4c2d9f7a7c34f0cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70768d339cbfa0146c7f1cd278e05e19"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a70768d339cbfa0146c7f1cd278e05e19">SetBit</a> (std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)</td></tr>
<tr class="separator:a70768d339cbfa0146c7f1cd278e05e19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41fefad793d68714c5a0732b000bd1b2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a41fefad793d68714c5a0732b000bd1b2">GetBit</a> (const std::vector&lt; unsigned int &gt; &amp;vec, const unsigned int n)</td></tr>
<tr class="separator:a41fefad793d68714c5a0732b000bd1b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bbe06daca0e9e000492cc6a89d7dabd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a9bbe06daca0e9e000492cc6a89d7dabd">Fold</a> (std::vector&lt; unsigned int &gt; &amp;vec, unsigned int nbits)</td></tr>
<tr class="separator:a9bbe06daca0e9e000492cc6a89d7dabd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462db518c432fa8fab958b8dd32d8a05"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a462db518c432fa8fab958b8dd32d8a05">GetFingerprint</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::vector&lt; unsigned int &gt; &amp;fp, int nbits=0)=0</td></tr>
<tr class="separator:a462db518c432fa8fab958b8dd32d8a05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a94537cc5ba96b1876db1b612b91a3"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>
<tr class="separator:a94a94537cc5ba96b1876db1b612b91a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6948a255af347b37b32ba5c55d6368a4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a6948a255af347b37b32ba5c55d6368a4">SetFlags</a> (unsigned int)</td></tr>
<tr class="separator:a6948a255af347b37b32ba5c55d6368a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ffe45da1e2dd403bf6b51364717d2a6"><td class="memItemLeft" align="right" valign="top">virtual std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a4ffe45da1e2dd403bf6b51364717d2a6">DescribeBits</a> (const std::vector&lt; unsigned int &gt;, bool=true)</td></tr>
<tr class="separator:a4ffe45da1e2dd403bf6b51364717d2a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>
<tr class="separator:ga4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0859fdbf134af95a8231eb32c73b7db"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gae0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>
<tr class="separator:gae0859fdbf134af95a8231eb32c73b7db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9399e9568ab809d714385f1b237a9335"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>
<tr class="separator:ga9399e9568ab809d714385f1b237a9335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e0b39e1326de703012f81ac2be7feba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a> ()</td></tr>
<tr class="separator:ga3e0b39e1326de703012f81ac2be7feba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaa55e5ad893f2566c6874224f9174b7d2">GetID</a> () const</td></tr>
<tr class="separator:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
<tr class="separator:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af244b13b4b50bb9343f3026d7372e964"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#af244b13b4b50bb9343f3026d7372e964">Tanimoto</a> (const std::vector&lt; unsigned int &gt; &amp;vec1, const std::vector&lt; unsigned int &gt; &amp;vec2)</td></tr>
<tr class="separator:af244b13b4b50bb9343f3026d7372e964"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6df021d906a48593e8f9ed11bd8d128"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#ae6df021d906a48593e8f9ed11bd8d128">Tanimoto</a> (const std::vector&lt; unsigned int &gt; &amp;vec1, const unsigned int *p2)</td></tr>
<tr class="separator:ae6df021d906a48593e8f9ed11bd8d128"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9ecfee3be06f4c37ef48506100f6f0c"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#ad9ecfee3be06f4c37ef48506100f6f0c">Getbitsperint</a> ()</td></tr>
<tr class="separator:ad9ecfee3be06f4c37ef48506100f6f0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f95fb7efe843a55b087edd16fbe4012"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a3f95fb7efe843a55b087edd16fbe4012">FindFingerprint</a> (const char *ID)</td></tr>
<tr class="separator:a3f95fb7efe843a55b087edd16fbe4012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga295dc7f1b94da710821c562bff3e7c97"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga295dc7f1b94da710821c562bff3e7c97">GetPlugin</a> (const char *Type, const char *ID)</td></tr>
<tr class="separator:ga295dc7f1b94da710821c562bff3e7c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf95953a5793333ba51e978c4a0a00103"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaf95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>
<tr class="separator:gaf95953a5793333ba51e978c4a0a00103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>
<tr class="separator:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba22c5352d36c7f058299af7ddffb03e"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>
<tr class="separator:gaba22c5352d36c7f058299af7ddffb03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>
<tr class="separator:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>
<tr class="separator:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>
<tr class="separator:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">LoadAllPlugins</a> ()</td></tr>
<tr class="separator:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
<tr class="separator:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
<tr class="separator:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
<tr class="separator:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ga1f8d25dafb0bc13814ca451035f67955"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>
<tr class="separator:ga1f8d25dafb0bc13814ca451035f67955"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9d7dd3bbc482a65e28ca887b3faa2535">AllPluginsLoaded</a> = 0</td></tr>
<tr class="separator:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The base class for fingerprints. </p>
<p>These fingerprints are condensed representation of molecules (or other objects) as a list of boolean values (actually bits in a vector&lt;unsigned&gt;) with length of a power of 2. The main motivation is for fast searching of data sources containing large numbers of molecules (up to several million). Open Babel provides some routines which can search text files containing lists of molecules in any format. See the documentation on the class <a class="el" href="classOpenBabel_1_1FastSearch.shtml" title="Class to search fingerprint index files. ">FastSearch</a>.</p>
<p>There are descriptions of molecular fingerprints at <br />
 <a href="http://www.daylight.com/dayhtml/doc/theory/theory.finger.html">http://www.daylight.com/dayhtml/doc/theory/theory.finger.html</a>) and <br />
 <a href="http://www.mesaac.com/Fingerprint.htm">http://www.mesaac.com/Fingerprint.htm</a> <br />
 Many methods of preparing fingerprints have been described, but the type supported currently in <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> has each bit representing a substructure (or other molecular property). If a substructure is present in the molecule, then a particular bit is set to 1. But because the hashing method may also map other substructures to the same bit, a match does not guarantee that a particular substructure is present; there may be false positives. However, with proper design, a large fraction of irrelevant molecules in a data set can be eliminated in a fast search with boolean methods on the fingerprints. It then becomes feasible to make a definitive substructure search by conventional methods on this reduced list even if it is slow.</p>
<p><a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> provides a framework for applying new types of fingerprints without changing any existing code. They are derived from <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints. ">OBFingerprint</a> and the source file is just compiled with the rest of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a>. Alternatively, they can be separately compiled as a DLL or shared library and discovered when <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> runs.</p>
<p>For more on these specific implementations of fingerprints in Open Babel, please take a look at the developer's wiki: <a href="http://openbabel.org/wiki/Fingerprints">http://openbabel.org/wiki/Fingerprints</a></p>
<p>Fingerprints derived from this abstract base class <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints. ">OBFingerprint</a> can be for any object derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> (not just for <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>). Each derived class provides an ID as a string and <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints. ">OBFingerprint</a> keeps a map of these to provides a pointer to the class when requested in FindFingerprint.</p>
<h4>&ndash; To define a fingerprint type &ndash;</h4>
<p>The classes derived form <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml" title="The base class for fingerprints. ">OBFingerprint</a> are required to provide a <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a462db518c432fa8fab958b8dd32d8a05">GetFingerprint()</a> routine and a <a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7" title="Required description of a sub-type. ">Description()</a> routine </p><div class="fragment"><div class="line"><span class="keyword">class </span>MyFpType : OBFingerprint</div><div class="line">{</div><div class="line">   MyFpType(<span class="keyword">const</span> <span class="keywordtype">char</span>* <span class="keywordtype">id</span>) : OBFingerprint(id){};</div><div class="line"></div><div class="line">   <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a462db518c432fa8fab958b8dd32d8a05">GetFingerprint</a>(OBBase* pOb, vector&lt;unsigned int&gt;&amp; fp, <span class="keywordtype">int</span> nbits)</div><div class="line">   {</div><div class="line">      <span class="comment">//Convert pOb to the required type, usually OBMol</span></div><div class="line">      OBMol* pmol = <span class="keyword">dynamic_cast&lt;</span>OBMol*<span class="keyword">&gt;</span>(pOb);</div><div class="line">      fp.resize(required_number_of_words);</div><div class="line">      ...</div><div class="line">      use <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a70768d339cbfa0146c7f1cd278e05e19">SetBit</a>(fp,n); to <span class="keyword">set</span> the nth bit</div><div class="line"></div><div class="line">      <span class="keywordflow">if</span>(nbits)</div><div class="line">         <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a9bbe06daca0e9e000492cc6a89d7dabd">Fold</a>(fp, nbits);</div><div class="line">   }</div><div class="line"></div><div class="line">   <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a>(){ <span class="keywordflow">return</span> <span class="stringliteral">&quot;Some descriptive text&quot;</span>;}</div><div class="line">   ...</div><div class="line">};</div></div><!-- fragment --><p>Declare a global instance with the ID you will use in -f options to specify its use. </p><div class="fragment"><div class="line">MyFpType theMyFpType(<span class="stringliteral">&quot;myfpID&quot;</span>);</div></div><!-- fragment --><h4>&ndash; To obtain a fingerprint &ndash;</h4>
<div class="fragment"><div class="line">OBMol mol;</div><div class="line">...</div><div class="line">vector&lt;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>&gt; fp;</div><div class="line">OBFingerprint::GetDefault()-&gt;GetFingerprint(&amp;mol, fp); <span class="comment">//gets default size of fingerprint</span></div></div><!-- fragment --><p> or </p><div class="fragment"><div class="line">vector&lt;unsigned int&gt; fp;</div><div class="line">OBFingerPrint* pFP = <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a3f95fb7efe843a55b087edd16fbe4012">OBFingerprint::FindFingerprint</a>(<span class="stringliteral">&quot;myfpID&quot;</span>);</div><div class="line">...and maybe...</div><div class="line">pFP-&gt;GetFingerprint(&amp;mol,fp, 128); <span class="comment">//fold down to 128bits if was originally larger</span></div></div><!-- fragment --><h4>&ndash; To print a list of available fingerprint types &ndash;</h4>
<div class="fragment"><div class="line">std::string id;</div><div class="line">OBFingerPrint* pFPrt=NULL;</div><div class="line"><span class="keywordflow">while</span>(OBFingerprint::GetNextFPrt(<span class="keywordtype">id</span>, pFPrt))</div><div class="line">{</div><div class="line">   cout &lt;&lt; <span class="keywordtype">id</span> &lt;&lt; <span class="stringliteral">&quot; -- &quot;</span> &lt;&lt; pFPrt-&gt;Description() &lt;&lt; endl;</div><div class="line">}</div></div><!-- fragment --><p>Fingerprints are handled as vector&lt;unsigned int&gt; so that the number of bits in this vector and their order will be platform and compiler dependent, because of size of int types and endian differences. Use fingerprints (and fastsearch indexes containing them) only for comparing with other fingerprints prepared on the same machine.</p>
<p>The FingerprintFormat class is an output format which displays fingerprints as hexadecimal. When multiple molecules are supplied it will calculate the Tanimoto coefficient from the first molecule to each of the others. It also shows whether the first molecule is a possible substructure to all the others, i.e. whether all the bits set in the fingerprint for the first molecule are set in the fingerprint of the others. To display hexadecimal information when multiple molecules are provided it is necessay to use the -xh option.</p>
<p>To see a list of available format types, type babel -F on the command line. The -xF option of the FingerprintFormat class also provides this output, but due to a quirk in the way the program works, it is necessary to have a valid input molecule for this option to work. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a48c2b72feb2607662249c83e85ce665b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48c2b72feb2607662249c83e85ce665b">&sect;&nbsp;</a></span>FptFlag</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a48c2b72feb2607662249c83e85ce665b">FptFlag</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Optional flags. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a48c2b72feb2607662249c83e85ce665baa6c1016f52874254ed7604c44df21cca"></a>FPT_UNIQUEBITS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a48c2b72feb2607662249c83e85ce665ba9220882080beed735edfcbc3175bc62d"></a>FPT_NOINFO&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a55f9725c7e338f4d4c2d9f7a7c34f0cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55f9725c7e338f4d4c2d9f7a7c34f0cb">&sect;&nbsp;</a></span>~OBFingerprint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a70768d339cbfa0146c7f1cd278e05e19"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70768d339cbfa0146c7f1cd278e05e19">&sect;&nbsp;</a></span>SetBit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBit </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the nth bit. </p>

</div>
</div>
<a id="a41fefad793d68714c5a0732b000bd1b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41fefad793d68714c5a0732b000bd1b2">&sect;&nbsp;</a></span>GetBit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetBit </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>n</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>return true if the nth bit is set; </p>

</div>
</div>
<a id="a9bbe06daca0e9e000492cc6a89d7dabd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bbe06daca0e9e000492cc6a89d7dabd">&sect;&nbsp;</a></span>Fold()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Fold </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>nbits</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Repeatedly ORs the top half with the bottom half until no smaller than nbits. </p>

</div>
</div>
<a id="a462db518c432fa8fab958b8dd32d8a05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a462db518c432fa8fab958b8dd32d8a05">&sect;&nbsp;</a></span>GetFingerprint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool GetFingerprint </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>fp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nbits</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>fingerprint in vector, which may be resized, folded to nbits (if nbits!=0) </dd></dl>

</div>
</div>
<a id="a94a94537cc5ba96b1876db1b612b91a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94a94537cc5ba96b1876db1b612b91a3">&sect;&nbsp;</a></span>Flags()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6948a255af347b37b32ba5c55d6368a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6948a255af347b37b32ba5c55d6368a4">&sect;&nbsp;</a></span>SetFlags()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetFlags </td>
          <td>(</td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4ffe45da1e2dd403bf6b51364717d2a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ffe45da1e2dd403bf6b51364717d2a6">&sect;&nbsp;</a></span>DescribeBits()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual std::string DescribeBits </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a description of each bit that is set (or unset, if bSet=false) </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.2 </dd></dl>

</div>
</div>
<a id="af244b13b4b50bb9343f3026d7372e964"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af244b13b4b50bb9343f3026d7372e964">&sect;&nbsp;</a></span>Tanimoto() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double Tanimoto </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the Tanimoto coefficient between two vectors (vector&lt;unsigned int&gt;&amp; SeekPositions) </dd></dl>

</div>
</div>
<a id="ae6df021d906a48593e8f9ed11bd8d128"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae6df021d906a48593e8f9ed11bd8d128">&sect;&nbsp;</a></span>Tanimoto() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double Tanimoto </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vec1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inline version of <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#af244b13b4b50bb9343f3026d7372e964">Tanimoto()</a> taking a pointer for the second vector. </p>
<p>If used for two vectors, vec1 and vec2, call as Tanimoto(vec1, &amp;vec2[0]); </p>

</div>
</div>
<a id="ad9ecfee3be06f4c37ef48506100f6f0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9ecfee3be06f4c37ef48506100f6f0c">&sect;&nbsp;</a></span>Getbitsperint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int Getbitsperint </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3f95fb7efe843a55b087edd16fbe4012"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f95fb7efe843a55b087edd16fbe4012">&sect;&nbsp;</a></span>FindFingerprint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* FindFingerprint </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>For backward compatibility; a synonym of OBFingerprint::FindType. </p>
<dl class="section return"><dt>Returns</dt><dd>a pointer to a fingerprint (the default if ID is empty), or NULL if not available </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="fingerprint_8h_source.shtml">fingerprint.h</a></li>
<li><a class="el" href="fingerprint_8cpp.shtml">fingerprint.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
