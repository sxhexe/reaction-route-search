<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBSmartsPattern Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1OBSmartsPattern-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBSmartsPattern Class Reference<div class="ingroups"><a class="el" href="group__substructure.shtml">Substructure Searching</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="parsmart_8h_source.shtml">openbabel/parsmart.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a747637046be33d7273262104aad8069d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a> { <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312">All</a>, 
<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258">Single</a>, 
<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069daca4bfb16b2e7dc497ce44753a75a3a36">AllUnique</a>
 }</td></tr>
<tr class="separator:a747637046be33d7273262104aad8069d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa930ba6620356e94683a1d5d4a4a25e3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa930ba6620356e94683a1d5d4a4a25e3">OBSmartsPattern</a> ()</td></tr>
<tr class="separator:aa930ba6620356e94683a1d5d4a4a25e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45c009ff3b4002e84b8f6cc4adbc1a49"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a45c009ff3b4002e84b8f6cc4adbc1a49">~OBSmartsPattern</a> ()</td></tr>
<tr class="separator:a45c009ff3b4002e84b8f6cc4adbc1a49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada1c40a99620ab595049ba01934b7ca6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ada1c40a99620ab595049ba01934b7ca6">OBSmartsPattern</a> (const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;cp)</td></tr>
<tr class="separator:ada1c40a99620ab595049ba01934b7ca6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a644ca84fee80513682392b90a2841ec6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a644ca84fee80513682392b90a2841ec6">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;cp)</td></tr>
<tr class="separator:a644ca84fee80513682392b90a2841ec6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6891bcec2059a979cff31cd7970a76a3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6891bcec2059a979cff31cd7970a76a3">WriteMapList</a> (std::ostream &amp;)</td></tr>
<tr class="separator:a6891bcec2059a979cff31cd7970a76a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Initialization Methods</div></td></tr>
<tr class="memitem:ab90ce667d180e55f26e7054ed1c6c8b1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init</a> (const char *pattern)</td></tr>
<tr class="separator:ab90ce667d180e55f26e7054ed1c6c8b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e8f0a4d3222451efe27f83bbdb4ff10"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2e8f0a4d3222451efe27f83bbdb4ff10">Init</a> (const std::string &amp;pattern)</td></tr>
<tr class="separator:a2e8f0a4d3222451efe27f83bbdb4ff10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Pattern Properties</div></td></tr>
<tr class="memitem:aa9145386a6abc43611eec23b34702ff2"><td class="memItemLeft" align="right" valign="top">const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa9145386a6abc43611eec23b34702ff2">GetSMARTS</a> () const</td></tr>
<tr class="separator:aa9145386a6abc43611eec23b34702ff2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f769a4a64988a131b80fdda554eda1e"><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a1f769a4a64988a131b80fdda554eda1e">GetSMARTS</a> ()</td></tr>
<tr class="separator:a1f769a4a64988a131b80fdda554eda1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcfbdba215d3b15fbb4b682969943a6e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#abcfbdba215d3b15fbb4b682969943a6e">Empty</a> () const</td></tr>
<tr class="separator:abcfbdba215d3b15fbb4b682969943a6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac532c4b500b1a85ea22217f2c65a70ed"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a> () const</td></tr>
<tr class="separator:ac532c4b500b1a85ea22217f2c65a70ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f0695eb7d6ff6321032d88655ae8d25"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a> () const</td></tr>
<tr class="separator:a2f0695eb7d6ff6321032d88655ae8d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7358c2c15c4c0d88ae2489f586bc8e0b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">NumBonds</a> () const</td></tr>
<tr class="separator:a7358c2c15c4c0d88ae2489f586bc8e0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b86ace2bf7866c375372ff338fe0889"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6b86ace2bf7866c375372ff338fe0889">GetBond</a> (int &amp;src, int &amp;dst, int &amp;ord, int idx)</td></tr>
<tr class="separator:a6b86ace2bf7866c375372ff338fe0889"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac924c0155e56518eeca1d013126eb51a"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac924c0155e56518eeca1d013126eb51a">GetAtomicNum</a> (int idx)</td></tr>
<tr class="separator:ac924c0155e56518eeca1d013126eb51a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2676c751682747829be9ccc966bda59"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#af2676c751682747829be9ccc966bda59">GetCharge</a> (int idx)</td></tr>
<tr class="separator:af2676c751682747829be9ccc966bda59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19be5f1813cac9a3f60152844d7d8af8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a19be5f1813cac9a3f60152844d7d8af8">GetVectorBinding</a> (int idx) const</td></tr>
<tr class="separator:a19be5f1813cac9a3f60152844d7d8af8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Matching methods (SMARTS on a specific OBMol)</div></td></tr>
<tr class="memitem:adda681cbeb3f22e43d35105ad4608b91"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#adda681cbeb3f22e43d35105ad4608b91">Match</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, bool single=false)</td></tr>
<tr class="separator:adda681cbeb3f22e43d35105ad4608b91"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50e050593ba50a04ae537b513693b082"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a50e050593ba50a04ae537b513693b082">Match</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;mlist, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a> mtype=<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312">All</a>) const</td></tr>
<tr class="separator:a50e050593ba50a04ae537b513693b082"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff53239f87209ca4b54bd615fcb1c56d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aff53239f87209ca4b54bd615fcb1c56d">HasMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol) const</td></tr>
<tr class="separator:aff53239f87209ca4b54bd615fcb1c56d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafeef4d5a61d7d6b3c5b6120267359a0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aafeef4d5a61d7d6b3c5b6120267359a0">RestrictedMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;pairs, bool single=false)</td></tr>
<tr class="separator:aafeef4d5a61d7d6b3c5b6120267359a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1626ba77086e16c8ddcdee647937d905"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a1626ba77086e16c8ddcdee647937d905">RestrictedMatch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv, bool single=false)</td></tr>
<tr class="separator:a1626ba77086e16c8ddcdee647937d905"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bf864960d56b1aae66780af7512d5f7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4bf864960d56b1aae66780af7512d5f7">NumMatches</a> () const</td></tr>
<tr class="separator:a4bf864960d56b1aae66780af7512d5f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5633f1fa229ec0ff8fd3991e09d791c2"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList</a> ()</td></tr>
<tr class="separator:a5633f1fa229ec0ff8fd3991e09d791c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548b220ea8c00d0297e81ebc7b31c6d7"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a548b220ea8c00d0297e81ebc7b31c6d7">BeginMList</a> ()</td></tr>
<tr class="separator:a548b220ea8c00d0297e81ebc7b31c6d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7db4777fec63048db41fb890ac0a22ac"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a7db4777fec63048db41fb890ac0a22ac">EndMList</a> ()</td></tr>
<tr class="separator:a7db4777fec63048db41fb890ac0a22ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade3dbfa0989e51224e19b38932b05c1b"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList</a> ()</td></tr>
<tr class="separator:ade3dbfa0989e51224e19b38932b05c1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae13bae2e9cf131660d957622c18280b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ae13bae2e9cf131660d957622c18280b8">ParseSMARTSPattern</a> (void)</td></tr>
<tr class="separator:ae13bae2e9cf131660d957622c18280b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b00a4b53fa768081ef929d86a26992b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">ParseSMARTSPart</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *, int)</td></tr>
<tr class="separator:a4b00a4b53fa768081ef929d86a26992b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41f4684ab61bddd674bda41fff7bac07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a41f4684ab61bddd674bda41fff7bac07">SMARTSError</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>
<tr class="separator:a41f4684ab61bddd674bda41fff7bac07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa944f62d90a19082249f5231412c6bb6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa944f62d90a19082249f5231412c6bb6">ParseSMARTSError</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr class="separator:aa944f62d90a19082249f5231412c6bb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47075ee8f542860bdbe57689bf785a4c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">ParseSimpleAtomPrimitive</a> (void)</td></tr>
<tr class="separator:a47075ee8f542860bdbe57689bf785a4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37c206172f1bf481c71af0985189e3fb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">ParseComplexAtomPrimitive</a> (void)</td></tr>
<tr class="separator:a37c206172f1bf481c71af0985189e3fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a231ab7f84bd99606983b4edee4523324"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">ParseAtomExpr</a> (int level)</td></tr>
<tr class="separator:a231ab7f84bd99606983b4edee4523324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad911e5f6baeec860288054e600b0d8e7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad911e5f6baeec860288054e600b0d8e7">ParseBondPrimitive</a> (void)</td></tr>
<tr class="separator:ad911e5f6baeec860288054e600b0d8e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f7fd25ffc9470ac5e86db033562b63c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">ParseBondExpr</a> (int level)</td></tr>
<tr class="separator:a6f7fd25ffc9470ac5e86db033562b63c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc0ac2e8af85a3076ef6fa56d353badc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#acc0ac2e8af85a3076ef6fa56d353badc">ParseSMARTSString</a> (char *ptr)</td></tr>
<tr class="separator:acc0ac2e8af85a3076ef6fa56d353badc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca59a47f4b9cd97f80be10a10239448d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aca59a47f4b9cd97f80be10a10239448d">ParseSMARTSRecord</a> (char *ptr)</td></tr>
<tr class="separator:aca59a47f4b9cd97f80be10a10239448d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac072cb8c2da0204b966173eecb83acfa"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac072cb8c2da0204b966173eecb83acfa">GetVectorBinding</a> ()</td></tr>
<tr class="separator:ac072cb8c2da0204b966173eecb83acfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5ed3fa8cd8081a98063409742f5326e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">SMARTSParser</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="structOpenBabel_1_1ParseState.shtml">ParseState</a> *stat, int prev, int part)</td></tr>
<tr class="separator:ac5ed3fa8cd8081a98063409742f5326e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a36fb3feb1132393275cf6164d3ccf2a9"><td class="memItemLeft" align="right" valign="top">OBSmartsPrivate *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a36fb3feb1132393275cf6164d3ccf2a9">_d</a></td></tr>
<tr class="separator:a36fb3feb1132393275cf6164d3ccf2a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9aa91437a607c7d33353f38857add180"><td class="memItemLeft" align="right" valign="top">std::vector&lt; bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a9aa91437a607c7d33353f38857add180">_growbond</a></td></tr>
<tr class="separator:a9aa91437a607c7d33353f38857add180"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4d28e672d513c538ae9ff92e409bece"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::vector&lt; int &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab4d28e672d513c538ae9ff92e409bece">_mlist</a></td></tr>
<tr class="separator:ab4d28e672d513c538ae9ff92e409bece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad43f81cd2cc637e810b38c7686d9917d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad43f81cd2cc637e810b38c7686d9917d">_pat</a></td></tr>
<tr class="separator:ad43f81cd2cc637e810b38c7686d9917d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a433559ab344e4266e3d109bce29ee417"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a433559ab344e4266e3d109bce29ee417">_str</a></td></tr>
<tr class="separator:a433559ab344e4266e3d109bce29ee417"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af076ed3307ccc419f46ed857bb321a2f"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#af076ed3307ccc419f46ed857bb321a2f">_buffer</a></td></tr>
<tr class="separator:af076ed3307ccc419f46ed857bb321a2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24f5f7e6d2d4aeccecabdbbf89719bc5"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a24f5f7e6d2d4aeccecabdbbf89719bc5">LexPtr</a></td></tr>
<tr class="separator:a24f5f7e6d2d4aeccecabdbbf89719bc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2860b525fbfe4f29b416c37f8b13f561"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2860b525fbfe4f29b416c37f8b13f561">MainPtr</a></td></tr>
<tr class="separator:a2860b525fbfe4f29b416c37f8b13f561"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>SMARTS (SMiles ARbitrary Target Specification) substructure searching. </p>
<p>Substructure search is an incredibly useful tool in the context of a small molecule programming library. Having an efficient substructure search engine reduces the amount of hard code needed for molecule perception, as well as increases the flexibility of certain operations. For instance, atom typing can be easily performed based on hard coded rules of element type and bond orders (or hybridization). Alternatively, atom typing can also be done by matching a set of substructure rules read at run time. In the latter case customization based on application (such as changing the pH) becomes a facile operation. Fortunately for Open Babel and its users, Roger Sayle donated a SMARTS parser which became the basis for SMARTS matching in Open Babel.</p>
<p>For more information on the SMARTS support in Open Babel, see the wiki page: <a href="http://openbabel.org/wiki/SMARTS">http://openbabel.org/wiki/SMARTS</a></p>
<p>The SMARTS matcher, or <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching. ">OBSmartsPattern</a>, is a separate object which can match patterns in the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> class. The following code demonstrates how to use the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching. ">OBSmartsPattern</a> class: </p><div class="fragment"><div class="line">OBMol mol;</div><div class="line">...</div><div class="line">OBSmartsPattern sp;</div><div class="line">sp.Init(<span class="stringliteral">&quot;CC&quot;</span>);</div><div class="line">sp.Match(mol);</div><div class="line">vector&lt;vector&lt;int&gt; &gt; maplist;</div><div class="line">maplist = sp.GetMapList();</div><div class="line"><span class="comment">//or maplist = sp.GetUMapList();</span></div><div class="line"><span class="comment">//print out the results</span></div><div class="line">vector&lt;vector&lt;int&gt; &gt;::iterator i;</div><div class="line">vector&lt;int&gt;::iterator j;</div><div class="line"><span class="keywordflow">for</span> (i = maplist.begin();i != maplist.end();++i)</div><div class="line">{</div><div class="line"><span class="keywordflow">for</span> (j = i-&gt;begin();j != i-&gt;end();++j)</div><div class="line">cout &lt;&lt; j &lt;&lt; <span class="stringliteral">&#39; `;</span></div><div class="line"><span class="stringliteral">cout &lt;&lt; endl;</span></div><div class="line"><span class="stringliteral">}</span></div></div><!-- fragment --><p>The preceding code reads in a molecule, initializes a SMARTS pattern of two single-bonded carbons, and locates all instances of the pattern in the molecule. Note that calling the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#adda681cbeb3f22e43d35105ad4608b91">Match()</a> function does not return the results of the substructure match. The results from a match are stored in the <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml" title="SMARTS (SMiles ARbitrary Target Specification) substructure searching. ">OBSmartsPattern</a>, and a call to <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> or <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> must be made to extract the results. The function <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> returns all matches of a particular pattern while <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> returns only the unique matches. For instance, the pattern [OD1]~C~[OD1] describes a carboxylate group. This pattern will match both atom number permutations of the carboxylate, and if <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> is called, both matches will be returned. If <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> is called only unique matches of the pattern will be returned. A unique match is defined as one which does not cover the identical atoms that a previous match has covered. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a747637046be33d7273262104aad8069d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a747637046be33d7273262104aad8069d">&sect;&nbsp;</a></span>MatchType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312"></a>All&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258"></a>Single&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a747637046be33d7273262104aad8069daca4bfb16b2e7dc497ce44753a75a3a36"></a>AllUnique&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aa930ba6620356e94683a1d5d4a4a25e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa930ba6620356e94683a1d5d4a4a25e3">&sect;&nbsp;</a></span>OBSmartsPattern() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a45c009ff3b4002e84b8f6cc4adbc1a49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45c009ff3b4002e84b8f6cc4adbc1a49">&sect;&nbsp;</a></span>~OBSmartsPattern()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ada1c40a99620ab595049ba01934b7ca6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada1c40a99620ab595049ba01934b7ca6">&sect;&nbsp;</a></span>OBSmartsPattern() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&#160;</td>
          <td class="paramname"><em>cp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae13bae2e9cf131660d957622c18280b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae13bae2e9cf131660d957622c18280b8">&sect;&nbsp;</a></span>ParseSMARTSPattern()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSPattern </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4b00a4b53fa768081ef929d86a26992b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b00a4b53fa768081ef929d86a26992b">&sect;&nbsp;</a></span>ParseSMARTSPart()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSPart </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>part</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a41f4684ab61bddd674bda41fff7bac07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41f4684ab61bddd674bda41fff7bac07">&sect;&nbsp;</a></span>SMARTSError()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * SMARTSError </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa944f62d90a19082249f5231412c6bb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa944f62d90a19082249f5231412c6bb6">&sect;&nbsp;</a></span>ParseSMARTSError()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSError </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a47075ee8f542860bdbe57689bf785a4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47075ee8f542860bdbe57689bf785a4c">&sect;&nbsp;</a></span>ParseSimpleAtomPrimitive()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * ParseSimpleAtomPrimitive </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a37c206172f1bf481c71af0985189e3fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37c206172f1bf481c71af0985189e3fb">&sect;&nbsp;</a></span>ParseComplexAtomPrimitive()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * ParseComplexAtomPrimitive </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a231ab7f84bd99606983b4edee4523324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a231ab7f84bd99606983b4edee4523324">&sect;&nbsp;</a></span>ParseAtomExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> * ParseAtomExpr </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad911e5f6baeec860288054e600b0d8e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad911e5f6baeec860288054e600b0d8e7">&sect;&nbsp;</a></span>ParseBondPrimitive()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> * ParseBondPrimitive </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6f7fd25ffc9470ac5e86db033562b63c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f7fd25ffc9470ac5e86db033562b63c">&sect;&nbsp;</a></span>ParseBondExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> * ParseBondExpr </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acc0ac2e8af85a3076ef6fa56d353badc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc0ac2e8af85a3076ef6fa56d353badc">&sect;&nbsp;</a></span>ParseSMARTSString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSString </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aca59a47f4b9cd97f80be10a10239448d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca59a47f4b9cd97f80be10a10239448d">&sect;&nbsp;</a></span>ParseSMARTSRecord()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * ParseSMARTSRecord </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac072cb8c2da0204b966173eecb83acfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac072cb8c2da0204b966173eecb83acfa">&sect;&nbsp;</a></span>GetVectorBinding() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetVectorBinding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac5ed3fa8cd8081a98063409742f5326e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5ed3fa8cd8081a98063409742f5326e">&sect;&nbsp;</a></span>SMARTSParser()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * SMARTSParser </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1ParseState.shtml">ParseState</a> *&#160;</td>
          <td class="paramname"><em>stat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>part</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a644ca84fee80513682392b90a2841ec6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a644ca84fee80513682392b90a2841ec6">&sect;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> &amp;&#160;</td>
          <td class="paramname"><em>cp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab90ce667d180e55f26e7054ed1c6c8b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab90ce667d180e55f26e7054ed1c6c8b1">&sect;&nbsp;</a></span>Init() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Init </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pattern</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Parse the <code>pattern</code> SMARTS string. </p><dl class="section return"><dt>Returns</dt><dd>Whether the pattern is a valid SMARTS expression </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1patty.shtml#a55dcef5a39d6765d545e79cff377d332">patty::assign_rules()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">OBRotorRule::OBRotorRule()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBBondTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAtomTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAromaticTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBRingTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>, and <a class="el" href="classOpenBabel_1_1patty.shtml#ad52e9084efab7e27fbe7fe394612ca57">patty::read_rules()</a>.</p>

</div>
</div>
<a id="a2e8f0a4d3222451efe27f83bbdb4ff10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e8f0a4d3222451efe27f83bbdb4ff10">&sect;&nbsp;</a></span>Init() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Init </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>pattern</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Parse the <code>pattern</code> SMARTS string. </p><dl class="section return"><dt>Returns</dt><dd>Whether the pattern is a valid SMARTS expression </dd></dl>

</div>
</div>
<a id="aa9145386a6abc43611eec23b34702ff2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa9145386a6abc43611eec23b34702ff2">&sect;&nbsp;</a></span>GetSMARTS() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::string&amp; GetSMARTS </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the SMARTS string which is currently used </dd></dl>

</div>
</div>
<a id="a1f769a4a64988a131b80fdda554eda1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f769a4a64988a131b80fdda554eda1e">&sect;&nbsp;</a></span>GetSMARTS() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string&amp; GetSMARTS </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the SMARTS string which is currently used </dd></dl>

</div>
</div>
<a id="abcfbdba215d3b15fbb4b682969943a6e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcfbdba215d3b15fbb4b682969943a6e">&sect;&nbsp;</a></span>Empty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>If the SMARTS pattern is an empty expression (e.g., invalid) </dd></dl>

</div>
</div>
<a id="ac532c4b500b1a85ea22217f2c65a70ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac532c4b500b1a85ea22217f2c65a70ed">&sect;&nbsp;</a></span>IsValid()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsValid </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>If the SMARTS pattern is a valid expression </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorRule.shtml#a9dcb9b43a3d0fa9003d4c1c9d921f6b2">OBRotorRule::IsValid()</a>.</p>

</div>
</div>
<a id="a2f0695eb7d6ff6321032d88655ae8d25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f0695eb7d6ff6321032d88655ae8d25">&sect;&nbsp;</a></span>NumAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of atoms in the SMARTS pattern </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>.</p>

</div>
</div>
<a id="a7358c2c15c4c0d88ae2489f586bc8e0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7358c2c15c4c0d88ae2489f586bc8e0b">&sect;&nbsp;</a></span>NumBonds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of bonds in the SMARTS pattern </dd></dl>

</div>
</div>
<a id="a6b86ace2bf7866c375372ff338fe0889"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b86ace2bf7866c375372ff338fe0889">&sect;&nbsp;</a></span>GetBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetBond </td>
          <td>(</td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>ord</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Access the bond <code>idx</code> in the internal pattern </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">src</td><td>The index of the beginning atom </td></tr>
    <tr><td class="paramname">dst</td><td>The index of the end atom </td></tr>
    <tr><td class="paramname">ord</td><td>The bond order of this bond </td></tr>
    <tr><td class="paramname">idx</td><td>The index of the bond in the SMARTS pattern </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ac924c0155e56518eeca1d013126eb51a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac924c0155e56518eeca1d013126eb51a">&sect;&nbsp;</a></span>GetAtomicNum()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetAtomicNum </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the atomic number of the atom <code>idx</code> in the internal pattern </dd></dl>

</div>
</div>
<a id="af2676c751682747829be9ccc966bda59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2676c751682747829be9ccc966bda59">&sect;&nbsp;</a></span>GetCharge()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetCharge </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the formal charge of the atom <code>idx</code> in the internal pattern </dd></dl>

</div>
</div>
<a id="a19be5f1813cac9a3f60152844d7d8af8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19be5f1813cac9a3f60152844d7d8af8">&sect;&nbsp;</a></span>GetVectorBinding() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetVectorBinding </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector binding of the atom <code>idx</code> in the internal pattern </dd></dl>

</div>
</div>
<a id="adda681cbeb3f22e43d35105ad4608b91"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adda681cbeb3f22e43d35105ad4608b91">&sect;&nbsp;</a></span>Match() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Match </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>single</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Perform SMARTS matching for the pattern specified using <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init()</a>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule to use for matching </td></tr>
    <tr><td class="paramname">single</td><td>Whether only a single match is required (faster). Default is false. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether matches occurred </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="a50e050593ba50a04ae537b513693b082"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50e050593ba50a04ae537b513693b082">&sect;&nbsp;</a></span>Match() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Match </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>mlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a>&#160;</td>
          <td class="paramname"><em>mtype</em> = <code><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da54991d225c58ce0af43461d4e9a82312">All</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Perform SMARTS matching for the pattern specified using <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init()</a>. This version is (more) thread safe. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule to use for matching </td></tr>
    <tr><td class="paramname">mlist</td><td>The resulting match list </td></tr>
    <tr><td class="paramname">mtype</td><td>The match type to use. Default is All. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether matches occurred </dd></dl>

</div>
</div>
<a id="aff53239f87209ca4b54bd615fcb1c56d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aff53239f87209ca4b54bd615fcb1c56d">&sect;&nbsp;</a></span>HasMatch()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasMatch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Thread safe check for any SMARTS match </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule to use for matching </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether there exists any match </dd></dl>

</div>
</div>
<a id="aafeef4d5a61d7d6b3c5b6120267359a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafeef4d5a61d7d6b3c5b6120267359a0">&sect;&nbsp;</a></span>RestrictedMatch() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RestrictedMatch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>pairs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>single</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>.</p>

</div>
</div>
<a id="a1626ba77086e16c8ddcdee647937d905"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1626ba77086e16c8ddcdee647937d905">&sect;&nbsp;</a></span>RestrictedMatch() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool RestrictedMatch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>single</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4bf864960d56b1aae66780af7512d5f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bf864960d56b1aae66780af7512d5f7">&sect;&nbsp;</a></span>NumMatches()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumMatches </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of non-unique SMARTS matches To get the number of unique SMARTS matches, query <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a>-&gt;size() </dd></dl>

</div>
</div>
<a id="a5633f1fa229ec0ff8fd3991e09d791c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5633f1fa229ec0ff8fd3991e09d791c2">&sect;&nbsp;</a></span>GetMapList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;&amp; GetMapList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the entire list of non-unique matches for this pattern </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>.</p>

</div>
</div>
<a id="a548b220ea8c00d0297e81ebc7b31c6d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a548b220ea8c00d0297e81ebc7b31c6d7">&sect;&nbsp;</a></span>BeginMList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;::iterator BeginMList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An iterator over the (non-unique) match list, starting at the beginning </dd></dl>

</div>
</div>
<a id="a7db4777fec63048db41fb890ac0a22ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7db4777fec63048db41fb890ac0a22ac">&sect;&nbsp;</a></span>EndMList()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt;::iterator EndMList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An iterator over the non-unique match list, set to the end </dd></dl>

</div>
</div>
<a id="ade3dbfa0989e51224e19b38932b05c1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade3dbfa0989e51224e19b38932b05c1b">&sect;&nbsp;</a></span>GetUMapList()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::vector&lt; int &gt; &gt; &amp; GetUMapList </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the entire list of unique matches for this pattern A unique match is defined as one which does not cover the identical atoms that a previous match has covered.</dd></dl>
<p>For instance, the pattern [OD1]~C~[OD1] describes a carboxylate group. This pattern will match both atom number permutations of the carboxylate, and if <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList()</a> is called, both matches will be returned. If <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ade3dbfa0989e51224e19b38932b05c1b">GetUMapList()</a> is called only unique matches of the pattern will be returned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>.</p>

</div>
</div>
<a id="a6891bcec2059a979cff31cd7970a76a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6891bcec2059a979cff31cd7970a76a3">&sect;&nbsp;</a></span>WriteMapList()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void WriteMapList </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Debugging &ndash; write a list of matches to the output stream. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a36fb3feb1132393275cf6164d3ccf2a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36fb3feb1132393275cf6164d3ccf2a9">&sect;&nbsp;</a></span>_d</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">OBSmartsPrivate* _d</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Internal data storage for future expansion. </p>

</div>
</div>
<a id="a9aa91437a607c7d33353f38857add180"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9aa91437a607c7d33353f38857add180">&sect;&nbsp;</a></span>_growbond</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;bool&gt; _growbond</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000065">Deprecated:</a></b></dt><dd>(Not used) </dd></dl>

</div>
</div>
<a id="ab4d28e672d513c538ae9ff92e409bece"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4d28e672d513c538ae9ff92e409bece">&sect;&nbsp;</a></span>_mlist</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::vector&lt;int&gt; &gt; _mlist</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The list of matches. </p>

</div>
</div>
<a id="ad43f81cd2cc637e810b38c7686d9917d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad43f81cd2cc637e810b38c7686d9917d">&sect;&nbsp;</a></span>_pat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* _pat</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The parsed SMARTS pattern. </p>

</div>
</div>
<a id="a433559ab344e4266e3d109bce29ee417"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a433559ab344e4266e3d109bce29ee417">&sect;&nbsp;</a></span>_str</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _str</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The string of the SMARTS expression. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a644ca84fee80513682392b90a2841ec6">OBSmartsPattern::operator=()</a>.</p>

</div>
</div>
<a id="af076ed3307ccc419f46ed857bb321a2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af076ed3307ccc419f46ed857bb321a2f">&sect;&nbsp;</a></span>_buffer</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char* _buffer</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a24f5f7e6d2d4aeccecabdbbf89719bc5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24f5f7e6d2d4aeccecabdbbf89719bc5">&sect;&nbsp;</a></span>LexPtr</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char* LexPtr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a2860b525fbfe4f29b416c37f8b13f561"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2860b525fbfe4f29b416c37f8b13f561">&sect;&nbsp;</a></span>MainPtr</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char* MainPtr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="parsmart_8h_source.shtml">parsmart.h</a></li>
<li><a class="el" href="parsmart_8cpp.shtml">parsmart.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
