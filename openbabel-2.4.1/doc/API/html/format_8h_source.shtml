<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>format.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">format.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="format_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">obconversion.cpp -  Declarations for OBFormat</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2004-2007 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2005-2007 by Geoffrey Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef OB_FORMAT_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define OB_FORMAT_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;{</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keyword">class </span>OBBase;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keyword">class </span>OBConversion;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="format_8h.shtml#a5d766d529e097f852406cf0c434e54e0">   31</a></span>&#160;<span class="preprocessor">#define NOTREADABLE     0x01</span></div><div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="format_8h.shtml#aec13538a29f6a7d630b3a59ccce0e03c">   32</a></span>&#160;<span class="preprocessor">#define READONEONLY     0x02</span></div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="format_8h.shtml#a95479d1fb64936c936077e47356bf6e2">   33</a></span>&#160;<span class="preprocessor">#define READBINARY      0x04</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="format_8h.shtml#a0e12fffdb9815dc9bb44cb0635667146">   34</a></span>&#160;<span class="preprocessor">#define ZEROATOMSOK     0x08</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="format_8h.shtml#a201c57b6b8e95558ead652e391d2e157">   35</a></span>&#160;<span class="preprocessor">#define NOTWRITABLE     0x10</span></div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="format_8h.shtml#ab95246c97f4ade91aee102631b6b8666">   36</a></span>&#160;<span class="preprocessor">#define WRITEONEONLY    0x20</span></div><div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="format_8h.shtml#a655ed7589181707a2c6d18d7777cb1c6">   37</a></span>&#160;<span class="preprocessor">#define WRITEBINARY     0x40</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="format_8h.shtml#ac3cad6ca6aadd6aa9eccfc793e01b30e">   38</a></span>&#160;<span class="preprocessor">#define READXML         0x80</span></div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="format_8h.shtml#ae90fae09f8caa6eaf7c3706f3e7cb87c">   39</a></span>&#160;<span class="preprocessor">#define DEPICTION2D     0x100</span></div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="format_8h.shtml#a114620de287b71102355c29edc4b0115">   40</a></span>&#160;<span class="preprocessor">#define DEFAULTFORMAT   0x4000</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="comment">// class introduction in obconversion.cpp</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml">   44</a></span>&#160;<span class="keyword">class </span>OBCONV <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="comment">//Macro to include functions to handle plugin operations</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <a class="code" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a11590b0840c8360ab4c3b62476d49863">   52</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a11590b0840c8360ab4c3b62476d49863">OBFormat</a>(){}</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">   54</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a>(){ <span class="keywordflow">return</span> <span class="stringliteral">&quot;formats&quot;</span>; }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a1e309febfaef70cc3c8d98afc1540931">   61</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a1e309febfaef70cc3c8d98afc1540931">ReadMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;HIER&quot;</span> &lt;&lt; std::endl;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid input format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a6044ced825a2a83b7cfe7c45eea63c99">   70</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a6044ced825a2a83b7cfe7c45eea63c99">ReadChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid input format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a663171ec9788e2d1621d374848b3888b">   79</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a663171ec9788e2d1621d374848b3888b">WriteMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*pOb*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid output format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a5ea5d9623cd9594549a52e116caecaa2">   87</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a5ea5d9623cd9594549a52e116caecaa2">WriteChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      { std::cerr &lt;&lt; <span class="stringliteral">&quot;Not a valid output format&quot;</span>; <span class="keywordflow">return</span> <span class="keyword">false</span>;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description()=0;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* TargetClassDescription();</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> std::type_info&amp; GetType();</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a1d3a8785a0ad0c85b98fa3406a64d50f">  109</a></span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a>() { <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>; }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a0e10219d8aedefa78ef16fc7fded85ec">  112</a></span>&#160;    <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a0e10219d8aedefa78ef16fc7fded85ec">GetMIMEType</a>() { <span class="keywordflow">return</span> pMime; }</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a94a94537cc5ba96b1876db1b612b91a3">  119</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a94a94537cc5ba96b1876db1b612b91a3">Flags</a>() { <span class="keywordflow">return</span> 0;};</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a1f0ee7ba19cc62b53a7ee06fa4f91509">  124</a></span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a1f0ee7ba19cc62b53a7ee06fa4f91509">SkipObjects</a>(<span class="keywordtype">int</span> <span class="comment">/*n*/</span>, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <span class="comment">/*pConv*/</span>)</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="keywordflow">return</span> 0; <span class="comment">//shows not implemented in the format class</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      };</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">  134</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* <a class="code" href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a>()</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">return</span> NULL; <span class="comment">//shows not implemented in the format class</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="comment">//New functions since OBFormat is derived from OBPlugin</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="comment">//\brief Called from, and an alternative to, OBConversion::RegisterFormat();</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">int</span> RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp; txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">static</span> <a class="code" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;FormatsMIMEMap()</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      <span class="keyword">static</span> <a class="code" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> m;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="keywordflow">return</span> m;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* pMime;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">/* Functions provided by the MAKE_PLUGIN macro</span></div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment">  Not currently used for formats</span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  OBFormat(const char* ID, bool IsDefault=false);</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">  static OBFormat* FindType(const char* ID);</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">*/</span>};</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;}<span class="comment">//namespace</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a0924b1a442d147fa036bff23a4cf04ef"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">OpenBabel::OBFormat::MakeNewInstance</a></div><div class="ttdeci">virtual OBFormat * MakeNewInstance()</div><div class="ttdef"><b>Definition:</b> format.h:134</div></div>
<div class="ttc" id="group__plugins_shtml_ga0fd3c807ed3341c33070c93b14739bc8"><div class="ttname"><a href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">OpenBabel::OBPlugin::PluginMapType</a></div><div class="ttdeci">std::map&lt; const char *, OBPlugin *, CharPtrLess &gt; PluginMapType</div><div class="ttdef"><b>Definition:</b> plugin.h:59</div></div>
<div class="ttc" id="classOpenBabel_1_1OBPlugin_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBPlugin.shtml">OpenBabel::OBPlugin</a></div><div class="ttdoc">Base class for all types of dynamic classes discovered at runtime. </div><div class="ttdef"><b>Definition:</b> plugin.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml">OpenBabel::OBConversion</a></div><div class="ttdoc">Class to convert from one format to another. </div><div class="ttdef"><b>Definition:</b> obconversion.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a1d3a8785a0ad0c85b98fa3406a64d50f"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a1d3a8785a0ad0c85b98fa3406a64d50f">OpenBabel::OBFormat::SpecificationURL</a></div><div class="ttdeci">virtual const char * SpecificationURL()</div><div class="ttdoc">Web address where the format is defined. </div><div class="ttdef"><b>Definition:</b> format.h:109</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a5ea5d9623cd9594549a52e116caecaa2"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a5ea5d9623cd9594549a52e116caecaa2">OpenBabel::OBFormat::WriteChemObject</a></div><div class="ttdeci">virtual bool WriteChemObject(OBConversion *)</div><div class="ttdoc">The &quot;Convert&quot; interface Write function. </div><div class="ttdef"><b>Definition:</b> format.h:87</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a6044ced825a2a83b7cfe7c45eea63c99"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a6044ced825a2a83b7cfe7c45eea63c99">OpenBabel::OBFormat::ReadChemObject</a></div><div class="ttdeci">virtual bool ReadChemObject(OBConversion *)</div><div class="ttdoc">The &quot;Convert&quot; interface Read function. </div><div class="ttdef"><b>Definition:</b> format.h:70</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a1f0ee7ba19cc62b53a7ee06fa4f91509"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a1f0ee7ba19cc62b53a7ee06fa4f91509">OpenBabel::OBFormat::SkipObjects</a></div><div class="ttdeci">virtual int SkipObjects(int, OBConversion *)</div><div class="ttdoc">Skip past first n objects in input stream (or current one with n=0) </div><div class="ttdef"><b>Definition:</b> format.h:124</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a1e309febfaef70cc3c8d98afc1540931"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a1e309febfaef70cc3c8d98afc1540931">OpenBabel::OBFormat::ReadMolecule</a></div><div class="ttdeci">virtual bool ReadMolecule(OBBase *, OBConversion *)</div><div class="ttdoc">The &quot;API&quot; interface Read function. </div><div class="ttdef"><b>Definition:</b> format.h:61</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a0e10219d8aedefa78ef16fc7fded85ec"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a0e10219d8aedefa78ef16fc7fded85ec">OpenBabel::OBFormat::GetMIMEType</a></div><div class="ttdeci">virtual const char * GetMIMEType()</div><div class="ttdoc">Chemical MIME type associated with this file type (if any) </div><div class="ttdef"><b>Definition:</b> format.h:112</div></div>
<div class="ttc" id="group__plugins_shtml_gadd740e2a386b7db3e1f0e271cbe8a3f1"><div class="ttname"><a href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a></div><div class="ttdeci">#define MAKE_PLUGIN(BaseClass)</div><div class="ttdef"><b>Definition:</b> plugin.h:195</div></div>
<div class="ttc" id="plugin_8h_shtml"><div class="ttname"><a href="plugin_8h.shtml">plugin.h</a></div><div class="ttdoc">Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a94a94537cc5ba96b1876db1b612b91a3"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a94a94537cc5ba96b1876db1b612b91a3">OpenBabel::OBFormat::Flags</a></div><div class="ttdeci">virtual unsigned int Flags()</div><div class="ttdoc">Decribes the capabilities of the format (Read only etc.) </div><div class="ttdef"><b>Definition:</b> format.h:119</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a45db88b29eb37e9dd105bf4032e421d2"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">OpenBabel::OBFormat::TypeID</a></div><div class="ttdeci">const char * TypeID()</div><div class="ttdoc">Redefined by each plugin type: &quot;formats&quot;, &quot;fingerprints&quot;, etc. </div><div class="ttdef"><b>Definition:</b> format.h:54</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a11590b0840c8360ab4c3b62476d49863"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a11590b0840c8360ab4c3b62476d49863">OpenBabel::OBFormat::OBFormat</a></div><div class="ttdeci">OBFormat()</div><div class="ttdoc">Default constructor. Registration via RegisterFormat(), not via constructor as in other plugins...</div><div class="ttdef"><b>Definition:</b> format.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml">OpenBabel::OBFormat</a></div><div class="ttdoc">Base class for file formats. </div><div class="ttdef"><b>Definition:</b> format.h:44</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml_a663171ec9788e2d1621d374848b3888b"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml#a663171ec9788e2d1621d374848b3888b">OpenBabel::OBFormat::WriteMolecule</a></div><div class="ttdeci">virtual bool WriteMolecule(OBBase *, OBConversion *)</div><div class="ttdoc">The &quot;API&quot; interface Write function. </div><div class="ttdef"><b>Definition:</b> format.h:79</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:28 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
