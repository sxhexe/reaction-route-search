<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>vector3 Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classOpenBabel_1_1vector3-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">vector3 Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="vector3_8h_source.shtml">openbabel/math/vector3.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for vector3:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1vector3.png" usemap="#vector3_map" alt=""/>
  <map id="vector3_map" name="vector3_map">
<area href="classOpenBabel_1_1transform3d.shtml" title="Handle 3D transformations, such as space group definitions. " alt="transform3d" shape="rect" coords="0,56,79,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a3c0e5d79c07393e51572c2594f762b27"><td class="memItemLeft" align="right" valign="top">typedef double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">iterator</a></td></tr>
<tr class="separator:a3c0e5d79c07393e51572c2594f762b27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cd067fe0c3e483dd5377aede39556e1"><td class="memItemLeft" align="right" valign="top">typedef const double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">const_iterator</a></td></tr>
<tr class="separator:a6cd067fe0c3e483dd5377aede39556e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad319fc54a93a2c7058c70e40428ed2e2"><td class="memItemLeft" align="right" valign="top">typedef std::ptrdiff_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad319fc54a93a2c7058c70e40428ed2e2">difference_type</a></td></tr>
<tr class="separator:ad319fc54a93a2c7058c70e40428ed2e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a28d983d20c9b3b395da7854fafae20f2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a28d983d20c9b3b395da7854fafae20f2">vector3</a> (const double inX=0.0, const double inY=0.0, const double inZ=0.0)</td></tr>
<tr class="separator:a28d983d20c9b3b395da7854fafae20f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b2f7f06d9fa0554248321887d4fcfc4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a8b2f7f06d9fa0554248321887d4fcfc4">vector3</a> (double inV[3])</td></tr>
<tr class="separator:a8b2f7f06d9fa0554248321887d4fcfc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe84fe9749e73b1027baddb505fa189a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#abe84fe9749e73b1027baddb505fa189a">vector3</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:abe84fe9749e73b1027baddb505fa189a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a059160a3da371ed0cfd1563a1e8cd2fb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a059160a3da371ed0cfd1563a1e8cd2fb">~vector3</a> ()</td></tr>
<tr class="separator:a059160a3da371ed0cfd1563a1e8cd2fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad69bd11391be1a1dba5c8202259664f8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad69bd11391be1a1dba5c8202259664f8">begin</a> ()</td></tr>
<tr class="separator:ad69bd11391be1a1dba5c8202259664f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acad38d52497a975bfb6f2f6acd76631f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#acad38d52497a975bfb6f2f6acd76631f">end</a> ()</td></tr>
<tr class="separator:acad38d52497a975bfb6f2f6acd76631f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29305669b60ca1680752e2fc3592ba99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a29305669b60ca1680752e2fc3592ba99">begin</a> () const</td></tr>
<tr class="separator:a29305669b60ca1680752e2fc3592ba99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accf9a4bd0c34d4a5f6a7dab66ea10cdc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">end</a> () const</td></tr>
<tr class="separator:accf9a4bd0c34d4a5f6a7dab66ea10cdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685349dbc9e2d99a19616763811cbfba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a685349dbc9e2d99a19616763811cbfba">Set</a> (const double inX, const double inY, const double inZ)</td></tr>
<tr class="separator:a685349dbc9e2d99a19616763811cbfba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfcb3c965a12bd0385f1fe1db3f7d3ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#abfcb3c965a12bd0385f1fe1db3f7d3ac">Set</a> (const double *c)</td></tr>
<tr class="separator:abfcb3c965a12bd0385f1fe1db3f7d3ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7cbeb9d9ec3d0d2714733d8bb4596eb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab7cbeb9d9ec3d0d2714733d8bb4596eb">SetX</a> (const double inX)</td></tr>
<tr class="separator:ab7cbeb9d9ec3d0d2714733d8bb4596eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a385f2320a91b6c182ecb45d16ffc6332"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a385f2320a91b6c182ecb45d16ffc6332">SetY</a> (const double inY)</td></tr>
<tr class="separator:a385f2320a91b6c182ecb45d16ffc6332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1ac74f918d5ac48cb47426ca9ba2c09"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad1ac74f918d5ac48cb47426ca9ba2c09">SetZ</a> (const double inZ)</td></tr>
<tr class="separator:ad1ac74f918d5ac48cb47426ca9ba2c09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac302cda48a4a650a3f8cf1dfe9a0cb1e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ac302cda48a4a650a3f8cf1dfe9a0cb1e">GetX</a> () const</td></tr>
<tr class="separator:ac302cda48a4a650a3f8cf1dfe9a0cb1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c302e1e24ca25bc362746dc51c22510"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a2c302e1e24ca25bc362746dc51c22510">GetY</a> () const</td></tr>
<tr class="separator:a2c302e1e24ca25bc362746dc51c22510"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e4abcd59d8d2c945e851ed92593826"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad5e4abcd59d8d2c945e851ed92593826">GetZ</a> () const</td></tr>
<tr class="separator:ad5e4abcd59d8d2c945e851ed92593826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9345053a16ce83e130dc098fddf9af7a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a9345053a16ce83e130dc098fddf9af7a">Get</a> (double *c)</td></tr>
<tr class="separator:a9345053a16ce83e130dc098fddf9af7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a680fe1fcfb21fa1bdc08927677b024a8"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a680fe1fcfb21fa1bdc08927677b024a8">operator[]</a> (unsigned int i) const</td></tr>
<tr class="separator:a680fe1fcfb21fa1bdc08927677b024a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2eee719d3706b71968f894c1179f4bb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad2eee719d3706b71968f894c1179f4bb">operator=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:ad2eee719d3706b71968f894c1179f4bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1eaa5b3b24423c15c8deb71a0c079707"><td class="memItemLeft" align="right" valign="top">const double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a1eaa5b3b24423c15c8deb71a0c079707">AsArray</a> () const</td></tr>
<tr class="separator:a1eaa5b3b24423c15c8deb71a0c079707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0541be714a6305dd3295655eea746d9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ae0541be714a6305dd3295655eea746d9">operator+=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:ae0541be714a6305dd3295655eea746d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4b4980ccea5aa5184928ce40cf1acee"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ac4b4980ccea5aa5184928ce40cf1acee">operator-=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:ac4b4980ccea5aa5184928ce40cf1acee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a506884b50b92a33e92029b43f9b75bc9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a506884b50b92a33e92029b43f9b75bc9">operator+=</a> (const double *f)</td></tr>
<tr class="separator:a506884b50b92a33e92029b43f9b75bc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a322635480250ba0c08aa47a125eda3dd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a322635480250ba0c08aa47a125eda3dd">operator-=</a> (const double *f)</td></tr>
<tr class="separator:a322635480250ba0c08aa47a125eda3dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a849fa346bb458a37710cdb8a4f5c085f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a849fa346bb458a37710cdb8a4f5c085f">operator*=</a> (const double &amp;c)</td></tr>
<tr class="separator:a849fa346bb458a37710cdb8a4f5c085f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5a7b18eeff279e5d850a9075d09f8a5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab5a7b18eeff279e5d850a9075d09f8a5">operator/=</a> (const double &amp;c)</td></tr>
<tr class="separator:ab5a7b18eeff279e5d850a9075d09f8a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab879d8d94111c53fd9b9013fb9345734"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">operator*=</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;)</td></tr>
<tr class="separator:ab879d8d94111c53fd9b9013fb9345734"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2f4c0b08630beda575c1c8697b8fece"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#af2f4c0b08630beda575c1c8697b8fece">randomUnitVector</a> (<a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *oeRand=NULL)</td></tr>
<tr class="separator:af2f4c0b08630beda575c1c8697b8fece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d0a82a515f8373ee3f174a22f775397"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a8d0a82a515f8373ee3f174a22f775397">normalize</a> ()</td></tr>
<tr class="separator:a8d0a82a515f8373ee3f174a22f775397"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b2fe218819d898082c29c21cf962572"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a5b2fe218819d898082c29c21cf962572">CanBeNormalized</a> () const</td></tr>
<tr class="separator:a5b2fe218819d898082c29c21cf962572"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47f7e7ecf0a38bc7ef50f21d90ba349b"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a47f7e7ecf0a38bc7ef50f21d90ba349b">length_2</a> () const</td></tr>
<tr class="separator:a47f7e7ecf0a38bc7ef50f21d90ba349b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80401d480f15e1418a3274a2b2b51649"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a80401d480f15e1418a3274a2b2b51649">length</a> () const</td></tr>
<tr class="separator:a80401d480f15e1418a3274a2b2b51649"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b1e56edcce2dfec1f65354c4f55703e"><td class="memItemLeft" align="right" valign="top">const double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a> () const</td></tr>
<tr class="separator:a7b1e56edcce2dfec1f65354c4f55703e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9085cf790064f107bc57185b11ab2eee"><td class="memItemLeft" align="right" valign="top">const double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a> () const</td></tr>
<tr class="separator:a9085cf790064f107bc57185b11ab2eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89f6c6d834e9fec20840d1754c06016e"><td class="memItemLeft" align="right" valign="top">const double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a> () const</td></tr>
<tr class="separator:a89f6c6d834e9fec20840d1754c06016e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b195b867437acf8de45f48c83e81932"><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a3b195b867437acf8de45f48c83e81932">x</a> ()</td></tr>
<tr class="separator:a3b195b867437acf8de45f48c83e81932"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad927d9808ded1fc49c05ae9e1a3ed2a6"><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ad927d9808ded1fc49c05ae9e1a3ed2a6">y</a> ()</td></tr>
<tr class="separator:ad927d9808ded1fc49c05ae9e1a3ed2a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2134ad02d68f29e9c7cd87e4cd4c75b8"><td class="memItemLeft" align="right" valign="top">double &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a2134ad02d68f29e9c7cd87e4cd4c75b8">z</a> ()</td></tr>
<tr class="separator:a2134ad02d68f29e9c7cd87e4cd4c75b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader"></div></td></tr>
<tr class="memitem:afc691b83e01d075402e13b5d05646564"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#afc691b83e01d075402e13b5d05646564">operator==</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;) const</td></tr>
<tr class="separator:afc691b83e01d075402e13b5d05646564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7c3fdae52a4c4bc27354cb2411028e4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ab7c3fdae52a4c4bc27354cb2411028e4">operator!=</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;other) const</td></tr>
<tr class="separator:ab7c3fdae52a4c4bc27354cb2411028e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafb6c144d5be85832af8cf4346751c2d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#aafb6c144d5be85832af8cf4346751c2d">IsApprox</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;other, const double &amp;precision) const</td></tr>
<tr class="separator:aafb6c144d5be85832af8cf4346751c2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae15b186e4ec6527dbba56dbabba7b06b"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">distSq</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;vv) const</td></tr>
<tr class="separator:ae15b186e4ec6527dbba56dbabba7b06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7da2d388ded31320b18e7bb51fa4cf76"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml#a7da2d388ded31320b18e7bb51fa4cf76">createOrthoVector</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v) const</td></tr>
<tr class="separator:a7da2d388ded31320b18e7bb51fa4cf76"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Represents a vector in 3-dimensional real space. </p>
<p>The <a class="el" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space. ">vector3</a> class was designed to simplify operations with floating point coordinates. To this end many of the common operations have been overloaded for simplicity. Vector addition, subtraction, scalar multiplication, dot product, cross product, magnitude and a number of other utility functions are built in to the vector class. For a full description of the class member functions please consult the documentation. The following code demonstrates several of the functions of the vector class: </p><div class="fragment"><div class="line"><a class="code" href="classOpenBabel_1_1vector3.shtml#a28d983d20c9b3b395da7854fafae20f2">vector3</a> v1,v2,v3;</div><div class="line">v1 = <a class="code" href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd">VX</a>;</div><div class="line">v2 = <a class="code" href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee">VY</a>;</div><div class="line">v3 = <a class="code" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">cross</a>(v1,v2);</div><div class="line">v3 *= 2.5;</div><div class="line">v3.normalize();</div></div><!-- fragment --> </div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a3c0e5d79c07393e51572c2594f762b27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c0e5d79c07393e51572c2594f762b27">&sect;&nbsp;</a></span>iterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef double* <a class="el" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A random access iterator over x, y, z. </p>

</div>
</div>
<a id="a6cd067fe0c3e483dd5377aede39556e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cd067fe0c3e483dd5377aede39556e1">&sect;&nbsp;</a></span>const_iterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef const double* <a class="el" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">const_iterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A random access iterator over const x, y, z. </p>

</div>
</div>
<a id="ad319fc54a93a2c7058c70e40428ed2e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad319fc54a93a2c7058c70e40428ed2e2">&sect;&nbsp;</a></span>difference_type</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::ptrdiff_t <a class="el" href="classOpenBabel_1_1vector3.shtml#ad319fc54a93a2c7058c70e40428ed2e2">difference_type</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A signed integral type for differences between two iterators. </p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a28d983d20c9b3b395da7854fafae20f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28d983d20c9b3b395da7854fafae20f2">&sect;&nbsp;</a></span>vector3() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inX</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inY</em> = <code>0.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inZ</em> = <code>0.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a id="a8b2f7f06d9fa0554248321887d4fcfc4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b2f7f06d9fa0554248321887d4fcfc4">&sect;&nbsp;</a></span>vector3() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>inV</em>[3]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="abe84fe9749e73b1027baddb505fa189a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe84fe9749e73b1027baddb505fa189a">&sect;&nbsp;</a></span>vector3() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copy Constructor. </p>

</div>
</div>
<a id="a059160a3da371ed0cfd1563a1e8cd2fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a059160a3da371ed0cfd1563a1e8cd2fb">&sect;&nbsp;</a></span>~vector3()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ad69bd11391be1a1dba5c8202259664f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad69bd11391be1a1dba5c8202259664f8">&sect;&nbsp;</a></span>begin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">iterator</a> begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>iterator to beginning </dd></dl>

</div>
</div>
<a id="acad38d52497a975bfb6f2f6acd76631f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acad38d52497a975bfb6f2f6acd76631f">&sect;&nbsp;</a></span>end() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">iterator</a> end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>iterator to end </dd></dl>

</div>
</div>
<a id="a29305669b60ca1680752e2fc3592ba99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29305669b60ca1680752e2fc3592ba99">&sect;&nbsp;</a></span>begin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">const_iterator</a> begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>/return const_iterator to beginning </p>

</div>
</div>
<a id="accf9a4bd0c34d4a5f6a7dab66ea10cdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accf9a4bd0c34d4a5f6a7dab66ea10cdc">&sect;&nbsp;</a></span>end() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">const_iterator</a> end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>/return const_iterator to end </p>

</div>
</div>
<a id="a685349dbc9e2d99a19616763811cbfba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a685349dbc9e2d99a19616763811cbfba">&sect;&nbsp;</a></span>Set() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inX</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inY</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inZ</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set x,y and z-component of a vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a731bb8e81cfd2699e1bfeb0c24fc7d2b">OBRotamerList::AddRotamer()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#accffd942b323dd88aebc6fb6c20e1e18">OBFloatGrid::GetMidpointVector()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad15ec0c7f87cea35b02269fd53be159c">OBAtom::GetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>.</p>

</div>
</div>
<a id="abfcb3c965a12bd0385f1fe1db3f7d3ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfcb3c965a12bd0385f1fe1db3f7d3ac">&sect;&nbsp;</a></span>Set() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set x,y and z-component of a vector from c[0]..c[2]. </p>

</div>
</div>
<a id="ab7cbeb9d9ec3d0d2714733d8bb4596eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7cbeb9d9ec3d0d2714733d8bb4596eb">&sect;&nbsp;</a></span>SetX()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetX </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inX</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to set the x-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">OpenBabel::areDuplicateAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, and <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>.</p>

</div>
</div>
<a id="a385f2320a91b6c182ecb45d16ffc6332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a385f2320a91b6c182ecb45d16ffc6332">&sect;&nbsp;</a></span>SetY()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetY </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inY</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to set the y-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">OpenBabel::areDuplicateAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, and <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>.</p>

</div>
</div>
<a id="ad1ac74f918d5ac48cb47426ca9ba2c09"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1ac74f918d5ac48cb47426ca9ba2c09">&sect;&nbsp;</a></span>SetZ()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetZ </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>inZ</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to set the z-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">OpenBabel::areDuplicateAtoms()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, and <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>.</p>

</div>
</div>
<a id="ac302cda48a4a650a3f8cf1dfe9a0cb1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac302cda48a4a650a3f8cf1dfe9a0cb1e">&sect;&nbsp;</a></span>GetX()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double GetX </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to get the x-coordinate of the vector. </p>

</div>
</div>
<a id="a2c302e1e24ca25bc362746dc51c22510"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c302e1e24ca25bc362746dc51c22510">&sect;&nbsp;</a></span>GetY()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double GetY </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to get the y-coordinate of the vector. </p>

</div>
</div>
<a id="ad5e4abcd59d8d2c945e851ed92593826"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5e4abcd59d8d2c945e851ed92593826">&sect;&nbsp;</a></span>GetZ()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double GetZ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to get the z-coordinate of the vector. </p>

</div>
</div>
<a id="a9345053a16ce83e130dc098fddf9af7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9345053a16ce83e130dc098fddf9af7a">&sect;&nbsp;</a></span>Get()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Get </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set c[0]..c[2] to the components of the vector. </p>
<dl class="section warning"><dt>Warning</dt><dd>No error checking is performed </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab4c518f64fa1e22d82ed6da82d14e4e3">OBForceField::VectorBondDerivative()</a>.</p>

</div>
</div>
<a id="a680fe1fcfb21fa1bdc08927677b024a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a680fe1fcfb21fa1bdc08927677b024a8">&sect;&nbsp;</a></span>operator[]()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double operator[] </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Access function to x: [0], y: [1], and z[2]. </p>
<p>This (slow) method allows one to access the elements of the vector as if it were an array of doubles. If the index is &gt; 2, then a warning is printed and 0.0 is returned. Otherwise, if i is 0, 1 or 2, then a reference to x, y or z is returned, respectively.</p>
<dl class="section warning"><dt>Warning</dt><dd>This method is primarily designed to facilitate the integration ('Open Babelization') of code that uses arrays of doubles rather than the vector class. Due to the error checks the method is of course very slow and should therefore be avoided in production code. </dd></dl>

</div>
</div>
<a id="ad2eee719d3706b71968f894c1179f4bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2eee719d3706b71968f894c1179f4bb">&sect;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assignment. </p>

</div>
</div>
<a id="a1eaa5b3b24423c15c8deb71a0c079707"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1eaa5b3b24423c15c8deb71a0c079707">&sect;&nbsp;</a></span>AsArray()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const double* AsArray </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the vector as a const double * </dd></dl>

</div>
</div>
<a id="ae0541be714a6305dd3295655eea746d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0541be714a6305dd3295655eea746d9">&sect;&nbsp;</a></span>operator+=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector addition (add <code>v</code> to *this) </p>
<dl class="section return"><dt>Returns</dt><dd>*this + v </dd></dl>

</div>
</div>
<a id="ac4b4980ccea5aa5184928ce40cf1acee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4b4980ccea5aa5184928ce40cf1acee">&sect;&nbsp;</a></span>operator-=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector subtraction (subtract <code>v</code> from *this) </p>
<dl class="section return"><dt>Returns</dt><dd>*this - v </dd></dl>

</div>
</div>
<a id="a506884b50b92a33e92029b43f9b75bc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a506884b50b92a33e92029b43f9b75bc9">&sect;&nbsp;</a></span>operator+=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scalar addition (add <code>f</code> to *this) </p>
<dl class="section return"><dt>Returns</dt><dd>*this + f </dd></dl>

</div>
</div>
<a id="a322635480250ba0c08aa47a125eda3dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a322635480250ba0c08aa47a125eda3dd">&sect;&nbsp;</a></span>operator-=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-= </td>
          <td>(</td>
          <td class="paramtype">const double *&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scalar subtraction (subtract <code>f</code> from *this) </p>
<dl class="section return"><dt>Returns</dt><dd>*this - f </dd></dl>

</div>
</div>
<a id="a849fa346bb458a37710cdb8a4f5c085f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a849fa346bb458a37710cdb8a4f5c085f">&sect;&nbsp;</a></span>operator*=() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scalar multiplication (multiply *this by <code>c</code>) </p>
<dl class="section return"><dt>Returns</dt><dd>*this * c </dd></dl>

</div>
</div>
<a id="ab5a7b18eeff279e5d850a9075d09f8a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5a7b18eeff279e5d850a9075d09f8a5">&sect;&nbsp;</a></span>operator/=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator/= </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scalar division (divide *this by <code>c</code>) </p>
<dl class="section return"><dt>Returns</dt><dd>*this divided by c </dd></dl>

</div>
</div>
<a id="ab879d8d94111c53fd9b9013fb9345734"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab879d8d94111c53fd9b9013fb9345734">&sect;&nbsp;</a></span>operator*=() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Multiplication of matrix and vector </p><dl class="section return"><dt>Returns</dt><dd>the result (i.e., the updated vector) </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000009">Todo:</a></b></dt><dd>Currently unimplemented </dd></dl>
<p>calculates the product m*(*this) of the matrix m and the column vector represented by *this </p>

</div>
</div>
<a id="af2f4c0b08630beda575c1c8697b8fece"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2f4c0b08630beda575c1c8697b8fece">&sect;&nbsp;</a></span>randomUnitVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void randomUnitVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *&#160;</td>
          <td class="paramname"><em>obRandP</em> = <code>NULL</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a random unit vector. </p>
<p>Replaces *this with a random unit vector, which is (supposed to be) uniformly distributed over the unit sphere. Uses the random number generator obRand, or uses the system number generator with a time seed if obRand == NULL.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">obRandP</td><td>random number generator to use, or NULL, if a singleton system random number generator (with time seed) should be used </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#aff25b8b63c0aec5f2c83d0cb70ae55cb">matrix3x3::randomRotation()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab4c518f64fa1e22d82ed6da82d14e4e3">OBForceField::VectorBondDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab451a524c7a4f04bb987b3fac9288eed">OBForceField::VectorLengthDerivative()</a>.</p>

</div>
</div>
<a id="a8d0a82a515f8373ee3f174a22f775397"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d0a82a515f8373ee3f174a22f775397">&sect;&nbsp;</a></span>normalize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; normalize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Scales a vector to give it length one. </p><dl class="section return"><dt>Returns</dt><dd>the result (i.e., the normalized vector)</dd></dl>
<p>This method normalizes *this. In other words, it divides the x,y,z coords of *this by this-&gt;<a class="el" href="classOpenBabel_1_1vector3.shtml#a80401d480f15e1418a3274a2b2b51649">length()</a>. If *this can't be safely normalized, it remains unchanged. See <a class="el" href="classOpenBabel_1_1vector3.shtml#a5b2fe218819d898082c29c21cf962572">CanBeNormalized()</a>.</p>
<dl class="section return"><dt>Returns</dt><dd>a reference to *this </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">OpenBabel::InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac6e66726b2becbbccf39e6d4ecf6ae2e">OBForceField::ValidateLineSearch()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>.</p>

</div>
</div>
<a id="a5b2fe218819d898082c29c21cf962572"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b2fe218819d898082c29c21cf962572">&sect;&nbsp;</a></span>CanBeNormalized()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CanBeNormalized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Whether a vector can be normalized</dd></dl>
<p>This method returns true if *this can be safely normalized. Vectors that can't be safely normalized are:</p><ul>
<li>the zero vector (0,0,0)</li>
<li>vectors having coords that can't be squared without triggering an overflow or underflow. This means doubles having absolute value greater than 1e150 or smaller than 1e-150. </li>
</ul>

</div>
</div>
<a id="a47f7e7ecf0a38bc7ef50f21d90ba349b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47f7e7ecf0a38bc7ef50f21d90ba349b">&sect;&nbsp;</a></span>length_2()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double length_2 </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The length of the vector squared </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">OpenBabel::areDuplicateAtoms()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#aafb6c144d5be85832af8cf4346751c2d">vector3::IsApprox()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>.</p>

</div>
</div>
<a id="a80401d480f15e1418a3274a2b2b51649"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80401d480f15e1418a3274a2b2b51649">&sect;&nbsp;</a></span>length()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double length </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The vector length </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">OpenBabel::CalcTorsionAngle()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af123db2b6c32f7d210f4455e7fb8cccc">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a71ca46e3ddb9b15db1b5971aa7c4a332">OBUnitCell::GetA()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6d6d9bdda3f480d358c14b2010034d41">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a1d1ca648c4d55ad3275e0737e3ca6ecc">OBUnitCell::GetB()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a29fff830d7b77eb427ef8fc733d15e17">OBUnitCell::GetC()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">OpenBabel::Point2Line()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">OpenBabel::Point2PlaneSigned()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aa087a37fcd1c8b08d5d58277caefbc9a">OBUnitCell::SetData()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>, <a class="el" href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">OpenBabel::vectorAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab451a524c7a4f04bb987b3fac9288eed">OBForceField::VectorLengthDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a id="a7b1e56edcce2dfec1f65354c4f55703e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b1e56edcce2dfec1f65354c4f55703e">&sect;&nbsp;</a></span>x() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const double&amp; x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to get the x-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1befb9ee43954207d09e3229e4b5753b">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7acd1c4965f682ab6f25f7cfa30f34dd">OBMol::AddNewHydrogens()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#ac6957eacc9ea85e6e67a9d964c6d4ced">SpaceGroup::AddTransform()</a>, <a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">OpenBabel::areDuplicateAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">OBForceField::ConjugateGradientsInitialize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">OpenBabel::cross()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#a7f354c14e03130a064d34ec9e0c48203">transform3d::DescribeAsValues()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">vector3::distSq()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">OpenBabel::dot()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#af5cee9c530db13a5ec558a3783893315">OBUnitCell::FillUnitCell()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a2506aa5bc58519af8249951bad3a8ca1">OBGridData::GetAxes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">OpenBabel::GetLabelAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a480b02018de705e2a63c80c95c99ffd4">OBGridData::GetValue()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a4736c0c51dc08725c39e02a84c2390ec">matrix3x3::matrix3x3()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#af279e0f0ff720ee54d6733674dfda50a">transform3d::Normalize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">OpenBabel::operator*()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, <a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">OpenBabel::operator+()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-()</a>, <a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">OpenBabel::operator/()</a>, <a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#afc691b83e01d075402e13b5d05646564">vector3::operator==()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#a4f56880aa1ad845fbc6c0c7a4ce45d3b">OBGrid::PointIsInBox()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a39efd7a5999c653b840ac4445b9f86c2">matrix3x3::SetColumn()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a0b9fb0de3277dd55625e632bc4f0ab5b">OBFloatGrid::SetLimits()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ab20b033e3e502ab19ae92f55a9ef2fe2">matrix3x3::SetRow()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a3b9594d66359ec366d2590459d0b617f">OBAtom::SetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a67793f32351fdcbd14b964539014274d">SpaceGroup::Transform()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">OpenBabel::UpdateConformersFromTree()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae517465b4ca745841c28cf22db304a7f">OBForceField::ValidateGradientError()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aaec07c3aaf87a4d9503b31e3629b8ef0">OBUnitCell::WrapFractionalCoordinate()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a833e1cf314b7b7a5537b2b6a56fee6a5">OBAtom::x()</a>.</p>

</div>
</div>
<a id="a9085cf790064f107bc57185b11ab2eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9085cf790064f107bc57185b11ab2eee">&sect;&nbsp;</a></span>y() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const double&amp; y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to get the y-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1befb9ee43954207d09e3229e4b5753b">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7acd1c4965f682ab6f25f7cfa30f34dd">OBMol::AddNewHydrogens()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#ac6957eacc9ea85e6e67a9d964c6d4ced">SpaceGroup::AddTransform()</a>, <a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">OpenBabel::areDuplicateAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">OBForceField::ConjugateGradientsInitialize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">OpenBabel::cross()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">vector3::distSq()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">OpenBabel::dot()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#af5cee9c530db13a5ec558a3783893315">OBUnitCell::FillUnitCell()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a2506aa5bc58519af8249951bad3a8ca1">OBGridData::GetAxes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">OpenBabel::GetLabelAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a480b02018de705e2a63c80c95c99ffd4">OBGridData::GetValue()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a4736c0c51dc08725c39e02a84c2390ec">matrix3x3::matrix3x3()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#af279e0f0ff720ee54d6733674dfda50a">transform3d::Normalize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">OpenBabel::operator*()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, <a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">OpenBabel::operator+()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-()</a>, <a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">OpenBabel::operator/()</a>, <a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#afc691b83e01d075402e13b5d05646564">vector3::operator==()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#a4f56880aa1ad845fbc6c0c7a4ce45d3b">OBGrid::PointIsInBox()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a39efd7a5999c653b840ac4445b9f86c2">matrix3x3::SetColumn()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a0b9fb0de3277dd55625e632bc4f0ab5b">OBFloatGrid::SetLimits()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ab20b033e3e502ab19ae92f55a9ef2fe2">matrix3x3::SetRow()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a3b9594d66359ec366d2590459d0b617f">OBAtom::SetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a67793f32351fdcbd14b964539014274d">SpaceGroup::Transform()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">OpenBabel::UpdateConformersFromTree()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae517465b4ca745841c28cf22db304a7f">OBForceField::ValidateGradientError()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aaec07c3aaf87a4d9503b31e3629b8ef0">OBUnitCell::WrapFractionalCoordinate()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aca424ddaf2902c1cde483f37813d4278">OBAtom::y()</a>.</p>

</div>
</div>
<a id="a89f6c6d834e9fec20840d1754c06016e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89f6c6d834e9fec20840d1754c06016e">&sect;&nbsp;</a></span>z() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const double&amp; z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to get the z-coordinate of the vector. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1befb9ee43954207d09e3229e4b5753b">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7acd1c4965f682ab6f25f7cfa30f34dd">OBMol::AddNewHydrogens()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#ac6957eacc9ea85e6e67a9d964c6d4ced">SpaceGroup::AddTransform()</a>, <a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">OpenBabel::areDuplicateAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a7e253a1997cddeb4fd5eaa79e6e42610">OBForceField::ConjugateGradientsInitialize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">OpenBabel::cross()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">vector3::distSq()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">OpenBabel::dot()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#af5cee9c530db13a5ec558a3783893315">OBUnitCell::FillUnitCell()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a2506aa5bc58519af8249951bad3a8ca1">OBGridData::GetAxes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBGridData.shtml#a480b02018de705e2a63c80c95c99ffd4">OBGridData::GetValue()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a4736c0c51dc08725c39e02a84c2390ec">matrix3x3::matrix3x3()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a52ae121410bc166d73eb4200f6127842">OBForceField::MolecularDynamicsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1transform3d.shtml#af279e0f0ff720ee54d6733674dfda50a">transform3d::Normalize()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a2a6bafaddf41c8eb9d0bda246bb07c85">OBForceField::NumericalDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a499789742e7b2021f26f8d1cfe04045f">OBForceField::NumericalSecondDerivative()</a>, <a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">OpenBabel::operator*()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab879d8d94111c53fd9b9013fb9345734">vector3::operator*=()</a>, <a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">OpenBabel::operator+()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-()</a>, <a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">OpenBabel::operator/()</a>, <a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#afc691b83e01d075402e13b5d05646564">vector3::operator==()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a031b9641f48f7639949cad29a6a99109">matrix3x3::PlaneReflection()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#a4f56880aa1ad845fbc6c0c7a4ce45d3b">OBGrid::PointIsInBox()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ae2b83cb7b73473405cd57594c88f541c">matrix3x3::RotAboutAxisByAngle()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a39efd7a5999c653b840ac4445b9f86c2">matrix3x3::SetColumn()</a>, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a0b9fb0de3277dd55625e632bc4f0ab5b">OBFloatGrid::SetLimits()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ab20b033e3e502ab19ae92f55a9ef2fe2">matrix3x3::SetRow()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a3b9594d66359ec366d2590459d0b617f">OBAtom::SetVector()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a67793f32351fdcbd14b964539014274d">SpaceGroup::Transform()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">OpenBabel::UpdateConformersFromTree()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ae517465b4ca745841c28cf22db304a7f">OBForceField::ValidateGradientError()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aaec07c3aaf87a4d9503b31e3629b8ef0">OBUnitCell::WrapFractionalCoordinate()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae7bc7213001e326be4d4eb2d8a035c34">OBAtom::z()</a>.</p>

</div>
</div>
<a id="a3b195b867437acf8de45f48c83e81932"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b195b867437acf8de45f48c83e81932">&sect;&nbsp;</a></span>x() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double&amp; x </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to set the x-coordinate of the vector. </p>

</div>
</div>
<a id="ad927d9808ded1fc49c05ae9e1a3ed2a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad927d9808ded1fc49c05ae9e1a3ed2a6">&sect;&nbsp;</a></span>y() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double&amp; y </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to set the y-coordinate of the vector. </p>

</div>
</div>
<a id="a2134ad02d68f29e9c7cd87e4cd4c75b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2134ad02d68f29e9c7cd87e4cd4c75b8">&sect;&nbsp;</a></span>z() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double&amp; z </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access function to set the z-coordinate of the vector. </p>

</div>
</div>
<a id="afc691b83e01d075402e13b5d05646564"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc691b83e01d075402e13b5d05646564">&sect;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison Methods. </p>
<p>Equivalence of vectors </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000082">Deprecated:</a></b></dt><dd>This method uses unreliable floating point == comparisons Use <a class="el" href="classOpenBabel_1_1vector3.shtml#aafb6c144d5be85832af8cf4346751c2d" title="Safe comparison for floating-point vector3. ">vector3::IsApprox()</a> instead. </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>true if every component is equal </dd></dl>

</div>
</div>
<a id="ab7c3fdae52a4c4bc27354cb2411028e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7c3fdae52a4c4bc27354cb2411028e4">&sect;&nbsp;</a></span>operator!=()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000083">Deprecated:</a></b></dt><dd>This method uses unreliable floating point == comparisons Use <a class="el" href="classOpenBabel_1_1vector3.shtml#aafb6c144d5be85832af8cf4346751c2d" title="Safe comparison for floating-point vector3. ">vector3::IsApprox()</a> instead. </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>true if at least one component of the two vectors is != </dd></dl>

</div>
</div>
<a id="aafb6c144d5be85832af8cf4346751c2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafb6c144d5be85832af8cf4346751c2d">&sect;&nbsp;</a></span>IsApprox()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsApprox </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>precision</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Safe comparison for floating-point <a class="el" href="classOpenBabel_1_1vector3.shtml" title="Represents a vector in 3-dimensional real space. ">vector3</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>true if the vector *this is approximately equal to the vector <code>other</code>, to the precision <code>precision</code>. More specifically, this method works exactly like the <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">OpenBabel::IsApprox()</a> function, replacing the absolute value for doubles by the norm for vectors. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>The vector for comparison </td></tr>
    <tr><td class="paramname">precision</td><td>This parameter plays the same role as in <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">OpenBabel::IsApprox()</a>. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae15b186e4ec6527dbba56dbabba7b06b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae15b186e4ec6527dbba56dbabba7b06b">&sect;&nbsp;</a></span>distSq()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double distSq </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>vv</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>}@ </p>
<dl class="section return"><dt>Returns</dt><dd>square of the distance between *this and vv</dd></dl>
<p>equivalent to length_2(*this-vv) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f7ae482e5f2e4f4bda8fc6b6156f2a9">OBForceField::GetGrid()</a>.</p>

</div>
</div>
<a id="a7da2d388ded31320b18e7bb51fa4cf76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7da2d388ded31320b18e7bb51fa4cf76">&sect;&nbsp;</a></span>createOrthoVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool createOrthoVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct a unit vector orthogonal to *this. </p>
<p>Creates a vector of length one, orthogonal to *this. </p><dl class="section return"><dt>Returns</dt><dd>Whether the method was successful</dd></dl>
<p>It requires that *this is normalizable; otherwise it just returns false. See <a class="el" href="classOpenBabel_1_1vector3.shtml#a5b2fe218819d898082c29c21cf962572">CanBeNormalized()</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">res</td><td>reference by which to pass the result.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>always true. (Return value kept for compatibility, as old versions of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> used to check for normalizability). </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="vector3_8h_source.shtml">vector3.h</a></li>
<li><a class="el" href="matrix3x3_8cpp.shtml">matrix3x3.cpp</a></li>
<li><a class="el" href="vector3_8cpp.shtml">vector3.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
