<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>XMLMoleculeFormat Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">XMLMoleculeFormat</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1XMLMoleculeFormat-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">XMLMoleculeFormat Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="xml_8h_source.shtml">openbabel/xml.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for XMLMoleculeFormat:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1XMLMoleculeFormat.png" usemap="#XMLMoleculeFormat_map" alt=""/>
  <map id="XMLMoleculeFormat_map" name="XMLMoleculeFormat_map">
<area href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats. " alt="XMLBaseFormat" shape="rect" coords="0,112,130,136"/>
<area href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats. " alt="OBFormat" shape="rect" coords="0,56,130,80"/>
<area href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime. " alt="OBPlugin" shape="rect" coords="0,0,130,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
<tr class="separator:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
<tr class="separator:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad794fc5cf08a2a6b1e877168bb784e0f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ad794fc5cf08a2a6b1e877168bb784e0f">~XMLMoleculeFormat</a> ()</td></tr>
<tr class="separator:ad794fc5cf08a2a6b1e877168bb784e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9acd362b27e30c19a2c870ca71592723"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723">ReadChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr class="separator:a9acd362b27e30c19a2c870ca71592723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39c2aaf250dde6e85d05ff9357d8b003"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003">WriteChemObject</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr class="separator:a39c2aaf250dde6e85d05ff9357d8b003"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a3cd5ffc0d21fe9b95d804c44e7d146"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">ReadMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr class="separator:a5a3cd5ffc0d21fe9b95d804c44e7d146"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54e576034bd51c66256aa6a98f81d644"><td class="memItemLeft" align="right" valign="top">const std::type_info &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">GetType</a> ()</td></tr>
<tr class="separator:a54e576034bd51c66256aa6a98f81d644"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3d80dde715e0505ef1818a621ecd888"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab3d80dde715e0505ef1818a621ecd888">NamespaceURI</a> () const =0</td></tr>
<tr class="separator:ab3d80dde715e0505ef1818a621ecd888"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b007f43192f527944eef5136e4b2703"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a6b007f43192f527944eef5136e4b2703">DoElement</a> (const std::string &amp;ElName)</td></tr>
<tr class="separator:a6b007f43192f527944eef5136e4b2703"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e59feda5d3eb85765b53cf4b42f77ef"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a0e59feda5d3eb85765b53cf4b42f77ef">EndElement</a> (const std::string &amp;ElName)</td></tr>
<tr class="separator:a0e59feda5d3eb85765b53cf4b42f77ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2f75af8aac19e5c3c48dc26c1fa319c"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c">EndTag</a> ()</td></tr>
<tr class="separator:ad2f75af8aac19e5c3c48dc26c1fa319c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45db88b29eb37e9dd105bf4032e421d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a> ()</td></tr>
<tr class="separator:a45db88b29eb37e9dd105bf4032e421d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a663171ec9788e2d1621d374848b3888b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a663171ec9788e2d1621d374848b3888b">WriteMolecule</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr class="separator:a663171ec9788e2d1621d374848b3888b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab87525f269e7819d8462f450d30d56a7"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#ab87525f269e7819d8462f450d30d56a7">Description</a> ()=0</td></tr>
<tr class="separator:ab87525f269e7819d8462f450d30d56a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1870e0d80a223ef4e1661be80029dbec"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1870e0d80a223ef4e1661be80029dbec">TargetClassDescription</a> ()</td></tr>
<tr class="separator:a1870e0d80a223ef4e1661be80029dbec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d3a8785a0ad0c85b98fa3406a64d50f"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1d3a8785a0ad0c85b98fa3406a64d50f">SpecificationURL</a> ()</td></tr>
<tr class="separator:a1d3a8785a0ad0c85b98fa3406a64d50f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e10219d8aedefa78ef16fc7fded85ec"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a0e10219d8aedefa78ef16fc7fded85ec">GetMIMEType</a> ()</td></tr>
<tr class="separator:a0e10219d8aedefa78ef16fc7fded85ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94a94537cc5ba96b1876db1b612b91a3"><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a94a94537cc5ba96b1876db1b612b91a3">Flags</a> ()</td></tr>
<tr class="separator:a94a94537cc5ba96b1876db1b612b91a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0924b1a442d147fa036bff23a4cf04ef"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a0924b1a442d147fa036bff23a4cf04ef">MakeNewInstance</a> ()</td></tr>
<tr class="separator:a0924b1a442d147fa036bff23a4cf04ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47a434f63a789f142966304e35aa6952"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#a47a434f63a789f142966304e35aa6952">RegisterFormat</a> (const char *ID, const char *MIME=NULL)</td></tr>
<tr class="separator:a47a434f63a789f142966304e35aa6952"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0859fdbf134af95a8231eb32c73b7db"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#ae0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>
<tr class="separator:ae0859fdbf134af95a8231eb32c73b7db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9399e9568ab809d714385f1b237a9335"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>
<tr class="separator:ga9399e9568ab809d714385f1b237a9335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e0b39e1326de703012f81ac2be7feba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a> ()</td></tr>
<tr class="separator:ga3e0b39e1326de703012f81ac2be7feba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaa55e5ad893f2566c6874224f9174b7d2">GetID</a> () const</td></tr>
<tr class="separator:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
<tr class="separator:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aca0c09ee719aba9da34cb281aa0db6a5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml#aca0c09ee719aba9da34cb281aa0db6a5">FormatFromMIME</a> (const char *MIME)</td></tr>
<tr class="separator:aca0c09ee719aba9da34cb281aa0db6a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga295dc7f1b94da710821c562bff3e7c97"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga295dc7f1b94da710821c562bff3e7c97">GetPlugin</a> (const char *Type, const char *ID)</td></tr>
<tr class="separator:ga295dc7f1b94da710821c562bff3e7c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf95953a5793333ba51e978c4a0a00103"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaf95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>
<tr class="separator:gaf95953a5793333ba51e978c4a0a00103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>
<tr class="separator:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba22c5352d36c7f058299af7ddffb03e"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>
<tr class="separator:gaba22c5352d36c7f058299af7ddffb03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>
<tr class="separator:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>
<tr class="separator:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>
<tr class="separator:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">LoadAllPlugins</a> ()</td></tr>
<tr class="separator:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a4f78f6b785dbc43f74d44c6bb39cfb78"><td class="memItemLeft" align="right" valign="top">xmlTextReaderPtr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4f78f6b785dbc43f74d44c6bb39cfb78">reader</a> () const</td></tr>
<tr class="separator:a4f78f6b785dbc43f74d44c6bb39cfb78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab13d5085d6f8bb5fc391fdc1ad1f8000"><td class="memItemLeft" align="right" valign="top">xmlTextWriterPtr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab13d5085d6f8bb5fc391fdc1ad1f8000">writer</a> () const</td></tr>
<tr class="separator:ab13d5085d6f8bb5fc391fdc1ad1f8000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4964d8defcb0f638a51963d436188f12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a> ()</td></tr>
<tr class="separator:a4964d8defcb0f638a51963d436188f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfcd8e84805c262d8cbca79a83f9d4cc"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">SkipObjects</a> (int n, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr class="separator:adfcd8e84805c262d8cbca79a83f9d4cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
<tr class="separator:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
<tr class="separator:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
<tr class="separator:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ae286ac3ecc365473ace5c0da2c656ffe"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">_pmol</a></td></tr>
<tr class="separator:ae286ac3ecc365473ace5c0da2c656ffe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab50420582d1794a71702ae17e176dc07"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a></td></tr>
<tr class="separator:ab50420582d1794a71702ae17e176dc07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5fd9fbe1a6ecd9798543ec2a55c472a8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a></td></tr>
<tr class="separator:a5fd9fbe1a6ecd9798543ec2a55c472a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e2c3ec36cd04bac7ecad43b9f5501a2"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5e2c3ec36cd04bac7ecad43b9f5501a2">baseindent</a></td></tr>
<tr class="separator:a5e2c3ec36cd04bac7ecad43b9f5501a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b00721003b8d35559a55c9098ff36c5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">ind</a></td></tr>
<tr class="separator:a4b00721003b8d35559a55c9098ff36c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8000c477c493f1dc954e8a538ae6fda8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">nsdecl</a></td></tr>
<tr class="separator:a8000c477c493f1dc954e8a538ae6fda8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0224265e7d214b7ed98e091fe559c88"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">_embedlevel</a></td></tr>
<tr class="separator:ac0224265e7d214b7ed98e091fe559c88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f8d25dafb0bc13814ca451035f67955"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>
<tr class="separator:ga1f8d25dafb0bc13814ca451035f67955"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9d7dd3bbc482a65e28ca887b3faa2535">AllPluginsLoaded</a> = 0</td></tr>
<tr class="separator:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Abstract class for XML formats which represent molecules. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ad794fc5cf08a2a6b1e877168bb784e0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad794fc5cf08a2a6b1e877168bb784e0f">&sect;&nbsp;</a></span>~XMLMoleculeFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">XMLMoleculeFormat</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a9acd362b27e30c19a2c870ca71592723"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9acd362b27e30c19a2c870ca71592723">&sect;&nbsp;</a></span>ReadChemObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadChemObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The "Convert" interface Read function. </p>
<p>Possibly reads multiple new objects on the heap and subjects them to its DoTransformations() function, which may delete them again. Sends result to pConv-&gt;AddChemObject() </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#a6044ced825a2a83b7cfe7c45eea63c99">OBFormat</a>.</p>

</div>
</div>
<a id="a39c2aaf250dde6e85d05ff9357d8b003"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39c2aaf250dde6e85d05ff9357d8b003">&sect;&nbsp;</a></span>WriteChemObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteChemObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The "Convert" interface Write function. </p>
<p>Writes a single object Deletes the object after writing </p><dl class="section return"><dt>Returns</dt><dd>false on error </dd></dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#a5ea5d9623cd9594549a52e116caecaa2">OBFormat</a>.</p>

</div>
</div>
<a id="a5a3cd5ffc0d21fe9b95d804c44e7d146"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a3cd5ffc0d21fe9b95d804c44e7d146">&sect;&nbsp;</a></span>ReadMolecule()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ReadMolecule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The "API" interface Read function. </p>
<p>Reads a single object. Does not make a new object on the heap; can be used with a pointer to an chem object on the heap or the stack. </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1e309febfaef70cc3c8d98afc1540931">OBFormat</a>.</p>

</div>
</div>
<a id="a54e576034bd51c66256aa6a98f81d644"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54e576034bd51c66256aa6a98f81d644">&sect;&nbsp;</a></span>GetType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::type_info&amp; GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the type of chemical object used by the format. Defaults to that used by the default format. Useful for checking that a format can handle a particular object. </dd></dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#a73f632a573cbbfecf9e00f04c5ce73e9">OBFormat</a>.</p>

</div>
</div>
<a id="ab3d80dde715e0505ef1818a621ecd888"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3d80dde715e0505ef1818a621ecd888">&sect;&nbsp;</a></span>NamespaceURI()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* NamespaceURI </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a6b007f43192f527944eef5136e4b2703"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b007f43192f527944eef5136e4b2703">&sect;&nbsp;</a></span>DoElement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool DoElement </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ElName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0e59feda5d3eb85765b53cf4b42f77ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e59feda5d3eb85765b53cf4b42f77ef">&sect;&nbsp;</a></span>EndElement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool EndElement </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>ElName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad2f75af8aac19e5c3c48dc26c1fa319c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2f75af8aac19e5c3c48dc26c1fa319c">&sect;&nbsp;</a></span>EndTag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* EndTag </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The tag at the end of the chemical object e.g. "/molecule&gt;". </p>

</div>
</div>
<a id="a4f78f6b785dbc43f74d44c6bb39cfb78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f78f6b785dbc43f74d44c6bb39cfb78">&sect;&nbsp;</a></span>reader()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextReaderPtr reader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab13d5085d6f8bb5fc391fdc1ad1f8000"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab13d5085d6f8bb5fc391fdc1ad1f8000">&sect;&nbsp;</a></span>writer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextWriterPtr writer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4964d8defcb0f638a51963d436188f12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4964d8defcb0f638a51963d436188f12">&sect;&nbsp;</a></span>OutputToStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void OutputToStream </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adfcd8e84805c262d8cbca79a83f9d4cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfcd8e84805c262d8cbca79a83f9d4cc">&sect;&nbsp;</a></span>SkipObjects()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int SkipObjects </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"><em>pConv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Skip past first n objects in input stream (or current one with n=0) Returns 1 on success, -1 on error and 0 if not implemented </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBFormat.shtml#a1f0ee7ba19cc62b53a7ee06fa4f91509">OBFormat</a>.</p>

</div>
</div>
<a id="a45db88b29eb37e9dd105bf4032e421d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45db88b29eb37e9dd105bf4032e421d2">&sect;&nbsp;</a></span>TypeID()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* TypeID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Redefined by each plugin type: "formats", "fingerprints", etc. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">OBPlugin</a>.</p>

</div>
</div>
<a id="a663171ec9788e2d1621d374848b3888b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a663171ec9788e2d1621d374848b3888b">&sect;&nbsp;</a></span>WriteMolecule()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool WriteMolecule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The "API" interface Write function. </p>
<p>Writes a single object Does not delete the object; can be used with a pointer to an chem object on the heap or the stack. </p><dl class="section return"><dt>Returns</dt><dd>false on error. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a0d49a0baf30d9e34b8b32f9d61e3043b">OBMoleculeFormat::DeleteDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a id="ab87525f269e7819d8462f450d30d56a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab87525f269e7819d8462f450d30d56a7">&sect;&nbsp;</a></span>Description()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Information on this format. Printed out in response to -Hxxx option where xxx id the id of the format. </p>
<p>Must be provided by each format class. Can include a list of command line Options. These may be used to construction check boxes, radio buttons etc for GUI interface. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">OBPlugin</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#af0bee894a9ed7ca61637452dc2e264f2">OBConversion::GetNextFormat()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f">OBConversion::RegisterOptionParam()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a id="a1870e0d80a223ef4e1661be80029dbec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1870e0d80a223ef4e1661be80029dbec">&sect;&nbsp;</a></span>TargetClassDescription()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * TargetClassDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A decription of the chemical object converted by this format. </p>
<p>If not provided, the object type used by the default format is used (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>). </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1717ba1ed3f8131d7a0f3b0d6031f5af">OBConversion::ReportNumberConverted()</a>.</p>

</div>
</div>
<a id="a1d3a8785a0ad0c85b98fa3406a64d50f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d3a8785a0ad0c85b98fa3406a64d50f">&sect;&nbsp;</a></span>SpecificationURL()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* SpecificationURL </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Web address where the format is defined. </p>

</div>
</div>
<a id="a0e10219d8aedefa78ef16fc7fded85ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e10219d8aedefa78ef16fc7fded85ec">&sect;&nbsp;</a></span>GetMIMEType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetMIMEType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Chemical MIME type associated with this file type (if any) </p>

</div>
</div>
<a id="a94a94537cc5ba96b1876db1b612b91a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94a94537cc5ba96b1876db1b612b91a3">&sect;&nbsp;</a></span>Flags()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int Flags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Decribes the capabilities of the format (Read only etc.) </p>
<p>Currently, can be a bitwise OR of any of the following NOTREADABLE READONEONLY NOTWRITABLE WRITEONEONLY DEFAULTFORMAT READBINARY WRITEBINARY READXML </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a0d49a0baf30d9e34b8b32f9d61e3043b">OBMoleculeFormat::DeleteDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#af0bee894a9ed7ca61637452dc2e264f2">OBConversion::GetNextFormat()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ae823ec69144009d84047d8284b9be282">OBConversion::SetInFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb5ce338a2041b036b030758edc203e2">OBConversion::SetInStream()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a0f636aa9deb24063adcbd8a62dfa04fa">OBConversion::SetOutFormat()</a>.</p>

</div>
</div>
<a id="a0924b1a442d147fa036bff23a4cf04ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0924b1a442d147fa036bff23a4cf04ef">&sect;&nbsp;</a></span>MakeNewInstance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* MakeNewInstance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a pointer to a new instance of the format, or NULL if fails. Normally a single global instance is used but this may cause problems if there are member variables and the format is used in more than one place in the program. </dd></dl>

</div>
</div>
<a id="a47a434f63a789f142966304e35aa6952"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47a434f63a789f142966304e35aa6952">&sect;&nbsp;</a></span>RegisterFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int RegisterFormat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>MIME</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a20a0d20f46d3b003d99d1f5822c2037d">OBConversion::RegisterFormat()</a>.</p>

</div>
</div>
<a id="ae0859fdbf134af95a8231eb32c73b7db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0859fdbf134af95a8231eb32c73b7db">&sect;&nbsp;</a></span>Display()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Display </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Provides a description in txt of the format specified by itr. If param starts with "in", "read", "out" or "write" only the appropriate formats are output. The others return false. If param contains "verbose", the whole description is output. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#gae0859fdbf134af95a8231eb32c73b7db">OBPlugin</a>.</p>

</div>
</div>
<a id="aca0c09ee719aba9da34cb281aa0db6a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca0c09ee719aba9da34cb281aa0db6a5">&sect;&nbsp;</a></span>FormatFromMIME()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromMIME </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>MIME</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aca0c09ee719aba9da34cb281aa0db6a5">OBConversion::FormatFromMIME()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="ae286ac3ecc365473ace5c0da2c656ffe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae286ac3ecc365473ace5c0da2c656ffe">&sect;&nbsp;</a></span>_pmol</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* _pmol</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab50420582d1794a71702ae17e176dc07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab50420582d1794a71702ae17e176dc07">&sect;&nbsp;</a></span>_pxmlConv</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* _pxmlConv</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5fd9fbe1a6ecd9798543ec2a55c472a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5fd9fbe1a6ecd9798543ec2a55c472a8">&sect;&nbsp;</a></span>_prefix</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _prefix</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5e2c3ec36cd04bac7ecad43b9f5501a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e2c3ec36cd04bac7ecad43b9f5501a2">&sect;&nbsp;</a></span>baseindent</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int baseindent</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4b00721003b8d35559a55c9098ff36c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b00721003b8d35559a55c9098ff36c5">&sect;&nbsp;</a></span>ind</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int ind</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8000c477c493f1dc954e8a538ae6fda8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8000c477c493f1dc954e8a538ae6fda8">&sect;&nbsp;</a></span>nsdecl</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string nsdecl</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac0224265e7d214b7ed98e091fe559c88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0224265e7d214b7ed98e091fe559c88">&sect;&nbsp;</a></span>_embedlevel</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int _embedlevel</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="xml_8h_source.shtml">xml.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
