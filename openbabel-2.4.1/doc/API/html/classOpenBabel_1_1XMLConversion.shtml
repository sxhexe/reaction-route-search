<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>XMLConversion Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-types">Protected Types</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1XMLConversion-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">XMLConversion Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="xml_8h_source.shtml">openbabel/xml.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for XMLConversion:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1XMLConversion.png" usemap="#XMLConversion_map" alt=""/>
  <map id="XMLConversion_map" name="XMLConversion_map">
<area href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. " alt="OBConversion" shape="rect" coords="0,0,104,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a6fbcab1e9ed906780aa61cba35c3744a"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; std::string, <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a></td></tr>
<tr class="separator:a6fbcab1e9ed906780aa61cba35c3744a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a88492ed87e2bb55fa507a811230aa843"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a88492ed87e2bb55fa507a811230aa843">XMLConversion</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr class="separator:a88492ed87e2bb55fa507a811230aa843"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac1b603c1695a1a41ebbeaa3fd398e10"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#aac1b603c1695a1a41ebbeaa3fd398e10">~XMLConversion</a> ()</td></tr>
<tr class="separator:aac1b603c1695a1a41ebbeaa3fd398e10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59c32b70bb5bf6ee27b0611920d5afde"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a59c32b70bb5bf6ee27b0611920d5afde">SetupReader</a> ()</td></tr>
<tr class="separator:a59c32b70bb5bf6ee27b0611920d5afde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af91d68d5aff24430ababf0a5d847b9cb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#af91d68d5aff24430ababf0a5d847b9cb">SetupWriter</a> ()</td></tr>
<tr class="separator:af91d68d5aff24430ababf0a5d847b9cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad107b052021a4cd6976288dc3d9d797b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#ad107b052021a4cd6976288dc3d9d797b">ReadXML</a> (<a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> *pFormat, <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb)</td></tr>
<tr class="separator:ad107b052021a4cd6976288dc3d9d797b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5615879f0acad951ce4c86dca89d328"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#ae5615879f0acad951ce4c86dca89d328">SkipXML</a> (const char *ctag)</td></tr>
<tr class="separator:ae5615879f0acad951ce4c86dca89d328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cc38e7988805424c15d68f5444a2a5d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">IsLast</a> ()</td></tr>
<tr class="separator:a0cc38e7988805424c15d68f5444a2a5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a162677bee472136c7078735ac5a3142b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a162677bee472136c7078735ac5a3142b">GetOutputIndex</a> ()</td></tr>
<tr class="separator:a162677bee472136c7078735ac5a3142b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a503005e902a848ab2ec665e1ebcab06e"><td class="memItemLeft" align="right" valign="top">xmlTextReaderPtr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a503005e902a848ab2ec665e1ebcab06e">GetReader</a> () const</td></tr>
<tr class="separator:a503005e902a848ab2ec665e1ebcab06e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1b388db38d0ea2f4c7d94bf0c1c2090"><td class="memItemLeft" align="right" valign="top">xmlTextWriterPtr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#ae1b388db38d0ea2f4c7d94bf0c1c2090">GetWriter</a> () const</td></tr>
<tr class="separator:ae1b388db38d0ea2f4c7d94bf0c1c2090"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4964d8defcb0f638a51963d436188f12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a> ()</td></tr>
<tr class="separator:a4964d8defcb0f638a51963d436188f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82425091d5dc3a7becda24e6cd3d13db"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">LookForNamespace</a> ()</td></tr>
<tr class="separator:a82425091d5dc3a7becda24e6cd3d13db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad465787fba2c11cf2574fb3d142460b5"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#ad465787fba2c11cf2574fb3d142460b5">GetAttribute</a> (const char *attrname)</td></tr>
<tr class="separator:ad465787fba2c11cf2574fb3d142460b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81f0e81929276d8fa2d28af1bc47960c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a81f0e81929276d8fa2d28af1bc47960c">GetContent</a> ()</td></tr>
<tr class="separator:a81f0e81929276d8fa2d28af1bc47960c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5717310e3e50ca47144910f9968d2011"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a5717310e3e50ca47144910f9968d2011">GetContentInt</a> (int &amp;value)</td></tr>
<tr class="separator:a5717310e3e50ca47144910f9968d2011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b14e97eab5859b8a02cd97abfc7e860"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a7b14e97eab5859b8a02cd97abfc7e860">GetContentDouble</a> (double &amp;value)</td></tr>
<tr class="separator:a7b14e97eab5859b8a02cd97abfc7e860"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6af42ed37c470cee546f3aa160a363d4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6af42ed37c470cee546f3aa160a363d4">CopyOptions</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pSourceConv, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ=<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116ab1d5eac4b1dca480c8056eaea7663b7a">ALL</a>)</td></tr>
<tr class="separator:a6af42ed37c470cee546f3aa160a363d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Parameter get and set</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>These return a filtered stream for reading/writing (possible filters include compression, decompression, and newline transformation) </p>
</div></td></tr>
<tr class="memitem:a3d20fbc61e06b34c849384597ba8e0cc"><td class="memItemLeft" align="right" valign="top">std::istream *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d20fbc61e06b34c849384597ba8e0cc">GetInStream</a> () const</td></tr>
<tr class="separator:a3d20fbc61e06b34c849384597ba8e0cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1784444b6d9c8a5f3c3d0514e2684ec6"><td class="memItemLeft" align="right" valign="top">std::ostream *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1784444b6d9c8a5f3c3d0514e2684ec6">GetOutStream</a> () const</td></tr>
<tr class="separator:a1784444b6d9c8a5f3c3d0514e2684ec6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb5ce338a2041b036b030758edc203e2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb5ce338a2041b036b030758edc203e2">SetInStream</a> (std::istream *pIn, bool takeOwnership=false)</td></tr>
<tr class="separator:adb5ce338a2041b036b030758edc203e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa29cdb79a2a4eb46aa0c7a62ba731f9f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa29cdb79a2a4eb46aa0c7a62ba731f9f">SetOutStream</a> (std::ostream *pOut, bool takeOwnership=false)</td></tr>
<tr class="separator:aa29cdb79a2a4eb46aa0c7a62ba731f9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a090e63e03a6f4a129d0007c6c0fc7bb0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a090e63e03a6f4a129d0007c6c0fc7bb0">SetInAndOutFormats</a> (const char *inID, const char *outID, bool ingzip=false, bool outgzip=false)</td></tr>
<tr class="separator:a090e63e03a6f4a129d0007c6c0fc7bb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8badee98e367a3410bcb76163f7eeb87"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8badee98e367a3410bcb76163f7eeb87">SetInAndOutFormats</a> (<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pIn, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pOut, bool ingzip=false, bool outgzip=false)</td></tr>
<tr class="separator:a8badee98e367a3410bcb76163f7eeb87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ea0b4fd606d186df3973cfca1dfe601"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9ea0b4fd606d186df3973cfca1dfe601">SetInFormat</a> (const char *inID, bool isgzip=false)</td></tr>
<tr class="separator:a9ea0b4fd606d186df3973cfca1dfe601"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae823ec69144009d84047d8284b9be282"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ae823ec69144009d84047d8284b9be282">SetInFormat</a> (<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pIn, bool isgzip=false)</td></tr>
<tr class="separator:ae823ec69144009d84047d8284b9be282"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a4a117fa97cfcfb225d738ad2eb414b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5a4a117fa97cfcfb225d738ad2eb414b">SetOutFormat</a> (const char *outID, bool isgzip=false)</td></tr>
<tr class="separator:a5a4a117fa97cfcfb225d738ad2eb414b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f636aa9deb24063adcbd8a62dfa04fa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a0f636aa9deb24063adcbd8a62dfa04fa">SetOutFormat</a> (<a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pOut, bool isgzip=false)</td></tr>
<tr class="separator:a0f636aa9deb24063adcbd8a62dfa04fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94e958a40abf04e41dde68b5e466bd31"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a94e958a40abf04e41dde68b5e466bd31">GetInFormat</a> () const</td></tr>
<tr class="separator:a94e958a40abf04e41dde68b5e466bd31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3d45af23c80e2d89974ed5472ab187b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#af3d45af23c80e2d89974ed5472ab187b">GetOutFormat</a> () const</td></tr>
<tr class="separator:af3d45af23c80e2d89974ed5472ab187b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab013bf3af4c922316e9ff83dd2972c2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab013bf3af4c922316e9ff83dd2972c2f">GetInGzipped</a> () const</td></tr>
<tr class="separator:ab013bf3af4c922316e9ff83dd2972c2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a710427c712878d0647cc0cc5c7b6cf11"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a710427c712878d0647cc0cc5c7b6cf11">GetOutGzipped</a> () const</td></tr>
<tr class="separator:a710427c712878d0647cc0cc5c7b6cf11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc8e32bcf9191debcf526f1b32e7b9dc"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc8e32bcf9191debcf526f1b32e7b9dc">GetInFilename</a> () const</td></tr>
<tr class="separator:acc8e32bcf9191debcf526f1b32e7b9dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a52d3cc312a162316fa83992c7d367f"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8a52d3cc312a162316fa83992c7d367f">GetOutFilename</a> () const</td></tr>
<tr class="separator:a8a52d3cc312a162316fa83992c7d367f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af867d03338ae3ab3f85fc614cb1a0591"><td class="memItemLeft" align="right" valign="top">std::streampos&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#af867d03338ae3ab3f85fc614cb1a0591">GetInPos</a> () const</td></tr>
<tr class="separator:af867d03338ae3ab3f85fc614cb1a0591"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af646f7b39aeeefb64394aba10a85cfdf"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#af646f7b39aeeefb64394aba10a85cfdf">GetInLen</a> () const</td></tr>
<tr class="separator:af646f7b39aeeefb64394aba10a85cfdf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67574edc9510587f101552c2cbb61006"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a67574edc9510587f101552c2cbb61006">GetTitle</a> () const</td></tr>
<tr class="separator:a67574edc9510587f101552c2cbb61006"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c0cb28a16189434c940a205ff8f3e99"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8c0cb28a16189434c940a205ff8f3e99">GetAuxConv</a> () const</td></tr>
<tr class="separator:a8c0cb28a16189434c940a205ff8f3e99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53a1041e7803e63b9bca06ad18bea4fe"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a53a1041e7803e63b9bca06ad18bea4fe">SetAuxConv</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr class="separator:a53a1041e7803e63b9bca06ad18bea4fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Supported file format</div></td></tr>
<tr class="memitem:a137c540357b45e73f65e602e1196eed7"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a137c540357b45e73f65e602e1196eed7">GetSupportedInputFormat</a> ()</td></tr>
<tr class="separator:a137c540357b45e73f65e602e1196eed7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a353b3a6a53808b22361c9f44713978e8"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a353b3a6a53808b22361c9f44713978e8">GetSupportedOutputFormat</a> ()</td></tr>
<tr class="separator:a353b3a6a53808b22361c9f44713978e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Conversion</div></td></tr>
<tr class="memitem:acc3cc99e2ff0113c9ca6a64f3de71300"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc3cc99e2ff0113c9ca6a64f3de71300">Convert</a> (std::istream *is, std::ostream *os)</td></tr>
<tr class="separator:acc3cc99e2ff0113c9ca6a64f3de71300"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95c512f009bf277d9d6299d9f5d0c13d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">Convert</a> ()</td></tr>
<tr class="separator:a95c512f009bf277d9d6299d9f5d0c13d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d12b0f7f38951d2d1065fc7ddae4229"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">FullConvert</a> (std::vector&lt; std::string &gt; &amp;FileList, std::string &amp;OutputFileName, std::vector&lt; std::string &gt; &amp;OutputFileList)</td></tr>
<tr class="separator:a9d12b0f7f38951d2d1065fc7ddae4229"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Conversion loop control</div></td></tr>
<tr class="memitem:a342df96ba3cd8751e19758939dbef2f5"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">AddChemObject</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb)</td></tr>
<tr class="separator:a342df96ba3cd8751e19758939dbef2f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17bfbe7570517993bcfcb1916bd437d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a17bfbe7570517993bcfcb1916bd437d0">GetChemObject</a> ()</td></tr>
<tr class="separator:a17bfbe7570517993bcfcb1916bd437d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f16d80b577c580920f0c5b8abd5973"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#af5f16d80b577c580920f0c5b8abd5973">IsFirstInput</a> ()</td></tr>
<tr class="separator:af5f16d80b577c580920f0c5b8abd5973"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94b09151245e8c6accfc418a866d329"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab94b09151245e8c6accfc418a866d329">SetFirstInput</a> (bool b=true)</td></tr>
<tr class="separator:ab94b09151245e8c6accfc418a866d329"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b26998ae845717455f1fff3c59470be"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3b26998ae845717455f1fff3c59470be">GetOutputIndex</a> () const</td></tr>
<tr class="separator:a3b26998ae845717455f1fff3c59470be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7037cb9de4584f498b0099b7584bdc97"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7037cb9de4584f498b0099b7584bdc97">SetOutputIndex</a> (int indx)</td></tr>
<tr class="separator:a7037cb9de4584f498b0099b7584bdc97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38d59749ba2add8597210717e804e4db"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a38d59749ba2add8597210717e804e4db">SetMoreFilesToCome</a> ()</td></tr>
<tr class="separator:a38d59749ba2add8597210717e804e4db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dacf92f4f0cbf7a1f269143659ceb88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a4dacf92f4f0cbf7a1f269143659ceb88">SetOneObjectOnly</a> (bool b=true)</td></tr>
<tr class="separator:a4dacf92f4f0cbf7a1f269143659ceb88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19dedcd05ee3ab11ed85c29ff1fef810"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a19dedcd05ee3ab11ed85c29ff1fef810">SetLast</a> (bool b)</td></tr>
<tr class="separator:a19dedcd05ee3ab11ed85c29ff1fef810"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac157f0eb86dba757b3ebae08ffffb8d2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac157f0eb86dba757b3ebae08ffffb8d2">IsLastFile</a> ()</td></tr>
<tr class="separator:ac157f0eb86dba757b3ebae08ffffb8d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a8e6ea8f7576186d25447059bf09a70"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1a8e6ea8f7576186d25447059bf09a70">GetCount</a> () const</td></tr>
<tr class="separator:a1a8e6ea8f7576186d25447059bf09a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab188d28fc6fab286f1b4ff18c0a81ae1"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">Namespaces</a> ()</td></tr>
<tr class="separator:ab188d28fc6fab286f1b4ff18c0a81ae1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09777c99e10d28476c0c920dd784a235"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a09777c99e10d28476c0c920dd784a235">RegisterXMLFormat</a> (<a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> *pFormat, bool IsDefault=false, const char *uri=NULL)</td></tr>
<tr class="separator:a09777c99e10d28476c0c920dd784a235"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a482fc8135a5ecf62b88f7e5348e62fbf"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf">GetDerived</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv, bool ForReading=true)</td></tr>
<tr class="separator:a482fc8135a5ecf62b88f7e5348e62fbf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2edcc253b10dd0b9f5e1b600a1dc24e9"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a2edcc253b10dd0b9f5e1b600a1dc24e9">GetDefaultXMLClass</a> ()</td></tr>
<tr class="separator:a2edcc253b10dd0b9f5e1b600a1dc24e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a499db0113e7e419a0488316e2c51ca05"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a499db0113e7e419a0488316e2c51ca05">ReadStream</a> (void *context, char *buffer, int len)</td></tr>
<tr class="separator:a499db0113e7e419a0488316e2c51ca05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dcb149cda158829b4bd51979532798a"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a2dcb149cda158829b4bd51979532798a">WriteStream</a> (void *context, const char *buffer, int len)</td></tr>
<tr class="separator:a2dcb149cda158829b4bd51979532798a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Collection of formats</div></td></tr>
<tr class="memitem:a20a0d20f46d3b003d99d1f5822c2037d"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a20a0d20f46d3b003d99d1f5822c2037d">RegisterFormat</a> (const char *ID, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pFormat, const char *MIME=NULL)</td></tr>
<tr class="separator:a20a0d20f46d3b003d99d1f5822c2037d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b0f5849719757fa2e79289e4dc486b5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8b0f5849719757fa2e79289e4dc486b5">FindFormat</a> (const char *ID)</td></tr>
<tr class="separator:a8b0f5849719757fa2e79289e4dc486b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44ef357c6e36a5e510feb0b0ce20f5f0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a44ef357c6e36a5e510feb0b0ce20f5f0">FindFormat</a> (const std::string ID)</td></tr>
<tr class="separator:a44ef357c6e36a5e510feb0b0ce20f5f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f85a8c30f5c913e08225f85c6bc020b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3f85a8c30f5c913e08225f85c6bc020b">FormatFromExt</a> (const char *filename)</td></tr>
<tr class="separator:a3f85a8c30f5c913e08225f85c6bc020b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab671d238595a27a0f3018849dd6e4220"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab671d238595a27a0f3018849dd6e4220">FormatFromExt</a> (const char *filename, bool &amp;isgzip)</td></tr>
<tr class="separator:ab671d238595a27a0f3018849dd6e4220"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e4d4ce20eb43effa105dc25b95050ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1e4d4ce20eb43effa105dc25b95050ef">FormatFromExt</a> (const std::string filename)</td></tr>
<tr class="separator:a1e4d4ce20eb43effa105dc25b95050ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5ea8bd36fc9d0098734f1623f02c65a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ae5ea8bd36fc9d0098734f1623f02c65a">FormatFromExt</a> (const std::string filename, bool &amp;isgzip)</td></tr>
<tr class="separator:ae5ea8bd36fc9d0098734f1623f02c65a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca0c09ee719aba9da34cb281aa0db6a5"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aca0c09ee719aba9da34cb281aa0db6a5">FormatFromMIME</a> (const char *MIME)</td></tr>
<tr class="separator:aca0c09ee719aba9da34cb281aa0db6a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0bee894a9ed7ca61637452dc2e264f2"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#af0bee894a9ed7ca61637452dc2e264f2">GetNextFormat</a> (<a class="el" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a> &amp;itr, const char *&amp;str, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&amp;pFormat)</td></tr>
<tr class="separator:af0bee894a9ed7ca61637452dc2e264f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Information</div></td></tr>
<tr class="memitem:a26b5cfc6a9011d19d78dae56d31296eb"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a26b5cfc6a9011d19d78dae56d31296eb">Description</a> ()</td></tr>
<tr class="separator:a26b5cfc6a9011d19d78dae56d31296eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:afecc511417086050a7506ca632546cdb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml#afecc511417086050a7506ca632546cdb">_SkipNextRead</a></td></tr>
<tr class="separator:afecc511417086050a7506ca632546cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"></a>
Protected Types</h2></td></tr>
<tr class="memitem:a9df37d33062bde3400dd034ee7feaa92"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; std::string, int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OPAMapType</a></td></tr>
<tr class="separator:a9df37d33062bde3400dd034ee7feaa92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca23687a76af47eada4f4a1659b17320"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1FilteringInputStream.shtml">FilteringInputStream</a>&lt; <a class="el" href="classOpenBabel_1_1LineEndingExtractor.shtml">LineEndingExtractor</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aca23687a76af47eada4f4a1659b17320">LEInStream</a></td></tr>
<tr class="separator:aca23687a76af47eada4f4a1659b17320"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a631730a938bc2219b90c027932db3443"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a631730a938bc2219b90c027932db3443">SetStartAndEnd</a> ()</td></tr>
<tr class="separator:a631730a938bc2219b90c027932db3443"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23aaa3e3be1f55323cd956b53f6b0417"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OpenAndSetFormat</a> (bool SetFormat, std::ifstream *is, std::stringstream *ss=NULL)</td></tr>
<tr class="separator:a23aaa3e3be1f55323cd956b53f6b0417"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:a3b2ad8335b0a9b18bc22bc534b7ffb28"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OPAMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3b2ad8335b0a9b18bc22bc534b7ffb28">OptionParamArray</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ)</td></tr>
<tr class="separator:a3b2ad8335b0a9b18bc22bc534b7ffb28"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a20354c0458b4e08dc62db4a4e8717c61"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a20354c0458b4e08dc62db4a4e8717c61">InFilename</a></td></tr>
<tr class="separator:a20354c0458b4e08dc62db4a4e8717c61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a259daaddfd4bbb18e69aefcf8ba53ead"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a259daaddfd4bbb18e69aefcf8ba53ead">OutFilename</a></td></tr>
<tr class="separator:a259daaddfd4bbb18e69aefcf8ba53ead"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2937184c11df54ac9323d7c96b98ec36"><td class="memItemLeft" align="right" valign="top">std::istream *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a2937184c11df54ac9323d7c96b98ec36">pInput</a></td></tr>
<tr class="separator:a2937184c11df54ac9323d7c96b98ec36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6940dea08e0e2a979ff95b7567128e3"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::istream * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#af6940dea08e0e2a979ff95b7567128e3">ownedInStreams</a></td></tr>
<tr class="separator:af6940dea08e0e2a979ff95b7567128e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b1c527969fb4e7669a452b83fab46c9"><td class="memItemLeft" align="right" valign="top">std::ostream *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a2b1c527969fb4e7669a452b83fab46c9">pOutput</a></td></tr>
<tr class="separator:a2b1c527969fb4e7669a452b83fab46c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc68975108031811bcf41b6a2e854daf"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::ostream * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#adc68975108031811bcf41b6a2e854daf">ownedOutStreams</a></td></tr>
<tr class="separator:adc68975108031811bcf41b6a2e854daf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70c004d49155986bcc163bac07df0e4e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a70c004d49155986bcc163bac07df0e4e">pInFormat</a></td></tr>
<tr class="separator:a70c004d49155986bcc163bac07df0e4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d630735f21540de237cdcc32916bffb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a4d630735f21540de237cdcc32916bffb">pOutFormat</a></td></tr>
<tr class="separator:a4d630735f21540de237cdcc32916bffb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d9e064f9e26ed2e52b140b7cc34a8d6"><td class="memItemLeft" align="right" valign="top">std::map&lt; std::string, std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d9e064f9e26ed2e52b140b7cc34a8d6">OptionsArray</a> [3]</td></tr>
<tr class="separator:a3d9e064f9e26ed2e52b140b7cc34a8d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a075e1e3c9dd399cef584d7338cc37938"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a075e1e3c9dd399cef584d7338cc37938">Index</a></td></tr>
<tr class="separator:a075e1e3c9dd399cef584d7338cc37938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac52d6fdbe254370662cccd43af0248f2"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac52d6fdbe254370662cccd43af0248f2">StartNumber</a></td></tr>
<tr class="separator:ac52d6fdbe254370662cccd43af0248f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb31d46cbf6e64e86bae6d24d90c9702"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb31d46cbf6e64e86bae6d24d90c9702">EndNumber</a></td></tr>
<tr class="separator:adb31d46cbf6e64e86bae6d24d90c9702"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad462966ed963f892117056de1eba502"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aad462966ed963f892117056de1eba502">Count</a></td></tr>
<tr class="separator:aad462966ed963f892117056de1eba502"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae14ad56a72461f3c598cb4dbd151cdc7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ae14ad56a72461f3c598cb4dbd151cdc7">m_IsFirstInput</a></td></tr>
<tr class="separator:ae14ad56a72461f3c598cb4dbd151cdc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6025251d18641dab4058222b69d1a98c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6025251d18641dab4058222b69d1a98c">m_IsLast</a></td></tr>
<tr class="separator:a6025251d18641dab4058222b69d1a98c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4ec386870233b42d353a4d66d7b0cee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab4ec386870233b42d353a4d66d7b0cee">MoreFilesToCome</a></td></tr>
<tr class="separator:ab4ec386870233b42d353a4d66d7b0cee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7002deaca76f3fc235c76be1fcc38dfa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7002deaca76f3fc235c76be1fcc38dfa">OneObjectOnly</a></td></tr>
<tr class="separator:a7002deaca76f3fc235c76be1fcc38dfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bdd5c815677e240cec9c2e4a71d73f2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9bdd5c815677e240cec9c2e4a71d73f2">ReadyToInput</a></td></tr>
<tr class="separator:a9bdd5c815677e240cec9c2e4a71d73f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12c288e6436a8acaa0ae85e372f99093"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a12c288e6436a8acaa0ae85e372f99093">SkippedMolecules</a></td></tr>
<tr class="separator:a12c288e6436a8acaa0ae85e372f99093"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87a16257726b97ac5f7a14b771b675ec"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a87a16257726b97ac5f7a14b771b675ec">inFormatGzip</a></td></tr>
<tr class="separator:a87a16257726b97ac5f7a14b771b675ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86d77307999432c68ba9bff261484493"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a86d77307999432c68ba9bff261484493">outFormatGzip</a></td></tr>
<tr class="separator:a86d77307999432c68ba9bff261484493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20a1d62cb932144d66e52d7c823fb0a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a20a1d62cb932144d66e52d7c823fb0a1">pOb1</a></td></tr>
<tr class="separator:a20a1d62cb932144d66e52d7c823fb0a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab77068f3bb4cb88694a6be653c00f04e"><td class="memItemLeft" align="right" valign="top">std::streampos&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab77068f3bb4cb88694a6be653c00f04e">wInpos</a></td></tr>
<tr class="separator:ab77068f3bb4cb88694a6be653c00f04e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a545a1341008a23c2dd0721c164a9ad89"><td class="memItemLeft" align="right" valign="top">std::streampos&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a545a1341008a23c2dd0721c164a9ad89">rInpos</a></td></tr>
<tr class="separator:a545a1341008a23c2dd0721c164a9ad89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afee7e5bffccd262faaff0417e5ae9af3"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#afee7e5bffccd262faaff0417e5ae9af3">wInlen</a></td></tr>
<tr class="separator:afee7e5bffccd262faaff0417e5ae9af3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a897c3f35235e4ca7da37ca245db065"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1a897c3f35235e4ca7da37ca245db065">rInlen</a></td></tr>
<tr class="separator:a1a897c3f35235e4ca7da37ca245db065"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3846aa2ce719d5820b66e302c6aeaa8a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3846aa2ce719d5820b66e302c6aeaa8a">pAuxConv</a></td></tr>
<tr class="separator:a3846aa2ce719d5820b66e302c6aeaa8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2322eb2aa14e8d954573abbda9c50e62"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a2322eb2aa14e8d954573abbda9c50e62">SupportedInputFormat</a></td></tr>
<tr class="separator:a2322eb2aa14e8d954573abbda9c50e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50233a5c7c63d03056923f13c7acbb1b"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a50233a5c7c63d03056923f13c7acbb1b">SupportedOutputFormat</a></td></tr>
<tr class="separator:a50233a5c7c63d03056923f13c7acbb1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:a2daf6d1435032c73c65000af61a4a5d4"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a2daf6d1435032c73c65000af61a4a5d4">pDefaultFormat</a></td></tr>
<tr class="separator:a2daf6d1435032c73c65000af61a4a5d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Option handling</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpae8d3462ed2d1daa8b4dfaee882a3e7f"></a>Three types of Option provide information and control instructions to the conversion process, INOPTIONS, OUTOPTIONS, GENOPTIONS, and are stored in each <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> object in separate maps. Each option has an id and an optional text string. They are set individually by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8ad01448cb4d5237ed5f3d8eeaf39804" title="Set an option of specified type, with optional text. ">AddOption()</a> or (rarely) collectively in <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac07772684eade5d0d11b8979f0772cf5" title="Set several single character options of specified type from string like ab&quot;btext&quot;c&quot;ctext&quot;. ">SetOptions()</a>. Options cannot be altered but can be replaced with <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8ad01448cb4d5237ed5f3d8eeaf39804" title="Set an option of specified type, with optional text. ">AddOption()</a> and deleted with <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a82f1d6a21880f898673f8a1b45d15eee">RemoveOption()</a>, which, however, should be used in an op derived from <a class="el" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output. ">OBOp</a> (because of iterator invalidation).</p>
<p>If the "Convert" interface is used, the GENOPTIONS are acted upon in the <a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">OBBase::DoTransformations()</a> functions (currently only <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> has one). This happens after the object has been input but before it has been output. All the options are available to input and output formats, etc. via the <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab3d2674da23d09868ffedf551abbce0c" title="Determine whether an option is set. ">IsOption()</a> function, and the interpretation of any text string needs to be done subsequently.</p>
<p>In the commandline interface, options with single character ids are are indicated like -s, and those with multiple character ids like &ndash;gen3D. An option may have one or more parameters which appear, space separated, in the option's text string. With babel, unless the option is at the end of the command, it is necessary for the number of its parameters to be exactly that specified in <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f" title="For example -h takes 0 parameters; -f takes 1. Call in a format constructor. ">RegisterOptionParam()</a>. The default is 0, but if it is more, and babel is likely to be used, this function should be called in the constructor of a format or op. With obabel (or the GUI), it is not necessary to call <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f" title="For example -h takes 0 parameters; -f takes 1. Call in a format constructor. ">RegisterOptionParam()</a>.</p>
<p>New GENOPTIONS can be defined (as plugins) using the class <a class="el" href="classOpenBabel_1_1OBOp.shtml" title="Operations to modify molecules before output. ">OBOp</a>.</p>
<p>It is customary for a format or op to document any INOPTIONS or OUTPTIONS it uses in its <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a26b5cfc6a9011d19d78dae56d31296eb">Description()</a> function. As well as providing documentation during use, this is also parsed by the GUI to construct its checkboxes,etc., so it is advisable to give new Descriptions the same form as existing ones.</p>
<p>Some conversion options, such as -f, -l, -m, are unlikely to be used in programming, but are listed in <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a26b5cfc6a9011d19d78dae56d31296eb">OBConversion::Description()</a>. The built-in GENOPTIONS for <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> objects are listed in <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol::ClassDescription()</a> which is in <a class="el" href="transform_8cpp.shtml" title="Perform command-line requested transformations for OBMol and SMARTS filtering. ">transform.cpp</a> and also in this documentation under <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8ad01448cb4d5237ed5f3d8eeaf39804" title="Set an option of specified type, with optional text. ">AddOption()</a>. </p>
</td></tr>
<tr class="memitem:aa5c5a0aac29d9e705d9b7b7b8aeb8116"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> { <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116a291d3d898fa3e1258eef693d56d600d7">INOPTIONS</a>, 
<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a>, 
<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116acfa24b0443c8420ac7fdf5eb009352b6">GENOPTIONS</a>, 
<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116ab1d5eac4b1dca480c8056eaea7663b7a">ALL</a>
 }</td></tr>
<tr class="separator:aa5c5a0aac29d9e705d9b7b7b8aeb8116"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3d2674da23d09868ffedf551abbce0c"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab3d2674da23d09868ffedf551abbce0c">IsOption</a> (const char *opt, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp=<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a>)</td></tr>
<tr class="separator:ab3d2674da23d09868ffedf551abbce0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7da66ef30fd0af867e9d3bd0df15f4a2"><td class="memItemLeft" align="right" valign="top">const std::map&lt; std::string, std::string &gt; *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7da66ef30fd0af867e9d3bd0df15f4a2">GetOptions</a> (<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp)</td></tr>
<tr class="separator:a7da66ef30fd0af867e9d3bd0df15f4a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ad01448cb4d5237ed5f3d8eeaf39804"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8ad01448cb4d5237ed5f3d8eeaf39804">AddOption</a> (const char *opt, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp=<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a>, const char *txt=NULL)</td></tr>
<tr class="separator:a8ad01448cb4d5237ed5f3d8eeaf39804"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f1d6a21880f898673f8a1b45d15eee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a82f1d6a21880f898673f8a1b45d15eee">RemoveOption</a> (const char *opt, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> optype)</td></tr>
<tr class="separator:a82f1d6a21880f898673f8a1b45d15eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac07772684eade5d0d11b8979f0772cf5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac07772684eade5d0d11b8979f0772cf5">SetOptions</a> (const char *options, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp)</td></tr>
<tr class="separator:ac07772684eade5d0d11b8979f0772cf5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a45eddab233711eb4e432ed5657358f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f">RegisterOptionParam</a> (std::string name, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pFormat, int numberParams=0, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ=<a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a>)</td></tr>
<tr class="separator:a6a45eddab233711eb4e432ed5657358f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1042e860531f4961b3b0245e9a92f4a7"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1042e860531f4961b3b0245e9a92f4a7">GetOptionParams</a> (std::string name, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ)</td></tr>
<tr class="separator:a1042e860531f4961b3b0245e9a92f4a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Convenience functions</h2></td></tr>
<tr class="memitem:a3d46d682999a7772db31a835fa4a8091"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">Write</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::ostream *pout=NULL)</td></tr>
<tr class="separator:a3d46d682999a7772db31a835fa4a8091"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18ce8681792d689dab8172a511c5a996"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a18ce8681792d689dab8172a511c5a996">WriteString</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, bool trimWhitespace=false)</td></tr>
<tr class="separator:a18ce8681792d689dab8172a511c5a996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad17f0a96643dec6840eda76c07a54698"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">WriteFile</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string filePath)</td></tr>
<tr class="separator:ad17f0a96643dec6840eda76c07a54698"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbe5bd25f0afb1c8cd622e41e61ebc70"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#acbe5bd25f0afb1c8cd622e41e61ebc70">CloseOutFile</a> ()</td></tr>
<tr class="separator:acbe5bd25f0afb1c8cd622e41e61ebc70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1204f9b613067a04ebfe881a58775918"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">Read</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::istream *pin=NULL)</td></tr>
<tr class="separator:a1204f9b613067a04ebfe881a58775918"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93558e9c89cda2e1a4f9fb2cadc5c8d1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a93558e9c89cda2e1a4f9fb2cadc5c8d1">ReadString</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a>)</td></tr>
<tr class="separator:a93558e9c89cda2e1a4f9fb2cadc5c8d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76d7d1bf8e0c05c19d5b5e991fd0ba2f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">ReadFile</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string filePath)</td></tr>
<tr class="separator:a76d7d1bf8e0c05c19d5b5e991fd0ba2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7424c6fe9292f59087d23e7748ac237e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OpenInAndOutFiles</a> (std::string infilepath, std::string outfilepath)</td></tr>
<tr class="separator:a7424c6fe9292f59087d23e7748ac237e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1717ba1ed3f8131d7a0f3b0d6031f5af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1717ba1ed3f8131d7a0f3b0d6031f5af">ReportNumberConverted</a> (int count, <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *pFormat=NULL)</td></tr>
<tr class="separator:a1717ba1ed3f8131d7a0f3b0d6031f5af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea0a1d956ad2f87302924423930c793b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aea0a1d956ad2f87302924423930c793b">NumInputObjects</a> ()</td></tr>
<tr class="separator:aea0a1d956ad2f87302924423930c793b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a442b17995d84d654e33ede11a63d7f80"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a442b17995d84d654e33ede11a63d7f80">GetDefaultFormat</a> ()</td></tr>
<tr class="separator:a442b17995d84d654e33ede11a63d7f80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4eb6eac5855fb3289c5a438d4084a052"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a4eb6eac5855fb3289c5a438d4084a052">BatchFileName</a> (std::string &amp;BaseName, std::string &amp;InFile)</td></tr>
<tr class="separator:a4eb6eac5855fb3289c5a438d4084a052"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44fbee02afc6de6a9f98bbbb6a2e12bf"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a44fbee02afc6de6a9f98bbbb6a2e12bf">IncrementedFileName</a> (std::string &amp;BaseName, const int <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aad462966ed963f892117056de1eba502">Count</a>)</td></tr>
<tr class="separator:a44fbee02afc6de6a9f98bbbb6a2e12bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39b6cebdf53672368cfa3edd8bc7740d"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a39b6cebdf53672368cfa3edd8bc7740d">CheckForUnintendedBatch</a> (const std::string &amp;infile, const std::string &amp;outfile)</td></tr>
<tr class="separator:a39b6cebdf53672368cfa3edd8bc7740d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aea73729570a576d9779df54c56ffac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a4aea73729570a576d9779df54c56ffac">ClearInStreams</a> ()</td></tr>
<tr class="separator:a4aea73729570a576d9779df54c56ffac"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A subclass for conversion of XML formats. </p>
<p>An extended <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> class which includes a libxml2 reader for use with XML formats. Copies an <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> and then extends it with a XML parser. Instances made on the heap are deleted when the original <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> object is.</p>
<p>This class is not intended to be used externally &ndash; instead use <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> which will find both XML and non-XML OBFormats.</p>
<p>Instead, this subclass also has support for handling specific needs in XML formats. For example, an XML file may include multiple namespaces, and the conversion should call appropriate <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml" title="Abstract class containing common functionality for XML formats. ">XMLBaseFormat</a> formats as needed. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="a6fbcab1e9ed906780aa61cba35c3744a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fbcab1e9ed906780aa61cba35c3744a">&sect;&nbsp;</a></span>NsMapType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;std::string, <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>*&gt; <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9df37d33062bde3400dd034ee7feaa92"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9df37d33062bde3400dd034ee7feaa92">&sect;&nbsp;</a></span>OPAMapType</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;std::string,int&gt; <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OPAMapType</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aca23687a76af47eada4f4a1659b17320"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca23687a76af47eada4f4a1659b17320">&sect;&nbsp;</a></span>LEInStream</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1FilteringInputStream.shtml">FilteringInputStream</a>&lt; <a class="el" href="classOpenBabel_1_1LineEndingExtractor.shtml">LineEndingExtractor</a> &gt; <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aca23687a76af47eada4f4a1659b17320">LEInStream</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="aa5c5a0aac29d9e705d9b7b7b8aeb8116"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5c5a0aac29d9e705d9b7b7b8aeb8116">&sect;&nbsp;</a></span>Option_type</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Three types of options set on the the command line by -a? , -x? , or -? </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa5c5a0aac29d9e705d9b7b7b8aeb8116a291d3d898fa3e1258eef693d56d600d7"></a>INOPTIONS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206"></a>OUTOPTIONS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa5c5a0aac29d9e705d9b7b7b8aeb8116acfa24b0443c8420ac7fdf5eb009352b6"></a>GENOPTIONS&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa5c5a0aac29d9e705d9b7b7b8aeb8116ab1d5eac4b1dca480c8056eaea7663b7a"></a>ALL&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a88492ed87e2bb55fa507a811230aa843"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88492ed87e2bb55fa507a811230aa843">&sect;&nbsp;</a></span>XMLConversion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"><em>pConv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Existing <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> instance copied. </p>

</div>
</div>
<a id="aac1b603c1695a1a41ebbeaa3fd398e10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac1b603c1695a1a41ebbeaa3fd398e10">&sect;&nbsp;</a></span>~XMLConversion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Frees reader and writer if necessary. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a59c32b70bb5bf6ee27b0611920d5afde"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59c32b70bb5bf6ee27b0611920d5afde">&sect;&nbsp;</a></span>SetupReader()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetupReader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>opens libxml2 reader </p>

</div>
</div>
<a id="af91d68d5aff24430ababf0a5d847b9cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af91d68d5aff24430ababf0a5d847b9cb">&sect;&nbsp;</a></span>SetupWriter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SetupWriter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>opens libxml2 writer </p>

</div>
</div>
<a id="ad107b052021a4cd6976288dc3d9d797b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad107b052021a4cd6976288dc3d9d797b">&sect;&nbsp;</a></span>ReadXML()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadXML </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> *&#160;</td>
          <td class="paramname"><em>pFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Parses the input xml stream and sends each element to the format's callback routines. </p>

</div>
</div>
<a id="ae5615879f0acad951ce4c86dca89d328"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5615879f0acad951ce4c86dca89d328">&sect;&nbsp;</a></span>SkipXML()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int SkipXML </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ctag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Read and discard XML text up to the next occurrence of the tag e.g."/molecule&gt;" This is left as the current node. Returns 1 on success, 0 if not found, -1 if failed. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">XMLBaseFormat::SkipObjects()</a>.</p>

</div>
</div>
<a id="ab188d28fc6fab286f1b4ff18c0a81ae1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab188d28fc6fab286f1b4ff18c0a81ae1">&sect;&nbsp;</a></span>Namespaces()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>&amp; Namespaces </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>This static function returns a reference to the map Avoids "static initialization order fiasco" </p>

</div>
</div>
<a id="a09777c99e10d28476c0c920dd784a235"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a09777c99e10d28476c0c920dd784a235">&sect;&nbsp;</a></span>RegisterXMLFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void RegisterXMLFormat </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> *&#160;</td>
          <td class="paramname"><em>pFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>IsDefault</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>uri</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">XMLConversion::Namespaces()</a>.</p>

</div>
</div>
<a id="a482fc8135a5ecf62b88f7e5348e62fbf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a482fc8135a5ecf62b88f7e5348e62fbf">&sect;&nbsp;</a></span>GetDerived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* GetDerived </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"><em>pConv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ForReading</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the extended <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> class, making it if necessary. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">XMLConversion::Namespaces()</a>, <a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">XMLMoleculeFormat::ReadMolecule()</a>, and <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">XMLBaseFormat::SkipObjects()</a>.</p>

</div>
</div>
<a id="a0cc38e7988805424c15d68f5444a2a5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cc38e7988805424c15d68f5444a2a5d">&sect;&nbsp;</a></span>IsLast()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Because <a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc3cc99e2ff0113c9ca6a64f3de71300" title="Conversion for single input and output stream. ">OBConversion::Convert</a> is still using the unextended <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> object we need to obtain the conversion paramters from it when requested </p>

</div>
</div>
<a id="a162677bee472136c7078735ac5a3142b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a162677bee472136c7078735ac5a3142b">&sect;&nbsp;</a></span>GetOutputIndex() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetOutputIndex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a503005e902a848ab2ec665e1ebcab06e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a503005e902a848ab2ec665e1ebcab06e">&sect;&nbsp;</a></span>GetReader()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextReaderPtr GetReader </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4f78f6b785dbc43f74d44c6bb39cfb78">XMLBaseFormat::reader()</a>.</p>

</div>
</div>
<a id="ae1b388db38d0ea2f4c7d94bf0c1c2090"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1b388db38d0ea2f4c7d94bf0c1c2090">&sect;&nbsp;</a></span>GetWriter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">xmlTextWriterPtr GetWriter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab13d5085d6f8bb5fc391fdc1ad1f8000">XMLBaseFormat::writer()</a>.</p>

</div>
</div>
<a id="a4964d8defcb0f638a51963d436188f12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4964d8defcb0f638a51963d436188f12">&sect;&nbsp;</a></span>OutputToStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void OutputToStream </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">XMLBaseFormat::OutputToStream()</a>.</p>

</div>
</div>
<a id="a2edcc253b10dd0b9f5e1b600a1dc24e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2edcc253b10dd0b9f5e1b600a1dc24e9">&sect;&nbsp;</a></span>GetDefaultXMLClass()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* GetDefaultXMLClass </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a82425091d5dc3a7becda24e6cd3d13db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82425091d5dc3a7becda24e6cd3d13db">&sect;&nbsp;</a></span>LookForNamespace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void LookForNamespace </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a499db0113e7e419a0488316e2c51ca05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a499db0113e7e419a0488316e2c51ca05">&sect;&nbsp;</a></span>ReadStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int ReadStream </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Static callback functions for xmlReaderForIO() </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">XMLConversion::LookForNamespace()</a>.</p>

</div>
</div>
<a id="a2dcb149cda158829b4bd51979532798a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dcb149cda158829b4bd51979532798a">&sect;&nbsp;</a></span>WriteStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int WriteStream </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>len</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">XMLConversion::LookForNamespace()</a>.</p>

</div>
</div>
<a id="ad465787fba2c11cf2574fb3d142460b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad465787fba2c11cf2574fb3d142460b5">&sect;&nbsp;</a></span>GetAttribute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetAttribute </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>attrname</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">XMLConversion::LookForNamespace()</a>.</p>

</div>
</div>
<a id="a81f0e81929276d8fa2d28af1bc47960c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81f0e81929276d8fa2d28af1bc47960c">&sect;&nbsp;</a></span>GetContent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetContent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets value to element content. Returns false if there is no content. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">XMLConversion::LookForNamespace()</a>.</p>

</div>
</div>
<a id="a5717310e3e50ca47144910f9968d2011"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5717310e3e50ca47144910f9968d2011">&sect;&nbsp;</a></span>GetContentInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetContentInt </td>
          <td>(</td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets value to element content as an integer. Returns false if there is no content. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">XMLConversion::LookForNamespace()</a>.</p>

</div>
</div>
<a id="a7b14e97eab5859b8a02cd97abfc7e860"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b14e97eab5859b8a02cd97abfc7e860">&sect;&nbsp;</a></span>GetContentDouble()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetContentDouble </td>
          <td>(</td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets value to element content as an double. Returns false if there is no content. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">XMLConversion::LookForNamespace()</a>.</p>

</div>
</div>
<a id="a20a0d20f46d3b003d99d1f5822c2037d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20a0d20f46d3b003d99d1f5822c2037d">&sect;&nbsp;</a></span>RegisterFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int RegisterFormat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td>
          <td class="paramname"><em>pFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>MIME</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Called once by each format class. </p>
<p>Class information on formats is collected by making an instance of the class derived from OBFormat(only one is usually required). <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a20a0d20f46d3b003d99d1f5822c2037d" title="Called once by each format class. ">RegisterFormat()</a> is called from its constructor.</p>
<p>If the compiled format is stored separately, like in a DLL or shared library, the initialization code makes an instance of the imported <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats. ">OBFormat</a> class. </p>

</div>
</div>
<a id="a8b0f5849719757fa2e79289e4dc486b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b0f5849719757fa2e79289e4dc486b5">&sect;&nbsp;</a></span>FindFormat() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FindFormat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Searches registered formats. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab671d238595a27a0f3018849dd6e4220">OBConversion::FormatFromExt()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9ea0b4fd606d186df3973cfca1dfe601">OBConversion::SetInFormat()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5a4a117fa97cfcfb225d738ad2eb414b">OBConversion::SetOutFormat()</a>.</p>

</div>
</div>
<a id="a44ef357c6e36a5e510feb0b0ce20f5f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44ef357c6e36a5e510feb0b0ce20f5f0">&sect;&nbsp;</a></span>FindFormat() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FindFormat </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>ID</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Searches registered formats. </p>
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a id="a3f85a8c30f5c913e08225f85c6bc020b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f85a8c30f5c913e08225f85c6bc020b">&sect;&nbsp;</a></span>FormatFromExt() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromExt </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Searches registered formats for an ID the same as the file extension. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obconformersearch_default_8cpp-example.shtml#a3">obconformersearch_default.cpp</a>, and <a class="el" href="obforcefield_energy_8cpp-example.shtml#a3">obforcefield_energy.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1e4d4ce20eb43effa105dc25b95050ef">OBConversion::FormatFromExt()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>.</p>

</div>
</div>
<a id="ab671d238595a27a0f3018849dd6e4220"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab671d238595a27a0f3018849dd6e4220">&sect;&nbsp;</a></span>FormatFromExt() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromExt </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool &amp;&#160;</td>
          <td class="paramname"><em>isgzip</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e4d4ce20eb43effa105dc25b95050ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e4d4ce20eb43effa105dc25b95050ef">&sect;&nbsp;</a></span>FormatFromExt() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromExt </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>filename</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Searches registered formats for an ID the same as the file extension. </p>
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a id="ae5ea8bd36fc9d0098734f1623f02c65a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5ea8bd36fc9d0098734f1623f02c65a">&sect;&nbsp;</a></span>FormatFromExt() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromExt </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool &amp;&#160;</td>
          <td class="paramname"><em>isgzip</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aca0c09ee719aba9da34cb281aa0db6a5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aca0c09ee719aba9da34cb281aa0db6a5">&sect;&nbsp;</a></span>FormatFromMIME()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> * FormatFromMIME </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>MIME</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Searches registered formats for a MIME the same as the chemical MIME type passed. </p>

</div>
</div>
<a id="af0bee894a9ed7ca61637452dc2e264f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0bee894a9ed7ca61637452dc2e264f2">&sect;&nbsp;</a></span>GetNextFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool GetNextFormat </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a> &amp;&#160;</td>
          <td class="paramname"><em>itr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&amp;&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&amp;&#160;</td>
          <td class="paramname"><em>pFormat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deprecated!.Repeatedly called to recover available Formats. </p>

</div>
</div>
<a id="a26b5cfc6a9011d19d78dae56d31296eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26b5cfc6a9011d19d78dae56d31296eb">&sect;&nbsp;</a></span>Description()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * Description </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3d20fbc61e06b34c849384597ba8e0cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d20fbc61e06b34c849384597ba8e0cc">&sect;&nbsp;</a></span>GetInStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::istream* GetInStream </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aea0a1d956ad2f87302924423930c793b">OBConversion::NumInputObjects()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a id="a1784444b6d9c8a5f3c3d0514e2684ec6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1784444b6d9c8a5f3c3d0514e2684ec6">&sect;&nbsp;</a></span>GetOutStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* GetOutStream </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adb5ce338a2041b036b030758edc203e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb5ce338a2041b036b030758edc203e2">&sect;&nbsp;</a></span>SetInStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetInStream </td>
          <td>(</td>
          <td class="paramtype">std::istream *&#160;</td>
          <td class="paramname"><em>pIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>takeOwnership</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set input stream. If takeOwnership is true, will deallocate when done. If isGzipped is true, will treat as a gzipped stream regardless of option settings,. </p>
<p>Set input stream, removing/deallocating previous stream if necessary. If takeOwnership is true, takes responsibility for freeing pIn </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc3cc99e2ff0113c9ca6a64f3de71300">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac46f926abe7b8ed87ca8ddc10a52f399">OBConversion::OBConversion()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a1e9c20daafae0213208106ac61bb94ff">OBConversion::StreamState::popInput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a93558e9c89cda2e1a4f9fb2cadc5c8d1">OBConversion::ReadString()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a53f0f89f5ba43fd528c645fdaad6ac3b">OBConversion::~OBConversion()</a>.</p>

</div>
</div>
<a id="aa29cdb79a2a4eb46aa0c7a62ba731f9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa29cdb79a2a4eb46aa0c7a62ba731f9f">&sect;&nbsp;</a></span>SetOutStream()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetOutStream </td>
          <td>(</td>
          <td class="paramtype">std::ostream *&#160;</td>
          <td class="paramname"><em>pOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>takeOwnership</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set output stream, removing/deallocating previous stream if necessary. If takeOwnership is true, takes responsibility for freeing pOut Be aware that if the output stream is gzipped format, then this outstream either needs to be replaced (e.g., SetOutStream(NULL)) or the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> destroyed before the underlying outputstream is deallocated. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#acbe5bd25f0afb1c8cd622e41e61ebc70">OBConversion::CloseOutFile()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc3cc99e2ff0113c9ca6a64f3de71300">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac46f926abe7b8ed87ca8ddc10a52f399">OBConversion::OBConversion()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a3c4e729061d0ad5a5722d59c855767d9">OBConversion::StreamState::popOutput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a18ce8681792d689dab8172a511c5a996">OBConversion::WriteString()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a53f0f89f5ba43fd528c645fdaad6ac3b">OBConversion::~OBConversion()</a>.</p>

</div>
</div>
<a id="a090e63e03a6f4a129d0007c6c0fc7bb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a090e63e03a6f4a129d0007c6c0fc7bb0">&sect;&nbsp;</a></span>SetInAndOutFormats() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInAndOutFormats </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>inID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>outID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>inzip</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>outzip</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the formats from their ids, e g CML. </p>
<p>Sets the formats from their ids, e g CML. If inID is NULL, the input format is left unchanged. Similarly for outID Returns true if both formats have been successfully set at sometime </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a8badee98e367a3410bcb76163f7eeb87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8badee98e367a3410bcb76163f7eeb87">&sect;&nbsp;</a></span>SetInAndOutFormats() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInAndOutFormats </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td>
          <td class="paramname"><em>pIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td>
          <td class="paramname"><em>pOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ingzip</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>outgzip</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9ea0b4fd606d186df3973cfca1dfe601"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ea0b4fd606d186df3973cfca1dfe601">&sect;&nbsp;</a></span>SetInFormat() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInFormat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>inID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isgzip</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the input format from an id e.g. CML. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obconformersearch_default_8cpp-example.shtml#a4">obconformersearch_default.cpp</a>, <a class="el" href="obconversion_readstring_8cpp-example.shtml#a1">obconversion_readstring.cpp</a>, and <a class="el" href="obforcefield_energy_8cpp-example.shtml#a4">obforcefield_energy.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">OpenBabel::CompileSmilesQuery()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a090e63e03a6f4a129d0007c6c0fc7bb0">OBConversion::SetInAndOutFormats()</a>.</p>

</div>
</div>
<a id="ae823ec69144009d84047d8284b9be282"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae823ec69144009d84047d8284b9be282">&sect;&nbsp;</a></span>SetInFormat() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SetInFormat </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td>
          <td class="paramname"><em>pIn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isgzip</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5a4a117fa97cfcfb225d738ad2eb414b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a4a117fa97cfcfb225d738ad2eb414b">&sect;&nbsp;</a></span>SetOutFormat() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SetOutFormat </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>outID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isgzip</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the output format from an id e.g. CML. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obconformersearch_default_8cpp-example.shtml#a11">obconformersearch_default.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a090e63e03a6f4a129d0007c6c0fc7bb0">OBConversion::SetInAndOutFormats()</a>.</p>

</div>
</div>
<a id="a0f636aa9deb24063adcbd8a62dfa04fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f636aa9deb24063adcbd8a62dfa04fa">&sect;&nbsp;</a></span>SetOutFormat() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SetOutFormat </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td>
          <td class="paramname"><em>pOut</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isgzip</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a94e958a40abf04e41dde68b5e466bd31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94e958a40abf04e41dde68b5e466bd31">&sect;&nbsp;</a></span>GetInFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetInFormat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aea0a1d956ad2f87302924423930c793b">OBConversion::NumInputObjects()</a>.</p>

</div>
</div>
<a id="af3d45af23c80e2d89974ed5472ab187b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3d45af23c80e2d89974ed5472ab187b">&sect;&nbsp;</a></span>GetOutFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetOutFormat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>.</p>

</div>
</div>
<a id="ab013bf3af4c922316e9ff83dd2972c2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab013bf3af4c922316e9ff83dd2972c2f">&sect;&nbsp;</a></span>GetInGzipped()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool GetInGzipped </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a710427c712878d0647cc0cc5c7b6cf11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a710427c712878d0647cc0cc5c7b6cf11">&sect;&nbsp;</a></span>GetOutGzipped()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool GetOutGzipped </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acc8e32bcf9191debcf526f1b32e7b9dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc8e32bcf9191debcf526f1b32e7b9dc">&sect;&nbsp;</a></span>GetInFilename()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetInFilename </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8a52d3cc312a162316fa83992c7d367f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a52d3cc312a162316fa83992c7d367f">&sect;&nbsp;</a></span>GetOutFilename()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string GetOutFilename </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af867d03338ae3ab3f85fc614cb1a0591"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af867d03338ae3ab3f85fc614cb1a0591">&sect;&nbsp;</a></span>GetInPos()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::streampos GetInPos </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the position in the input stream of the object being read. </p>

</div>
</div>
<a id="af646f7b39aeeefb64394aba10a85cfdf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af646f7b39aeeefb64394aba10a85cfdf">&sect;&nbsp;</a></span>GetInLen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t GetInLen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the length in the input stream of the object being read. </p>

</div>
</div>
<a id="a67574edc9510587f101552c2cbb61006"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67574edc9510587f101552c2cbb61006">&sect;&nbsp;</a></span>GetTitle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * GetTitle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a default title which is the filename </dd></dl>

</div>
</div>
<a id="a8c0cb28a16189434c940a205ff8f3e99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8c0cb28a16189434c940a205ff8f3e99">&sect;&nbsp;</a></span>GetAuxConv()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* GetAuxConv </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Extension method: deleted in <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a53f0f89f5ba43fd528c645fdaad6ac3b">~OBConversion()</a> </p>

</div>
</div>
<a id="a53a1041e7803e63b9bca06ad18bea4fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53a1041e7803e63b9bca06ad18bea4fe">&sect;&nbsp;</a></span>SetAuxConv()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAuxConv </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"><em>pConv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab3d2674da23d09868ffedf551abbce0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab3d2674da23d09868ffedf551abbce0c">&sect;&nbsp;</a></span>IsOption()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * IsOption </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>opttyp</em> = <code><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Determine whether an option is set. </p>
<dl class="section return"><dt>Returns</dt><dd>NULL if option not and a pointer to the associated text if it is </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aea0a1d956ad2f87302924423930c793b">OBConversion::NumInputObjects()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb5ce338a2041b036b030758edc203e2">OBConversion::SetInStream()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa29cdb79a2a4eb46aa0c7a62ba731f9f">OBConversion::SetOutStream()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a631730a938bc2219b90c027932db3443">OBConversion::SetStartAndEnd()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a id="a7da66ef30fd0af867e9d3bd0df15f4a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7da66ef30fd0af867e9d3bd0df15f4a2">&sect;&nbsp;</a></span>GetOptions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::map&lt;std::string,std::string&gt;* GetOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>opttyp</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Access the map with option name as key and any associated text as value. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a0d49a0baf30d9e34b8b32f9d61e3043b">OBMoleculeFormat::DeleteDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a id="a8ad01448cb4d5237ed5f3d8eeaf39804"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ad01448cb4d5237ed5f3d8eeaf39804">&sect;&nbsp;</a></span>AddOption()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void AddOption </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>opttyp</em> = <code><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>txt</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set an option of specified type, with optional text. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a82f1d6a21880f898673f8a1b45d15eee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82f1d6a21880f898673f8a1b45d15eee">&sect;&nbsp;</a></span>RemoveOption()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool RemoveOption </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>opt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>optype</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac07772684eade5d0d11b8979f0772cf5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac07772684eade5d0d11b8979f0772cf5">&sect;&nbsp;</a></span>SetOptions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetOptions </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>options</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>opttyp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set several single character options of specified type from string like ab"btext"c"ctext". </p>

</div>
</div>
<a id="a6a45eddab233711eb4e432ed5657358f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a45eddab233711eb4e432ed5657358f">&sect;&nbsp;</a></span>RegisterOptionParam()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void RegisterOptionParam </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td>
          <td class="paramname"><em>pFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>numberParams</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>typ</em> = <code><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116af37359059c64e43cab248066ca812206">OUTOPTIONS</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>For example -h takes 0 parameters; -f takes 1. Call in a format constructor. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac46f926abe7b8ed87ca8ddc10a52f399">OBConversion::OBConversion()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a73a3969d77031276422cbeb5901ea05a">OBMoleculeFormat::OBMoleculeFormat()</a>.</p>

</div>
</div>
<a id="a1042e860531f4961b3b0245e9a92f4a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1042e860531f4961b3b0245e9a92f4a7">&sect;&nbsp;</a></span>GetOptionParams()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetOptionParams </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>typ</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of parameters registered for the option, or 0 if not found </dd></dl>

</div>
</div>
<a id="a6af42ed37c470cee546f3aa160a363d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6af42ed37c470cee546f3aa160a363d4">&sect;&nbsp;</a></span>CopyOptions()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CopyOptions </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname"><em>pSourceConv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>typ</em> = <code><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116ab1d5eac4b1dca480c8056eaea7663b7a">ALL</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies the options (by default of all types) from one <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> Object to another. </p>

</div>
</div>
<a id="a137c540357b45e73f65e602e1196eed7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a137c540357b45e73f65e602e1196eed7">&sect;&nbsp;</a></span>GetSupportedInputFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSupportedInputFormat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the list of supported input format </p>

</div>
</div>
<a id="a353b3a6a53808b22361c9f44713978e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a353b3a6a53808b22361c9f44713978e8">&sect;&nbsp;</a></span>GetSupportedOutputFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; GetSupportedOutputFormat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Returns the list of supported output format </p>

</div>
</div>
<a id="acc3cc99e2ff0113c9ca6a64f3de71300"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc3cc99e2ff0113c9ca6a64f3de71300">&sect;&nbsp;</a></span>Convert() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Convert </td>
          <td>(</td>
          <td class="paramtype">std::istream *&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&#160;</td>
          <td class="paramname"><em>os</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Conversion for single input and output stream. </p>
<p>Convert molecules from is into os. If either is null, uses existing streams. If streams are specified, they do <em>not</em> replace any existing streams. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a95c512f009bf277d9d6299d9f5d0c13d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95c512f009bf277d9d6299d9f5d0c13d">&sect;&nbsp;</a></span>Convert() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Convert </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Conversion with existing streams. </p>
<p>Actions the "convert" interface. Calls the <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats. ">OBFormat</a> class's ReadMolecule() which</p><ul>
<li>makes a new chemical object of its chosen type (e.g. <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>)</li>
<li>reads an object from the input file</li>
<li>subjects the chemical object to 'transformations' as specified by the Options</li>
<li>calls AddChemObject to add it to a buffer. The previous object is first output via the output Format's WriteMolecule(). During the output process calling IsFirst() and GetIndex() (the number of objects including the current one already output. allows more control, for instance writing &lt;cml&gt; and &lt;/cml&gt; tags for multiple molecule outputs only.</li>
</ul>
<p>AddChemObject does not save the object passed to it if it is NULL (as a result of a DoTransformation()) or if the number of the object is outside the range defined by StartNumber and EndNumber.This means the start and end counts apply to all chemical objects found whether or not they are output.</p>
<p>If ReadMolecule returns false the input conversion loop is exited. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc3cc99e2ff0113c9ca6a64f3de71300">OBConversion::Convert()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>.</p>

</div>
</div>
<a id="a9d12b0f7f38951d2d1065fc7ddae4229"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d12b0f7f38951d2d1065fc7ddae4229">&sect;&nbsp;</a></span>FullConvert()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int FullConvert </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>FileList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>OutputFileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>OutputFileList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Conversion with multiple input/output files: makes input and output streams, and carries out normal, batch, aggregation, and splitting conversion. </p>
<p>Makes input and output streams, and carries out normal, batch, aggregation, and splitting conversion.</p>
<p>Normal Done if FileList contains a single file name and OutputFileName does not contain a *.</p>
<p>Aggregation Done if FileList has more than one file name and OutputFileName does not contain * . All the chemical objects are converted and sent to the single output file.</p>
<p>Splitting Done if FileList contains a single file name and OutputFileName contains a * . Each chemical object in the input file is converted and sent to a separate file whose name is OutputFileName with the replaced by 1, 2, 3, etc. OutputFileName must have at least one character other than the * before the extension. For example, if OutputFileName is NEW*.smi then the output files are NEW1.smi, NEW2.smi, etc.</p>
<p>Batch Conversion Done if FileList has more than one file name and contains a * . Each input file is converted to an output file whose name is OutputFileName with the * replaced by the inputfile name without its path and extension. So if the input files were inpath/First.cml, inpath/Second.cml and OutputFileName was NEW*.mol, the output files would be NEWFirst.mol, NEWSecond.mol.</p>
<p>If FileList is empty, the input stream that has already been set (usually in the constructor) is used. If OutputFileName is empty, the output stream already set is used.</p>
<p>On exit, OutputFileList contains the names of the output files.</p>
<p>Returns the number of Chemical objects converted. </p>

</div>
</div>
<a id="a342df96ba3cd8751e19758939dbef2f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a342df96ba3cd8751e19758939dbef2f5">&sect;&nbsp;</a></span>AddChemObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int AddChemObject </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds to internal array during input. </p>
<p>Called by ReadMolecule() to deliver an object it has read from an input stream. Used in two modes:</p><ul>
<li>When Count is negative it is left negative and the routine is just a store for an <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> object. The negative value returned tells the calling routine that no more objects are required.</li>
<li>When count is &gt;=0, probably set by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d" title="Conversion with existing streams. ">Convert()</a>, it acts as a queue of 2: writing the currently stored value before accepting the supplied one. This delay allows output routines to respond differently when the written object is the last. Count is incremented with each call, even if pOb=NULL. Objects are not added to the queue if the count is outside the range StartNumber to EndNumber. There is no upper limit if EndNumber is zero. The return value is Count ((&gt;0) or 0 if WriteChemObject returned false. </li>
</ul>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a id="a17bfbe7570517993bcfcb1916bd437d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17bfbe7570517993bcfcb1916bd437d0">&sect;&nbsp;</a></span>GetChemObject()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> * GetChemObject </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieve from internal array during output. </p>
<p>Retrieves an object stored by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5" title="Adds to internal array during input. ">AddChemObject()</a> during output. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a id="af5f16d80b577c580920f0c5b8abd5973"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5f16d80b577c580920f0c5b8abd5973">&sect;&nbsp;</a></span>IsFirstInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsFirstInput </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>True if the first input object is being processed. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a id="ab94b09151245e8c6accfc418a866d329"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab94b09151245e8c6accfc418a866d329">&sect;&nbsp;</a></span>SetFirstInput()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFirstInput </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>b</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Setwhether or not is the first input. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>.</p>

</div>
</div>
<a id="a3b26998ae845717455f1fff3c59470be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b26998ae845717455f1fff3c59470be">&sect;&nbsp;</a></span>GetOutputIndex() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetOutputIndex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves number of ChemObjects that have been actually output. </p>
<p>Returns the number of objects which have been output or are currently being output. The outputindex is incremented when an object for output is fetched by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a17bfbe7570517993bcfcb1916bd437d0" title="Retrieve from internal array during output. ">GetChemObject()</a>. So the function will return 1 if called from WriteMolecule() during output of the first object. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a0d49a0baf30d9e34b8b32f9d61e3043b">OBMoleculeFormat::DeleteDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, and <a class="el" href="classOpenBabel_1_1XMLConversion.shtml#a162677bee472136c7078735ac5a3142b">XMLConversion::GetOutputIndex()</a>.</p>

</div>
</div>
<a id="a7037cb9de4584f498b0099b7584bdc97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7037cb9de4584f498b0099b7584bdc97">&sect;&nbsp;</a></span>SetOutputIndex()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetOutputIndex </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>indx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets output index (maybe to control whether seen as first object) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a0d49a0baf30d9e34b8b32f9d61e3043b">OBMoleculeFormat::DeleteDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>.</p>

</div>
</div>
<a id="a38d59749ba2add8597210717e804e4db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38d59749ba2add8597210717e804e4db">&sect;&nbsp;</a></span>SetMoreFilesToCome()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetMoreFilesToCome </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Used with multiple input files. Off by default. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>.</p>

</div>
</div>
<a id="a4dacf92f4f0cbf7a1f269143659ceb88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dacf92f4f0cbf7a1f269143659ceb88">&sect;&nbsp;</a></span>SetOneObjectOnly()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetOneObjectOnly </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>b</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Used with multiple input files. Off by default. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>.</p>

</div>
</div>
<a id="a19dedcd05ee3ab11ed85c29ff1fef810"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19dedcd05ee3ab11ed85c29ff1fef810">&sect;&nbsp;</a></span>SetLast()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetLast </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>b</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Synonym for <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a4dacf92f4f0cbf7a1f269143659ceb88" title="Used with multiple input files. Off by default. ">SetOneObjectOnly()</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a0d49a0baf30d9e34b8b32f9d61e3043b">OBMoleculeFormat::DeleteDeferredMols()</a>.</p>

</div>
</div>
<a id="ac157f0eb86dba757b3ebae08ffffb8d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac157f0eb86dba757b3ebae08ffffb8d2">&sect;&nbsp;</a></span>IsLastFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsLastFile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>True if no more files to be read. </p>

</div>
</div>
<a id="a1a8e6ea8f7576186d25447059bf09a70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a8e6ea8f7576186d25447059bf09a70">&sect;&nbsp;</a></span>GetCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of objects read and processed Incremented after options are processed, so 0 for first object. Returns -1 if Convert interface not used. </p>

</div>
</div>
<a id="a442b17995d84d654e33ede11a63d7f80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a442b17995d84d654e33ede11a63d7f80">&sect;&nbsp;</a></span>GetDefaultFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetDefaultFormat </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The default format is set in a single <a class="el" href="classOpenBabel_1_1OBFormat.shtml" title="Base class for file formats. ">OBFormat</a> class (generally it is <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>) </p>

</div>
</div>
<a id="a3d46d682999a7772db31a835fa4a8091"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d46d682999a7772db31a835fa4a8091">&sect;&nbsp;</a></span>Write()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Write </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&#160;</td>
          <td class="paramname"><em>pout</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a>. </p>
<p>Part of "API" interface. The output stream can be specified and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> instance</p>
<p>Writes the object pOb but does not delete it afterwards. The output stream is lastingly changed if pos is not NULL Returns true if successful. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obconformersearch_default_8cpp-example.shtml#a12">obconformersearch_default.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a18ce8681792d689dab8172a511c5a996">OBConversion::WriteString()</a>.</p>

</div>
</div>
<a id="a18ce8681792d689dab8172a511c5a996"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18ce8681792d689dab8172a511c5a996">&sect;&nbsp;</a></span>WriteString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string WriteString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>trimWhitespace</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> as a string. </p>
<p>Part of "API" interface. The output stream is temporarily changed to the string and then restored This method is primarily intended for scripting languages without "stream" classes The optional "trimWhitespace" parameter allows trailing whitespace to be removed (e.g., in a SMILES string or InChI, etc.)</p>
<p>Writes the object pOb but does not delete it afterwards. The output stream not changed (since we cannot write to this string later) Returns true if successful. </p>

</div>
</div>
<a id="ad17f0a96643dec6840eda76c07a54698"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad17f0a96643dec6840eda76c07a54698">&sect;&nbsp;</a></span>WriteFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool WriteFile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>filePath</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Outputs an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> as a file (with the supplied path) </p>
<p>Part of "API" interface. The output stream is changed to the supplied file and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> instance. This method is primarily intended for scripting languages without "stream" classes</p>
<p>Writes the object pOb but does not delete it afterwards. The output stream is lastingly changed to point to the file Returns true if successful. </p>

</div>
</div>
<a id="acbe5bd25f0afb1c8cd622e41e61ebc70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbe5bd25f0afb1c8cd622e41e61ebc70">&sect;&nbsp;</a></span>CloseOutFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CloseOutFile </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Manually closes and deletes the output stream The file is closed anyway when in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> destructor or when WriteFile is called again. </p>
<dl class="section since"><dt>Since</dt><dd>version 2.1 </dd></dl>

</div>
</div>
<a id="a1204f9b613067a04ebfe881a58775918"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1204f9b613067a04ebfe881a58775918">&sect;&nbsp;</a></span>Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Read </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::istream *&#160;</td>
          <td class="paramname"><em>pin</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> into pOb. </p>
<p>Part of "API" interface. The input stream can be specified and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> instance </p><dl class="section return"><dt>Returns</dt><dd>false and pOb=NULL on error </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obconformersearch_default_8cpp-example.shtml#a5">obconformersearch_default.cpp</a>, and <a class="el" href="obforcefield_energy_8cpp-example.shtml#a5">obforcefield_energy.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a93558e9c89cda2e1a4f9fb2cadc5c8d1">OBConversion::ReadString()</a>.</p>

</div>
</div>
<a id="a93558e9c89cda2e1a4f9fb2cadc5c8d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a93558e9c89cda2e1a4f9fb2cadc5c8d1">&sect;&nbsp;</a></span>ReadString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>input</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> into pOb from the supplied string. </p>
<p>Part of "API" interface. The input stream can be specified and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> instance </p><dl class="section return"><dt>Returns</dt><dd>NULL on errorPart of "API" interface. </dd>
<dd>
false and pOb=NULL on error This method is primarily intended for scripting languages without "stream" classes Any existing input stream will be replaced by stringstream. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obconversion_readstring_8cpp-example.shtml#a3">obconversion_readstring.cpp</a>.</dd>
</dl>
<p>Referenced by <a class="el" href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">OpenBabel::CompileSmilesQuery()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a76d7d1bf8e0c05c19d5b5e991fd0ba2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">&sect;&nbsp;</a></span>ReadFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadFile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>filePath</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads an object of a class derived from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> into pOb from the file specified. </p>
<p>Part of "API" interface. The output stream is changed to the supplied file and the change is retained in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> instance. For multi-molecule files, the remaining molecules can be read by repeatedly calling the <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb. ">Read()</a> method. </p><dl class="section return"><dt>Returns</dt><dd>false and pOb=NULL on error This method is primarily intended for scripting languages without "stream" classes </dd></dl>

</div>
</div>
<a id="a7424c6fe9292f59087d23e7748ac237e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7424c6fe9292f59087d23e7748ac237e">&sect;&nbsp;</a></span>OpenInAndOutFiles()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenInAndOutFiles </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>infilepath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>outfilepath</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Part of the "Convert" interface. Open the files and update the streams in the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> object. This method is primarily intended for scripting languages without "stream" classes and will usually followed by a call to <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d" title="Conversion with existing streams. ">Convert()</a>. Will set format from file extension if format has not already been set. Files will be opened even if format cannot be determined, but not if file path is empty. </p><dl class="section return"><dt>Returns</dt><dd>false if unsucessful. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a5dd763cca73d3bf14b7722da842e189f">OBConversion::OBConversion()</a>.</p>

</div>
</div>
<a id="a1717ba1ed3f8131d7a0f3b0d6031f5af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1717ba1ed3f8131d7a0f3b0d6031f5af">&sect;&nbsp;</a></span>ReportNumberConverted()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ReportNumberConverted </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>count</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a> *&#160;</td>
          <td class="paramname"><em>pFormat</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sends a message like "2 molecules converted" to clog The type of object is taken from the TargetClassDescription of the specified class (or the output format if not specified)and is appropriately singular or plural. </p>

</div>
</div>
<a id="aea0a1d956ad2f87302924423930c793b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aea0a1d956ad2f87302924423930c793b">&sect;&nbsp;</a></span>NumInputObjects()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int NumInputObjects </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of objects in the inputstream, or -1 if error or if SkipObjects for the input format is not implemented Adjusts for the value of -f and -l options (first and last objects). </dd></dl>

</div>
</div>
<a id="a4eb6eac5855fb3289c5a438d4084a052"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4eb6eac5855fb3289c5a438d4084a052">&sect;&nbsp;</a></span>BatchFileName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string BatchFileName </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>BaseName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>InFile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replaces * in BaseName by InFile without extension and path. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>.</p>

</div>
</div>
<a id="a44fbee02afc6de6a9f98bbbb6a2e12bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44fbee02afc6de6a9f98bbbb6a2e12bf">&sect;&nbsp;</a></span>IncrementedFileName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string IncrementedFileName </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>BaseName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>Count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Replaces * in BaseName by Count. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>.</p>

</div>
</div>
<a id="a39b6cebdf53672368cfa3edd8bc7740d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39b6cebdf53672368cfa3edd8bc7740d">&sect;&nbsp;</a></span>CheckForUnintendedBatch()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool CheckForUnintendedBatch </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>infile</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>outfile</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks for misunderstandings when using the -m option. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>.</p>

</div>
</div>
<a id="a4aea73729570a576d9779df54c56ffac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4aea73729570a576d9779df54c56ffac">&sect;&nbsp;</a></span>ClearInStreams()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ClearInStreams </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a631730a938bc2219b90c027932db3443"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a631730a938bc2219b90c027932db3443">&sect;&nbsp;</a></span>SetStartAndEnd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SetStartAndEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>.</p>

</div>
</div>
<a id="a3b2ad8335b0a9b18bc22bc534b7ffb28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b2ad8335b0a9b18bc22bc534b7ffb28">&sect;&nbsp;</a></span>OptionParamArray()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OBConversion::OPAMapType</a> &amp; OptionParamArray </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a>&#160;</td>
          <td class="paramname"><em>typ</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1042e860531f4961b3b0245e9a92f4a7">OBConversion::GetOptionParams()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f">OBConversion::RegisterOptionParam()</a>.</p>

</div>
</div>
<a id="a23aaa3e3be1f55323cd956b53f6b0417"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23aaa3e3be1f55323cd956b53f6b0417">&sect;&nbsp;</a></span>OpenAndSetFormat()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenAndSetFormat </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>SetFormat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ifstream *&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::stringstream *&#160;</td>
          <td class="paramname"><em>ss</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="afecc511417086050a7506ca632546cdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afecc511417086050a7506ca632546cdb">&sect;&nbsp;</a></span>_SkipNextRead</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool _SkipNextRead</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a20354c0458b4e08dc62db4a4e8717c61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20354c0458b4e08dc62db4a4e8717c61">&sect;&nbsp;</a></span>InFilename</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string InFilename</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a67574edc9510587f101552c2cbb61006">OBConversion::GetTitle()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>.</p>

</div>
</div>
<a id="a259daaddfd4bbb18e69aefcf8ba53ead"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a259daaddfd4bbb18e69aefcf8ba53ead">&sect;&nbsp;</a></span>OutFilename</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string OutFilename</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>.</p>

</div>
</div>
<a id="a2937184c11df54ac9323d7c96b98ec36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2937184c11df54ac9323d7c96b98ec36">&sect;&nbsp;</a></span>pInput</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::istream* pInput</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a1e9c20daafae0213208106ac61bb94ff">OBConversion::StreamState::popInput()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a26f8a6ab21c2d1200a8ed962f48f148a">OBConversion::StreamState::pushInput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb5ce338a2041b036b030758edc203e2">OBConversion::SetInStream()</a>.</p>

</div>
</div>
<a id="af6940dea08e0e2a979ff95b7567128e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6940dea08e0e2a979ff95b7567128e3">&sect;&nbsp;</a></span>ownedInStreams</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::istream *&gt; ownedInStreams</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a1e9c20daafae0213208106ac61bb94ff">OBConversion::StreamState::popInput()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a26f8a6ab21c2d1200a8ed962f48f148a">OBConversion::StreamState::pushInput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb5ce338a2041b036b030758edc203e2">OBConversion::SetInStream()</a>.</p>

</div>
</div>
<a id="a2b1c527969fb4e7669a452b83fab46c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b1c527969fb4e7669a452b83fab46c9">&sect;&nbsp;</a></span>pOutput</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream* pOutput</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a3c4e729061d0ad5a5722d59c855767d9">OBConversion::StreamState::popOutput()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a7b5305259399ad1f5d8fe1879131be02">OBConversion::StreamState::pushOutput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa29cdb79a2a4eb46aa0c7a62ba731f9f">OBConversion::SetOutStream()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>.</p>

</div>
</div>
<a id="adc68975108031811bcf41b6a2e854daf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc68975108031811bcf41b6a2e854daf">&sect;&nbsp;</a></span>ownedOutStreams</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::ostream *&gt; ownedOutStreams</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a3c4e729061d0ad5a5722d59c855767d9">OBConversion::StreamState::popOutput()</a>, <a class="el" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a7b5305259399ad1f5d8fe1879131be02">OBConversion::StreamState::pushOutput()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa29cdb79a2a4eb46aa0c7a62ba731f9f">OBConversion::SetOutStream()</a>.</p>

</div>
</div>
<a id="a2daf6d1435032c73c65000af61a4a5d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2daf6d1435032c73c65000af61a4a5d4">&sect;&nbsp;</a></span>pDefaultFormat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pDefaultFormat</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a70c004d49155986bcc163bac07df0e4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70c004d49155986bcc163bac07df0e4e">&sect;&nbsp;</a></span>pInFormat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pInFormat</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc3cc99e2ff0113c9ca6a64f3de71300">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ae823ec69144009d84047d8284b9be282">OBConversion::SetInFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb5ce338a2041b036b030758edc203e2">OBConversion::SetInStream()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a631730a938bc2219b90c027932db3443">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div>
<a id="a4d630735f21540de237cdcc32916bffb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4d630735f21540de237cdcc32916bffb">&sect;&nbsp;</a></span>pOutFormat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pOutFormat</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1717ba1ed3f8131d7a0f3b0d6031f5af">OBConversion::ReportNumberConverted()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a0f636aa9deb24063adcbd8a62dfa04fa">OBConversion::SetOutFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a18ce8681792d689dab8172a511c5a996">OBConversion::WriteString()</a>.</p>

</div>
</div>
<a id="a3d9e064f9e26ed2e52b140b7cc34a8d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d9e064f9e26ed2e52b140b7cc34a8d6">&sect;&nbsp;</a></span>OptionsArray</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::map&lt;std::string,std::string&gt; OptionsArray[3]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a8ad01448cb4d5237ed5f3d8eeaf39804">OBConversion::AddOption()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6af42ed37c470cee546f3aa160a363d4">OBConversion::CopyOptions()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab3d2674da23d09868ffedf551abbce0c">OBConversion::IsOption()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a82f1d6a21880f898673f8a1b45d15eee">OBConversion::RemoveOption()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ac07772684eade5d0d11b8979f0772cf5">OBConversion::SetOptions()</a>.</p>

</div>
</div>
<a id="a075e1e3c9dd399cef584d7338cc37938"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a075e1e3c9dd399cef584d7338cc37938">&sect;&nbsp;</a></span>Index</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Index</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a17bfbe7570517993bcfcb1916bd437d0">OBConversion::GetChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3b26998ae845717455f1fff3c59470be">OBConversion::GetOutputIndex()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7037cb9de4584f498b0099b7584bdc97">OBConversion::SetOutputIndex()</a>.</p>

</div>
</div>
<a id="ac52d6fdbe254370662cccd43af0248f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac52d6fdbe254370662cccd43af0248f2">&sect;&nbsp;</a></span>StartNumber</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int StartNumber</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a631730a938bc2219b90c027932db3443">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div>
<a id="adb31d46cbf6e64e86bae6d24d90c9702"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb31d46cbf6e64e86bae6d24d90c9702">&sect;&nbsp;</a></span>EndNumber</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int EndNumber</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a631730a938bc2219b90c027932db3443">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div>
<a id="aad462966ed963f892117056de1eba502"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad462966ed963f892117056de1eba502">&sect;&nbsp;</a></span>Count</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int Count</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a631730a938bc2219b90c027932db3443">OBConversion::SetStartAndEnd()</a>.</p>

</div>
</div>
<a id="ae14ad56a72461f3c598cb4dbd151cdc7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae14ad56a72461f3c598cb4dbd151cdc7">&sect;&nbsp;</a></span>m_IsFirstInput</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool m_IsFirstInput</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#af5f16d80b577c580920f0c5b8abd5973">OBConversion::IsFirstInput()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ab94b09151245e8c6accfc418a866d329">OBConversion::SetFirstInput()</a>.</p>

</div>
</div>
<a id="a6025251d18641dab4058222b69d1a98c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6025251d18641dab4058222b69d1a98c">&sect;&nbsp;</a></span>m_IsLast</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool m_IsLast</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">OBConversion::IsLast()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a4dacf92f4f0cbf7a1f269143659ceb88">OBConversion::SetOneObjectOnly()</a>.</p>

</div>
</div>
<a id="ab4ec386870233b42d353a4d66d7b0cee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4ec386870233b42d353a4d66d7b0cee">&sect;&nbsp;</a></span>MoreFilesToCome</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool MoreFilesToCome</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a38d59749ba2add8597210717e804e4db">OBConversion::SetMoreFilesToCome()</a>.</p>

</div>
</div>
<a id="a7002deaca76f3fc235c76be1fcc38dfa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7002deaca76f3fc235c76be1fcc38dfa">&sect;&nbsp;</a></span>OneObjectOnly</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OneObjectOnly</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a4dacf92f4f0cbf7a1f269143659ceb88">OBConversion::SetOneObjectOnly()</a>.</p>

</div>
</div>
<a id="a9bdd5c815677e240cec9c2e4a71d73f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bdd5c815677e240cec9c2e4a71d73f2">&sect;&nbsp;</a></span>ReadyToInput</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadyToInput</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>.</p>

</div>
</div>
<a id="a12c288e6436a8acaa0ae85e372f99093"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12c288e6436a8acaa0ae85e372f99093">&sect;&nbsp;</a></span>SkippedMolecules</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool SkippedMolecules</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>.</p>

</div>
</div>
<a id="a87a16257726b97ac5f7a14b771b675ec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87a16257726b97ac5f7a14b771b675ec">&sect;&nbsp;</a></span>inFormatGzip</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool inFormatGzip</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>skip molecules using -f and -l </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#acc3cc99e2ff0113c9ca6a64f3de71300">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ae823ec69144009d84047d8284b9be282">OBConversion::SetInFormat()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#adb5ce338a2041b036b030758edc203e2">OBConversion::SetInStream()</a>.</p>

</div>
</div>
<a id="a86d77307999432c68ba9bff261484493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86d77307999432c68ba9bff261484493">&sect;&nbsp;</a></span>outFormatGzip</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool outFormatGzip</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a0f636aa9deb24063adcbd8a62dfa04fa">OBConversion::SetOutFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aa29cdb79a2a4eb46aa0c7a62ba731f9f">OBConversion::SetOutStream()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>.</p>

</div>
</div>
<a id="a20a1d62cb932144d66e52d7c823fb0a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20a1d62cb932144d66e52d7c823fb0a1">&sect;&nbsp;</a></span>pOb1</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb1</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a17bfbe7570517993bcfcb1916bd437d0">OBConversion::GetChemObject()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>.</p>

</div>
</div>
<a id="ab77068f3bb4cb88694a6be653c00f04e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab77068f3bb4cb88694a6be653c00f04e">&sect;&nbsp;</a></span>wInpos</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::streampos wInpos</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>position in the input stream of the object being written </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>.</p>

</div>
</div>
<a id="a545a1341008a23c2dd0721c164a9ad89"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a545a1341008a23c2dd0721c164a9ad89">&sect;&nbsp;</a></span>rInpos</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::streampos rInpos</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>position in the input stream of the object being read </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>.</p>

</div>
</div>
<a id="afee7e5bffccd262faaff0417e5ae9af3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afee7e5bffccd262faaff0417e5ae9af3">&sect;&nbsp;</a></span>wInlen</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t wInlen</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>length in the input stream of the object being written </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>.</p>

</div>
</div>
<a id="a1a897c3f35235e4ca7da37ca245db065"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a897c3f35235e4ca7da37ca245db065">&sect;&nbsp;</a></span>rInlen</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t rInlen</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>length in the input stream of the object being read </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>.</p>

</div>
</div>
<a id="a3846aa2ce719d5820b66e302c6aeaa8a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3846aa2ce719d5820b66e302c6aeaa8a">&sect;&nbsp;</a></span>pAuxConv</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pAuxConv</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Way to extend <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a22ec591aa79a853ac222df154f7dde73">OBConversion::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a53f0f89f5ba43fd528c645fdaad6ac3b">OBConversion::~OBConversion()</a>.</p>

</div>
</div>
<a id="a2322eb2aa14e8d954573abbda9c50e62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2322eb2aa14e8d954573abbda9c50e62">&sect;&nbsp;</a></span>SupportedInputFormat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; SupportedInputFormat</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>list of supported input format </p>

</div>
</div>
<a id="a50233a5c7c63d03056923f13c7acbb1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a50233a5c7c63d03056923f13c7acbb1b">&sect;&nbsp;</a></span>SupportedOutputFormat</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;std::string&gt; SupportedOutputFormat</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>list of supported output format </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="xml_8h_source.shtml">xml.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
