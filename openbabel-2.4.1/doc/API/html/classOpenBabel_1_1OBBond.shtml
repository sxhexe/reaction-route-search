<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBBond Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1OBBond-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBBond Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="bond_8h_source.shtml">openbabel/bond.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBBond:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBBond.png" usemap="#OBBond_map" alt=""/>
  <map id="OBBond_map" name="OBBond_map">
<area href="classOpenBabel_1_1OBBase.shtml" title="Base Class. " alt="OBBase" shape="rect" coords="0,0,59,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a3f3de3e0d751949b8d0b60ffb302944a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944a">Flag</a> { <a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa64c607937ff8cf2e2d5c22b8b4052b4c">Aromatic</a> = (1&lt;&lt;1), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa881827681e680c135749c84331670a50">Ring</a> = (1&lt;&lt;4), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944aa588f9590824232581845c4db8cbda773">Closure</a> = (1&lt;&lt;10)
 }</td></tr>
<tr class="separator:a3f3de3e0d751949b8d0b60ffb302944a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbdb429fe4a7d37960636a555de77326"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326">StereoFlag</a> { <a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a721d5e522bcc0b0defce43b967d34091">Wedge</a> = (1&lt;&lt;2), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326ae44c0278588a18b472943c7f72857c03">Hash</a> = (1&lt;&lt;3), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a96d5e3fcebcf162bf697dcf08f6e2063">WedgeOrHash</a> = (1&lt;&lt;11), 
<a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326a1a4533d507bb26970b15bb7ba5ce6b3d">CisOrTrans</a> = (1&lt;&lt;12)
 }</td></tr>
<tr class="separator:afbdb429fe4a7d37960636a555de77326"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a61559abfacb167bad8bb124d1f899b87"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a61559abfacb167bad8bb124d1f899b87">OBBond</a> ()</td></tr>
<tr class="separator:a61559abfacb167bad8bb124d1f899b87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3978005314074b4383b10d497b55003"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#af3978005314074b4383b10d497b55003">~OBBond</a> ()</td></tr>
<tr class="separator:af3978005314074b4383b10d497b55003"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad12fd937da5f4b0c4562888252fe214b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b">Clear</a> ()</td></tr>
<tr class="separator:ad12fd937da5f4b0c4562888252fe214b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdc8ffeb0749b563e1108a9ceaa0b394"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">DoTransformations</a> (const std::map&lt; std::string, std::string &gt; *, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *)</td></tr>
<tr class="separator:abdc8ffeb0749b563e1108a9ceaa0b394"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2f0cea1c162bbe8dd603528a3da5c87"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ab2f0cea1c162bbe8dd603528a3da5c87"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab2f0cea1c162bbe8dd603528a3da5c87">CastAndClear</a> (bool clear=true)</td></tr>
<tr class="separator:ab2f0cea1c162bbe8dd603528a3da5c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a6c35f6a88ad291ed821c856e4d887f"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a0a6c35f6a88ad291ed821c856e4d887f">GetTitle</a> (bool replaceNewlines=true) const</td></tr>
<tr class="separator:a0a6c35f6a88ad291ed821c856e4d887f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a366c8a142b8c16554597e82320dfd0e0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a366c8a142b8c16554597e82320dfd0e0">SetTitle</a> (const char *)</td></tr>
<tr class="separator:a366c8a142b8c16554597e82320dfd0e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Bond modification methods</div></td></tr>
<tr class="memitem:ab994a975e39f5c62288f4f972b6f90c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab994a975e39f5c62288f4f972b6f90c9">SetIdx</a> (int idx)</td></tr>
<tr class="separator:ab994a975e39f5c62288f4f972b6f90c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a383094c5a19383cf09f3dfb4c1de1da2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a383094c5a19383cf09f3dfb4c1de1da2">SetId</a> (unsigned long id)</td></tr>
<tr class="separator:a383094c5a19383cf09f3dfb4c1de1da2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b00183cecf8df500db30888b4f83e70"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3b00183cecf8df500db30888b4f83e70">SetBO</a> (int order)</td></tr>
<tr class="separator:a3b00183cecf8df500db30888b4f83e70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb89a19ab65bff6626af0eccfb83af07"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07">SetBondOrder</a> (int order)</td></tr>
<tr class="separator:afb89a19ab65bff6626af0eccfb83af07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c443bcf96eac155aa058b69cc59aa4e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3c443bcf96eac155aa058b69cc59aa4e">SetBegin</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *begin)</td></tr>
<tr class="separator:a3c443bcf96eac155aa058b69cc59aa4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bcf1c90715c368ce2896acae75235c4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a9bcf1c90715c368ce2896acae75235c4">SetEnd</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end)</td></tr>
<tr class="separator:a9bcf1c90715c368ce2896acae75235c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a962b3010305cfb80ba816a0e54097dee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a962b3010305cfb80ba816a0e54097dee">SetParent</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *ptr)</td></tr>
<tr class="separator:a962b3010305cfb80ba816a0e54097dee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7d5e7adb0a537d92a628c811148dc21"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">SetLength</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *fixed, double length)</td></tr>
<tr class="separator:ac7d5e7adb0a537d92a628c811148dc21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b38719673238813acc911788969922"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a62b38719673238813acc911788969922">SetLength</a> (double length)</td></tr>
<tr class="separator:a62b38719673238813acc911788969922"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89e52e2c0a57a3f936e8713406cc45e9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a89e52e2c0a57a3f936e8713406cc45e9">Set</a> (int index, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *begin, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end, int order, int flags)</td></tr>
<tr class="separator:a89e52e2c0a57a3f936e8713406cc45e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb95632fbaba13a5aa138725a20f2c0b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#acb95632fbaba13a5aa138725a20f2c0b">SetKSingle</a> ()</td></tr>
<tr class="separator:acb95632fbaba13a5aa138725a20f2c0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2372682111abb0a7d49ba2f6caa7f51f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a2372682111abb0a7d49ba2f6caa7f51f">SetKDouble</a> ()</td></tr>
<tr class="separator:a2372682111abb0a7d49ba2f6caa7f51f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a068e086977f8e15b07d3c3d32f622ead"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a068e086977f8e15b07d3c3d32f622ead">SetKTriple</a> ()</td></tr>
<tr class="separator:a068e086977f8e15b07d3c3d32f622ead"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d29498c15007d9b6729e26784f23a5b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3d29498c15007d9b6729e26784f23a5b">SetAromatic</a> ()</td></tr>
<tr class="separator:a3d29498c15007d9b6729e26784f23a5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac63169d5f12da96ad067cc8194c8cdb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aac63169d5f12da96ad067cc8194c8cdb">SetWedge</a> ()</td></tr>
<tr class="separator:aac63169d5f12da96ad067cc8194c8cdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25f82438018e969b4feda4a25042c608"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a25f82438018e969b4feda4a25042c608">SetHash</a> ()</td></tr>
<tr class="separator:a25f82438018e969b4feda4a25042c608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc50b699bc2efd24c5a65295b82f0ad0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#abc50b699bc2efd24c5a65295b82f0ad0">SetWedgeOrHash</a> ()</td></tr>
<tr class="separator:abc50b699bc2efd24c5a65295b82f0ad0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b06560e0e01a806b92c2386220d0b57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1b06560e0e01a806b92c2386220d0b57">SetUp</a> ()</td></tr>
<tr class="separator:a1b06560e0e01a806b92c2386220d0b57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7690859a81831984dbc0fa73313d44b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a7690859a81831984dbc0fa73313d44b3">SetDown</a> ()</td></tr>
<tr class="separator:a7690859a81831984dbc0fa73313d44b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacde511d3c9a744b44c88958bb86eb68"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aacde511d3c9a744b44c88958bb86eb68">SetInRing</a> (bool set=true)</td></tr>
<tr class="separator:aacde511d3c9a744b44c88958bb86eb68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab499793fc98aadbaa192756b8327016d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab499793fc98aadbaa192756b8327016d">SetClosure</a> ()</td></tr>
<tr class="separator:ab499793fc98aadbaa192756b8327016d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a934251078b7907fd8cd8573c40fdea58"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a934251078b7907fd8cd8573c40fdea58">UnsetHash</a> ()</td></tr>
<tr class="separator:a934251078b7907fd8cd8573c40fdea58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8425a34105ee2f2e152da12ebca9960e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a8425a34105ee2f2e152da12ebca9960e">UnsetWedge</a> ()</td></tr>
<tr class="separator:a8425a34105ee2f2e152da12ebca9960e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88d9f308b5a9d49e98da1c6bd195358f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a88d9f308b5a9d49e98da1c6bd195358f">UnsetUp</a> ()</td></tr>
<tr class="separator:a88d9f308b5a9d49e98da1c6bd195358f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a561d657e1cc83679879b2b8f662b9205"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a561d657e1cc83679879b2b8f662b9205">UnsetDown</a> ()</td></tr>
<tr class="separator:a561d657e1cc83679879b2b8f662b9205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fcf3bf429f36281a43c879e40e75f34"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a2fcf3bf429f36281a43c879e40e75f34">UnsetAromatic</a> ()</td></tr>
<tr class="separator:a2fcf3bf429f36281a43c879e40e75f34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a512e7b122631a29f1ef8c679704632cd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a512e7b122631a29f1ef8c679704632cd">UnsetKekule</a> ()</td></tr>
<tr class="separator:a512e7b122631a29f1ef8c679704632cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Bond data request methods</div></td></tr>
<tr class="memitem:a44b77545e83209582e42f375c8f40474"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a44b77545e83209582e42f375c8f40474">GetIdx</a> () const</td></tr>
<tr class="separator:a44b77545e83209582e42f375c8f40474"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dd98e3e99e394dce75b285c451028b1"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a6dd98e3e99e394dce75b285c451028b1">GetId</a> () const</td></tr>
<tr class="separator:a6dd98e3e99e394dce75b285c451028b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d9f4e277b24001cf1d7d9ef072724e6"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a7d9f4e277b24001cf1d7d9ef072724e6">GetBO</a> () const</td></tr>
<tr class="separator:a7d9f4e277b24001cf1d7d9ef072724e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4ae2f349fa9fe34dea5f5e69378fbf7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad4ae2f349fa9fe34dea5f5e69378fbf7">GetBondOrder</a> () const</td></tr>
<tr class="separator:ad4ae2f349fa9fe34dea5f5e69378fbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2ed50e039de387fb517a9f7832de06f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad2ed50e039de387fb517a9f7832de06f">GetFlags</a> () const</td></tr>
<tr class="separator:ad2ed50e039de387fb517a9f7832de06f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae11a8ddd132109c3a14328bb7676d9f7"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ae11a8ddd132109c3a14328bb7676d9f7">GetBeginAtomIdx</a> () const</td></tr>
<tr class="separator:ae11a8ddd132109c3a14328bb7676d9f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f53ed138507e197a36be75e58a24da"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a38f53ed138507e197a36be75e58a24da">GetEndAtomIdx</a> () const</td></tr>
<tr class="separator:a38f53ed138507e197a36be75e58a24da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdda9b904cabc9ce0335a665988ab143"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#afdda9b904cabc9ce0335a665988ab143">GetBeginAtom</a> ()</td></tr>
<tr class="separator:afdda9b904cabc9ce0335a665988ab143"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae24579e3e3a0beac0d559aa2ac513f5d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ae24579e3e3a0beac0d559aa2ac513f5d">GetBeginAtom</a> () const</td></tr>
<tr class="separator:ae24579e3e3a0beac0d559aa2ac513f5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee593e9cc14031b07e3dc63a003c345f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aee593e9cc14031b07e3dc63a003c345f">GetEndAtom</a> ()</td></tr>
<tr class="separator:aee593e9cc14031b07e3dc63a003c345f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b0f900d4472956b82a94dca09c64eeb"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a2b0f900d4472956b82a94dca09c64eeb">GetEndAtom</a> () const</td></tr>
<tr class="separator:a2b0f900d4472956b82a94dca09c64eeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30735471b108fe43965fd2d0a9fe86a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a30735471b108fe43965fd2d0a9fe86a0">GetNbrAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *ptr)</td></tr>
<tr class="separator:a30735471b108fe43965fd2d0a9fe86a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8480b61159bc6cb861b17341dc2b29a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">GetParent</a> ()</td></tr>
<tr class="separator:ad8480b61159bc6cb861b17341dc2b29a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4cb9ded766d46989223816771b033155"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a4cb9ded766d46989223816771b033155">GetEquibLength</a> () const</td></tr>
<tr class="separator:a4cb9ded766d46989223816771b033155"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adca4fce8e3ab8fd1eacd396af7c9adbb"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#adca4fce8e3ab8fd1eacd396af7c9adbb">GetLength</a> () const</td></tr>
<tr class="separator:adca4fce8e3ab8fd1eacd396af7c9adbb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3aba2dee7140a159fb534747bb2dc7a"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ae3aba2dee7140a159fb534747bb2dc7a">GetNbrAtomIdx</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *ptr)</td></tr>
<tr class="separator:ae3aba2dee7140a159fb534747bb2dc7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87fc3915905cbeea2a56569bf0a69fd5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a87fc3915905cbeea2a56569bf0a69fd5">FindSmallestRing</a> () const</td></tr>
<tr class="separator:a87fc3915905cbeea2a56569bf0a69fd5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">property request methods</div></td></tr>
<tr class="memitem:aeda62da8823b248654404fb15f314a66"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aeda62da8823b248654404fb15f314a66">IsAromatic</a> () const</td></tr>
<tr class="separator:aeda62da8823b248654404fb15f314a66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae016e13adf41d7c12a3d22147f0b870e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ae016e13adf41d7c12a3d22147f0b870e">IsInRing</a> () const</td></tr>
<tr class="separator:ae016e13adf41d7c12a3d22147f0b870e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afcf274313e5c401b4d05ff05314c6e37"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#afcf274313e5c401b4d05ff05314c6e37">IsRotor</a> (bool includeRingBonds=false)</td></tr>
<tr class="separator:afcf274313e5c401b4d05ff05314c6e37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86eb2acbb9c5811e645df18b8b0bacf7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a86eb2acbb9c5811e645df18b8b0bacf7">IsAmide</a> ()</td></tr>
<tr class="separator:a86eb2acbb9c5811e645df18b8b0bacf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d59ca837068a807d393dab30cf72775"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a8d59ca837068a807d393dab30cf72775">IsPrimaryAmide</a> ()</td></tr>
<tr class="separator:a8d59ca837068a807d393dab30cf72775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f8ea65888a454fa07b77cdd4aa41ca"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a38f8ea65888a454fa07b77cdd4aa41ca">IsSecondaryAmide</a> ()</td></tr>
<tr class="separator:a38f8ea65888a454fa07b77cdd4aa41ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a771d7a8c76475f1e72a75e8330fac6d5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a771d7a8c76475f1e72a75e8330fac6d5">IsTertiaryAmide</a> ()</td></tr>
<tr class="separator:a771d7a8c76475f1e72a75e8330fac6d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a783023d0c499c732c067d566c90b67ae"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a783023d0c499c732c067d566c90b67ae">IsEster</a> ()</td></tr>
<tr class="separator:a783023d0c499c732c067d566c90b67ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b3a46209d5f71fd8b5717a81dce7dd1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a0b3a46209d5f71fd8b5717a81dce7dd1">IsCarbonyl</a> ()</td></tr>
<tr class="separator:a0b3a46209d5f71fd8b5717a81dce7dd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7c514e18d5bbe2873dc223a02df526e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa7c514e18d5bbe2873dc223a02df526e">IsSingle</a> ()</td></tr>
<tr class="separator:aa7c514e18d5bbe2873dc223a02df526e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66926118e966d8cdb17a6ae23f2e89f4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a66926118e966d8cdb17a6ae23f2e89f4">IsDouble</a> ()</td></tr>
<tr class="separator:a66926118e966d8cdb17a6ae23f2e89f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae763d876fdca6bb00dd7d97574c9c1d0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ae763d876fdca6bb00dd7d97574c9c1d0">IsTriple</a> ()</td></tr>
<tr class="separator:ae763d876fdca6bb00dd7d97574c9c1d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dcf63c2cdd597361fe1f140501fb4e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3dcf63c2cdd597361fe1f140501fb4e7">IsKSingle</a> ()</td></tr>
<tr class="separator:a3dcf63c2cdd597361fe1f140501fb4e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1293d36d6ef65f89892ed57092aeb157"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1293d36d6ef65f89892ed57092aeb157">IsKDouble</a> ()</td></tr>
<tr class="separator:a1293d36d6ef65f89892ed57092aeb157"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2ccb49198384c9d22b47ac7d0c4de90"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ad2ccb49198384c9d22b47ac7d0c4de90">IsKTriple</a> ()</td></tr>
<tr class="separator:ad2ccb49198384c9d22b47ac7d0c4de90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab91f9d866c216bcb3ffc5aa0774b5177"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">IsClosure</a> ()</td></tr>
<tr class="separator:ab91f9d866c216bcb3ffc5aa0774b5177"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1733c541422f1bec76b19733d5f6f046"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1733c541422f1bec76b19733d5f6f046">IsUp</a> ()</td></tr>
<tr class="separator:a1733c541422f1bec76b19733d5f6f046"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ff4d4e51ec0a91f7b8174265de188e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a4ff4d4e51ec0a91f7b8174265de188e7">IsDown</a> ()</td></tr>
<tr class="separator:a4ff4d4e51ec0a91f7b8174265de188e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70910881ff95404e96c9b40d33e0db76"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a70910881ff95404e96c9b40d33e0db76">IsWedge</a> ()</td></tr>
<tr class="separator:a70910881ff95404e96c9b40d33e0db76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5e8e371f621ba037c843f6da7fe6bdb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#ab5e8e371f621ba037c843f6da7fe6bdb">IsHash</a> ()</td></tr>
<tr class="separator:ab5e8e371f621ba037c843f6da7fe6bdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adde4f29d5c0c23a90e04e11ecdd1edfc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#adde4f29d5c0c23a90e04e11ecdd1edfc">IsWedgeOrHash</a> () const</td></tr>
<tr class="separator:adde4f29d5c0c23a90e04e11ecdd1edfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8b4b96aad165feb9b21d7a25a9b2b29"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa8b4b96aad165feb9b21d7a25a9b2b29">IsCisOrTrans</a> () const</td></tr>
<tr class="separator:aa8b4b96aad165feb9b21d7a25a9b2b29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed0dfa6939f68b337f13fbcf4e0f3da7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aed0dfa6939f68b337f13fbcf4e0f3da7">IsDoubleBondGeometry</a> ()</td></tr>
<tr class="separator:aed0dfa6939f68b337f13fbcf4e0f3da7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Generic data handling methods (via OBGenericData)</div></td></tr>
<tr class="memitem:a86dd58fc1da5652d70e823fa77cc1637"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a86dd58fc1da5652d70e823fa77cc1637">HasData</a> (const std::string &amp;)</td></tr>
<tr class="separator:a86dd58fc1da5652d70e823fa77cc1637"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01b429ffcaf47cf265acd439ed2faca0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a01b429ffcaf47cf265acd439ed2faca0">HasData</a> (const char *)</td></tr>
<tr class="separator:a01b429ffcaf47cf265acd439ed2faca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cb103f12f49d86132ece200000da830"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6cb103f12f49d86132ece200000da830">HasData</a> (const unsigned int type)</td></tr>
<tr class="separator:a6cb103f12f49d86132ece200000da830"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a797e5b4d20b6233062d2fdba78a08e06"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a797e5b4d20b6233062d2fdba78a08e06">DeleteData</a> (unsigned int type)</td></tr>
<tr class="separator:a797e5b4d20b6233062d2fdba78a08e06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab586df65e3f115b69510820b34098ce9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab586df65e3f115b69510820b34098ce9">DeleteData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *)</td></tr>
<tr class="separator:ab586df65e3f115b69510820b34098ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030adad5b052ff3d390f13e1f981201e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a030adad5b052ff3d390f13e1f981201e">DeleteData</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&gt; &amp;)</td></tr>
<tr class="separator:a030adad5b052ff3d390f13e1f981201e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa068a2a7b64d2ee73aedb8c6e3cf0c4c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa068a2a7b64d2ee73aedb8c6e3cf0c4c">DeleteData</a> (const std::string &amp;s)</td></tr>
<tr class="separator:aa068a2a7b64d2ee73aedb8c6e3cf0c4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb6b0ec89bfea783825b3b466e4dbc00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#adb6b0ec89bfea783825b3b466e4dbc00">SetData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr class="separator:adb6b0ec89bfea783825b3b466e4dbc00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6f692332837387535e337413d0100de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa6f692332837387535e337413d0100de">CloneData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr class="separator:aa6f692332837387535e337413d0100de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2de970fc10391cb7f06c77e3b492f582"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a2de970fc10391cb7f06c77e3b492f582">DataSize</a> () const</td></tr>
<tr class="separator:a2de970fc10391cb7f06c77e3b492f582"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee672d91b694547fb072fdaa8e03cfe9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aee672d91b694547fb072fdaa8e03cfe9">GetData</a> (const unsigned int type)</td></tr>
<tr class="separator:aee672d91b694547fb072fdaa8e03cfe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f0eade8b5924eec28ad50f0ce2031f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a22f0eade8b5924eec28ad50f0ce2031f">GetData</a> (const std::string &amp;)</td></tr>
<tr class="separator:a22f0eade8b5924eec28ad50f0ce2031f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a483b277678a8ca48998742c80985fd0b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a483b277678a8ca48998742c80985fd0b">GetData</a> (const char *)</td></tr>
<tr class="separator:a483b277678a8ca48998742c80985fd0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90a551ff0a0ed3fa58745dff0ecacdaa"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a90a551ff0a0ed3fa58745dff0ecacdaa">GetData</a> ()</td></tr>
<tr class="separator:a90a551ff0a0ed3fa58745dff0ecacdaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa959146c3f7b458009dc04f61b5a2e7f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa959146c3f7b458009dc04f61b5a2e7f">GetData</a> (<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source)</td></tr>
<tr class="separator:aa959146c3f7b458009dc04f61b5a2e7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb56decc1b824c9fad980fc22e1d778c"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#afb56decc1b824c9fad980fc22e1d778c">GetAllData</a> (const unsigned int type)</td></tr>
<tr class="separator:afb56decc1b824c9fad980fc22e1d778c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15b47c65393d46fde62d1f0a19bcf9fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a15b47c65393d46fde62d1f0a19bcf9fa">BeginData</a> ()</td></tr>
<tr class="separator:a15b47c65393d46fde62d1f0a19bcf9fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a117c836710dd3aaa8748509262a5c280"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a117c836710dd3aaa8748509262a5c280">EndData</a> ()</td></tr>
<tr class="separator:a117c836710dd3aaa8748509262a5c280"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a6bb6ed5c064e3957d8dd03aba51e61f7"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6bb6ed5c064e3957d8dd03aba51e61f7">ClassDescription</a> ()</td></tr>
<tr class="separator:a6bb6ed5c064e3957d8dd03aba51e61f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:a6368d7673f23186649b2969ade3661d7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a6368d7673f23186649b2969ade3661d7">Visit</a></td></tr>
<tr class="separator:a6368d7673f23186649b2969ade3661d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a29c5c831c63b61f3c0906cd12f05e1bc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a29c5c831c63b61f3c0906cd12f05e1bc">HasFlag</a> (int flag) const</td></tr>
<tr class="separator:a29c5c831c63b61f3c0906cd12f05e1bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcdab8f96dc4fdc2940749e527087245"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#adcdab8f96dc4fdc2940749e527087245">SetFlag</a> (int flag)</td></tr>
<tr class="separator:adcdab8f96dc4fdc2940749e527087245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a401b99defa8a57195dc40a2604cee115"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a401b99defa8a57195dc40a2604cee115">UnsetFlag</a> (int flag)</td></tr>
<tr class="separator:a401b99defa8a57195dc40a2604cee115"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a1219a011a5e0ec59c67a5a873d81986c"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a1219a011a5e0ec59c67a5a873d81986c">_idx</a></td></tr>
<tr class="separator:a1219a011a5e0ec59c67a5a873d81986c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa15238ffbdb1330727678c9d6553d6ba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa15238ffbdb1330727678c9d6553d6ba">_parent</a></td></tr>
<tr class="separator:aa15238ffbdb1330727678c9d6553d6ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a61f73b711933e11ee793bf8fc550e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3a61f73b711933e11ee793bf8fc550e0">_bgn</a></td></tr>
<tr class="separator:a3a61f73b711933e11ee793bf8fc550e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa094fa86d6e276e37457b5f662d386e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aa094fa86d6e276e37457b5f662d386e0">_end</a></td></tr>
<tr class="separator:aa094fa86d6e276e37457b5f662d386e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3db9d8d4a032ad98c3cc9139bff39a49"><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#a3db9d8d4a032ad98c3cc9139bff39a49">_order</a></td></tr>
<tr class="separator:a3db9d8d4a032ad98c3cc9139bff39a49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec57dcfb24a8b5496b6319fa1172fa5e"><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#aec57dcfb24a8b5496b6319fa1172fa5e">_flags</a></td></tr>
<tr class="separator:aec57dcfb24a8b5496b6319fa1172fa5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accc49a515c7a81154bd46a8ea8a16204"><td class="memItemLeft" align="right" valign="top">unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml#accc49a515c7a81154bd46a8ea8a16204">_id</a></td></tr>
<tr class="separator:accc49a515c7a81154bd46a8ea8a16204"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7811cf8aadbf3b3477c560b0ef2f797"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a></td></tr>
<tr class="separator:af7811cf8aadbf3b3477c560b0ef2f797"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Bond class. </p>
<p>The <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> class is straightforward in its data access and modification methods. OBBonds store pointers to the atoms on each end of the bond. In storing pointers to atoms instead of integer indices, the necessity of having to reorder bonds when atoms are shuffled, added, or delete is obviated.</p>
<p>While methods indicate "begin" and "end" atoms in the bond, all methods are designed to be independent of atom ordering, with the exception of stereochemically aware properties such as <a class="el" href="classOpenBabel_1_1OBBond.shtml#a1733c541422f1bec76b19733d5f6f046">IsUp()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a4ff4d4e51ec0a91f7b8174265de188e7">IsDown()</a>, IsWedge, or <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab5e8e371f621ba037c843f6da7fe6bdb">IsHash()</a>. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a3f3de3e0d751949b8d0b60ffb302944a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f3de3e0d751949b8d0b60ffb302944a">&sect;&nbsp;</a></span>Flag</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBBond.shtml#a3f3de3e0d751949b8d0b60ffb302944a">Flag</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a3f3de3e0d751949b8d0b60ffb302944aa64c607937ff8cf2e2d5c22b8b4052b4c"></a>Aromatic&#160;</td><td class="fielddoc"><p>An aromatic bond (regardless of bond order) </p>
</td></tr>
<tr><td class="fieldname"><a id="a3f3de3e0d751949b8d0b60ffb302944aa881827681e680c135749c84331670a50"></a>Ring&#160;</td><td class="fielddoc"><p>A bond in a ring. </p>
</td></tr>
<tr><td class="fieldname"><a id="a3f3de3e0d751949b8d0b60ffb302944aa588f9590824232581845c4db8cbda773"></a>Closure&#160;</td><td class="fielddoc"><p>A bond which "closes" a ring when walking the molecular graph. </p>
</td></tr>
</table>

</div>
</div>
<a id="afbdb429fe4a7d37960636a555de77326"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbdb429fe4a7d37960636a555de77326">&sect;&nbsp;</a></span>StereoFlag</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classOpenBabel_1_1OBBond.shtml#afbdb429fe4a7d37960636a555de77326">StereoFlag</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="afbdb429fe4a7d37960636a555de77326a721d5e522bcc0b0defce43b967d34091"></a>Wedge&#160;</td><td class="fielddoc"><p>A solid black wedge in 2D representations &ndash; i.e., "up" from the 2D plane. </p>
</td></tr>
<tr><td class="fieldname"><a id="afbdb429fe4a7d37960636a555de77326ae44c0278588a18b472943c7f72857c03"></a>Hash&#160;</td><td class="fielddoc"><p>A dashed "hash" bond in 2D representations &ndash; i.e., "down" from the 2D plane. </p>
</td></tr>
<tr><td class="fieldname"><a id="afbdb429fe4a7d37960636a555de77326a96d5e3fcebcf162bf697dcf08f6e2063"></a>WedgeOrHash&#160;</td><td class="fielddoc"><p>The bond is either wedge or hash, this is a seperate flag! </p>
</td></tr>
<tr><td class="fieldname"><a id="afbdb429fe4a7d37960636a555de77326a1a4533d507bb26970b15bb7ba5ce6b3d"></a>CisOrTrans&#160;</td><td class="fielddoc"><p>Indicates the 2D/3D coordinates are accidently cis/trans. </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a61559abfacb167bad8bb124d1f899b87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61559abfacb167bad8bb124d1f899b87">&sect;&nbsp;</a></span>OBBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a id="af3978005314074b4383b10d497b55003"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3978005314074b4383b10d497b55003">&sect;&nbsp;</a></span>~OBBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a29c5c831c63b61f3c0906cd12f05e1bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29c5c831c63b61f3c0906cd12f05e1bc">&sect;&nbsp;</a></span>HasFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>True id the <code>flag</code> is set. </dd></dl>

</div>
</div>
<a id="adcdab8f96dc4fdc2940749e527087245"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcdab8f96dc4fdc2940749e527087245">&sect;&nbsp;</a></span>SetFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Sets the bitwise <code>flag</code> </p>

</div>
</div>
<a id="a401b99defa8a57195dc40a2604cee115"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a401b99defa8a57195dc40a2604cee115">&sect;&nbsp;</a></span>UnsetFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Unsets the bitwise <code>flag</code> </p>

</div>
</div>
<a id="ab994a975e39f5c62288f4f972b6f90c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab994a975e39f5c62288f4f972b6f90c9">&sect;&nbsp;</a></span>SetIdx()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetIdx </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the internal bond index. </p>
<dl class="section warning"><dt>Warning</dt><dd>This will not update the index in the parent <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>. Intended mainly for internal use. Use with care. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>.</p>

</div>
</div>
<a id="a383094c5a19383cf09f3dfb4c1de1da2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a383094c5a19383cf09f3dfb4c1de1da2">&sect;&nbsp;</a></span>SetId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetId </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a id="a3b00183cecf8df500db30888b4f83e70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b00183cecf8df500db30888b4f83e70">&sect;&nbsp;</a></span>SetBO()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBO </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the bond order to <code>order</code> (i.e., 1 = single, 2 = double, 5 = aromatic) </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000018">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic) ">SetBondOrder()</a> instead. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="afb89a19ab65bff6626af0eccfb83af07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb89a19ab65bff6626af0eccfb83af07">&sect;&nbsp;</a></span>SetBondOrder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetBondOrder </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the bond order to <code>order</code> (i.e., 1 = single, 2 = double, 5 = aromatic) </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abcf2e89fef03dd291e22507c51af8965">OBMol::ConvertZeroBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>.</p>

</div>
</div>
<a id="a3c443bcf96eac155aa058b69cc59aa4e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c443bcf96eac155aa058b69cc59aa4e">&sect;&nbsp;</a></span>SetBegin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetBegin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>begin</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the beginning atom of this bond to <code>begin</code>. Does not update <code>begin</code>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a id="a9bcf1c90715c368ce2896acae75235c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bcf1c90715c368ce2896acae75235c4">&sect;&nbsp;</a></span>SetEnd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the ending atom of this bond to <code>end</code>. Does not update <code>end</code>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a id="a962b3010305cfb80ba816a0e54097dee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a962b3010305cfb80ba816a0e54097dee">&sect;&nbsp;</a></span>SetParent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetParent </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the parent molecule to <code>ptr</code>. Does not update parent. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>.</p>

</div>
</div>
<a id="ac7d5e7adb0a537d92a628c811148dc21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7d5e7adb0a537d92a628c811148dc21">&sect;&nbsp;</a></span>SetLength() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetLength </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>fixed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Change the bond length to <code>length</code>, while keeping <code>fixed</code> stationary. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>.</p>

</div>
</div>
<a id="a62b38719673238813acc911788969922"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62b38719673238813acc911788969922">&sect;&nbsp;</a></span>SetLength() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetLength </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>length</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Change the bond length to <code>length</code>, moving both atoms halfway </p><dl class="section since"><dt>Since</dt><dd>version 2.2 </dd></dl>

</div>
</div>
<a id="a89e52e2c0a57a3f936e8713406cc45e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89e52e2c0a57a3f936e8713406cc45e9">&sect;&nbsp;</a></span>Set()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the main bond information (i.e., when creating a bond) </p>
<p>Mark the main information for a bond </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">idx</td><td>The unique bond index for this bond (inside an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>) </td></tr>
    <tr><td class="paramname">begin</td><td>The 'beginning' atom for the bond </td></tr>
    <tr><td class="paramname">end</td><td>The 'end' atom for the bond </td></tr>
    <tr><td class="paramname">order</td><td>The bond order (i.e., 1 = single, 2 = double... 5 = aromatic) </td></tr>
    <tr><td class="paramname">flags</td><td>Any initial property flags </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>.</p>

</div>
</div>
<a id="acb95632fbaba13a5aa138725a20f2c0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb95632fbaba13a5aa138725a20f2c0b">&sect;&nbsp;</a></span>SetKSingle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKSingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000019">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic) ">SetBondOrder()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="a2372682111abb0a7d49ba2f6caa7f51f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2372682111abb0a7d49ba2f6caa7f51f">&sect;&nbsp;</a></span>SetKDouble()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKDouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000020">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic) ">SetBondOrder()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="a068e086977f8e15b07d3c3d32f622ead"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a068e086977f8e15b07d3c3d32f622ead">&sect;&nbsp;</a></span>SetKTriple()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetKTriple </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000021">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#afb89a19ab65bff6626af0eccfb83af07" title="Set the bond order to order (i.e., 1 = single, 2 = double, 5 = aromatic) ">SetBondOrder()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="a3d29498c15007d9b6729e26784f23a5b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d29498c15007d9b6729e26784f23a5b">&sect;&nbsp;</a></span>SetAromatic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that this bond is aromatic. Does not update atoms or validate. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>.</p>

</div>
</div>
<a id="aac63169d5f12da96ad067cc8194c8cdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac63169d5f12da96ad067cc8194c8cdb">&sect;&nbsp;</a></span>SetWedge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetWedge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Mark that this bond has 2D "wedge" notation (i.e., goes in a positive Z direction from the beginning to end atoms) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>.</p>

</div>
</div>
<a id="a25f82438018e969b4feda4a25042c608"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25f82438018e969b4feda4a25042c608">&sect;&nbsp;</a></span>SetHash()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Mark that this bond has 2D "hash" notation (i.e., goes in a negative Z direction from the beginning to end atoms) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>.</p>

</div>
</div>
<a id="abc50b699bc2efd24c5a65295b82f0ad0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc50b699bc2efd24c5a65295b82f0ad0">&sect;&nbsp;</a></span>SetWedgeOrHash()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetWedgeOrHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Mark that this bond has 2D "wedge" notation (i.e., goes in a positive Z direction from the beginning to end atoms) </p>

</div>
</div>
<a id="a1b06560e0e01a806b92c2386220d0b57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b06560e0e01a806b92c2386220d0b57">&sect;&nbsp;</a></span>SetUp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetUp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that this bond has an "up" torsion for double-bond stereochem (i.e., "/" in SMILES notation. </p>

</div>
</div>
<a id="a7690859a81831984dbc0fa73313d44b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7690859a81831984dbc0fa73313d44b3">&sect;&nbsp;</a></span>SetDown()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetDown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that this bond has an "down" torsion for double-bond stereochem (i.e., "\" in SMILES notation. </p>

</div>
</div>
<a id="aacde511d3c9a744b44c88958bb86eb68"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacde511d3c9a744b44c88958bb86eb68">&sect;&nbsp;</a></span>SetInRing()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetInRing </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>set</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that this bond is in a ring. Primarily for internal use. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">OBMol::EndModify()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a242fc84ac802af94d65d8807a5638e2f">OpenBabel::FindRings()</a>.</p>

</div>
</div>
<a id="ab499793fc98aadbaa192756b8327016d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab499793fc98aadbaa192756b8327016d">&sect;&nbsp;</a></span>SetClosure()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetClosure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that this bond indicates a ring closure when walking the molecule. </p>
<dl class="section warning"><dt>Warning</dt><dd>This is for internal use only. All closure bonds are marked automatically by lazy evaluation when requesting <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a> </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a242fc84ac802af94d65d8807a5638e2f">OpenBabel::FindRings()</a>.</p>

</div>
</div>
<a id="a934251078b7907fd8cd8573c40fdea58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a934251078b7907fd8cd8573c40fdea58">&sect;&nbsp;</a></span>UnsetHash()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear any indication of 2D "hash" notation from <a class="el" href="classOpenBabel_1_1OBBond.shtml#a25f82438018e969b4feda4a25042c608">SetHash()</a> </p>

</div>
</div>
<a id="a8425a34105ee2f2e152da12ebca9960e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8425a34105ee2f2e152da12ebca9960e">&sect;&nbsp;</a></span>UnsetWedge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetWedge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear any indication of 2D "wedge" notation from <a class="el" href="classOpenBabel_1_1OBBond.shtml#aac63169d5f12da96ad067cc8194c8cdb">SetWedge()</a> </p>

</div>
</div>
<a id="a88d9f308b5a9d49e98da1c6bd195358f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88d9f308b5a9d49e98da1c6bd195358f">&sect;&nbsp;</a></span>UnsetUp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetUp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear any indication of "/" double bond stereochemistry from <a class="el" href="classOpenBabel_1_1OBBond.shtml#a1b06560e0e01a806b92c2386220d0b57" title="Mark that this bond has an &quot;up&quot; torsion for double-bond stereochem (i.e., &quot;/&quot; in SMILES notation...">SetUp()</a> </p>

</div>
</div>
<a id="a561d657e1cc83679879b2b8f662b9205"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a561d657e1cc83679879b2b8f662b9205">&sect;&nbsp;</a></span>UnsetDown()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetDown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear any indication of "\" double bond stereochemistry from <a class="el" href="classOpenBabel_1_1OBBond.shtml#a7690859a81831984dbc0fa73313d44b3" title="Mark that this bond has an &quot;down&quot; torsion for double-bond stereochem (i.e., &quot;\&quot; in SMILES notation...">SetDown()</a> </p>

</div>
</div>
<a id="a2fcf3bf429f36281a43c879e40e75f34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fcf3bf429f36281a43c879e40e75f34">&sect;&nbsp;</a></span>UnsetAromatic()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetAromatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all aromaticity information for the bond. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>.</p>

</div>
</div>
<a id="a512e7b122631a29f1ef8c679704632cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a512e7b122631a29f1ef8c679704632cd">&sect;&nbsp;</a></span>UnsetKekule()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetKekule </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all Kekule information for the bond. </p>

</div>
</div>
<a id="a44b77545e83209582e42f375c8f40474"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44b77545e83209582e42f375c8f40474">&sect;&nbsp;</a></span>GetIdx()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetIdx </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The unique bond index in a molecule. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd603c36f7650b398cddf72b1b863b1f">OpenBabel::atomRingToBondRing()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a953354b2def4be81e4615eabb05f99ae">OBMolBondBFSIter::CurrentDepth()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac918a56b1ce85885d791b5981d2102cd">OpenBabel::expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a242fc84ac802af94d65d8807a5638e2f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a22b1621d9012f2f83460a4a6ad591cdd">OBResidue::GetBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abf7ff40c898c129bba2020623f7394b3">OBRotorList::IsFixedBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a8d72e30a8da1c39c9906a27ef62dd5f6">OpenBabel::KekulePropagate()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>.</p>

</div>
</div>
<a id="a6dd98e3e99e394dce75b285c451028b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dd98e3e99e394dce75b285c451028b1">&sect;&nbsp;</a></span>GetId()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long GetId </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3280c4291f365e26ad615eb38c877b25">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>.</p>

</div>
</div>
<a id="a7d9f4e277b24001cf1d7d9ef072724e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d9f4e277b24001cf1d7d9ef072724e6">&sect;&nbsp;</a></span>GetBO()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetBO </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The bond order for the bond </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000022">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#ad4ae2f349fa9fe34dea5f5e69378fbf7">GetBondOrder()</a> as this method may be removed. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a437ef8d4fce62b10898a074ec147c8c5">OBAtom::BOSum()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4fc49ec59966a08059750ecd2e9d20a5">OBAtom::CountBondsOfOrder()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a51fe0e9eb03d3a861ca5d5c794acf011">OpenBabel::ExpandKekule()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#addb891e1fa000764b9030d5e08c0c67a">OBAtom::HasBondOfOrder()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae3d85200b00bf0ad59725175d606acfe">OBAtom::HasNonSingleBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a2d1a92d262f9ae24f29fa80d96d70128">OBAtom::HighestBondOrder()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ac8299dd769242a441864a7ad2fcb92b6">OBAtom::IsAmideNitrogen()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="ad4ae2f349fa9fe34dea5f5e69378fbf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4ae2f349fa9fe34dea5f5e69378fbf7">&sect;&nbsp;</a></span>GetBondOrder()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetBondOrder </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The bond order for the bond </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af123db2b6c32f7d210f4455e7fb8cccc">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>, <a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">OpenBabel::isFerroceneBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBQueryBond.shtml#ac907abf6ca9b2852c7ce346846d8388e">OBQueryBond::Matches()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>.</p>

</div>
</div>
<a id="ad2ed50e039de387fb517a9f7832de06f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2ed50e039de387fb517a9f7832de06f">&sect;&nbsp;</a></span>GetFlags()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetFlags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The set of property flags defined for this bond. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a id="ae11a8ddd132109c3a14328bb7676d9f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae11a8ddd132109c3a14328bb7676d9f7">&sect;&nbsp;</a></span>GetBeginAtomIdx()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetBeginAtomIdx </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The atom index for the end atom in this bond (from <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a44b77545e83209582e42f375c8f40474">OBAtom::GetIdx()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#acf3841f44863af6030c02f54a10ba635">OBRing::IsMember()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="a38f53ed138507e197a36be75e58a24da"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38f53ed138507e197a36be75e58a24da">&sect;&nbsp;</a></span>GetEndAtomIdx()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetEndAtomIdx </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The atom index for the end atom in this bond (from <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a44b77545e83209582e42f375c8f40474">OBAtom::GetIdx()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#acf3841f44863af6030c02f54a10ba635">OBRing::IsMember()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="afdda9b904cabc9ce0335a665988ab143"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afdda9b904cabc9ce0335a665988ab143">&sect;&nbsp;</a></span>GetBeginAtom() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetBeginAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The "beginning" atom for this bond </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abcf2e89fef03dd291e22507c51af8965">OBMol::ConvertZeroBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac918a56b1ce85885d791b5981d2102cd">OpenBabel::expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">OpenBabel::expandKekulize()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a35892bf1255c1b8824c870e5460fd641">OBAtom::IsConnected()</a>, <a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">OpenBabel::isFerroceneBond()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abf7ff40c898c129bba2020623f7394b3">OBRotorList::IsFixedBond()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="ae24579e3e3a0beac0d559aa2ac513f5d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae24579e3e3a0beac0d559aa2ac513f5d">&sect;&nbsp;</a></span>GetBeginAtom() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetBeginAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aee593e9cc14031b07e3dc63a003c345f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee593e9cc14031b07e3dc63a003c345f">&sect;&nbsp;</a></span>GetEndAtom() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetEndAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The "end" atom for this bond </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abcf2e89fef03dd291e22507c51af8965">OBMol::ConvertZeroBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">OBMol::DeleteBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac918a56b1ce85885d791b5981d2102cd">OpenBabel::expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">OpenBabel::expandKekulize()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a35892bf1255c1b8824c870e5460fd641">OBAtom::IsConnected()</a>, <a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">OpenBabel::isFerroceneBond()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abf7ff40c898c129bba2020623f7394b3">OBRotorList::IsFixedBond()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="a2b0f900d4472956b82a94dca09c64eeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2b0f900d4472956b82a94dca09c64eeb">&sect;&nbsp;</a></span>GetEndAtom() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetEndAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a30735471b108fe43965fd2d0a9fe86a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30735471b108fe43965fd2d0a9fe86a0">&sect;&nbsp;</a></span>GetNbrAtom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* GetNbrAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The neighboring atom to <code>ptr</code> (i.e., the end if <code>ptr</code> is the start) </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>If <code>ptr</code> is not part of the bond, the beginning atom will always be returned </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a3be22bbc7a222c8f7255a6f79d937cb4">OBAtom::CountFreeOxygens()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#adc9e3255d3d68b9d1d4ddd49989e7380">OBAtom::CountFreeSulfurs()</a>, <a class="el" href="namespaceOpenBabel.shtml#a242fc84ac802af94d65d8807a5638e2f">OpenBabel::FindRings()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aed271572fc66bbef1751cac6ccf3cade">OBAtom::GetBond()</a>, <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a22b1621d9012f2f83460a4a6ad591cdd">OBResidue::GetBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a03272525cd445da2a6ec5507c62fdbda">OBAtom::GetHeteroValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aa7fc4fb37c3e28286d47d36b812303d9">OBAtom::GetHvyValence()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ac8299dd769242a441864a7ad2fcb92b6">OBAtom::IsAmideNitrogen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ab7dd88da6d7a1e72f636c50586d5551d">OBAtom::IsCarboxylOxygen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a135d08515315b5daa95e6081dc104a38">OBAtom::IsHbondDonorH()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a256fca254282407b1342875266769463">OBAtom::IsNitroOxygen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae519982c28911c0906e9181c46d7bdbc">OBAtom::IsNonPolarHydrogen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad1b5c7353abc13edd81339fc58206a3b">OBAtom::IsOneFour()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a895cbd0d89d126571465b59ee0a3b79a">OBAtom::IsOneThree()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a5b1d4c9a297629beacb66c0ef04070e9">OBAtom::IsPhosphateOxygen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6da4cfc5bbc2e4c9b358bccd5d97e51f">OBAtom::IsPolarHydrogen()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a76ecda2fd4bf9207310088f25f526ea8">OBAtom::IsSulfateOxygen()</a>, <a class="el" href="namespaceOpenBabel.shtml#a47ebe26957d5b56a72772cfd24a29db1">OpenBabel::IsSulfoneOxygen()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="ad8480b61159bc6cb861b17341dc2b29a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8480b61159bc6cb861b17341dc2b29a">&sect;&nbsp;</a></span>GetParent()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* GetParent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The enclosing <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> for this bond, or NULL if none is defined. </dd></dl>

</div>
</div>
<a id="a4cb9ded766d46989223816771b033155"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4cb9ded766d46989223816771b033155">&sect;&nbsp;</a></span>GetEquibLength()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetEquibLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The expected "equilibrium" length based on the covalent radii and bond order Length is given in Angstroms </dd></dl>

</div>
</div>
<a id="adca4fce8e3ab8fd1eacd396af7c9adbb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adca4fce8e3ab8fd1eacd396af7c9adbb">&sect;&nbsp;</a></span>GetLength()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetLength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The current length of this bond in Angstroms </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>.</p>

</div>
</div>
<a id="ae3aba2dee7140a159fb534747bb2dc7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3aba2dee7140a159fb534747bb2dc7a">&sect;&nbsp;</a></span>GetNbrAtomIdx()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetNbrAtomIdx </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The index to the neighboring atom of <code>ptr</code> (i.e., the end if <code>ptr</code> is the start) </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>If <code>ptr</code> is not part of the bond, the beginning atom index will always be returned </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">OBMol::FindLargestFragment()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">OBMol::GetGTDVector()</a>.</p>

</div>
</div>
<a id="a87fc3915905cbeea2a56569bf0a69fd5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87fc3915905cbeea2a56569bf0a69fd5">&sect;&nbsp;</a></span>FindSmallestRing()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * FindSmallestRing </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find the smallest ring containing this bond (returns a NULL pointer if none exists) </p>

</div>
</div>
<a id="aeda62da8823b248654404fb15f314a66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeda62da8823b248654404fb15f314a66">&sect;&nbsp;</a></span>IsAromatic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAromatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond aromatic? (Note that the two atoms of the bond may be aromatic, but not the bond) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBQueryBond.shtml#ac907abf6ca9b2852c7ce346846d8388e">OBQueryBond::Matches()</a>.</p>

</div>
</div>
<a id="ae016e13adf41d7c12a3d22147f0b870e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae016e13adf41d7c12a3d22147f0b870e">&sect;&nbsp;</a></span>IsInRing()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsInRing </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond part of a ring? </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af123db2b6c32f7d210f4455e7fb8cccc">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a477acbd6186fc09959e879d26b3af56f">OBAtom::CountRingBonds()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>, and <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a68ba77b0a1443e9e7276e3e97e16893c">OBAromaticTyper::TraverseCycle()</a>.</p>

</div>
</div>
<a id="afcf274313e5c401b4d05ff05314c6e37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afcf274313e5c401b4d05ff05314c6e37">&sect;&nbsp;</a></span>IsRotor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsRotor </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>includeRingBonds</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond a rotatable bond? Currently, this function classifies any bond with at least one heavy atom, no sp-hybrid atoms (e.g., a triple bond somewhere) not in a ring as a potential rotor if includeRingsBonds is false. If true, rotors in rings with more than 3 atoms may be included. No other bond typing is attempted. For more detailed rotor detection, check the <a class="el" href="classOpenBabel_1_1OBRotorList.shtml" title="Given an OBMol, set up a list of possibly rotatable torsions,. ">OBRotorList</a> and <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml" title="Database of default hybridization torsional rules and SMARTS-defined OBRotorRule objects. ">OBRotorRules</a> classes </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0079d7acc1b351a0b3811e0fb5451962">OBMol::NumRotors()</a>.</p>

</div>
</div>
<a id="a86eb2acbb9c5811e645df18b8b0bacf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86eb2acbb9c5811e645df18b8b0bacf7">&sect;&nbsp;</a></span>IsAmide()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond an amide link (i.e., between a carbonyl C and a N)? No distinction is made between primary, secondary, and tertiary amides. </dd></dl>

</div>
</div>
<a id="a8d59ca837068a807d393dab30cf72775"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d59ca837068a807d393dab30cf72775">&sect;&nbsp;</a></span>IsPrimaryAmide()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsPrimaryAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond a primary amide (i.e., between carbonyl C and a NH2)? In versions prior to 2.3, this function incorrectly identified secondary amides. </dd></dl>

</div>
</div>
<a id="a38f8ea65888a454fa07b77cdd4aa41ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38f8ea65888a454fa07b77cdd4aa41ca">&sect;&nbsp;</a></span>IsSecondaryAmide()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSecondaryAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond a secondary amide (i.e., between a carbonyl C and a NH1)? In versions prior to 2.3, this function incorrectly identified tertiary amides. </dd></dl>

</div>
</div>
<a id="a771d7a8c76475f1e72a75e8330fac6d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a771d7a8c76475f1e72a75e8330fac6d5">&sect;&nbsp;</a></span>IsTertiaryAmide()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTertiaryAmide </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond a teriary amide (i.e., between a carbonyl C and a NH0)? </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.3. </dd></dl>

</div>
</div>
<a id="a783023d0c499c732c067d566c90b67ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a783023d0c499c732c067d566c90b67ae">&sect;&nbsp;</a></span>IsEster()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsEster </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond an ester link (i.e., between a carbonyl C and an O)? </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a63e02252214e540d56815820715f1ae3">OBAtom::IsHbondAcceptor()</a>.</p>

</div>
</div>
<a id="a0b3a46209d5f71fd8b5717a81dce7dd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b3a46209d5f71fd8b5717a81dce7dd1">&sect;&nbsp;</a></span>IsCarbonyl()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCarbonyl </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond a carbonyl C=O? </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBond.shtml#a86eb2acbb9c5811e645df18b8b0bacf7">OBBond::IsAmide()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a783023d0c499c732c067d566c90b67ae">OBBond::IsEster()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a8d59ca837068a807d393dab30cf72775">OBBond::IsPrimaryAmide()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a38f8ea65888a454fa07b77cdd4aa41ca">OBBond::IsSecondaryAmide()</a>, and <a class="el" href="classOpenBabel_1_1OBBond.shtml#a771d7a8c76475f1e72a75e8330fac6d5">OBBond::IsTertiaryAmide()</a>.</p>

</div>
</div>
<a id="aa7c514e18d5bbe2873dc223a02df526e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7c514e18d5bbe2873dc223a02df526e">&sect;&nbsp;</a></span>IsSingle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond a single bond? </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>.</p>

</div>
</div>
<a id="a66926118e966d8cdb17a6ae23f2e89f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66926118e966d8cdb17a6ae23f2e89f4">&sect;&nbsp;</a></span>IsDouble()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond is a double bond? </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="ae763d876fdca6bb00dd7d97574c9c1d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae763d876fdca6bb00dd7d97574c9c1d0">&sect;&nbsp;</a></span>IsTriple()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsTriple </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Is the bond is a triple bond? </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>.</p>

</div>
</div>
<a id="a3dcf63c2cdd597361fe1f140501fb4e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3dcf63c2cdd597361fe1f140501fb4e7">&sect;&nbsp;</a></span>IsKSingle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsKSingle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000023">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#aa7c514e18d5bbe2873dc223a02df526e">IsSingle()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>.</p>

</div>
</div>
<a id="a1293d36d6ef65f89892ed57092aeb157"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1293d36d6ef65f89892ed57092aeb157">&sect;&nbsp;</a></span>IsKDouble()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsKDouble </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000024">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#a66926118e966d8cdb17a6ae23f2e89f4">IsDouble()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad87b019400c810f14603c6532435030b">OpenBabel::GetCurrentValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ac724d08f837518953468665b9dc5ab23">OBAtom::KBOSum()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a8e455dc2d94f2394a21dd76db3af8325">OpenBabel::ValenceSum()</a>.</p>

</div>
</div>
<a id="ad2ccb49198384c9d22b47ac7d0c4de90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2ccb49198384c9d22b47ac7d0c4de90">&sect;&nbsp;</a></span>IsKTriple()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsKTriple </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000025">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBond.shtml#ae763d876fdca6bb00dd7d97574c9c1d0">IsTriple()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad87b019400c810f14603c6532435030b">OpenBabel::GetCurrentValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ac724d08f837518953468665b9dc5ab23">OBAtom::KBOSum()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>.</p>

</div>
</div>
<a id="ab91f9d866c216bcb3ffc5aa0774b5177"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab91f9d866c216bcb3ffc5aa0774b5177">&sect;&nbsp;</a></span>IsClosure()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsClosure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Does this bond "close" a ring when walking the molecular graph? </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, and <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>.</p>

</div>
</div>
<a id="a1733c541422f1bec76b19733d5f6f046"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1733c541422f1bec76b19733d5f6f046">&sect;&nbsp;</a></span>IsUp()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsUp </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Whether this is the "upper" bond in a double bond cis/trans isomer (i.e., "/" in SMILES) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>.</p>

</div>
</div>
<a id="a4ff4d4e51ec0a91f7b8174265de188e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ff4d4e51ec0a91f7b8174265de188e7">&sect;&nbsp;</a></span>IsDown()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDown </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Whether this is the "lower" bond in a double bond cis/trans isomer (i.e., "\" in SMILES) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6fa6bba6b6ce0fe1eb4a52a3116eca1f">OBSmartsMatcher::EvalBondExpr()</a>.</p>

</div>
</div>
<a id="a70910881ff95404e96c9b40d33e0db76"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70910881ff95404e96c9b40d33e0db76">&sect;&nbsp;</a></span>IsWedge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsWedge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Whether this bond is a "wedge" in 2D representations (i.e., goes in a positive Z direction from the beginning to end atoms) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>.</p>

</div>
</div>
<a id="ab5e8e371f621ba037c843f6da7fe6bdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5e8e371f621ba037c843f6da7fe6bdb">&sect;&nbsp;</a></span>IsHash()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>Whether this bond is a "hash" in 2D representations (i.e., goes in a negative Z direction from the beginning to end atoms) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>.</p>

</div>
</div>
<a id="adde4f29d5c0c23a90e04e11ecdd1edfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adde4f29d5c0c23a90e04e11ecdd1edfc">&sect;&nbsp;</a></span>IsWedgeOrHash()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsWedgeOrHash </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>True if this bond is either a wedge or hash. </dd></dl>
<dl class="section note"><dt>Note</dt><dd>: This is a seperate bond type </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a id="aa8b4b96aad165feb9b21d7a25a9b2b29"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8b4b96aad165feb9b21d7a25a9b2b29">&sect;&nbsp;</a></span>IsCisOrTrans()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCisOrTrans </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>True if this bond is either a cis or trans. </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a id="aed0dfa6939f68b337f13fbcf4e0f3da7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed0dfa6939f68b337f13fbcf4e0f3da7">&sect;&nbsp;</a></span>IsDoubleBondGeometry()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsDoubleBondGeometry </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether the geometry around this bond "looks" unsaturated</dd></dl>
<p>This method checks if the geometry around this bond looks unsaturated by measuring the torsion angles formed by all connected atoms X-start=end-Y and checking that they are close to 0 or 180 degrees </p>

</div>
</div>
<a id="ad12fd937da5f4b0c4562888252fe214b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad12fd937da5f4b0c4562888252fe214b">&sect;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear any and all data associated with this object. </p>
<p>This method can be called by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918" title="Reads an object of a class derived from OBBase into pOb. ">OBConversion::Read()</a> before reading data. Derived classes should be sure to call <a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b" title="Clear any and all data associated with this object. ">OBBase::Clear()</a> to remove inherited generic data.</p>
<dl class="section return"><dt>Returns</dt><dd>Whether the call was successful. </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.1. </dd></dl>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b">OBMol</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad12fd937da5f4b0c4562888252fe214b">OBAtom</a>, <a class="el" href="classOpenBabel_1_1OBReaction.shtml#ad12fd937da5f4b0c4562888252fe214b">OBReaction</a>, and <a class="el" href="classOpenBabel_1_1OBResidue.shtml#ad12fd937da5f4b0c4562888252fe214b">OBResidue</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidue.shtml#ad12fd937da5f4b0c4562888252fe214b">OBResidue::Clear()</a>.</p>

</div>
</div>
<a id="abdc8ffeb0749b563e1108a9ceaa0b394"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdc8ffeb0749b563e1108a9ceaa0b394">&sect;&nbsp;</a></span>DoTransformations()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* DoTransformations </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Perform a set of transformations specified by the user</p>
<p>Typically these are program options to filter or modify an object For example, see <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a> and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol::ClassDescription()</a> Base type does nothing </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol</a>.</p>

</div>
</div>
<a id="a6bb6ed5c064e3957d8dd03aba51e61f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6bb6ed5c064e3957d8dd03aba51e61f7">&sect;&nbsp;</a></span>ClassDescription()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static const char* ClassDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A list of descriptions of command-line options for <a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">DoTransformations()</a> </dd></dl>

</div>
</div>
<a id="ab2f0cea1c162bbe8dd603528a3da5c87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2f0cea1c162bbe8dd603528a3da5c87">&sect;&nbsp;</a></span>CastAndClear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* CastAndClear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>clear</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>By default clears the object. Called from ReadMolecule of most format classes. </p>

</div>
</div>
<a id="a0a6c35f6a88ad291ed821c856e4d887f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a6c35f6a88ad291ed821c856e4d887f">&sect;&nbsp;</a></span>GetTitle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* GetTitle </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>replaceNewlines</em> = <code>true</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base type does nothing Made virtual around r3535 to simplify code which passes around OBBase*. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#a2ac1fac8a7d7ad373c39710b62b3e0a7">OBMol</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>.</p>

</div>
</div>
<a id="a366c8a142b8c16554597e82320dfd0e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a366c8a142b8c16554597e82320dfd0e0">&sect;&nbsp;</a></span>SetTitle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetTitle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3b729dc90c4c5e21684e3a60653af">OBMol</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>.</p>

</div>
</div>
<a id="a86dd58fc1da5652d70e823fa77cc1637"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86dd58fc1da5652d70e823fa77cc1637">&sect;&nbsp;</a></span>HasData() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a4e794d96851deaad479e17b30928a3cd">OBDescriptor::MatchPairData()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a id="a01b429ffcaf47cf265acd439ed2faca0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01b429ffcaf47cf265acd439ed2faca0">&sect;&nbsp;</a></span>HasData() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether the generic attribute/value pair exists </dd></dl>

</div>
</div>
<a id="a6cb103f12f49d86132ece200000da830"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cb103f12f49d86132ece200000da830">&sect;&nbsp;</a></span>HasData() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether the generic attribute/value pair exists, for a given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a id="a797e5b4d20b6233062d2fdba78a08e06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a797e5b4d20b6233062d2fdba78a08e06">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete any data matching the given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a>. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">OBDescriptor::DeleteProperties()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5531433a3edb03cf74aecd1ffadfe3a7">OpenBabel::DeleteStereoOnAtom()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a id="ab586df65e3f115b69510820b34098ce9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab586df65e3f115b69510820b34098ce9">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>gd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete the given generic data from this object. </p>

</div>
</div>
<a id="a030adad5b052ff3d390f13e1f981201e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a030adad5b052ff3d390f13e1f981201e">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>vg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete all of the given generic data from this object. </p>

</div>
</div>
<a id="aa068a2a7b64d2ee73aedb8c6e3cf0c4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa068a2a7b64d2ee73aedb8c6e3cf0c4c">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deletes the generic data with the specified attribute, returning false if not found. </p>

</div>
</div>
<a id="adb6b0ec89bfea783825b3b466e4dbc00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb6b0ec89bfea783825b3b466e4dbc00">&sect;&nbsp;</a></span>SetData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a data object; does nothing if d==NULL. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">AliasData::RevertToAliasForm()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a id="aa6f692332837387535e337413d0100de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6f692332837387535e337413d0100de">&sect;&nbsp;</a></span>CloneData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CloneData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Adds a copy of a data object; does nothing if d == NULL </p><dl class="section since"><dt>Since</dt><dd>version 2.2 </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a2de970fc10391cb7f06c77e3b492f582"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2de970fc10391cb7f06c77e3b492f582">&sect;&nbsp;</a></span>DataSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t DataSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. ">OBGenericData</a> items attached to this molecule. </dd></dl>

</div>
</div>
<a id="aee672d91b694547fb072fdaa8e03cfe9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee672d91b694547fb072fdaa8e03cfe9">&sect;&nbsp;</a></span>GetData() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> or NULL if nothing matches </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">OpenBabel::CorrectChirality()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="namespaceOpenBabel.shtml#a632be87a51811b515f7e9a5fc18e4476">OpenBabel::extract_thermochemistry()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, <a class="el" href="namespaceOpenBabel.shtml#a394447ad37adaf40565f53d07f5eed17">OpenBabel::GetAtomSymClass()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml#a48b73b591ecad6e541b5ceedb6618715">OBMolAngleIter::OBMolAngleIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a7746689f376b4b9f2fc6a103dc101d38">OBMolTorsionIter::OBMolTorsionIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div>
<a id="a22f0eade8b5924eec28ad50f0ce2031f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22f0eade8b5924eec28ad50f0ce2031f">&sect;&nbsp;</a></span>GetData() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a id="a483b277678a8ca48998742c80985fd0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a483b277678a8ca48998742c80985fd0b">&sect;&nbsp;</a></span>GetData() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a id="a90a551ff0a0ed3fa58745dff0ecacdaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90a551ff0a0ed3fa58745dff0ecacdaa">&sect;&nbsp;</a></span>GetData() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;&amp; GetData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>all data, suitable for iterating </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a id="aa959146c3f7b458009dc04f61b5a2e7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa959146c3f7b458009dc04f61b5a2e7f">&sect;&nbsp;</a></span>GetData() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>all data with a specific origin, suitable for iterating </dd></dl>

</div>
</div>
<a id="afb56decc1b824c9fad980fc22e1d778c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb56decc1b824c9fad980fc22e1d778c">&sect;&nbsp;</a></span>GetAllData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetAllData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the all matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> or an empty vector if nothing matches </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.2 </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3280c4291f365e26ad615eb38c877b25">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5531433a3edb03cf74aecd1ffadfe3a7">OpenBabel::DeleteStereoOnAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a id="a15b47c65393d46fde62d1f0a19bcf9fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15b47c65393d46fde62d1f0a19bcf9fa">&sect;&nbsp;</a></span>BeginData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> BeginData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing to the beginning of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="a117c836710dd3aaa8748509262a5c280"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a117c836710dd3aaa8748509262a5c280">&sect;&nbsp;</a></span>EndData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> EndData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing to the end of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="a1219a011a5e0ec59c67a5a873d81986c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1219a011a5e0ec59c67a5a873d81986c">&sect;&nbsp;</a></span>_idx</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int _idx</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unique edge index used by <a class="el" href="classOpenBabel_1_1OBBond.shtml#a44b77545e83209582e42f375c8f40474">GetIdx()</a> and <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab994a975e39f5c62288f4f972b6f90c9" title="Set the internal bond index. ">SetIdx()</a> </p>

</div>
</div>
<a id="aa15238ffbdb1330727678c9d6553d6ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa15238ffbdb1330727678c9d6553d6ba">&sect;&nbsp;</a></span>_parent</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* _parent</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The molecule which contains me (if any) </p>

</div>
</div>
<a id="a3a61f73b711933e11ee793bf8fc550e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a61f73b711933e11ee793bf8fc550e0">&sect;&nbsp;</a></span>_bgn</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* _bgn</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>I connect one node. </p>

</div>
</div>
<a id="aa094fa86d6e276e37457b5f662d386e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa094fa86d6e276e37457b5f662d386e0">&sect;&nbsp;</a></span>_end</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* _end</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>to another node </p>

</div>
</div>
<a id="a3db9d8d4a032ad98c3cc9139bff39a49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3db9d8d4a032ad98c3cc9139bff39a49">&sect;&nbsp;</a></span>_order</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char _order</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Bond order (1, 2, 3, 5=aromatic) </p>

</div>
</div>
<a id="aec57dcfb24a8b5496b6319fa1172fa5e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec57dcfb24a8b5496b6319fa1172fa5e">&sect;&nbsp;</a></span>_flags</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int _flags</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Any flags for this bond. </p>

</div>
</div>
<a id="accc49a515c7a81154bd46a8ea8a16204"></a>
<h2 class="memtitle"><span class="permalink"><a href="#accc49a515c7a81154bd46a8ea8a16204">&sect;&nbsp;</a></span>_id</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned long _id</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>unique id </p>

</div>
</div>
<a id="a6368d7673f23186649b2969ade3661d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6368d7673f23186649b2969ade3661d7">&sect;&nbsp;</a></span>Visit</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Visit</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Whether this bond has been visited by a graph algorithm. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000017">Deprecated:</a></b></dt><dd>Use <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits. ">OBBitVec</a> objects instead to be fully thread-safe. </dd></dl>

</div>
</div>
<a id="af7811cf8aadbf3b3477c560b0ef2f797"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7811cf8aadbf3b3477c560b0ef2f797">&sect;&nbsp;</a></span>_vdata</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt; _vdata</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Custom data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="bond_8h_source.shtml">bond.h</a></li>
<li><a class="el" href="bond_8cpp.shtml">bond.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
