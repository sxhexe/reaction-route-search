<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>query.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">query.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="query_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">  query.h - OBQuery, OBQueryAtom &amp; OBQueryBond classes.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">  Copyright (C) 2010 by Tim Vandermeersch</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">  This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">  For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">  This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">  it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">  the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">  (at your option) any later version.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">  This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">  GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">  You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">  along with this program; if not, write to the Free Software</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">  02110-1301, USA.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> **********************************************************************/</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef OB_QUERY_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define OB_QUERY_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="tokenst_8h.shtml">openbabel/tokenst.h</a>&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a> {</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keyword">class </span>OBQueryBond;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml">   52</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  {</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a43f34dd89fd2288fbb30f4eb7ca23382">   55</a></span>&#160;      <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a>;</div><div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a2d242d8bcab90501c6c9f49787d9a4b7">   56</a></span>&#160;      <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBQueryBond.shtml">OBQueryBond</a>;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a4ff7885e0bcfde8a0425e1b3cb268315">   63</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a4ff7885e0bcfde8a0425e1b3cb268315">OBQueryAtom</a>(<span class="keywordtype">int</span> atomicNum = 6, <span class="keywordtype">bool</span> isInRing = <span class="keyword">false</span>, <span class="keywordtype">bool</span> isAromatic = <span class="keyword">false</span>) :</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        m_atomicNum(atomicNum), m_isInRing(isInRing), m_isAromatic(isAromatic) {}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a746e110133c6f0d223712f87e296e393">   66</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a746e110133c6f0d223712f87e296e393">~OBQueryAtom</a>() {}</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#aadfb6c1a92a9a3c0187c1099e75b6583">   72</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#aadfb6c1a92a9a3c0187c1099e75b6583">GetIndex</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">return</span> m_index;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      }</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a47d409144ba9c3b93a75d360bfddb0a8">   80</a></span>&#160;      <span class="keyword">const</span> std::vector&lt;OBQueryBond*&gt;&amp; <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a47d409144ba9c3b93a75d360bfddb0a8">GetBonds</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        <span class="keywordflow">return</span> m_bonds;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      }</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#accf6be022545adee5019b368847103ad">   88</a></span>&#160;      <span class="keyword">const</span> std::vector&lt;OBQueryAtom*&gt;&amp; <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#accf6be022545adee5019b368847103ad">GetNbrs</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">return</span> m_nbrs;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      }</div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#ae23c9361ebb2522c63aacb2656c90720">   99</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#ae23c9361ebb2522c63aacb2656c90720">Matches</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)<span class="keyword"> const</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">if</span> (atom-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#a90250b249ffa0fcb4daa83bde1ff4614">GetAtomicNum</a>() != m_atomicNum)</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> (atom-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#aeda62da8823b248654404fb15f314a66">IsAromatic</a>() != m_isAromatic)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">if</span> (m_isInRing)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;          <span class="keywordflow">if</span> (!atom-&gt;<a class="code" href="classOpenBabel_1_1OBAtom.shtml#ae016e13adf41d7c12a3d22147f0b870e">IsInRing</a>())</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">  111</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a>;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a60bd807b27aef4cccd5feb04b6dcfda8">  112</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a60bd807b27aef4cccd5feb04b6dcfda8">m_atomicNum</a>;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#a13ba39cc1c750de23ff95d2821c3eb83">  113</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a13ba39cc1c750de23ff95d2821c3eb83">m_isInRing</a>, m_isAromatic;</div><div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#aedc99f93df4bc475dec73bc04192eedc">  114</a></span>&#160;      std::vector&lt;OBQueryBond*&gt; <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#aedc99f93df4bc475dec73bc04192eedc">m_bonds</a>;</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryAtom.shtml#ad1463519f9e71c25f35806e5b7b99f42">  115</a></span>&#160;      std::vector&lt;OBQueryAtom*&gt; <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#ad1463519f9e71c25f35806e5b7b99f42">m_nbrs</a>;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  };</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml">  134</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml">OBQueryBond</a></div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  {</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#a43f34dd89fd2288fbb30f4eb7ca23382">  137</a></span>&#160;      <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a>;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#a4ab1d8659dc4c0cb13e71c7893fa771e">  141</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a4ab1d8659dc4c0cb13e71c7893fa771e">OBQueryBond</a>(<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a> *begin, <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a> *end, <span class="keywordtype">int</span> order = 1, <span class="keywordtype">bool</span> aromatic = <span class="keyword">false</span>) :</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;          m_begin(begin), m_end(end), m_order(order), m_aromatic(aromatic)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      {</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        m_begin-&gt;m_bonds.push_back(<span class="keyword">this</span>);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        m_end-&gt;m_bonds.push_back(<span class="keyword">this</span>);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        m_begin-&gt;m_nbrs.push_back(m_end);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        m_end-&gt;m_nbrs.push_back(m_begin);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#a5a2d354e5be52d235fb73bdd32922b42">  150</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a5a2d354e5be52d235fb73bdd32922b42">~OBQueryBond</a>() {}</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#aadfb6c1a92a9a3c0187c1099e75b6583">  155</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#aadfb6c1a92a9a3c0187c1099e75b6583">GetIndex</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> m_index;</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;      }</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#abc12fa24ae6d1784f5adc7804ffc33da">  162</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a>* <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#abc12fa24ae6d1784f5adc7804ffc33da">GetBeginAtom</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_begin; }</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#a672298b9b22831245dd31447bae180cc">  166</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a>* <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a672298b9b22831245dd31447bae180cc">GetEndAtom</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_end; }</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#ac907abf6ca9b2852c7ce346846d8388e">  175</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#ac907abf6ca9b2852c7ce346846d8388e">Matches</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)<span class="keyword"> const</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">if</span> (m_aromatic)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;          <span class="keywordflow">return</span> bond-&gt;<a class="code" href="classOpenBabel_1_1OBBond.shtml#aeda62da8823b248654404fb15f314a66">IsAromatic</a>();</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">return</span> bond-&gt;<a class="code" href="classOpenBabel_1_1OBBond.shtml#ad4ae2f349fa9fe34dea5f5e69378fbf7">GetBondOrder</a>() == m_order;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">  182</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a>;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#a7ef35338625112ce0bcafa992abadb4c">  183</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a> *m_begin, *<a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a7ef35338625112ce0bcafa992abadb4c">m_end</a>;</div><div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#a4a0616a6ccd022f2643a4b1bceca9d19">  184</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a4a0616a6ccd022f2643a4b1bceca9d19">m_order</a>;</div><div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQueryBond.shtml#ac997bb8d3752aace187f46102f32c353">  185</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#ac997bb8d3752aace187f46102f32c353">m_aromatic</a>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  };</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml">  195</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#a389be5417270db13420cb84e47e0ee18">  198</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBQuery.shtml#a389be5417270db13420cb84e47e0ee18">~OBQuery</a>()</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;      {</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        std::for_each(m_atoms.begin(),m_atoms.end(), <a class="code" href="structOpenBabel_1_1DeleteObject.shtml">DeleteObject</a>());</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        std::for_each(m_bonds.begin(),m_bonds.end(), <a class="code" href="structOpenBabel_1_1DeleteObject.shtml">DeleteObject</a>());</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      }</div><div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#a2f0695eb7d6ff6321032d88655ae8d25">  206</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQuery.shtml#a2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">return</span> m_atoms.size();</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      }</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">  213</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBQuery.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">NumBonds</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">return</span> m_bonds.size();</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      }</div><div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#a8891603983f0543447f82d9d14db2a19">  220</a></span>&#160;      <span class="keyword">const</span> std::vector&lt;OBQueryAtom*&gt;&amp; <a class="code" href="classOpenBabel_1_1OBQuery.shtml#a8891603983f0543447f82d9d14db2a19">GetAtoms</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">return</span> m_atoms;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      }</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#a47d409144ba9c3b93a75d360bfddb0a8">  227</a></span>&#160;      <span class="keyword">const</span> std::vector&lt;OBQueryBond*&gt;&amp; <a class="code" href="classOpenBabel_1_1OBQuery.shtml#a47d409144ba9c3b93a75d360bfddb0a8">GetBonds</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">return</span> m_bonds;</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      }</div><div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#a12a48456430ba1b7add013f33486c30a">  235</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBQueryBond.shtml">OBQueryBond</a>* <a class="code" href="classOpenBabel_1_1OBQuery.shtml#a12a48456430ba1b7add013f33486c30a">GetBond</a>(<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a> *begin, <a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a> *end)<span class="keyword"> const</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">      </span>{</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; begin-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a47d409144ba9c3b93a75d360bfddb0a8">GetBonds</a>().size(); ++i)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;          <span class="keywordflow">if</span> (begin-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#accf6be022545adee5019b368847103ad">GetNbrs</a>()[i] == end)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">return</span> begin-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a47d409144ba9c3b93a75d360bfddb0a8">GetBonds</a>()[i];</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      }</div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#a3b2e350f82ce51a8ba52af162907529e">  245</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBQuery.shtml#a3b2e350f82ce51a8ba52af162907529e">AddAtom</a>(<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a> *atom)</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        atom-&gt;<a class="code" href="classOpenBabel_1_1OBQueryAtom.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a> = m_atoms.size();</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        m_atoms.push_back(atom);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      }</div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#ac617b0afd430d9674c41faa179ee375c">  253</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBQuery.shtml#ac617b0afd430d9674c41faa179ee375c">AddBond</a>(<a class="code" href="classOpenBabel_1_1OBQueryBond.shtml">OBQueryBond</a> *bond)</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        bond-&gt;<a class="code" href="classOpenBabel_1_1OBQueryBond.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">m_index</a> = m_bonds.size();</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        m_bonds.push_back(bond);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      }</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00259"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#ad60d0800edfffd66821572b5ffcb5448">  259</a></span>&#160;      std::vector&lt;OBQueryAtom*&gt; <a class="code" href="classOpenBabel_1_1OBQuery.shtml#ad60d0800edfffd66821572b5ffcb5448">m_atoms</a>;</div><div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBQuery.shtml#aedc99f93df4bc475dec73bc04192eedc">  260</a></span>&#160;      std::vector&lt;OBQueryBond*&gt; <a class="code" href="classOpenBabel_1_1OBQuery.shtml#aedc99f93df4bc475dec73bc04192eedc">m_bonds</a>;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  };</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  OBAPI <a class="code" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a>* <a class="code" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">CompileMoleculeQuery</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask = <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>());</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  OBAPI <a class="code" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a>* <a class="code" href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">CompileSmilesQuery</a>(<span class="keyword">const</span> std::string &amp;smiles, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask = <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>());</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;}</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_a746e110133c6f0d223712f87e296e393"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#a746e110133c6f0d223712f87e296e393">OpenBabel::OBQueryAtom::~OBQueryAtom</a></div><div class="ttdeci">virtual ~OBQueryAtom()</div><div class="ttdef"><b>Definition:</b> query.h:66</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_a672298b9b22831245dd31447bae180cc"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#a672298b9b22831245dd31447bae180cc">OpenBabel::OBQueryBond::GetEndAtom</a></div><div class="ttdeci">OBQueryAtom * GetEndAtom() const</div><div class="ttdef"><b>Definition:</b> query.h:166</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml">OpenBabel::OBQuery</a></div><div class="ttdoc">A substructure query. </div><div class="ttdef"><b>Definition:</b> query.h:195</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_a12a48456430ba1b7add013f33486c30a"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#a12a48456430ba1b7add013f33486c30a">OpenBabel::OBQuery::GetBond</a></div><div class="ttdeci">OBQueryBond * GetBond(OBQueryAtom *begin, OBQueryAtom *end) const</div><div class="ttdef"><b>Definition:</b> query.h:235</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_a60bd807b27aef4cccd5feb04b6dcfda8"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#a60bd807b27aef4cccd5feb04b6dcfda8">OpenBabel::OBQueryAtom::m_atomicNum</a></div><div class="ttdeci">unsigned int m_atomicNum</div><div class="ttdef"><b>Definition:</b> query.h:112</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml">OpenBabel::OBQueryAtom</a></div><div class="ttdoc">Atom in an OBQuery. </div><div class="ttdef"><b>Definition:</b> query.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_a8891603983f0543447f82d9d14db2a19"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#a8891603983f0543447f82d9d14db2a19">OpenBabel::OBQuery::GetAtoms</a></div><div class="ttdeci">const std::vector&lt; OBQueryAtom * &gt; &amp; GetAtoms() const</div><div class="ttdef"><b>Definition:</b> query.h:220</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml_aeda62da8823b248654404fb15f314a66"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml#aeda62da8823b248654404fb15f314a66">OpenBabel::OBAtom::IsAromatic</a></div><div class="ttdeci">bool IsAromatic() const</div><div class="ttdef"><b>Definition:</b> atom.cpp:820</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml_aeda62da8823b248654404fb15f314a66"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml#aeda62da8823b248654404fb15f314a66">OpenBabel::OBBond::IsAromatic</a></div><div class="ttdeci">bool IsAromatic() const</div><div class="ttdef"><b>Definition:</b> bond.cpp:529</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_a4ff7885e0bcfde8a0425e1b3cb268315"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#a4ff7885e0bcfde8a0425e1b3cb268315">OpenBabel::OBQueryAtom::OBQueryAtom</a></div><div class="ttdeci">OBQueryAtom(int atomicNum=6, bool isInRing=false, bool isAromatic=false)</div><div class="ttdef"><b>Definition:</b> query.h:63</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:69</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_a43dd632e5e23d3651e69d392a7b7ad2f"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">OpenBabel::OBQueryAtom::m_index</a></div><div class="ttdeci">unsigned int m_index</div><div class="ttdef"><b>Definition:</b> query.h:111</div></div>
<div class="ttc" id="structOpenBabel_1_1DeleteObject_shtml"><div class="ttname"><a href="structOpenBabel_1_1DeleteObject.shtml">OpenBabel::DeleteObject</a></div><div class="ttdoc">Functor for deleting containers of pointers. Scott Meyers, Effective STL, Item 7. ...</div><div class="ttdef"><b>Definition:</b> tokenst.h:48</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_aedc99f93df4bc475dec73bc04192eedc"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#aedc99f93df4bc475dec73bc04192eedc">OpenBabel::OBQueryAtom::m_bonds</a></div><div class="ttdeci">std::vector&lt; OBQueryBond * &gt; m_bonds</div><div class="ttdef"><b>Definition:</b> query.h:114</div></div>
<div class="ttc" id="mol_8h_shtml"><div class="ttname"><a href="mol_8h.shtml">mol.h</a></div><div class="ttdoc">Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel) ...</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_a3b2e350f82ce51a8ba52af162907529e"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#a3b2e350f82ce51a8ba52af162907529e">OpenBabel::OBQuery::AddAtom</a></div><div class="ttdeci">void AddAtom(OBQueryAtom *atom)</div><div class="ttdef"><b>Definition:</b> query.h:245</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_a47d409144ba9c3b93a75d360bfddb0a8"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#a47d409144ba9c3b93a75d360bfddb0a8">OpenBabel::OBQueryAtom::GetBonds</a></div><div class="ttdeci">const std::vector&lt; OBQueryBond * &gt; &amp; GetBonds() const</div><div class="ttdef"><b>Definition:</b> query.h:80</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_a5a2d354e5be52d235fb73bdd32922b42"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#a5a2d354e5be52d235fb73bdd32922b42">OpenBabel::OBQueryBond::~OBQueryBond</a></div><div class="ttdeci">virtual ~OBQueryBond()</div><div class="ttdef"><b>Definition:</b> query.h:150</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_a4ab1d8659dc4c0cb13e71c7893fa771e"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#a4ab1d8659dc4c0cb13e71c7893fa771e">OpenBabel::OBQueryBond::OBQueryBond</a></div><div class="ttdeci">OBQueryBond(OBQueryAtom *begin, OBQueryAtom *end, int order=1, bool aromatic=false)</div><div class="ttdef"><b>Definition:</b> query.h:141</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_ad60d0800edfffd66821572b5ffcb5448"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#ad60d0800edfffd66821572b5ffcb5448">OpenBabel::OBQuery::m_atoms</a></div><div class="ttdeci">std::vector&lt; OBQueryAtom * &gt; m_atoms</div><div class="ttdef"><b>Definition:</b> query.h:259</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_a2f0695eb7d6ff6321032d88655ae8d25"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#a2f0695eb7d6ff6321032d88655ae8d25">OpenBabel::OBQuery::NumAtoms</a></div><div class="ttdeci">unsigned int NumAtoms() const</div><div class="ttdef"><b>Definition:</b> query.h:206</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml_ae016e13adf41d7c12a3d22147f0b870e"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml#ae016e13adf41d7c12a3d22147f0b870e">OpenBabel::OBAtom::IsInRing</a></div><div class="ttdeci">bool IsInRing() const</div><div class="ttdef"><b>Definition:</b> atom.cpp:837</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_a47d409144ba9c3b93a75d360bfddb0a8"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#a47d409144ba9c3b93a75d360bfddb0a8">OpenBabel::OBQuery::GetBonds</a></div><div class="ttdeci">const std::vector&lt; OBQueryBond * &gt; &amp; GetBonds() const</div><div class="ttdef"><b>Definition:</b> query.h:227</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_ac907abf6ca9b2852c7ce346846d8388e"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#ac907abf6ca9b2852c7ce346846d8388e">OpenBabel::OBQueryBond::Matches</a></div><div class="ttdeci">virtual bool Matches(const OBBond *bond) const</div><div class="ttdef"><b>Definition:</b> query.h:175</div></div>
<div class="ttc" id="group__substructure_shtml_ga9307ec0c55a4d2b7ee933b53a3a84ce5"><div class="ttname"><a href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">OpenBabel::CompileMoleculeQuery</a></div><div class="ttdeci">OBQuery * CompileMoleculeQuery(OBMol *mol, const OBBitVec &amp;mask=OBBitVec())</div><div class="ttdef"><b>Definition:</b> query.cpp:32</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml_a90250b249ffa0fcb4daa83bde1ff4614"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml#a90250b249ffa0fcb4daa83bde1ff4614">OpenBabel::OBAtom::GetAtomicNum</a></div><div class="ttdeci">unsigned int GetAtomicNum() const</div><div class="ttdef"><b>Definition:</b> atom.h:209</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_ad1463519f9e71c25f35806e5b7b99f42"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#ad1463519f9e71c25f35806e5b7b99f42">OpenBabel::OBQueryAtom::m_nbrs</a></div><div class="ttdeci">std::vector&lt; OBQueryAtom * &gt; m_nbrs</div><div class="ttdef"><b>Definition:</b> query.h:115</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_ac617b0afd430d9674c41faa179ee375c"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#ac617b0afd430d9674c41faa179ee375c">OpenBabel::OBQuery::AddBond</a></div><div class="ttdeci">void AddBond(OBQueryBond *bond)</div><div class="ttdef"><b>Definition:</b> query.h:253</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_a7ef35338625112ce0bcafa992abadb4c"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#a7ef35338625112ce0bcafa992abadb4c">OpenBabel::OBQueryBond::m_end</a></div><div class="ttdeci">OBQueryAtom * m_end</div><div class="ttdef"><b>Definition:</b> query.h:183</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_a13ba39cc1c750de23ff95d2821c3eb83"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#a13ba39cc1c750de23ff95d2821c3eb83">OpenBabel::OBQueryAtom::m_isInRing</a></div><div class="ttdeci">bool m_isInRing</div><div class="ttdef"><b>Definition:</b> query.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_aedc99f93df4bc475dec73bc04192eedc"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#aedc99f93df4bc475dec73bc04192eedc">OpenBabel::OBQuery::m_bonds</a></div><div class="ttdeci">std::vector&lt; OBQueryBond * &gt; m_bonds</div><div class="ttdef"><b>Definition:</b> query.h:260</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_accf6be022545adee5019b368847103ad"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#accf6be022545adee5019b368847103ad">OpenBabel::OBQueryAtom::GetNbrs</a></div><div class="ttdeci">const std::vector&lt; OBQueryAtom * &gt; &amp; GetNbrs() const</div><div class="ttdef"><b>Definition:</b> query.h:88</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml_ad4ae2f349fa9fe34dea5f5e69378fbf7"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml#ad4ae2f349fa9fe34dea5f5e69378fbf7">OpenBabel::OBBond::GetBondOrder</a></div><div class="ttdeci">unsigned int GetBondOrder() const</div><div class="ttdef"><b>Definition:</b> bond.h:200</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_ac997bb8d3752aace187f46102f32c353"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#ac997bb8d3752aace187f46102f32c353">OpenBabel::OBQueryBond::m_aromatic</a></div><div class="ttdeci">bool m_aromatic</div><div class="ttdef"><b>Definition:</b> query.h:185</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_aadfb6c1a92a9a3c0187c1099e75b6583"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#aadfb6c1a92a9a3c0187c1099e75b6583">OpenBabel::OBQueryAtom::GetIndex</a></div><div class="ttdeci">unsigned int GetIndex() const</div><div class="ttdef"><b>Definition:</b> query.h:72</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml">OpenBabel::OBQueryBond</a></div><div class="ttdoc">Bond in an OBQuery. </div><div class="ttdef"><b>Definition:</b> query.h:134</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_a7358c2c15c4c0d88ae2489f586bc8e0b"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">OpenBabel::OBQuery::NumBonds</a></div><div class="ttdeci">unsigned int NumBonds() const</div><div class="ttdef"><b>Definition:</b> query.h:213</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_aadfb6c1a92a9a3c0187c1099e75b6583"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#aadfb6c1a92a9a3c0187c1099e75b6583">OpenBabel::OBQueryBond::GetIndex</a></div><div class="ttdeci">unsigned int GetIndex() const</div><div class="ttdef"><b>Definition:</b> query.h:155</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_a4a0616a6ccd022f2643a4b1bceca9d19"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#a4a0616a6ccd022f2643a4b1bceca9d19">OpenBabel::OBQueryBond::m_order</a></div><div class="ttdeci">unsigned int m_order</div><div class="ttdef"><b>Definition:</b> query.h:184</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryAtom_shtml_ae23c9361ebb2522c63aacb2656c90720"><div class="ttname"><a href="classOpenBabel_1_1OBQueryAtom.shtml#ae23c9361ebb2522c63aacb2656c90720">OpenBabel::OBQueryAtom::Matches</a></div><div class="ttdeci">virtual bool Matches(const OBAtom *atom) const</div><div class="ttdef"><b>Definition:</b> query.h:99</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_a43dd632e5e23d3651e69d392a7b7ad2f"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#a43dd632e5e23d3651e69d392a7b7ad2f">OpenBabel::OBQueryBond::m_index</a></div><div class="ttdeci">unsigned int m_index</div><div class="ttdef"><b>Definition:</b> query.h:182</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQueryBond_shtml_abc12fa24ae6d1784f5adc7804ffc33da"><div class="ttname"><a href="classOpenBabel_1_1OBQueryBond.shtml#abc12fa24ae6d1784f5adc7804ffc33da">OpenBabel::OBQueryBond::GetBeginAtom</a></div><div class="ttdeci">OBQueryAtom * GetBeginAtom() const</div><div class="ttdef"><b>Definition:</b> query.h:162</div></div>
<div class="ttc" id="classOpenBabel_1_1OBQuery_shtml_a389be5417270db13420cb84e47e0ee18"><div class="ttname"><a href="classOpenBabel_1_1OBQuery.shtml#a389be5417270db13420cb84e47e0ee18">OpenBabel::OBQuery::~OBQuery</a></div><div class="ttdeci">~OBQuery()</div><div class="ttdef"><b>Definition:</b> query.h:198</div></div>
<div class="ttc" id="group__substructure_shtml_ga87fabf6ed3625406fe5d117b134b5f16"><div class="ttname"><a href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">OpenBabel::CompileSmilesQuery</a></div><div class="ttdeci">OBQuery * CompileSmilesQuery(const std::string &amp;smiles, const OBBitVec &amp;mask=OBBitVec())</div><div class="ttdef"><b>Definition:</b> query.cpp:64</div></div>
<div class="ttc" id="tokenst_8h_shtml"><div class="ttname"><a href="tokenst_8h.shtml">tokenst.h</a></div><div class="ttdoc">Tokenize strings, open data files. </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml">OpenBabel::OBAtom</a></div><div class="ttdoc">Atom class. </div><div class="ttdef"><b>Definition:</b> atom.h:81</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
