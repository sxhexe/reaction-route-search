<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>obconversion.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">obconversion.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="obconversion_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">obconversion.h - Handle file conversions. Declaration of OBFormat, OBConversion</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2004-2009 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef OB_CONV_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define OB_CONV_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;cassert&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#ifdef HAVE_STRINGS_H</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;strings.h&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml">openbabel/oberror.h</a>&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="format_8h.shtml">openbabel/format.h</a>&gt;</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="lineend_8h.shtml">openbabel/lineend.h</a>&gt;</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">// These macros are used in DLL builds. If they have not</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// been set in babelconfig.h, define them as nothing.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#ifndef OBCONV</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">        #define OBCONV</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#ifndef OBDLL</span></div><div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="obconversion_8h.shtml#af9c7d63a9061b381020bc7c0a3cbefd1">   46</a></span>&#160;<span class="preprocessor">        #define OBDLL</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">//using namespace std;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a> {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="comment">// Needed to preserve deprecated API</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">   53</a></span>&#160;  <span class="keyword">typedef</span> <a class="code" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a> <a class="code" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">   55</a></span>&#160;  OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">obErrorLog</a>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="comment">//*************************************************</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment"></span>  <span class="comment">// Class introduction in obconversion.cpp</span></div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml">   60</a></span>&#160;  <span class="keyword">class </span>OBCONV <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>(std::istream* is=NULL, std::ostream* os=NULL);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>(std::string inFilename, std::string outFilename=<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>&amp; o);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>&amp; rhs);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;      <span class="keyword">virtual</span>     ~<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>();</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">int</span>                                RegisterFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pFormat, <span class="keyword">const</span> <span class="keywordtype">char</span>* MIME = NULL);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FindFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FindFormat(<span class="keyword">const</span> std::string ID);</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> <span class="keywordtype">char</span>* filename, <span class="keywordtype">bool</span>&amp; isgzip);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> std::string filename);</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  FormatFromExt(<span class="keyword">const</span> std::string filename, <span class="keywordtype">bool</span>&amp; isgzip);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*        FormatFromMIME(<span class="keyword">const</span> <span class="keywordtype">char</span>* MIME);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">bool</span>               GetNextFormat(Formatpos&amp; itr, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; str,<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*&amp; pFormat);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* Description(); <span class="comment">//generic conversion options</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a3d20fbc61e06b34c849384597ba8e0cc">  108</a></span>&#160;      std::istream* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a3d20fbc61e06b34c849384597ba8e0cc">GetInStream</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pInput;};</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a1784444b6d9c8a5f3c3d0514e2684ec6">  109</a></span>&#160;      std::ostream* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a1784444b6d9c8a5f3c3d0514e2684ec6">GetOutStream</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pOutput;};</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      <span class="comment">//  if false, then will be treated as gzipped stream only if z/zin is set.</span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      <span class="keywordtype">void</span>          SetInStream(std::istream* pIn, <span class="keywordtype">bool</span> takeOwnership=<span class="keyword">false</span>);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      <span class="keywordtype">void</span>          SetOutStream(std::ostream* pOut, <span class="keywordtype">bool</span> takeOwnership=<span class="keyword">false</span>);</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;      <span class="keywordtype">bool</span>        SetInAndOutFormats(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID, <span class="keyword">const</span> <span class="keywordtype">char</span>* outID, <span class="keywordtype">bool</span> ingzip=<span class="keyword">false</span>, <span class="keywordtype">bool</span> outgzip=<span class="keyword">false</span>);</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <span class="keywordtype">bool</span>        SetInAndOutFormats(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pIn, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pOut, <span class="keywordtype">bool</span> ingzip=<span class="keyword">false</span>, <span class="keywordtype">bool</span> outgzip=<span class="keyword">false</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      <span class="keywordtype">bool</span>            SetInFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* inID, <span class="keywordtype">bool</span> isgzip=<span class="keyword">false</span>);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordtype">bool</span>            SetInFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pIn, <span class="keywordtype">bool</span> isgzip=<span class="keyword">false</span>);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="keywordtype">bool</span>            SetOutFormat(<span class="keyword">const</span> <span class="keywordtype">char</span>* outID, <span class="keywordtype">bool</span> isgzip=<span class="keyword">false</span>);</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="keywordtype">bool</span>            SetOutFormat(<a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pOut, <span class="keywordtype">bool</span> isgzip=<span class="keyword">false</span>);</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a94e958a40abf04e41dde68b5e466bd31">  127</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*   <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a94e958a40abf04e41dde68b5e466bd31">GetInFormat</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pInFormat;};</div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#af3d45af23c80e2d89974ed5472ab187b">  128</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*   <a class="code" href="classOpenBabel_1_1OBConversion.shtml#af3d45af23c80e2d89974ed5472ab187b">GetOutFormat</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> pOutFormat;};</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#ab013bf3af4c922316e9ff83dd2972c2f">  129</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab013bf3af4c922316e9ff83dd2972c2f">GetInGzipped</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> inFormatGzip;};</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a710427c712878d0647cc0cc5c7b6cf11">  130</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a710427c712878d0647cc0cc5c7b6cf11">GetOutGzipped</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> outFormatGzip;};</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#acc8e32bcf9191debcf526f1b32e7b9dc">  131</a></span>&#160;      std::string <a class="code" href="classOpenBabel_1_1OBConversion.shtml#acc8e32bcf9191debcf526f1b32e7b9dc">GetInFilename</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> InFilename;};</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a8a52d3cc312a162316fa83992c7d367f">  132</a></span>&#160;      std::string <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a8a52d3cc312a162316fa83992c7d367f">GetOutFilename</a>()<span class="keyword"> const</span>{<span class="keywordflow">return</span> OutFilename;};</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#af867d03338ae3ab3f85fc614cb1a0591">  135</a></span>&#160;      std::streampos <a class="code" href="classOpenBabel_1_1OBConversion.shtml#af867d03338ae3ab3f85fc614cb1a0591">GetInPos</a>()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInpos;};</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#af646f7b39aeeefb64394aba10a85cfdf">  138</a></span>&#160;      <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#af646f7b39aeeefb64394aba10a85cfdf">GetInLen</a>()<span class="keyword">const</span>{<span class="keywordflow">return</span> wInlen;};</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span>* GetTitle() <span class="keyword">const</span>;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a8c0cb28a16189434c940a205ff8f3e99">  144</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a8c0cb28a16189434c940a205ff8f3e99">GetAuxConv</a>()<span class="keyword"> const </span>{<span class="keywordflow">return</span> pAuxConv;};</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a53a1041e7803e63b9bca06ad18bea4fe">  145</a></span>&#160;      <span class="keywordtype">void</span>          <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a53a1041e7803e63b9bca06ad18bea4fe">SetAuxConv</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv) {pAuxConv=pConv;};</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> { INOPTIONS, OUTOPTIONS, GENOPTIONS, ALL };</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span>* IsOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt,<a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp=OUTOPTIONS);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a7da66ef30fd0af867e9d3bd0df15f4a2">  191</a></span>&#160;      <span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7da66ef30fd0af867e9d3bd0df15f4a2">GetOptions</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp)</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        { <span class="keywordflow">return</span> &amp;OptionsArray[opttyp];};</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="keywordtype">void</span> AddOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp=OUTOPTIONS, <span class="keyword">const</span> <span class="keywordtype">char</span>* txt=NULL);</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      <span class="keywordtype">bool</span> RemoveOption(<span class="keyword">const</span> <span class="keywordtype">char</span>* opt, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> optype);</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <span class="keywordtype">void</span> SetOptions(<span class="keyword">const</span> <span class="keywordtype">char</span>* options, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> opttyp);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterOptionParam(std::string name, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pFormat,</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                      <span class="keywordtype">int</span> numberParams=0, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ=OUTOPTIONS);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">int</span> GetOptionParams(std::string name, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ);</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <span class="keywordtype">void</span> CopyOptions(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pSourceConv, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ=ALL);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <span class="comment">// @brief Set and return the list of supported input format</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;      std::vector&lt;std::string&gt; GetSupportedInputFormat();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      <span class="comment">// @brief Set and return the list of supported output format</span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      std::vector&lt;std::string&gt; GetSupportedOutputFormat();</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      <span class="keywordtype">int</span>         Convert(std::istream* is, std::ostream* os);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      <span class="keywordtype">int</span>         Convert();</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="keywordtype">int</span>                                       FullConvert(std::vector&lt;std::string&gt;&amp; FileList,</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                              std::string&amp; OutputFileName, std::vector&lt;std::string&gt;&amp; OutputFileList);</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <span class="keywordtype">int</span>     AddChemObject(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*  GetChemObject(); </div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="keywordtype">bool</span>     IsLast();</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="keywordtype">bool</span>     IsFirstInput();</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="keywordtype">void</span>     SetFirstInput(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      <span class="keywordtype">int</span>      GetOutputIndex() <span class="keyword">const</span> ;</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="keywordtype">void</span>     SetOutputIndex(<span class="keywordtype">int</span> indx);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      <span class="keywordtype">void</span>     SetMoreFilesToCome();</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="keywordtype">void</span>     SetOneObjectOnly(<span class="keywordtype">bool</span> b=<span class="keyword">true</span>);</div><div class="line"><a name="l00246"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a19dedcd05ee3ab11ed85c29ff1fef810">  246</a></span>&#160;      <span class="keywordtype">void</span>     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a19dedcd05ee3ab11ed85c29ff1fef810">SetLast</a>(<span class="keywordtype">bool</span> b){SetOneObjectOnly(b);}</div><div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#ac157f0eb86dba757b3ebae08ffffb8d2">  247</a></span>&#160;      <span class="keywordtype">bool</span>     <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ac157f0eb86dba757b3ebae08ffffb8d2">IsLastFile</a>(){ <span class="keywordflow">return</span> !MoreFilesToCome;}</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="keywordtype">int</span>      GetCount()<span class="keyword">const </span>{ <span class="keywordflow">return</span> Count; }</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* GetDefaultFormat(){<span class="keywordflow">return</span> OBFormat::FindType(NULL);};</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <span class="keywordtype">bool</span>                              Write(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::ostream* pout=NULL);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      std::string                     WriteString(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <span class="keywordtype">bool</span> trimWhitespace = <span class="keyword">false</span>);</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="keywordtype">bool</span>                            WriteFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string filePath);</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      <span class="keywordtype">void</span> CloseOutFile();</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;      <span class="keywordtype">bool</span>      Read(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::istream* pin=NULL);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">//      OBBase* ReadObject(std::istream* pin=NULL);</span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;      <span class="keywordtype">bool</span>      ReadString(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string <a class="code" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a>);</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      <span class="keywordtype">bool</span>      ReadFile(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string filePath);</div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      <span class="keywordtype">bool</span> OpenInAndOutFiles(std::string infilepath, std::string outfilepath);</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;      <span class="keywordtype">void</span> ReportNumberConverted(<span class="keywordtype">int</span> count, <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>* pFormat=NULL);</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      <span class="keywordtype">int</span> NumInputObjects();</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      <span class="keyword">static</span> std::string BatchFileName(std::string&amp; BaseName, std::string&amp; InFile);</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;      <span class="keyword">static</span> std::string IncrementedFileName(std::string&amp; BaseName, <span class="keyword">const</span> <span class="keywordtype">int</span> Count);</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">bool</span> CheckForUnintendedBatch(<span class="keyword">const</span> std::string&amp; infile, <span class="keyword">const</span> std::string&amp; outfile);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;      <span class="keywordtype">void</span> ClearInStreams();</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="comment">//helper class for saving stream state</span></div><div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml">  351</a></span>&#160;      <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml">StreamState</a></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;      {</div><div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a7afa3e9f5e73e019c36419280baee9c4">  353</a></span>&#160;          std::ios *<a class="code" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a7afa3e9f5e73e019c36419280baee9c4">pStream</a>; <span class="comment">//active stream</span></div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#ae3fc9a53aaf66806f4ec28a44a1d4db1">  354</a></span>&#160;          std::vector&lt;std::ios *&gt; <a class="code" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#ae3fc9a53aaf66806f4ec28a44a1d4db1">ownedStreams</a>; <span class="comment">//streams we own the memory to</span></div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a5109b3fd549f0bc181708fb9e4250fc3">  356</a></span>&#160;          <a class="code" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a5109b3fd549f0bc181708fb9e4250fc3">StreamState</a>(): pStream(NULL) {}</div><div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#aaeeeeb7f510201086be58af80bb0019b">  357</a></span>&#160;          <a class="code" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#aaeeeeb7f510201086be58af80bb0019b">~StreamState</a>()</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;          {</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            assert(ownedStreams.size() == 0); <span class="comment">//should be popped</span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;          }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;          <span class="keywordtype">void</span> pushInput(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>&amp; conv);</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;          <span class="keywordtype">void</span> popInput(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>&amp; conv);</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;          <span class="keywordtype">void</span> pushOutput(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>&amp; conv);</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;          <span class="keywordtype">void</span> popOutput(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>&amp; conv);</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a479da8bc6c27c908ec0c5c460fb26a4a">  368</a></span>&#160;          <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a479da8bc6c27c908ec0c5c460fb26a4a">isSet</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> pStream != NULL; }</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      };</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;      <span class="keywordtype">bool</span>             SetStartAndEnd();</div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">//      static FMapType&amp; FormatsMap();///&lt;contains ID and pointer to all OBFormat classes</span></div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">//      static FMapType&amp; FormatsMIMEMap();///&lt;contains MIME and pointer to all OBFormat classes</span></div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">  374</a></span>&#160;      <span class="keyword">typedef</span> std::map&lt;std::string,int&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OPAMapType</a>;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;      <span class="keyword">static</span> OPAMapType&amp; OptionParamArray(<a class="code" href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">Option_type</a> typ);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      <span class="keywordtype">bool</span>             OpenAndSetFormat(<span class="keywordtype">bool</span> SetFormat, std::ifstream* is, std::stringstream* ss=NULL);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a259daaddfd4bbb18e69aefcf8ba53ead">  378</a></span>&#160;      std::string         InFilename, <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a259daaddfd4bbb18e69aefcf8ba53ead">OutFilename</a>; <span class="comment">//OutFileName added v2.4.0</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#aca23687a76af47eada4f4a1659b17320">  380</a></span>&#160;      <span class="keyword">typedef</span>   <a class="code" href="classOpenBabel_1_1FilteringInputStream.shtml">FilteringInputStream&lt; LineEndingExtractor &gt;</a> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aca23687a76af47eada4f4a1659b17320">LEInStream</a>;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div><div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a2937184c11df54ac9323d7c96b98ec36">  382</a></span>&#160;      std::istream *<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2937184c11df54ac9323d7c96b98ec36">pInput</a>; <span class="comment">//input stream, may be filtered</span></div><div class="line"><a name="l00383"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#af6940dea08e0e2a979ff95b7567128e3">  383</a></span>&#160;      std::vector&lt;std::istream *&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#af6940dea08e0e2a979ff95b7567128e3">ownedInStreams</a>; <span class="comment">//streams we own the memory to</span></div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div><div class="line"><a name="l00385"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a2b1c527969fb4e7669a452b83fab46c9">  385</a></span>&#160;      std::ostream *<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2b1c527969fb4e7669a452b83fab46c9">pOutput</a>; <span class="comment">//output stream, may have filters applied</span></div><div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#adc68975108031811bcf41b6a2e854daf">  386</a></span>&#160;      std::vector&lt;std::ostream *&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#adc68975108031811bcf41b6a2e854daf">ownedOutStreams</a>; <span class="comment">//streams we own the memory to</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;</div><div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a2daf6d1435032c73c65000af61a4a5d4">  389</a></span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*  <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2daf6d1435032c73c65000af61a4a5d4">pDefaultFormat</a>;</div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a70c004d49155986bcc163bac07df0e4e">  390</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*           <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a70c004d49155986bcc163bac07df0e4e">pInFormat</a>;</div><div class="line"><a name="l00391"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a4d630735f21540de237cdcc32916bffb">  391</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a>*   <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a4d630735f21540de237cdcc32916bffb">pOutFormat</a>;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div><div class="line"><a name="l00393"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a3d9e064f9e26ed2e52b140b7cc34a8d6">  393</a></span>&#160;      std::map&lt;std::string,std::string&gt; OptionsArray[3];</div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;</div><div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a075e1e3c9dd399cef584d7338cc37938">  395</a></span>&#160;      <span class="keywordtype">int</span>                 <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a075e1e3c9dd399cef584d7338cc37938">Index</a>;</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#ac52d6fdbe254370662cccd43af0248f2">  396</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ac52d6fdbe254370662cccd43af0248f2">StartNumber</a>;</div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#adb31d46cbf6e64e86bae6d24d90c9702">  397</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>        <a class="code" href="classOpenBabel_1_1OBConversion.shtml#adb31d46cbf6e64e86bae6d24d90c9702">EndNumber</a>;</div><div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#aad462966ed963f892117056de1eba502">  398</a></span>&#160;      <span class="keywordtype">int</span>                 <a class="code" href="classOpenBabel_1_1OBConversion.shtml#aad462966ed963f892117056de1eba502">Count</a>;</div><div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#ae14ad56a72461f3c598cb4dbd151cdc7">  399</a></span>&#160;      <span class="keywordtype">bool</span>                      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ae14ad56a72461f3c598cb4dbd151cdc7">m_IsFirstInput</a>;</div><div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a6025251d18641dab4058222b69d1a98c">  400</a></span>&#160;      <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a6025251d18641dab4058222b69d1a98c">m_IsLast</a>;</div><div class="line"><a name="l00401"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#ab4ec386870233b42d353a4d66d7b0cee">  401</a></span>&#160;      <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab4ec386870233b42d353a4d66d7b0cee">MoreFilesToCome</a>;</div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a7002deaca76f3fc235c76be1fcc38dfa">  402</a></span>&#160;      <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a7002deaca76f3fc235c76be1fcc38dfa">OneObjectOnly</a>;</div><div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a9bdd5c815677e240cec9c2e4a71d73f2">  403</a></span>&#160;      <span class="keywordtype">bool</span>                <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a9bdd5c815677e240cec9c2e4a71d73f2">ReadyToInput</a>;</div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a12c288e6436a8acaa0ae85e372f99093">  404</a></span>&#160;      <span class="keywordtype">bool</span>      <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a12c288e6436a8acaa0ae85e372f99093">SkippedMolecules</a>;    </div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;      <span class="comment">//unlike the z and zin options, these are not sticky - setting formats will reset them</span></div><div class="line"><a name="l00407"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a87a16257726b97ac5f7a14b771b675ec">  407</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a87a16257726b97ac5f7a14b771b675ec">inFormatGzip</a>;</div><div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a86d77307999432c68ba9bff261484493">  408</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a86d77307999432c68ba9bff261484493">outFormatGzip</a>;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div><div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a20a1d62cb932144d66e52d7c823fb0a1">  410</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*             <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a20a1d62cb932144d66e52d7c823fb0a1">pOb1</a>;</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#ab77068f3bb4cb88694a6be653c00f04e">  411</a></span>&#160;      std::streampos <a class="code" href="classOpenBabel_1_1OBConversion.shtml#ab77068f3bb4cb88694a6be653c00f04e">wInpos</a>; </div><div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a545a1341008a23c2dd0721c164a9ad89">  412</a></span>&#160;      std::streampos <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a545a1341008a23c2dd0721c164a9ad89">rInpos</a>; </div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#afee7e5bffccd262faaff0417e5ae9af3">  413</a></span>&#160;      <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#afee7e5bffccd262faaff0417e5ae9af3">wInlen</a>; </div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a1a897c3f35235e4ca7da37ca245db065">  414</a></span>&#160;      <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a1a897c3f35235e4ca7da37ca245db065">rInlen</a>; </div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a3846aa2ce719d5820b66e302c6aeaa8a">  416</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a3846aa2ce719d5820b66e302c6aeaa8a">pAuxConv</a>;</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a2322eb2aa14e8d954573abbda9c50e62">  418</a></span>&#160;      std::vector&lt;std::string&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a2322eb2aa14e8d954573abbda9c50e62">SupportedInputFormat</a>; </div><div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBConversion.shtml#a50233a5c7c63d03056923f13c7acbb1b">  419</a></span>&#160;      std::vector&lt;std::string&gt; <a class="code" href="classOpenBabel_1_1OBConversion.shtml#a50233a5c7c63d03056923f13c7acbb1b">SupportedOutputFormat</a>; </div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    };</div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;} <span class="comment">//namespace OpenBabel</span></div><div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="preprocessor">#endif //OB_CONV_H</span></div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div><div class="ttc" id="namespaceOpenBabel_shtml_aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528"><div class="ttname"><a href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">OpenBabel::input</a></div><div class="ttdef"><b>Definition:</b> generic.h:770</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a9bdd5c815677e240cec9c2e4a71d73f2"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a9bdd5c815677e240cec9c2e4a71d73f2">OpenBabel::OBConversion::ReadyToInput</a></div><div class="ttdeci">bool ReadyToInput</div><div class="ttdef"><b>Definition:</b> obconversion.h:403</div></div>
<div class="ttc" id="lineend_8h_shtml"><div class="ttname"><a href="lineend_8h.shtml">lineend.h</a></div><div class="ttdoc">Translate line endings automatically (UNIX, Classic Mac, DOS) </div></div>
<div class="ttc" id="structOpenBabel_1_1OBConversion_1_1StreamState_shtml_a5109b3fd549f0bc181708fb9e4250fc3"><div class="ttname"><a href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a5109b3fd549f0bc181708fb9e4250fc3">OpenBabel::OBConversion::StreamState::StreamState</a></div><div class="ttdeci">StreamState()</div><div class="ttdef"><b>Definition:</b> obconversion.h:356</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a7da66ef30fd0af867e9d3bd0df15f4a2"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a7da66ef30fd0af867e9d3bd0df15f4a2">OpenBabel::OBConversion::GetOptions</a></div><div class="ttdeci">const std::map&lt; std::string, std::string &gt; * GetOptions(Option_type opttyp)</div><div class="ttdoc">Access the map with option name as key and any associated text as value. </div><div class="ttdef"><b>Definition:</b> obconversion.h:191</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a2b1c527969fb4e7669a452b83fab46c9"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a2b1c527969fb4e7669a452b83fab46c9">OpenBabel::OBConversion::pOutput</a></div><div class="ttdeci">std::ostream * pOutput</div><div class="ttdef"><b>Definition:</b> obconversion.h:385</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a53a1041e7803e63b9bca06ad18bea4fe"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a53a1041e7803e63b9bca06ad18bea4fe">OpenBabel::OBConversion::SetAuxConv</a></div><div class="ttdeci">void SetAuxConv(OBConversion *pConv)</div><div class="ttdef"><b>Definition:</b> obconversion.h:145</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_adb31d46cbf6e64e86bae6d24d90c9702"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#adb31d46cbf6e64e86bae6d24d90c9702">OpenBabel::OBConversion::EndNumber</a></div><div class="ttdeci">unsigned int EndNumber</div><div class="ttdef"><b>Definition:</b> obconversion.h:397</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_ac52d6fdbe254370662cccd43af0248f2"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#ac52d6fdbe254370662cccd43af0248f2">OpenBabel::OBConversion::StartNumber</a></div><div class="ttdeci">unsigned int StartNumber</div><div class="ttdef"><b>Definition:</b> obconversion.h:396</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a8a52d3cc312a162316fa83992c7d367f"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a8a52d3cc312a162316fa83992c7d367f">OpenBabel::OBConversion::GetOutFilename</a></div><div class="ttdeci">std::string GetOutFilename() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:132</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a394eef44b3dd6a9174067715712c2d16"><div class="ttname"><a href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">OpenBabel::obErrorLog</a></div><div class="ttdeci">OBMessageHandler obErrorLog</div><div class="ttdoc">Global OBMessageHandler error handler. </div><div class="ttdef"><b>Definition:</b> obconversion.h:55</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a87a16257726b97ac5f7a14b771b675ec"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a87a16257726b97ac5f7a14b771b675ec">OpenBabel::OBConversion::inFormatGzip</a></div><div class="ttdeci">bool inFormatGzip</div><div class="ttdoc">skip molecules using -f and -l </div><div class="ttdef"><b>Definition:</b> obconversion.h:407</div></div>
<div class="ttc" id="structOpenBabel_1_1OBConversion_1_1StreamState_shtml_ae3fc9a53aaf66806f4ec28a44a1d4db1"><div class="ttname"><a href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#ae3fc9a53aaf66806f4ec28a44a1d4db1">OpenBabel::OBConversion::StreamState::ownedStreams</a></div><div class="ttdeci">std::vector&lt; std::ios * &gt; ownedStreams</div><div class="ttdef"><b>Definition:</b> obconversion.h:354</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_ab77068f3bb4cb88694a6be653c00f04e"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#ab77068f3bb4cb88694a6be653c00f04e">OpenBabel::OBConversion::wInpos</a></div><div class="ttdeci">std::streampos wInpos</div><div class="ttdoc">position in the input stream of the object being written </div><div class="ttdef"><b>Definition:</b> obconversion.h:411</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_af3d45af23c80e2d89974ed5472ab187b"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#af3d45af23c80e2d89974ed5472ab187b">OpenBabel::OBConversion::GetOutFormat</a></div><div class="ttdeci">OBFormat * GetOutFormat() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:128</div></div>
<div class="ttc" id="structOpenBabel_1_1OBConversion_1_1StreamState_shtml_a479da8bc6c27c908ec0c5c460fb26a4a"><div class="ttname"><a href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a479da8bc6c27c908ec0c5c460fb26a4a">OpenBabel::OBConversion::StreamState::isSet</a></div><div class="ttdeci">bool isSet() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:368</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml">OpenBabel::OBConversion</a></div><div class="ttdoc">Class to convert from one format to another. </div><div class="ttdef"><b>Definition:</b> obconversion.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMessageHandler_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMessageHandler.shtml">OpenBabel::OBMessageHandler</a></div><div class="ttdoc">Handle error messages, warnings, debugging information and the like. </div><div class="ttdef"><b>Definition:</b> oberror.h:106</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_ab4ec386870233b42d353a4d66d7b0cee"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#ab4ec386870233b42d353a4d66d7b0cee">OpenBabel::OBConversion::MoreFilesToCome</a></div><div class="ttdeci">bool MoreFilesToCome</div><div class="ttdef"><b>Definition:</b> obconversion.h:401</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_ae14ad56a72461f3c598cb4dbd151cdc7"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#ae14ad56a72461f3c598cb4dbd151cdc7">OpenBabel::OBConversion::m_IsFirstInput</a></div><div class="ttdeci">bool m_IsFirstInput</div><div class="ttdef"><b>Definition:</b> obconversion.h:399</div></div>
<div class="ttc" id="structOpenBabel_1_1OBConversion_1_1StreamState_shtml"><div class="ttname"><a href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml">OpenBabel::OBConversion::StreamState</a></div><div class="ttdef"><b>Definition:</b> obconversion.h:351</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a545a1341008a23c2dd0721c164a9ad89"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a545a1341008a23c2dd0721c164a9ad89">OpenBabel::OBConversion::rInpos</a></div><div class="ttdeci">std::streampos rInpos</div><div class="ttdoc">position in the input stream of the object being read </div><div class="ttdef"><b>Definition:</b> obconversion.h:412</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_adc68975108031811bcf41b6a2e854daf"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#adc68975108031811bcf41b6a2e854daf">OpenBabel::OBConversion::ownedOutStreams</a></div><div class="ttdeci">std::vector&lt; std::ostream * &gt; ownedOutStreams</div><div class="ttdef"><b>Definition:</b> obconversion.h:386</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a2daf6d1435032c73c65000af61a4a5d4"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a2daf6d1435032c73c65000af61a4a5d4">OpenBabel::OBConversion::pDefaultFormat</a></div><div class="ttdeci">static OBFormat * pDefaultFormat</div><div class="ttdef"><b>Definition:</b> obconversion.h:389</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a3846aa2ce719d5820b66e302c6aeaa8a"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a3846aa2ce719d5820b66e302c6aeaa8a">OpenBabel::OBConversion::pAuxConv</a></div><div class="ttdeci">OBConversion * pAuxConv</div><div class="ttdoc">Way to extend OBConversion. </div><div class="ttdef"><b>Definition:</b> obconversion.h:416</div></div>
<div class="ttc" id="structOpenBabel_1_1OBConversion_1_1StreamState_shtml_a7afa3e9f5e73e019c36419280baee9c4"><div class="ttname"><a href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#a7afa3e9f5e73e019c36419280baee9c4">OpenBabel::OBConversion::StreamState::pStream</a></div><div class="ttdeci">std::ios * pStream</div><div class="ttdef"><b>Definition:</b> obconversion.h:353</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a50233a5c7c63d03056923f13c7acbb1b"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a50233a5c7c63d03056923f13c7acbb1b">OpenBabel::OBConversion::SupportedOutputFormat</a></div><div class="ttdeci">std::vector&lt; std::string &gt; SupportedOutputFormat</div><div class="ttdoc">list of supported output format </div><div class="ttdef"><b>Definition:</b> obconversion.h:419</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_aad462966ed963f892117056de1eba502"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#aad462966ed963f892117056de1eba502">OpenBabel::OBConversion::Count</a></div><div class="ttdeci">int Count</div><div class="ttdef"><b>Definition:</b> obconversion.h:398</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a12c288e6436a8acaa0ae85e372f99093"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a12c288e6436a8acaa0ae85e372f99093">OpenBabel::OBConversion::SkippedMolecules</a></div><div class="ttdeci">bool SkippedMolecules</div><div class="ttdef"><b>Definition:</b> obconversion.h:404</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_ac157f0eb86dba757b3ebae08ffffb8d2"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#ac157f0eb86dba757b3ebae08ffffb8d2">OpenBabel::OBConversion::IsLastFile</a></div><div class="ttdeci">bool IsLastFile()</div><div class="ttdoc">True if no more files to be read. </div><div class="ttdef"><b>Definition:</b> obconversion.h:247</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a19dedcd05ee3ab11ed85c29ff1fef810"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a19dedcd05ee3ab11ed85c29ff1fef810">OpenBabel::OBConversion::SetLast</a></div><div class="ttdeci">void SetLast(bool b)</div><div class="ttdoc">Synonym for SetOneObjectOnly() </div><div class="ttdef"><b>Definition:</b> obconversion.h:246</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a20a1d62cb932144d66e52d7c823fb0a1"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a20a1d62cb932144d66e52d7c823fb0a1">OpenBabel::OBConversion::pOb1</a></div><div class="ttdeci">OBBase * pOb1</div><div class="ttdef"><b>Definition:</b> obconversion.h:410</div></div>
<div class="ttc" id="group__plugins_shtml_ga8fac85f5497f873a2dd8734b47f0bdc0"><div class="ttname"><a href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OpenBabel::OBPlugin::PluginIterator</a></div><div class="ttdeci">PluginMapType::const_iterator PluginIterator</div><div class="ttdef"><b>Definition:</b> plugin.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a70c004d49155986bcc163bac07df0e4e"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a70c004d49155986bcc163bac07df0e4e">OpenBabel::OBConversion::pInFormat</a></div><div class="ttdeci">OBFormat * pInFormat</div><div class="ttdef"><b>Definition:</b> obconversion.h:390</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a9df37d33062bde3400dd034ee7feaa92"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a9df37d33062bde3400dd034ee7feaa92">OpenBabel::OBConversion::OPAMapType</a></div><div class="ttdeci">std::map&lt; std::string, int &gt; OPAMapType</div><div class="ttdef"><b>Definition:</b> obconversion.h:374</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_acc8e32bcf9191debcf526f1b32e7b9dc"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#acc8e32bcf9191debcf526f1b32e7b9dc">OpenBabel::OBConversion::GetInFilename</a></div><div class="ttdeci">std::string GetInFilename() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:131</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a4d630735f21540de237cdcc32916bffb"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a4d630735f21540de237cdcc32916bffb">OpenBabel::OBConversion::pOutFormat</a></div><div class="ttdeci">OBFormat * pOutFormat</div><div class="ttdef"><b>Definition:</b> obconversion.h:391</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a94e958a40abf04e41dde68b5e466bd31"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a94e958a40abf04e41dde68b5e466bd31">OpenBabel::OBConversion::GetInFormat</a></div><div class="ttdeci">OBFormat * GetInFormat() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:127</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a1a897c3f35235e4ca7da37ca245db065"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a1a897c3f35235e4ca7da37ca245db065">OpenBabel::OBConversion::rInlen</a></div><div class="ttdeci">size_t rInlen</div><div class="ttdoc">length in the input stream of the object being read </div><div class="ttdef"><b>Definition:</b> obconversion.h:414</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_af646f7b39aeeefb64394aba10a85cfdf"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#af646f7b39aeeefb64394aba10a85cfdf">OpenBabel::OBConversion::GetInLen</a></div><div class="ttdeci">size_t GetInLen() const</div><div class="ttdoc">Get the length in the input stream of the object being read. </div><div class="ttdef"><b>Definition:</b> obconversion.h:138</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a2937184c11df54ac9323d7c96b98ec36"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a2937184c11df54ac9323d7c96b98ec36">OpenBabel::OBConversion::pInput</a></div><div class="ttdeci">std::istream * pInput</div><div class="ttdef"><b>Definition:</b> obconversion.h:382</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_aa5c5a0aac29d9e705d9b7b7b8aeb8116"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#aa5c5a0aac29d9e705d9b7b7b8aeb8116">OpenBabel::OBConversion::Option_type</a></div><div class="ttdeci">Option_type</div><div class="ttdoc">Three types of options set on the the command line by -a? , -x? , or -? </div><div class="ttdef"><b>Definition:</b> obconversion.h:185</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a86d77307999432c68ba9bff261484493"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a86d77307999432c68ba9bff261484493">OpenBabel::OBConversion::outFormatGzip</a></div><div class="ttdeci">bool outFormatGzip</div><div class="ttdef"><b>Definition:</b> obconversion.h:408</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a8f32238b69be1e83980d0ff3a90b206f"><div class="ttname"><a href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">OpenBabel::Formatpos</a></div><div class="ttdeci">OBPlugin::PluginIterator Formatpos</div><div class="ttdef"><b>Definition:</b> obconversion.h:53</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a259daaddfd4bbb18e69aefcf8ba53ead"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a259daaddfd4bbb18e69aefcf8ba53ead">OpenBabel::OBConversion::OutFilename</a></div><div class="ttdeci">std::string OutFilename</div><div class="ttdef"><b>Definition:</b> obconversion.h:378</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a710427c712878d0647cc0cc5c7b6cf11"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a710427c712878d0647cc0cc5c7b6cf11">OpenBabel::OBConversion::GetOutGzipped</a></div><div class="ttdeci">bool GetOutGzipped() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:130</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a8c0cb28a16189434c940a205ff8f3e99"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a8c0cb28a16189434c940a205ff8f3e99">OpenBabel::OBConversion::GetAuxConv</a></div><div class="ttdeci">OBConversion * GetAuxConv() const</div><div class="ttdoc">Extension method: deleted in ~OBConversion() </div><div class="ttdef"><b>Definition:</b> obconversion.h:144</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a7002deaca76f3fc235c76be1fcc38dfa"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a7002deaca76f3fc235c76be1fcc38dfa">OpenBabel::OBConversion::OneObjectOnly</a></div><div class="ttdeci">bool OneObjectOnly</div><div class="ttdef"><b>Definition:</b> obconversion.h:402</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_af867d03338ae3ab3f85fc614cb1a0591"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#af867d03338ae3ab3f85fc614cb1a0591">OpenBabel::OBConversion::GetInPos</a></div><div class="ttdeci">std::streampos GetInPos() const</div><div class="ttdoc">Get the position in the input stream of the object being read. </div><div class="ttdef"><b>Definition:</b> obconversion.h:135</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_aca23687a76af47eada4f4a1659b17320"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#aca23687a76af47eada4f4a1659b17320">OpenBabel::OBConversion::LEInStream</a></div><div class="ttdeci">FilteringInputStream&lt; LineEndingExtractor &gt; LEInStream</div><div class="ttdef"><b>Definition:</b> obconversion.h:380</div></div>
<div class="ttc" id="oberror_8h_shtml"><div class="ttname"><a href="oberror_8h.shtml">oberror.h</a></div><div class="ttdoc">Handle error messages, warnings, notices, etc. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_afee7e5bffccd262faaff0417e5ae9af3"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#afee7e5bffccd262faaff0417e5ae9af3">OpenBabel::OBConversion::wInlen</a></div><div class="ttdeci">size_t wInlen</div><div class="ttdoc">length in the input stream of the object being written </div><div class="ttdef"><b>Definition:</b> obconversion.h:413</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a075e1e3c9dd399cef584d7338cc37938"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a075e1e3c9dd399cef584d7338cc37938">OpenBabel::OBConversion::Index</a></div><div class="ttdeci">int Index</div><div class="ttdef"><b>Definition:</b> obconversion.h:395</div></div>
<div class="ttc" id="structOpenBabel_1_1OBConversion_1_1StreamState_shtml_aaeeeeb7f510201086be58af80bb0019b"><div class="ttname"><a href="structOpenBabel_1_1OBConversion_1_1StreamState.shtml#aaeeeeb7f510201086be58af80bb0019b">OpenBabel::OBConversion::StreamState::~StreamState</a></div><div class="ttdeci">~StreamState()</div><div class="ttdef"><b>Definition:</b> obconversion.h:357</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a1784444b6d9c8a5f3c3d0514e2684ec6"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a1784444b6d9c8a5f3c3d0514e2684ec6">OpenBabel::OBConversion::GetOutStream</a></div><div class="ttdeci">std::ostream * GetOutStream() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:109</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml">OpenBabel::OBFormat</a></div><div class="ttdoc">Base class for file formats. </div><div class="ttdef"><b>Definition:</b> format.h:44</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a6025251d18641dab4058222b69d1a98c"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a6025251d18641dab4058222b69d1a98c">OpenBabel::OBConversion::m_IsLast</a></div><div class="ttdeci">bool m_IsLast</div><div class="ttdef"><b>Definition:</b> obconversion.h:400</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_af6940dea08e0e2a979ff95b7567128e3"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#af6940dea08e0e2a979ff95b7567128e3">OpenBabel::OBConversion::ownedInStreams</a></div><div class="ttdeci">std::vector&lt; std::istream * &gt; ownedInStreams</div><div class="ttdef"><b>Definition:</b> obconversion.h:383</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_ab013bf3af4c922316e9ff83dd2972c2f"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#ab013bf3af4c922316e9ff83dd2972c2f">OpenBabel::OBConversion::GetInGzipped</a></div><div class="ttdeci">bool GetInGzipped() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:129</div></div>
<div class="ttc" id="format_8h_shtml"><div class="ttname"><a href="format_8h.shtml">format.h</a></div><div class="ttdoc">Declarations for OBFormat. </div></div>
<div class="ttc" id="classOpenBabel_1_1FilteringInputStream_shtml"><div class="ttname"><a href="classOpenBabel_1_1FilteringInputStream.shtml">OpenBabel::FilteringInputStream</a></div><div class="ttdoc">A stream interface for FilteringInputStreambuf. </div><div class="ttdef"><b>Definition:</b> lineend.h:195</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a3d20fbc61e06b34c849384597ba8e0cc"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a3d20fbc61e06b34c849384597ba8e0cc">OpenBabel::OBConversion::GetInStream</a></div><div class="ttdeci">std::istream * GetInStream() const</div><div class="ttdef"><b>Definition:</b> obconversion.h:108</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a2322eb2aa14e8d954573abbda9c50e62"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a2322eb2aa14e8d954573abbda9c50e62">OpenBabel::OBConversion::SupportedInputFormat</a></div><div class="ttdeci">std::vector&lt; std::string &gt; SupportedInputFormat</div><div class="ttdoc">list of supported input format </div><div class="ttdef"><b>Definition:</b> obconversion.h:418</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
