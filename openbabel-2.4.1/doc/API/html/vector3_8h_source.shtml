<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>vector3.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li><li class="navelem"><a class="el" href="dir_f637d16a4820b55342d7274cc0a5ba77.shtml">math</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">vector3.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="vector3_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">vector3.h - Handle 3D coordinates.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">Some portions Copyright (C) 2006 by Benoit Jacob</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef OB_VECTOR_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define OB_VECTOR_H</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;math.h&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;iostream&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="rand_8h.shtml">openbabel/rand.h</a>&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifndef RAD_TO_DEG</span></div><div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="vector3_8h.shtml#a89e47af0449640d4f15191aba5ca24c6">   31</a></span>&#160;<span class="preprocessor">#define RAD_TO_DEG (180.0/M_PI)</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#ifndef DEG_TO_RAD</span></div><div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="vector3_8h.shtml#a212460e743fecb084d717bb2180c5a56">   35</a></span>&#160;<span class="preprocessor">#define DEG_TO_RAD (M_PI/180.0)</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keyword">class </span>matrix3x3; <span class="comment">// declared in math/matrix3x3.h</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">class </span>OBRandom; <span class="comment">// declared in rand.h</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="comment">// class introduction in vector3.cpp</span></div><div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml">   45</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keyword">private</span> :</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordtype">double</span> _vx, _vy, _vz ;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keyword">public</span> :</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a28d983d20c9b3b395da7854fafae20f2">   52</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml#a28d983d20c9b3b395da7854fafae20f2">vector3</a> (<span class="keyword">const</span> <span class="keywordtype">double</span> inX=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> inY=0.0, <span class="keyword">const</span> <span class="keywordtype">double</span> inZ=0.0):</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      _vx(inX), _vy(inY), _vz(inZ)</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      {}</div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a8b2f7f06d9fa0554248321887d4fcfc4">   55</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml#a8b2f7f06d9fa0554248321887d4fcfc4">vector3</a> (<span class="keywordtype">double</span> inV[3]):</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      _vx(inV[0]), _vy(inV[1]), _vz(inV[2])</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      {}</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#abe84fe9749e73b1027baddb505fa189a">   59</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml#abe84fe9749e73b1027baddb505fa189a">vector3</a> (<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v):</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      _vx(v._vx), _vy(v._vy), _vz(v._vz)</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        { }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a059160a3da371ed0cfd1563a1e8cd2fb">   64</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml#a059160a3da371ed0cfd1563a1e8cd2fb">~vector3</a>() { }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">   67</a></span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">double</span>* <a class="code" href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">iterator</a>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">   70</a></span>&#160;    <span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keywordtype">double</span>* <a class="code" href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">const_iterator</a>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ad319fc54a93a2c7058c70e40428ed2e2">   73</a></span>&#160;    <span class="keyword">typedef</span> std::ptrdiff_t <a class="code" href="classOpenBabel_1_1vector3.shtml#ad319fc54a93a2c7058c70e40428ed2e2">difference_type</a>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ad69bd11391be1a1dba5c8202259664f8">   76</a></span>&#160;    iterator <a class="code" href="classOpenBabel_1_1vector3.shtml#ad69bd11391be1a1dba5c8202259664f8">begin</a>() { <span class="keywordflow">return</span> &amp;_vx; }</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#acad38d52497a975bfb6f2f6acd76631f">   79</a></span>&#160;    iterator <a class="code" href="classOpenBabel_1_1vector3.shtml#acad38d52497a975bfb6f2f6acd76631f">end</a>() { <span class="keywordflow">return</span> &amp;_vx + 3; }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a29305669b60ca1680752e2fc3592ba99">   82</a></span>&#160;    const_iterator <a class="code" href="classOpenBabel_1_1vector3.shtml#a29305669b60ca1680752e2fc3592ba99">begin</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;_vx; }</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">   85</a></span>&#160;    const_iterator <a class="code" href="classOpenBabel_1_1vector3.shtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">end</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;_vx + 3; }</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a685349dbc9e2d99a19616763811cbfba">   88</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#a685349dbc9e2d99a19616763811cbfba">Set</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> inX, <span class="keyword">const</span> <span class="keywordtype">double</span> inY, <span class="keyword">const</span> <span class="keywordtype">double</span> inZ)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      _vx = inX;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      _vy = inY;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      _vz = inZ;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#abfcb3c965a12bd0385f1fe1db3f7d3ac">   95</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#abfcb3c965a12bd0385f1fe1db3f7d3ac">Set</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> *c)</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      _vx = c[0];</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      _vy = c[1];</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      _vz = c[2];</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    }</div><div class="line"><a name="l00102"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ab7cbeb9d9ec3d0d2714733d8bb4596eb">  102</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#ab7cbeb9d9ec3d0d2714733d8bb4596eb">SetX</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> inX)</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      _vx = inX;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a385f2320a91b6c182ecb45d16ffc6332">  107</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#a385f2320a91b6c182ecb45d16ffc6332">SetY</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> inY)</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      _vy = inY;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ad1ac74f918d5ac48cb47426ca9ba2c09">  112</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#ad1ac74f918d5ac48cb47426ca9ba2c09">SetZ</a>(<span class="keyword">const</span> <span class="keywordtype">double</span> inZ)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    {</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      _vz = inZ;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    }</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ac302cda48a4a650a3f8cf1dfe9a0cb1e">  117</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#ac302cda48a4a650a3f8cf1dfe9a0cb1e">GetX</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <span class="keywordflow">return</span> _vx;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    }</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a2c302e1e24ca25bc362746dc51c22510">  122</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#a2c302e1e24ca25bc362746dc51c22510">GetY</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="keywordflow">return</span> _vy;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    }</div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ad5e4abcd59d8d2c945e851ed92593826">  127</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#ad5e4abcd59d8d2c945e851ed92593826">GetZ</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keywordflow">return</span> _vz;</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    }</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a9345053a16ce83e130dc098fddf9af7a">  133</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#a9345053a16ce83e130dc098fddf9af7a">Get</a>(<span class="keywordtype">double</span> *c)</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      c[0]=_vx;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      c[1]=_vy;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      c[2]=_vz;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">double</span> operator[] ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i) <span class="keyword">const</span>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ad2eee719d3706b71968f894c1179f4bb">  143</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v)</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      {</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        _vx = v._vx;</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        _vy = v._vy;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        _vz = v._vz;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      }</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a1eaa5b3b24423c15c8deb71a0c079707">  152</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> *<a class="code" href="classOpenBabel_1_1vector3.shtml#a1eaa5b3b24423c15c8deb71a0c079707">AsArray</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      <span class="keywordflow">return</span> &amp;_vx;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    }</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ae0541be714a6305dd3295655eea746d9">  159</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v)</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;      {</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        _vx += v._vx;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        _vy += v._vy;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        _vz += v._vz;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      };</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ac4b4980ccea5aa5184928ce40cf1acee">  168</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v)</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      {</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        _vx -= v._vx;</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        _vy -= v._vy;</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        _vz -= v._vz;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      };</div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a506884b50b92a33e92029b43f9b75bc9">  177</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator+= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      {</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        _vx += f[0];</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        _vy += f[1];</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        _vz += f[2];</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      };</div><div class="line"><a name="l00186"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a322635480250ba0c08aa47a125eda3dd">  186</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator-= ( <span class="keyword">const</span> <span class="keywordtype">double</span>* f)</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      {</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        _vx -= f[0];</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        _vy -= f[1];</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        _vz -= f[2];</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      };</div><div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a849fa346bb458a37710cdb8a4f5c085f">  195</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator*= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      {</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        _vx *= c;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        _vy *= c;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        _vz *= c;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      };</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ab5a7b18eeff279e5d850a9075d09f8a5">  205</a></span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator/= ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      {</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordtype">double</span> inv = 1.0 / c;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">return</span>( (*<span class="keyword">this</span>) *= inv );</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      };</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; operator*= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordtype">void</span> randomUnitVector(<a class="code" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a> *oeRand= NULL);</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="comment">//  Member Functions</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; normalize () ;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordtype">bool</span> CanBeNormalized () <span class="keyword">const</span>;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a47f7e7ecf0a38bc7ef50f21d90ba349b">  228</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#a47f7e7ecf0a38bc7ef50f21d90ba349b">length_2</a> ()<span class="keyword"> const</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      <span class="keywordflow">return</span> _vx*_vx + _vy*_vy + _vz*_vz;</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    };</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a80401d480f15e1418a3274a2b2b51649">  233</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#a80401d480f15e1418a3274a2b2b51649">length</a> ()<span class="keyword"> const</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      <span class="keywordflow">return</span> sqrt( length_2() );</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    };</div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">  238</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; <a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a> ()<span class="keyword"> const</span></div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="keywordflow">return</span> _vx ;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    } ;</div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">  243</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; <a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a> ()<span class="keyword"> const</span></div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="keywordflow">return</span> _vy ;</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    } ;</div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">  248</a></span>&#160;    <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; <a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a> ()<span class="keyword"> const</span></div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      <span class="keywordflow">return</span> _vz ;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    } ;</div><div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a3b195b867437acf8de45f48c83e81932">  253</a></span>&#160;    <span class="keywordtype">double</span> &amp; <a class="code" href="classOpenBabel_1_1vector3.shtml#a3b195b867437acf8de45f48c83e81932">x</a> ()</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    {</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keywordflow">return</span> _vx ;</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    } ;</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ad927d9808ded1fc49c05ae9e1a3ed2a6">  258</a></span>&#160;    <span class="keywordtype">double</span> &amp; <a class="code" href="classOpenBabel_1_1vector3.shtml#ad927d9808ded1fc49c05ae9e1a3ed2a6">y</a> ()</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      <span class="keywordflow">return</span> _vy ;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    } ;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#a2134ad02d68f29e9c7cd87e4cd4c75b8">  263</a></span>&#160;    <span class="keywordtype">double</span> &amp; <a class="code" href="classOpenBabel_1_1vector3.shtml#a2134ad02d68f29e9c7cd87e4cd4c75b8">z</a> ()</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      <span class="keywordflow">return</span> _vz ;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    } ;</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="comment">// @{</span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment"></span>    <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator== </a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; ) <span class="keyword">const</span>;</div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ab7c3fdae52a4c4bc27354cb2411028e4">  278</a></span>&#160;    <span class="keywordtype">int</span> operator!= ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; other )<span class="keyword"> const</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      <span class="keywordflow">return</span> ! ( (*this) == other );</div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    }</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox</a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp; other, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp; precision ) <span class="keyword">const</span>;</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">  297</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">distSq</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;vv)<span class="keyword"> const</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      <span class="keywordtype">double</span> dx = x() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>();</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;      <span class="keywordtype">double</span> dy = y() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>();</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;      <span class="keywordtype">double</span> dz = z() - vv.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>();</div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;      <span class="keywordflow">return</span>( dx*dx + dy*dy + dz*dz );</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordtype">bool</span> createOrthoVector(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v) <span class="keyword">const</span>;</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  };</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  OBAPI std::ostream&amp; <a class="code" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">operator&lt;&lt; </a>( std::ostream&amp;, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; );</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="comment">//  Sum, Difference, Scalar Product</span></div><div class="line"><a name="l00316"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">  316</a></span>&#160;<span class="comment"></span>  <span class="keyword">inline</span> OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">operator+ </a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v2)</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  {</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>()+v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>());</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  }</div><div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">  321</a></span>&#160;  <span class="keyword">inline</span> OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">operator- </a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v2)</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>(v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>(), v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>()-v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>());</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  }</div><div class="line"><a name="l00326"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a8bcf1e708be0fbc503f83952c3a99cd4">  326</a></span>&#160;  <span class="keyword">inline</span> OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">operator- </a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v)</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  {</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>(-v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>(), -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>(), -v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>());</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  }</div><div class="line"><a name="l00331"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2">  331</a></span>&#160;  <span class="keyword">inline</span> OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2">operator* </a>( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v)</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>());</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    }</div><div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ac5dcc9191fa15d332a546a975cb72952">  336</a></span>&#160;  <span class="keyword">inline</span> OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2">operator* </a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    {</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>( c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>(), c*v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>());</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    }</div><div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">  341</a></span>&#160;  <span class="keyword">inline</span> OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">operator/ </a>( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v, <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; c)</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>( v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>()/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>()/c, v.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>()/c);</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  }</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="comment">// @removed@ misleading operation</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="comment">// friend vector3 operator* ( const vector3 &amp;,const vector3 &amp;);</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="comment">//vector and matrix ops</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <span class="comment">// @removed@ misleading operation; matrix multiplication is not commutitative</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <span class="comment">//     friend vector3 operator *(const vector3 &amp;v,const matrix3x3 &amp;m);</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2">operator *</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">  356</a></span>&#160;  <span class="keyword">inline</span> OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot</a> ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v2 )</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  {</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordflow">return</span> v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">x</a>() + v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">y</a>() + v1.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>()*v2.<a class="code" href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">z</a>() ;</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  }</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  OBAPI <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">cross</a> ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp;, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; );</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;</div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">vectorAngle</a> ( <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; v2 );</div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b,</div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                                        <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">Point2PlaneSigned</a>(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> d);</div><div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#ad0e0c09ef7c92973447c46d3ad3f3f8d">Point2Plane</a>(<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> d);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> d);</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">Point2Line</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; a, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; b, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp; c);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  <span class="comment">//  The global constant vector3 objects</span></div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="comment"></span>  <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#ace51dfd98be07acf3a9c75c21e8d8af2">VZero</a>;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd">VX</a>;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee">VY</a>;</div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keyword">extern</span> OBAPI <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> <a class="code" href="namespaceOpenBabel.shtml#a08ec791bf0217b5df66e5879a9f9c95a">VZ</a>;</div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;</div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;}</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;</div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="preprocessor">#endif // OB_VECTOR_H</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div><div class="ttc" id="namespaceOpenBabel_shtml_ace51dfd98be07acf3a9c75c21e8d8af2"><div class="ttname"><a href="namespaceOpenBabel.shtml#ace51dfd98be07acf3a9c75c21e8d8af2">OpenBabel::VZero</a></div><div class="ttdeci">const vector3 VZero</div><div class="ttdoc">The zero vector: &lt;0.0, 0.0, 0.0&gt; </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_af855844c28abaaafbf21c5835a8e81d4"><div class="ttname"><a href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">OpenBabel::operator/</a></div><div class="ttdeci">vector3 operator/(const vector3 &amp;v, const double &amp;c)</div><div class="ttdoc">Division by a scalar. </div><div class="ttdef"><b>Definition:</b> vector3.h:341</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a80401d480f15e1418a3274a2b2b51649"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a80401d480f15e1418a3274a2b2b51649">OpenBabel::vector3::length</a></div><div class="ttdeci">double length() const</div><div class="ttdef"><b>Definition:</b> vector3.h:233</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_accf9a4bd0c34d4a5f6a7dab66ea10cdc"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#accf9a4bd0c34d4a5f6a7dab66ea10cdc">OpenBabel::vector3::end</a></div><div class="ttdeci">const_iterator end() const</div><div class="ttdoc">/return const_iterator to end </div><div class="ttdef"><b>Definition:</b> vector3.h:85</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ad69bd11391be1a1dba5c8202259664f8"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ad69bd11391be1a1dba5c8202259664f8">OpenBabel::vector3::begin</a></div><div class="ttdeci">iterator begin()</div><div class="ttdef"><b>Definition:</b> vector3.h:76</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_adc7b25b0ba45ce8f90a2519c03322e4a"><div class="ttname"><a href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">OpenBabel::operator+</a></div><div class="ttdeci">vector3 operator+(const vector3 &amp;v1, const vector3 &amp;v2)</div><div class="ttdoc">Vector addition. </div><div class="ttdef"><b>Definition:</b> vector3.h:316</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a685349dbc9e2d99a19616763811cbfba"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a685349dbc9e2d99a19616763811cbfba">OpenBabel::vector3::Set</a></div><div class="ttdeci">void Set(const double inX, const double inY, const double inZ)</div><div class="ttdoc">Set x,y and z-component of a vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:88</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ad1ac74f918d5ac48cb47426ca9ba2c09"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ad1ac74f918d5ac48cb47426ca9ba2c09">OpenBabel::vector3::SetZ</a></div><div class="ttdeci">void SetZ(const double inZ)</div><div class="ttdoc">Access function to set the z-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:112</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a059160a3da371ed0cfd1563a1e8cd2fb"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a059160a3da371ed0cfd1563a1e8cd2fb">OpenBabel::vector3::~vector3</a></div><div class="ttdeci">~vector3()</div><div class="ttdoc">Destructor. </div><div class="ttdef"><b>Definition:</b> vector3.h:64</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a6ca3b632d31093a7110635452bccc7bd"><div class="ttname"><a href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd">OpenBabel::VX</a></div><div class="ttdeci">const vector3 VX</div><div class="ttdoc">The x unit vector: &lt;1.0, 0.0, 0.0&gt; </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a00e2879019f2fb0fc689a7e5cb5d2008"><div class="ttname"><a href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">OpenBabel::vectorAngle</a></div><div class="ttdeci">double vectorAngle(const vector3 &amp;v1, const vector3 &amp;v2)</div><div class="ttdoc">Calculate the angle between vectors (in degrees) </div><div class="ttdef"><b>Definition:</b> vector3.cpp:202</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a385f2320a91b6c182ecb45d16ffc6332"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a385f2320a91b6c182ecb45d16ffc6332">OpenBabel::vector3::SetY</a></div><div class="ttdeci">void SetY(const double inY)</div><div class="ttdoc">Access function to set the y-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:107</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a7b1e56edcce2dfec1f65354c4f55703e"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a7b1e56edcce2dfec1f65354c4f55703e">OpenBabel::vector3::x</a></div><div class="ttdeci">const double &amp; x() const</div><div class="ttdoc">Access function to get the x-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:238</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a47f7e7ecf0a38bc7ef50f21d90ba349b"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a47f7e7ecf0a38bc7ef50f21d90ba349b">OpenBabel::vector3::length_2</a></div><div class="ttdeci">double length_2() const</div><div class="ttdef"><b>Definition:</b> vector3.h:228</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a68dc2c35a1e58febaa9e13cd82e3a50f"><div class="ttname"><a href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">OpenBabel::cross</a></div><div class="ttdeci">vector3 cross(const vector3 &amp;, const vector3 &amp;)</div><div class="ttdoc">Cross product of two vectors. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:171</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_af464b3279bc3db8c58ca552ddb0e8e79"><div class="ttname"><a href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">OpenBabel::IsApprox</a></div><div class="ttdeci">bool IsApprox(const double &amp;a, const double &amp;b, const double precision=1e-11)</div><div class="ttdef"><b>Definition:</b> obutil.h:229</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_abfcb3c965a12bd0385f1fe1db3f7d3ac"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#abfcb3c965a12bd0385f1fe1db3f7d3ac">OpenBabel::vector3::Set</a></div><div class="ttdeci">void Set(const double *c)</div><div class="ttdoc">Set x,y and z-component of a vector from c[0]..c[2]. </div><div class="ttdef"><b>Definition:</b> vector3.h:95</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ae15b186e4ec6527dbba56dbabba7b06b"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">OpenBabel::vector3::distSq</a></div><div class="ttdeci">double distSq(const vector3 &amp;vv) const</div><div class="ttdoc">}@ </div><div class="ttdef"><b>Definition:</b> vector3.h:297</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ad319fc54a93a2c7058c70e40428ed2e2"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ad319fc54a93a2c7058c70e40428ed2e2">OpenBabel::vector3::difference_type</a></div><div class="ttdeci">std::ptrdiff_t difference_type</div><div class="ttdoc">A signed integral type for differences between two iterators. </div><div class="ttdef"><b>Definition:</b> vector3.h:73</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a32a70eb5e04f4e10a386089723f05b2a"><div class="ttname"><a href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">OpenBabel::dot</a></div><div class="ttdeci">double dot(const vector3 &amp;v1, const vector3 &amp;v2)</div><div class="ttdoc">Dot product of two vectors. </div><div class="ttdef"><b>Definition:</b> vector3.h:356</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_acad38d52497a975bfb6f2f6acd76631f"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#acad38d52497a975bfb6f2f6acd76631f">OpenBabel::vector3::end</a></div><div class="ttdeci">iterator end()</div><div class="ttdef"><b>Definition:</b> vector3.h:79</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_abe84fe9749e73b1027baddb505fa189a"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#abe84fe9749e73b1027baddb505fa189a">OpenBabel::vector3::vector3</a></div><div class="ttdeci">vector3(const vector3 &amp;v)</div><div class="ttdoc">Copy Constructor. </div><div class="ttdef"><b>Definition:</b> vector3.h:59</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ad5e4abcd59d8d2c945e851ed92593826"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ad5e4abcd59d8d2c945e851ed92593826">OpenBabel::vector3::GetZ</a></div><div class="ttdeci">double GetZ() const</div><div class="ttdoc">Access function to get the z-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:127</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a6cd067fe0c3e483dd5377aede39556e1"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a6cd067fe0c3e483dd5377aede39556e1">OpenBabel::vector3::const_iterator</a></div><div class="ttdeci">const double * const_iterator</div><div class="ttdoc">A random access iterator over const x, y, z. </div><div class="ttdef"><b>Definition:</b> vector3.h:70</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aa2e0e5d4e59766809b5b61ab9b513a2e"><div class="ttname"><a href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">OpenBabel::operator-</a></div><div class="ttdeci">vector3 operator-(const vector3 &amp;v1, const vector3 &amp;v2)</div><div class="ttdoc">Vector subtraction. </div><div class="ttdef"><b>Definition:</b> vector3.h:321</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a1eaa5b3b24423c15c8deb71a0c079707"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a1eaa5b3b24423c15c8deb71a0c079707">OpenBabel::vector3::AsArray</a></div><div class="ttdeci">const double * AsArray() const</div><div class="ttdef"><b>Definition:</b> vector3.h:152</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a3b195b867437acf8de45f48c83e81932"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a3b195b867437acf8de45f48c83e81932">OpenBabel::vector3::x</a></div><div class="ttdeci">double &amp; x()</div><div class="ttdoc">Access function to set the x-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:253</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ac302cda48a4a650a3f8cf1dfe9a0cb1e"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ac302cda48a4a650a3f8cf1dfe9a0cb1e">OpenBabel::vector3::GetX</a></div><div class="ttdeci">double GetX() const</div><div class="ttdoc">Access function to get the x-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:117</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a9085cf790064f107bc57185b11ab2eee"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a9085cf790064f107bc57185b11ab2eee">OpenBabel::vector3::y</a></div><div class="ttdeci">const double &amp; y() const</div><div class="ttdoc">Access function to get the y-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:243</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ad0e0c09ef7c92973447c46d3ad3f3f8d"><div class="ttname"><a href="namespaceOpenBabel.shtml#ad0e0c09ef7c92973447c46d3ad3f3f8d">OpenBabel::Point2Plane</a></div><div class="ttdeci">double Point2Plane(vector3 a, vector3 b, vector3 c, vector3 d)</div><div class="ttdoc">Calculate the distance of point a to the plane determined by b,c,d. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:324</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a62d62b3487ca8969bdfbd7c434da564e"><div class="ttname"><a href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">OpenBabel::CalcTorsionAngle</a></div><div class="ttdeci">double CalcTorsionAngle(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c, const vector3 &amp;d)</div><div class="ttdoc">Calculate the torsion angle between vectors (in degrees) </div><div class="ttdef"><b>Definition:</b> vector3.cpp:230</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRandom_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRandom.shtml">OpenBabel::OBRandom</a></div><div class="ttdoc">Random number generator. </div><div class="ttdef"><b>Definition:</b> rand.h:68</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml">OpenBabel::vector3</a></div><div class="ttdoc">Represents a vector in 3-dimensional real space. </div><div class="ttdef"><b>Definition:</b> vector3.h:45</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a2d3d483edcdb477b3d15f19a001845ee"><div class="ttname"><a href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee">OpenBabel::VY</a></div><div class="ttdeci">const vector3 VY</div><div class="ttdoc">The y unit vector: &lt;0.0, 1.0, 0.0&gt; </div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a28d983d20c9b3b395da7854fafae20f2"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a28d983d20c9b3b395da7854fafae20f2">OpenBabel::vector3::vector3</a></div><div class="ttdeci">vector3(const double inX=0.0, const double inY=0.0, const double inZ=0.0)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> vector3.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ad927d9808ded1fc49c05ae9e1a3ed2a6"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ad927d9808ded1fc49c05ae9e1a3ed2a6">OpenBabel::vector3::y</a></div><div class="ttdeci">double &amp; y()</div><div class="ttdoc">Access function to set the y-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:258</div></div>
<div class="ttc" id="classOpenBabel_1_1matrix3x3_shtml"><div class="ttname"><a href="classOpenBabel_1_1matrix3x3.shtml">OpenBabel::matrix3x3</a></div><div class="ttdoc">Represents a real 3x3 matrix. </div><div class="ttdef"><b>Definition:</b> matrix3x3.h:42</div></div>
<div class="ttc" id="rand_8h_shtml"><div class="ttname"><a href="rand_8h.shtml">rand.h</a></div><div class="ttdoc">Pseudo random number generator. </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a08ec791bf0217b5df66e5879a9f9c95a"><div class="ttname"><a href="namespaceOpenBabel.shtml#a08ec791bf0217b5df66e5879a9f9c95a">OpenBabel::VZ</a></div><div class="ttdeci">const vector3 VZ</div><div class="ttdoc">The z unit vector: &lt;0.0, 0.0, 1.0&gt; </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a70c653ee69fdbd27f77d430e4aed3cad"><div class="ttname"><a href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">OpenBabel::operator&lt;&lt;</a></div><div class="ttdeci">std::ostream &amp; operator&lt;&lt;(std::ostream &amp;, const vector3 &amp;)</div><div class="ttdoc">Prints a representation of the vector as a row vector of the form &quot;&lt;0.1,1,2&gt;&quot;. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:117</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a29227290e6e6931c009942836a21e5df"><div class="ttname"><a href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">OpenBabel::Point2PlaneAngle</a></div><div class="ttdeci">double Point2PlaneAngle(const vector3 a, const vector3 b, const vector3 c, const vector3 d)</div><div class="ttdoc">Calculate the angle between point a and the plane determined by b,c,d. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:330</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a2c302e1e24ca25bc362746dc51c22510"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a2c302e1e24ca25bc362746dc51c22510">OpenBabel::vector3::GetY</a></div><div class="ttdeci">double GetY() const</div><div class="ttdoc">Access function to get the y-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:122</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a1fa4ebe11664cfe4759ea7ccaa3abbb9"><div class="ttname"><a href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">OpenBabel::Point2PlaneSigned</a></div><div class="ttdeci">double Point2PlaneSigned(vector3 a, vector3 b, vector3 c, vector3 d)</div><div class="ttdoc">Calculate the signed distance of point a to the plane determined by b,c,d. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:316</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a2134ad02d68f29e9c7cd87e4cd4c75b8"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a2134ad02d68f29e9c7cd87e4cd4c75b8">OpenBabel::vector3::z</a></div><div class="ttdeci">double &amp; z()</div><div class="ttdoc">Access function to set the z-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:263</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a29305669b60ca1680752e2fc3592ba99"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a29305669b60ca1680752e2fc3592ba99">OpenBabel::vector3::begin</a></div><div class="ttdeci">const_iterator begin() const</div><div class="ttdoc">/return const_iterator to beginning </div><div class="ttdef"><b>Definition:</b> vector3.h:82</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a3c0e5d79c07393e51572c2594f762b27"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a3c0e5d79c07393e51572c2594f762b27">OpenBabel::vector3::iterator</a></div><div class="ttdeci">double * iterator</div><div class="ttdoc">A random access iterator over x, y, z. </div><div class="ttdef"><b>Definition:</b> vector3.h:67</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a56b20579149ab8b5807475d4302c33a2"><div class="ttname"><a href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2">OpenBabel::operator*</a></div><div class="ttdeci">vector3 operator*(const double &amp;c, const vector3 &amp;v)</div><div class="ttdoc">Multiplication with a scalar. </div><div class="ttdef"><b>Definition:</b> vector3.h:331</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a89f6c6d834e9fec20840d1754c06016e"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a89f6c6d834e9fec20840d1754c06016e">OpenBabel::vector3::z</a></div><div class="ttdeci">const double &amp; z() const</div><div class="ttdoc">Access function to get the z-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:248</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a9345053a16ce83e130dc098fddf9af7a"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a9345053a16ce83e130dc098fddf9af7a">OpenBabel::vector3::Get</a></div><div class="ttdeci">void Get(double *c)</div><div class="ttdoc">Set c[0]..c[2] to the components of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:133</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a32827b2955824019ff9a7e0a4ebfcd64"><div class="ttname"><a href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">OpenBabel::Point2Line</a></div><div class="ttdeci">double Point2Line(const vector3 &amp;a, const vector3 &amp;b, const vector3 &amp;c)</div><div class="ttdoc">Calculate the distance of a point a to a line determined by b and c. </div><div class="ttdef"><b>Definition:</b> vector3.cpp:345</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_a8b2f7f06d9fa0554248321887d4fcfc4"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#a8b2f7f06d9fa0554248321887d4fcfc4">OpenBabel::vector3::vector3</a></div><div class="ttdeci">vector3(double inV[3])</div><div class="ttdef"><b>Definition:</b> vector3.h:55</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac001b331f648fbbd8590576f59d4d2ab"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">OpenBabel::operator==</a></div><div class="ttdeci">bool operator==(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:525</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml_ab7cbeb9d9ec3d0d2714733d8bb4596eb"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml#ab7cbeb9d9ec3d0d2714733d8bb4596eb">OpenBabel::vector3::SetX</a></div><div class="ttdeci">void SetX(const double inX)</div><div class="ttdoc">Access function to set the x-coordinate of the vector. </div><div class="ttdef"><b>Definition:</b> vector3.h:102</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
