<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>mol.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">mol.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="mol_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">mol.h - Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">        (the main header for Open Babel)</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2006 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">Some portions Copyright (C) 2003 by Michael Banck</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#ifndef OB_MOL_H</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#define OB_MOL_H</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#ifndef EXTERN</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#  define EXTERN extern</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;math.h&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;float.h&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">// Currently includes many headers for 2.x backwards compatibility</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">// \deprecated -- this will be cleaned up in 3.0 efforts</span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">//      to improve compile time significantly.</span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">// Only include necessary headers and class declaration stubs.</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="atom_8h.shtml">openbabel/atom.h</a>&gt;</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="bond_8h.shtml">openbabel/bond.h</a>&gt;</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="data_8h.shtml">openbabel/data.h</a>&gt;</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="chains_8h.shtml">openbabel/chains.h</a>&gt;</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="vector3_8h.shtml">openbabel/math/vector3.h</a>&gt;</span></div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="bitvec_8h.shtml">openbabel/bitvec.h</a>&gt;</span></div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="residue_8h.shtml">openbabel/residue.h</a>&gt;</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="ring_8h.shtml">openbabel/ring.h</a>&gt;</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="generic_8h.shtml">openbabel/generic.h</a>&gt;</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml">openbabel/typer.h</a>&gt;</span></div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="oberror_8h.shtml">openbabel/oberror.h</a>&gt;</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="obiter_8h.shtml">openbabel/obiter.h</a>&gt;</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="internalcoord_8h.shtml">openbabel/internalcoord.h</a>&gt;</span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;{</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keyword">class </span>OBAtom;</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <span class="keyword">class </span>OBBond;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keyword">class </span>OBInternalCoord;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keyword">class </span>OBConversion; <span class="comment">//used only as a pointer</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="comment">// Class OBMol</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="comment">//MOL Property Macros (flags) -- 32+ bits</span></div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4">   68</a></span>&#160;<span class="comment"></span><span class="preprocessor">#define OB_SSSR_MOL              (1&lt;&lt;1)</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#define OB_RINGFLAGS_MOL         (1&lt;&lt;2)</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="preprocessor">#define OB_AROMATIC_MOL          (1&lt;&lt;3)</span></div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="preprocessor">#define OB_ATOMTYPES_MOL         (1&lt;&lt;4)</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="preprocessor">#define OB_CHIRALITY_MOL         (1&lt;&lt;5)</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#define OB_PCHARGE_MOL           (1&lt;&lt;6)</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="preprocessor">#define OB_HYBRID_MOL            (1&lt;&lt;8)</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">#define OB_IMPVAL_MOL            (1&lt;&lt;9)</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="preprocessor">#define OB_KEKULE_MOL            (1&lt;&lt;10)</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#define OB_CLOSURE_MOL           (1&lt;&lt;11)</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="preprocessor">#define OB_H_ADDED_MOL           (1&lt;&lt;12)</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor">#define OB_PH_CORRECTED_MOL      (1&lt;&lt;13)</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="preprocessor">#define OB_AROM_CORRECTED_MOL    (1&lt;&lt;14)</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="preprocessor">#define OB_CHAINS_MOL            (1&lt;&lt;15)</span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="preprocessor">#define OB_TCHARGE_MOL                 (1&lt;&lt;16)</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="preprocessor">#define OB_TSPIN_MOL             (1&lt;&lt;17)</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="preprocessor">#define OB_RINGTYPES_MOL         (1&lt;&lt;18)</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#define OB_PATTERN_STRUCTURE     (1&lt;&lt;19)</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#define OB_LSSR_MOL              (1&lt;&lt;20)</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="preprocessor">#define OB_ATOMSPIN_MOL          (1&lt;&lt;21)</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="comment">// flags 22-32 unspecified</span></div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="mol_8h.shtml#ae7cd3ed4ac08cc188ed556c26ff26abe">  108</a></span>&#160;<span class="preprocessor">#define OB_CURRENT_CONFORMER     -1</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74caa3d3ec6d4feccb909e375261fc5e747a">  110</a></span>&#160;<span class="keyword">enum</span> <a class="code" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74c">HydrogenType</a> { <a class="code" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74cabe1ce09c84714b0a9be0755e9c79c024">AllHydrogen</a>, <a class="code" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74caa3d3ec6d4feccb909e375261fc5e747a">PolarHydrogen</a>, <a class="code" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74caf4f0a00a8690e1ea23a90fac8d818e47">NonPolarHydrogen</a> };</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="comment">// class introduction in mol.cpp</span></div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml">  113</a></span>&#160; <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>: <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  {</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keyword">protected</span>:</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549">  116</a></span>&#160;    <span class="keywordtype">int</span>                           <a class="code" href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549">_flags</a>;       </div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646">  117</a></span>&#160;    <span class="keywordtype">bool</span>                          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646">_autoPartialCharge</a>;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c">  118</a></span>&#160;    <span class="keywordtype">bool</span>                          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c">_autoFormalCharge</a>;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9">  119</a></span>&#160;    std::string                   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9">_title</a>;       </div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5">  120</a></span>&#160;    std::vector&lt;OBAtom*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5">_vatom</a>;       </div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0">  121</a></span>&#160;    std::vector&lt;OBAtom*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0">_atomIds</a>;     </div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98">  122</a></span>&#160;    std::vector&lt;OBBond*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98">_vbond</a>;       </div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2">  123</a></span>&#160;    std::vector&lt;OBBond*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2">_bondIds</a>;     </div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c">  124</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            <a class="code" href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c">_dimension</a>;   </div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd">  125</a></span>&#160;    <span class="keywordtype">int</span>                           <a class="code" href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd">_totalCharge</a>; </div><div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07">  126</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07">_totalSpin</a>;   </div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4">  127</a></span>&#160;    <span class="keywordtype">double</span>                        *<a class="code" href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4">_c</a>;          </div><div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1">  128</a></span>&#160;    std::vector&lt;double*&gt;          <a class="code" href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1">_vconf</a>;       </div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a">  129</a></span>&#160;    <span class="keywordtype">double</span>                        <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a">_energy</a>;      </div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219">  130</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219">_natoms</a>;      </div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c">  131</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c">_nbonds</a>;      </div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956">  132</a></span>&#160;    std::vector&lt;OBResidue*&gt;       <a class="code" href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956">_residue</a>;     </div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b">  133</a></span>&#160;    std::vector&lt;OBInternalCoord*&gt; <a class="code" href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b">_internals</a>;   </div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0">  134</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span>            <a class="code" href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0">_mod</a>;         </div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a3a1dc0419a66d2e7288214342de43b7a">  136</a></span>&#160;    <span class="keywordtype">bool</span>  <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3a1dc0419a66d2e7288214342de43b7a">HasFlag</a>(<span class="keywordtype">int</span> flag)    { <span class="keywordflow">return</span>((_flags &amp; flag) ? <span class="keyword">true</span> : <span class="keyword">false</span>); }</div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#adcdab8f96dc4fdc2940749e527087245">  137</a></span>&#160;    <span class="keywordtype">void</span>  <a class="code" href="classOpenBabel_1_1OBMol.shtml#adcdab8f96dc4fdc2940749e527087245">SetFlag</a>(<span class="keywordtype">int</span> flag)    { _flags |= flag; }</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordtype">void</span> start_kekulize(std::vector &lt;OBAtom*&gt; &amp;cycle, std::vector&lt;int&gt; &amp;electron);</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">bool</span> expand_kekulize(<span class="keywordtype">int</span> bond_idx, std::vector&lt;int&gt; &amp;atomState, std::vector&lt;int&gt; &amp;bondState);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordtype">bool</span> has_no_leftover_electrons(std::vector&lt;int&gt; &amp;atomState);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">int</span> getorden(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom);</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordtype">bool</span> expandcycle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, <span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;potAromBonds);</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>();</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>();</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;operator+=(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">  165</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">ReserveAtoms</a>(<span class="keywordtype">int</span> natoms)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    {</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;      <span class="keywordflow">if</span> (natoms &gt; 0 &amp;&amp; _mod) {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        _vatom.reserve(natoms);</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        _atomIds.reserve(natoms);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      }</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    }</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *<a class="code" href="namespaceOpenBabel.shtml#a5ef07c8230811964a209e423abea11d2">CreateAtom</a>(<span class="keywordtype">void</span>);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *<a class="code" href="namespaceOpenBabel.shtml#a0dc584d0582e8f76b7c9873dc1ccf569">CreateBond</a>(<span class="keywordtype">void</span>);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *CreateResidue(<span class="keywordtype">void</span>);</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*);</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> DestroyResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="keywordtype">bool</span> AddAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&amp; atom, <span class="keywordtype">bool</span> forceNewId = <span class="keyword">false</span>);</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordtype">bool</span> InsertAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;);</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">bool</span> AddBond(<span class="keywordtype">int</span> beginIdx, <span class="keywordtype">int</span> endIdx, <span class="keywordtype">int</span> order,</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                 <span class="keywordtype">int</span> flags=0,<span class="keywordtype">int</span> insertpos=-1);</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="keywordtype">bool</span> AddBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&amp;);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">bool</span> AddResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>&amp;);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>    *NewAtom();</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>    *NewAtom(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>    *NewBond();</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>    *NewBond(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *NewResidue();</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordtype">bool</span> DeleteAtom(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*, <span class="keywordtype">bool</span> destroyAtom = <span class="keyword">true</span>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordtype">bool</span> DeleteBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*, <span class="keywordtype">bool</span> destroyBond = <span class="keyword">true</span>);</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">bool</span> DeleteResidue(<a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*, <span class="keywordtype">bool</span> destroyResidue = <span class="keyword">true</span>);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> BeginModify(<span class="keywordtype">void</span>);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    <span class="keyword">virtual</span> <span class="keywordtype">void</span> EndModify(<span class="keywordtype">bool</span> nukePerceivedData=<span class="keyword">true</span>);</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ac5103c8b3cbe4f961bd353209bf2860e">  258</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac5103c8b3cbe4f961bd353209bf2860e">GetMod</a>()           {      <span class="keywordflow">return</span>(_mod);    }</div><div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#adc36b31f851665247f3c576cdd7aa0af">  261</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#adc36b31f851665247f3c576cdd7aa0af">IncrementMod</a>()    {      _mod++;          }</div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a8efda275b959c94452e1ded1f568c934">  264</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a8efda275b959c94452e1ded1f568c934">DecrementMod</a>()    {      _mod--;          }</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">int</span>          GetFlags()               { <span class="keywordflow">return</span>(_flags); }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>  *GetTitle(<span class="keywordtype">bool</span> replaceNewlines = <span class="keyword">true</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00275"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a2f0695eb7d6ff6321032d88655ae8d25">  275</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a>()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_natoms); }</div><div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">  277</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">NumBonds</a>()<span class="keyword"> const         </span>{  <span class="keywordflow">return</span>(_nbonds); }</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumHvyAtoms();</div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#af641753d0dbc017405280791048f0d88">  281</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#af641753d0dbc017405280791048f0d88">NumResidues</a>()<span class="keyword"> const      </span>{ <span class="keywordflow">return</span>(static_cast&lt;unsigned int&gt; (_residue.size())); }</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumRotors(<span class="keywordtype">bool</span> sampleRingBonds=<span class="keyword">false</span>);</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>      *GetAtom(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>      *GetAtomById(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>      *GetFirstAtom() <span class="keyword">const</span>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBond(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBondById(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBond(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b) <span class="keyword">const</span>;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="comment">// The safer version of the above method</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment"></span>    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>      *GetBond(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* bgn, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* end) <span class="keyword">const</span>;</div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>   *GetResidue(<span class="keywordtype">int</span> idx) <span class="keyword">const</span>;</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    std::vector&lt;OBInternalCoord*&gt; GetInternalCoord();</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    <span class="keywordtype">double</span>       GetTorsion(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordtype">double</span>       GetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* a,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* b,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* c,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* d);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keywordtype">double</span> GetAngle(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* b, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* c);</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordtype">int</span> AreInSameRing(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    std::string  GetFormula();</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    std::string  GetSpacedFormula(<span class="keywordtype">int</span> ones=0, <span class="keyword">const</span> <span class="keywordtype">char</span>* sp=<span class="stringliteral">&quot; &quot;</span>, <span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);</div><div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a4dcfbb9780f44d5fca2effbc30b17ce0">  329</a></span>&#160;    <span class="keywordtype">double</span>       <a class="code" href="classOpenBabel_1_1OBMol.shtml#a4dcfbb9780f44d5fca2effbc30b17ce0">GetEnergy</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _energy; }</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordtype">double</span>       GetMolWt(<span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    <span class="keywordtype">double</span>       GetExactMass(<span class="keywordtype">bool</span> implicitH = <span class="keyword">true</span>);</div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    <span class="keywordtype">int</span>          GetTotalCharge();</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetTotalSpinMultiplicity();</div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ad646045c7f735c9ef05ba9e4bb768b7c">  339</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ad646045c7f735c9ef05ba9e4bb768b7c">GetDimension</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _dimension; }</div><div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">  341</a></span>&#160;    <span class="keywordtype">double</span>      *<a class="code" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">GetCoordinates</a>() { <span class="keywordflow">return</span>(_c); }</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    std::vector&lt;OBRing*&gt; &amp;GetSSSR();</div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    std::vector&lt;OBRing*&gt; &amp;GetLSSR();</div><div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a9f801729475d1d17415af6376458c81e">  347</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a9f801729475d1d17415af6376458c81e">AutomaticFormalCharge</a>()   { <span class="keywordflow">return</span>(_autoFormalCharge);  }</div><div class="line"><a name="l00349"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#af2ee11d3efe6526c2eb352bb67684e6c">  349</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#af2ee11d3efe6526c2eb352bb67684e6c">AutomaticPartialCharge</a>()  { <span class="keywordflow">return</span>(_autoPartialCharge); }</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordtype">void</span>   SetTitle(<span class="keyword">const</span> <span class="keywordtype">char</span> *title);</div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    <span class="keywordtype">void</span>   SetTitle(std::string &amp;title);</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordtype">void</span>   SetFormula(std::string molFormula);</div><div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ab78fa0a100d47ad2beb88c7cabb80e62">  362</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#ab78fa0a100d47ad2beb88c7cabb80e62">SetEnergy</a>(<span class="keywordtype">double</span> energy) { _energy = energy; }</div><div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#adc2702cffcab0a0d6907958e3327284b">  364</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#adc2702cffcab0a0d6907958e3327284b">SetDimension</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">short</span> <span class="keywordtype">int</span> d) { _dimension = d; }</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordtype">void</span>   SetTotalCharge(<span class="keywordtype">int</span> charge);</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    <span class="keywordtype">void</span>   SetTotalSpinMultiplicity(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> spinMultiplicity);</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keywordtype">void</span> SetInternalCoord(std::vector&lt;OBInternalCoord*&gt; int_coord);</div><div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a31e0990c833c415708b3fc515dbb35d5">  377</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a31e0990c833c415708b3fc515dbb35d5">SetAutomaticFormalCharge</a>(<span class="keywordtype">bool</span> val)</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    { _autoFormalCharge=val;  }</div><div class="line"><a name="l00380"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aa8df95db3695e5e7ce263c484ce5533d">  380</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#aa8df95db3695e5e7ce263c484ce5533d">SetAutomaticPartialCharge</a>(<span class="keywordtype">bool</span> val)</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    { _autoPartialCharge=val; }</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aecd431b2cfaefa64d54c2dc4088551fb">  384</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#aecd431b2cfaefa64d54c2dc4088551fb">SetAromaticPerceived</a>()    { SetFlag(<a class="code" href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609">OB_AROMATIC_MOL</a>);    }</div><div class="line"><a name="l00386"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aba303a094727738eb901cafbecd7c196">  386</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#aba303a094727738eb901cafbecd7c196">SetSSSRPerceived</a>()        { SetFlag(<a class="code" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4">OB_SSSR_MOL</a>);        }</div><div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a4641fea7bd6513949147bb7a53b6a7e1">  388</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a4641fea7bd6513949147bb7a53b6a7e1">SetLSSRPerceived</a>()        { SetFlag(<a class="code" href="mol_8h.shtml#ae62d8140a1f27fe185152e8ca29f2255">OB_LSSR_MOL</a>);        }</div><div class="line"><a name="l00390"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a0656401ba8b19bc9b9f2d3e8e833d3aa">  390</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0656401ba8b19bc9b9f2d3e8e833d3aa">SetRingAtomsAndBondsPerceived</a>(){SetFlag(<a class="code" href="mol_8h.shtml#ae9ad3600741ed030f463badacb48cbf9">OB_RINGFLAGS_MOL</a>);}</div><div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aa809ea95ee07e61c6dc00ae710d8a749">  392</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#aa809ea95ee07e61c6dc00ae710d8a749">SetAtomTypesPerceived</a>()   { SetFlag(<a class="code" href="mol_8h.shtml#abf2d91f3d8e6d4db13029a0130a262a5">OB_ATOMTYPES_MOL</a>);   }</div><div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a08b5caf5aa6fc21e7b6fcd44e3d32f58">  394</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a08b5caf5aa6fc21e7b6fcd44e3d32f58">SetRingTypesPerceived</a>()   { SetFlag(<a class="code" href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8">OB_RINGTYPES_MOL</a>);   }</div><div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a537294f8e96a7ec5263a79de7454326e">  396</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a537294f8e96a7ec5263a79de7454326e">SetChainsPerceived</a>()      { SetFlag(<a class="code" href="mol_8h.shtml#a5aaff7bcb11a37508fe32d17ad57dea0">OB_CHAINS_MOL</a>);      }</div><div class="line"><a name="l00398"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a608e6f965afea1f4f64cb0f499a0cb27">  398</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a608e6f965afea1f4f64cb0f499a0cb27">SetChiralityPerceived</a>()   { SetFlag(<a class="code" href="mol_8h.shtml#abdf1bef91d791e4ec64071377a06e491">OB_CHIRALITY_MOL</a>);   }</div><div class="line"><a name="l00400"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a00fd4c76a7513a9c8087d975f5d8a51b">  400</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a00fd4c76a7513a9c8087d975f5d8a51b">SetPartialChargesPerceived</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0">OB_PCHARGE_MOL</a>);   }</div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a4b93b72694e8a9a970eee7f0b65ecf9a">  402</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a4b93b72694e8a9a970eee7f0b65ecf9a">SetHybridizationPerceived</a>() { SetFlag(<a class="code" href="mol_8h.shtml#a2609984a86f8eaca60bd0995ab1ff082">OB_HYBRID_MOL</a>);    }</div><div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a9ecfb96410199c294c003f975d870832">  404</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a9ecfb96410199c294c003f975d870832">SetImplicitValencePerceived</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254">OB_IMPVAL_MOL</a>);   }</div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a1e298bbe286ab2c5a6f3b086a07b1a2b">  406</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a1e298bbe286ab2c5a6f3b086a07b1a2b">SetKekulePerceived</a>()      { SetFlag(<a class="code" href="mol_8h.shtml#adb1c838e0460bae3347db0d94b4e63c7">OB_KEKULE_MOL</a>);      }</div><div class="line"><a name="l00408"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a7900736a9f73a041ab8bade19be84cc9">  408</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7900736a9f73a041ab8bade19be84cc9">SetClosureBondsPerceived</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#aa9b307d4356f47b80ba6516405bea32e">OB_CLOSURE_MOL</a>);     }</div><div class="line"><a name="l00410"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a47b63124c405f9c2ecdb766c6de9c56e">  410</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a47b63124c405f9c2ecdb766c6de9c56e">SetHydrogensAdded</a>()       { SetFlag(<a class="code" href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88">OB_H_ADDED_MOL</a>);     }</div><div class="line"><a name="l00411"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#af56db37c6a9f7049ed16469ab0a270c2">  411</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#af56db37c6a9f7049ed16469ab0a270c2">SetCorrectedForPH</a>()       { SetFlag(<a class="code" href="mol_8h.shtml#af3ca96a4c05940f8ed8fdc159b93656a">OB_PH_CORRECTED_MOL</a>);}</div><div class="line"><a name="l00412"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a6438e097839dbc98916fb00a3dc67305">  412</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a6438e097839dbc98916fb00a3dc67305">SetAromaticCorrected</a>()    { SetFlag(<a class="code" href="mol_8h.shtml#ad34e5e48a2b7f4c149070647189d9d71">OB_AROM_CORRECTED_MOL</a>);}</div><div class="line"><a name="l00413"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a2c81eeba803bc59d6c40f97b0e0e17fd">  413</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a2c81eeba803bc59d6c40f97b0e0e17fd">SetSpinMultiplicityAssigned</a>(){ SetFlag(<a class="code" href="mol_8h.shtml#a1dcfd219e32e29f2aa96b01c4d95021a">OB_ATOMSPIN_MOL</a>);    }</div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ab0922e1fa0939499c024e1006433adf3">  414</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#ab0922e1fa0939499c024e1006433adf3">SetFlags</a>(<span class="keywordtype">int</span> flags)       { _flags = flags;              }</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a88f39becfe74f62c9d0ffedfb4098b77">  416</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a88f39becfe74f62c9d0ffedfb4098b77">UnsetAromaticPerceived</a>()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609">OB_AROMATIC_MOL</a>));   }</div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a116f93a9700551794731bf71cd17345a">  417</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a116f93a9700551794731bf71cd17345a">UnsetSSSRPerceived</a>()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4">OB_SSSR_MOL</a>));   }</div><div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aa21ddf3d7c7164e6e72d0228d75b974c">  419</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#aa21ddf3d7c7164e6e72d0228d75b974c">UnsetLSSRPerceived</a>()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#ae62d8140a1f27fe185152e8ca29f2255">OB_LSSR_MOL</a>));   }</div><div class="line"><a name="l00420"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a7d0001f1af294a0d5676a70e12115b43">  420</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7d0001f1af294a0d5676a70e12115b43">UnsetRingTypesPerceived</a>()  { _flags &amp;= (~(<a class="code" href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8">OB_RINGTYPES_MOL</a>));   }</div><div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a0b8a9f6292b91ec5c4022a487e9d6092">  421</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0b8a9f6292b91ec5c4022a487e9d6092">UnsetPartialChargesPerceived</a>(){ _flags &amp;= (~(<a class="code" href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0">OB_PCHARGE_MOL</a>));}</div><div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#af673e91c4869ca8c1057f006d4f06dae">  422</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#af673e91c4869ca8c1057f006d4f06dae">UnsetImplicitValencePerceived</a>(){_flags &amp;= (~(<a class="code" href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254">OB_IMPVAL_MOL</a>)); }</div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ac6df023071b8d662aa513a00579f076d">  423</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac6df023071b8d662aa513a00579f076d">UnsetHydrogensAdded</a>()       { UnsetFlag(<a class="code" href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88">OB_H_ADDED_MOL</a>);     }</div><div class="line"><a name="l00424"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a401b99defa8a57195dc40a2604cee115">  424</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a401b99defa8a57195dc40a2604cee115">UnsetFlag</a>(<span class="keywordtype">int</span> flag)       { _flags &amp;= (~(flag));              }</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="comment">// Description in transform.cpp (command-line transformations to this molecule)</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>*    DoTransformations(<span class="keyword">const</span> std::map&lt;std::string,std::string&gt;* pOptions,<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);</div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="comment">// Ditto (documentation on transformation options)</span></div><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* ClassDescription();</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keywordtype">bool</span> Clear();</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;OBAtom*&gt;&amp;);</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordtype">void</span> RenumberAtoms(std::vector&lt;int&gt;);</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keywordtype">void</span> SetCoordinates(<span class="keywordtype">double</span> *c);</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordtype">void</span> ToInertialFrame(<span class="keywordtype">int</span> conf, <span class="keywordtype">double</span> *rmat);</div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keywordtype">void</span> ToInertialFrame();</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v);</div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordtype">void</span> Translate(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, <span class="keywordtype">int</span> conf);</div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> u[3][3]);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9]);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keywordtype">void</span> Rotate(<span class="keyword">const</span> <span class="keywordtype">double</span> m[9],<span class="keywordtype">int</span> nconf);</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordtype">void</span> Center();</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="namespaceKekulize.shtml">Kekulize</a>();</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keywordtype">bool</span> PerceiveKekuleBonds();</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <span class="keywordtype">void</span> NewPerceiveKekuleBonds();</div><div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keywordtype">bool</span> DeleteHydrogens();</div><div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;    <span class="keywordtype">bool</span> DeleteHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;    <span class="keywordtype">bool</span> DeletePolarHydrogens();</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    <span class="keywordtype">bool</span> DeleteNonPolarHydrogens();</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <span class="keywordtype">bool</span> DeleteHydrogen(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);</div><div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;    <span class="keywordtype">bool</span> AddHydrogens(<span class="keywordtype">bool</span> polaronly=<span class="keyword">false</span>,<span class="keywordtype">bool</span> correctForPH=<span class="keyword">false</span>, <span class="keywordtype">double</span> pH=7.4);</div><div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordtype">bool</span> AddHydrogens(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*);</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    <span class="keywordtype">bool</span> AddPolarHydrogens();</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keywordtype">bool</span> AddNonPolarHydrogens();</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordtype">bool</span> AddNewHydrogens(<a class="code" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74c">HydrogenType</a> whichHydrogen, <span class="keywordtype">bool</span> correctForPH=<span class="keyword">false</span>, <span class="keywordtype">double</span> pH=7.4);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keywordtype">bool</span> StripSalts(<span class="keywordtype">int</span> threshold=0);</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    std::vector&lt;OBMol&gt; Separate(<span class="keywordtype">int</span> StartIndex=1);</div><div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordtype">bool</span> GetNextFragment( <a class="code" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a>&amp; iter, <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; newMol );</div><div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;    <span class="keywordtype">bool</span> ConvertDativeBonds();</div><div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;    <span class="keywordtype">bool</span> MakeDativeBonds();</div><div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordtype">bool</span> ConvertZeroBonds();</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    <span class="keywordtype">bool</span> CorrectForPH(<span class="keywordtype">double</span> pH=7.4);</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="comment">// docs in mol.cpp</span></div><div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;    <span class="keywordtype">bool</span> AssignSpinMultiplicity(<span class="keywordtype">bool</span> NoImplicitH=<span class="keyword">false</span>);</div><div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    <span class="keywordtype">bool</span> AssignTotalChargeToAtoms(<span class="keywordtype">int</span> charge);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;</div><div class="line"><a name="l00531"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a0f0310aa379033994230e29e206106c7">  531</a></span>&#160;    <span class="keywordtype">void</span>   <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0f0310aa379033994230e29e206106c7">SetIsPatternStructure</a>()       { SetFlag(<a class="code" href="mol_8h.shtml#ad224f71d6aecaa29f7cb32ec475b8d58">OB_PATTERN_STRUCTURE</a>);}</div><div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;    <a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a> Center(<span class="keywordtype">int</span> nconf);</div><div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="keywordtype">void</span> SetTorsion(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<span class="keywordtype">double</span> ang);</div><div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div><div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div><div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keywordtype">void</span> FindSSSR();</div><div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;    <span class="keywordtype">void</span> FindLSSR();</div><div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keywordtype">void</span> FindRingAtomsAndBonds();</div><div class="line"><a name="l00554"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a3368586a5a86bd9684f4b25ac53d2e44">  554</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3368586a5a86bd9684f4b25ac53d2e44">FindChiralCenters</a>() { IsChiral(); }</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="comment">// documented in mol.cpp -- locates all atom indexes which can reach &#39;end&#39;</span></div><div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    <span class="keywordtype">void</span> FindChildren(std::vector&lt;int&gt; &amp; children,<span class="keywordtype">int</span> bgnIdx,<span class="keywordtype">int</span> endIdx);</div><div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;    <span class="comment">// documented in mol.cpp -- locates all atoms which can reach &#39;end&#39;</span></div><div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keywordtype">void</span> FindChildren(std::vector&lt;OBAtom*&gt;&amp; children,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* bgn,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>* end);</div><div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <span class="keywordtype">void</span> FindLargestFragment(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;frag);</div><div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <span class="keywordtype">void</span> ContigFragList(std::vector&lt;std::vector&lt;int&gt; &gt;&amp;);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordtype">void</span> Align(<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*,<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp;,<a class="code" href="classOpenBabel_1_1vector3.shtml">vector3</a>&amp;);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <span class="keywordtype">void</span> ConnectTheDots();</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;    <span class="keywordtype">void</span> PerceiveBondOrders();</div><div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keywordtype">void</span> FindAngles();</div><div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordtype">void</span> FindTorsions();</div><div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;    <span class="comment">// documented in mol.cpp: graph-theoretical distance for each atom</span></div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    <span class="keywordtype">bool</span>         GetGTDVector(std::vector&lt;int&gt; &amp;);</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;    <span class="comment">// documented in mol.cpp: graph-invariant index for each atom</span></div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordtype">void</span>         GetGIVector(std::vector&lt;unsigned int&gt; &amp;);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    <span class="comment">// documented in mol.cpp: calculate symmetry-unique identifiers</span></div><div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <span class="keywordtype">void</span>         GetGIDVector(std::vector&lt;unsigned int&gt; &amp;);</div><div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;</div><div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordtype">bool</span> Has2D(<span class="keywordtype">bool</span> Not3D=<span class="keyword">false</span>);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordtype">bool</span> Has3D();</div><div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    <span class="keywordtype">bool</span> HasNonZeroCoords();</div><div class="line"><a name="l00594"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a783c51919c69da3287d51f34b2fa53a0">  594</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a783c51919c69da3287d51f34b2fa53a0">HasAromaticPerceived</a>()     { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609">OB_AROMATIC_MOL</a>)); }</div><div class="line"><a name="l00596"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aac2c45d000ac10ad770ec5e5eff97f30">  596</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#aac2c45d000ac10ad770ec5e5eff97f30">HasSSSRPerceived</a>()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4">OB_SSSR_MOL</a>));     }</div><div class="line"><a name="l00598"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a3771eaf33a336f55348f80ca857a159f">  598</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a3771eaf33a336f55348f80ca857a159f">HasLSSRPerceived</a>()         { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ae62d8140a1f27fe185152e8ca29f2255">OB_LSSR_MOL</a>));     }</div><div class="line"><a name="l00600"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a0329d4256b426a4967afa867f415d06b">  600</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0329d4256b426a4967afa867f415d06b">HasRingAtomsAndBondsPerceived</a>(){<span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ae9ad3600741ed030f463badacb48cbf9">OB_RINGFLAGS_MOL</a>));}</div><div class="line"><a name="l00602"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a0ba2ebe76f1b15c48a8f1538efc8f9b4">  602</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a0ba2ebe76f1b15c48a8f1538efc8f9b4">HasAtomTypesPerceived</a>()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#abf2d91f3d8e6d4db13029a0130a262a5">OB_ATOMTYPES_MOL</a>));}</div><div class="line"><a name="l00604"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#adfe42a839d62e3d8f31ce3c28dc2e4e0">  604</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#adfe42a839d62e3d8f31ce3c28dc2e4e0">HasRingTypesPerceived</a>()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8">OB_RINGTYPES_MOL</a>));}</div><div class="line"><a name="l00606"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a39df67d7e225b9dd721b9b8c7df809ce">  606</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a39df67d7e225b9dd721b9b8c7df809ce">HasChiralityPerceived</a>()    { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#abdf1bef91d791e4ec64071377a06e491">OB_CHIRALITY_MOL</a>));}</div><div class="line"><a name="l00608"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a87c2cd2043f749d5433a98df4ad8277d">  608</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a87c2cd2043f749d5433a98df4ad8277d">HasPartialChargesPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0">OB_PCHARGE_MOL</a>));}</div><div class="line"><a name="l00610"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a908e2d394d3a47cf821014899344ca37">  610</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a908e2d394d3a47cf821014899344ca37">HasHybridizationPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a2609984a86f8eaca60bd0995ab1ff082">OB_HYBRID_MOL</a>));  }</div><div class="line"><a name="l00612"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a7fe699ef7fee62ca46743d6aa78bdea5">  612</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7fe699ef7fee62ca46743d6aa78bdea5">HasImplicitValencePerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254">OB_IMPVAL_MOL</a>));}</div><div class="line"><a name="l00614"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aafddb1ded7f589afbdd56062368602db">  614</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#aafddb1ded7f589afbdd56062368602db">HasKekulePerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#adb1c838e0460bae3347db0d94b4e63c7">OB_KEKULE_MOL</a>));         }</div><div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#afb25b05d950ca109bf9c6333b906a9ee">  616</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#afb25b05d950ca109bf9c6333b906a9ee">HasClosureBondsPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#aa9b307d4356f47b80ba6516405bea32e">OB_CLOSURE_MOL</a>));  }</div><div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ac31a6af8f2b96fa35170523b6318c459">  618</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac31a6af8f2b96fa35170523b6318c459">HasChainsPerceived</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a5aaff7bcb11a37508fe32d17ad57dea0">OB_CHAINS_MOL</a>));         }</div><div class="line"><a name="l00620"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aefc6e71556f0cd4afdd34e4a99d06025">  620</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#aefc6e71556f0cd4afdd34e4a99d06025">HasHydrogensAdded</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88">OB_H_ADDED_MOL</a>));         }</div><div class="line"><a name="l00622"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ab57a4b5dd9752e593e2fdb80f48909d8">  622</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ab57a4b5dd9752e593e2fdb80f48909d8">HasAromaticCorrected</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#ad34e5e48a2b7f4c149070647189d9d71">OB_AROM_CORRECTED_MOL</a>));}</div><div class="line"><a name="l00624"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#afc44b8ad27a62b9cfc670d4fd29bb52f">  624</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#afc44b8ad27a62b9cfc670d4fd29bb52f">IsCorrectedForPH</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#af3ca96a4c05940f8ed8fdc159b93656a">OB_PH_CORRECTED_MOL</a>));     }</div><div class="line"><a name="l00626"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a4a45f2c821b749250e070c3594289103">  626</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a4a45f2c821b749250e070c3594289103">HasSpinMultiplicityAssigned</a>() { <span class="keywordflow">return</span>(HasFlag(<a class="code" href="mol_8h.shtml#a1dcfd219e32e29f2aa96b01c4d95021a">OB_ATOMSPIN_MOL</a>)); }</div><div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordtype">bool</span> IsChiral();</div><div class="line"><a name="l00630"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a31d1053aee208079bcc3c5e1884774df">  630</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a31d1053aee208079bcc3c5e1884774df">Empty</a>()                       { <span class="keywordflow">return</span>(_natoms == 0);          }</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;</div><div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <span class="keywordtype">int</span>     NumConformers()    { <span class="keywordflow">return</span>((_vconf.empty())?0:static_cast&lt;int&gt; (_vconf.size())); }</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordtype">void</span>    SetConformers(std::vector&lt;double*&gt; &amp;v);</div><div class="line"><a name="l00640"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a7b80e7015d000221e0cc92fd3cf6f9e4">  640</a></span>&#160;    <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBMol.shtml#a7b80e7015d000221e0cc92fd3cf6f9e4">AddConformer</a>(<span class="keywordtype">double</span> *f)    {  _vconf.push_back(f);    }</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    <span class="keywordtype">void</span>    SetConformer(<span class="keywordtype">int</span> i);</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <span class="keywordtype">void</span>    CopyConformer(<span class="keywordtype">double</span>* c,<span class="keywordtype">int</span> nconf);</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordtype">void</span>    DeleteConformer(<span class="keywordtype">int</span> nconf);</div><div class="line"><a name="l00650"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aeae833c9dcc30e182f18554bd40242d6">  650</a></span>&#160;    <span class="keywordtype">double</span>  *<a class="code" href="classOpenBabel_1_1OBMol.shtml#aeae833c9dcc30e182f18554bd40242d6">GetConformer</a>(<span class="keywordtype">int</span> i)       {  <span class="keywordflow">return</span>(_vconf[i]);      }</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;    <span class="keywordtype">void</span>    SetEnergies(std::vector&lt;double&gt; &amp;energies);</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    std::vector&lt;double&gt; GetEnergies();</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;    <span class="keywordtype">double</span>  GetEnergy(<span class="keywordtype">int</span> ci);</div><div class="line"><a name="l00660"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a3726424b4f6e52a0af2b63da9e2e19f7">  660</a></span>&#160;    <span class="keywordtype">double</span>  *<a class="code" href="classOpenBabel_1_1OBMol.shtml#a3726424b4f6e52a0af2b63da9e2e19f7">BeginConformer</a>(std::vector&lt;double*&gt;::iterator&amp;i)</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    { i = _vconf.begin();</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;      <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }</div><div class="line"><a name="l00665"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a684fbfa582ca28f08da6fa19bb6d2596">  665</a></span>&#160;    <span class="keywordtype">double</span>  *<a class="code" href="classOpenBabel_1_1OBMol.shtml#a684fbfa582ca28f08da6fa19bb6d2596">NextConformer</a>(std::vector&lt;double*&gt;::iterator&amp;i)</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    { ++i;</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;      <span class="keywordflow">return</span>((i == _vconf.end()) ? NULL:*i); }</div><div class="line"><a name="l00669"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a5246a44bf82aa31c2f428665db94bfb8">  669</a></span>&#160;    std::vector&lt;double*&gt; &amp;<a class="code" href="classOpenBabel_1_1OBMol.shtml#a5246a44bf82aa31c2f428665db94bfb8">GetConformers</a>() {   <span class="keywordflow">return</span>(_vconf);     }</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;    <a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> BeginAtoms()   { <span class="keywordflow">return</span> _vatom.begin(); }</div><div class="line"><a name="l00677"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">  677</a></span>&#160;    <a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">EndAtoms</a>()    { <span class="keywordflow">return</span> _vatom.begin() + NumAtoms() ; }</div><div class="line"><a name="l00679"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">  679</a></span>&#160;    <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">BeginBonds</a>()   { <span class="keywordflow">return</span> _vbond.begin(); }</div><div class="line"><a name="l00681"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">  681</a></span>&#160;    <a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">EndBonds</a>()     { <span class="keywordflow">return</span> _vbond.begin() + NumBonds() ; }</div><div class="line"><a name="l00683"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a35e5693cfdc3b993440d29540ab0509d">  683</a></span>&#160;    <a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a35e5693cfdc3b993440d29540ab0509d">BeginResidues</a>() { <span class="keywordflow">return</span> _residue.begin(); }</div><div class="line"><a name="l00685"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a62b81baba8ee7151f0aae8fb01e90358">  685</a></span>&#160;    <a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> <a class="code" href="classOpenBabel_1_1OBMol.shtml#a62b81baba8ee7151f0aae8fb01e90358">EndResidues</a>()   { <span class="keywordflow">return</span> _residue.end();   }</div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div><div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *BeginAtom(<a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;i);</div><div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;    <a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *NextAtom(<a class="code" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;i);</div><div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *BeginBond(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;i);</div><div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *NextBond(<a class="code" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;i);</div><div class="line"><a name="l00701"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a49f6fa37f54e72323ae1b9597fdca02e">  701</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *<a class="code" href="classOpenBabel_1_1OBMol.shtml#a49f6fa37f54e72323ae1b9597fdca02e">BeginResidue</a>(<a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;i)</div><div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    {</div><div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;      i = _residue.begin();</div><div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;      <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);</div><div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;    }</div><div class="line"><a name="l00708"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#af3747253310ab328967a8bcaf32842d3">  708</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *<a class="code" href="classOpenBabel_1_1OBMol.shtml#af3747253310ab328967a8bcaf32842d3">NextResidue</a>(<a class="code" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;i)</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    {</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;      ++i;</div><div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;      <span class="keywordflow">return</span>((i == _residue.end()) ? NULL:*i);</div><div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    }</div><div class="line"><a name="l00716"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#aa335b17e7c11424cf44f3420de73b8cf">  716</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *<a class="code" href="classOpenBabel_1_1OBMol.shtml#aa335b17e7c11424cf44f3420de73b8cf">BeginInternalCoord</a>(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)</div><div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    {</div><div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;      i = _internals.begin();</div><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;      <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);</div><div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    }</div><div class="line"><a name="l00724"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">  724</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *<a class="code" href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">NextInternalCoord</a>(std::vector&lt;OBInternalCoord*&gt;::iterator &amp;i)</div><div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    {</div><div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;      ++i;</div><div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;      <span class="keywordflow">return</span>((i == _internals.end()) ? NULL:*i);</div><div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    }</div><div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;</div><div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;  };</div><div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;</div><div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  <span class="comment">// Utility function prototypes</span></div><div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;  <span class="comment">//tokenize and Trim declarations moved to base.h</span></div><div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;  <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span></div><div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(<span class="keywordtype">char</span> *str);</div><div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;  <span class="comment">// Deprecated -- use OBMessageHandler class instead (docs in obutil.cpp)</span></div><div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a>(std::string &amp;str);</div><div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">CartesianToInternal</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">InternalToCartesian</a>(std::vector&lt;OBInternalCoord*&gt;&amp;,<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;  <span class="comment">// Replace the last extension in str with a new one (docs in obutil.cpp)</span></div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  OBAPI std::string <a class="code" href="namespaceOpenBabel.shtml#ac1c62bdae6cf7a9195c470e7d0e29883">NewExtension</a>(std::string&amp;,<span class="keywordtype">char</span>*);</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;  <span class="comment">//global definitions</span></div><div class="line"><a name="l00748"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418">  748</a></span>&#160;<span class="comment"></span>  EXTERN  <a class="code" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>   <a class="code" href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418">etab</a>;</div><div class="line"><a name="l00751"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">  751</a></span>&#160;  EXTERN  <a class="code" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>      <a class="code" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>;</div><div class="line"><a name="l00753"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70">  753</a></span>&#160;  EXTERN  <a class="code" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a>   <a class="code" href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70">isotab</a>;</div><div class="line"><a name="l00755"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd">  755</a></span>&#160;  EXTERN  <a class="code" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>  <a class="code" href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd">aromtyper</a>;</div><div class="line"><a name="l00758"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">  758</a></span>&#160;  EXTERN  <a class="code" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>      <a class="code" href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">atomtyper</a>;</div><div class="line"><a name="l00760"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131">  760</a></span>&#160;  EXTERN  <a class="code" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>   <a class="code" href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131">chainsparser</a>;</div><div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;  OBERROR <span class="keyword">extern</span>  <a class="code" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> <a class="code" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">obErrorLog</a>;</div><div class="line"><a name="l00764"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7">  764</a></span>&#160;  EXTERN  <a class="code" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a>    <a class="code" href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7">resdat</a>;</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;</div><div class="line"><a name="l00767"></a><span class="lineno"><a class="line" href="namespaceOpenBabel_1_1detail.shtml">  767</a></span>&#160;  <span class="keyword">namespace </span>detail {</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> size = sizeof(T)&gt;</div><div class="line"><a name="l00771"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1detail_1_1max__value.shtml">  771</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml">max_value</a></div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    {</div><div class="line"><a name="l00773"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1detail_1_1max__value.shtml#ac7d461ddec7ac180a645b11e023314a8">  773</a></span>&#160;      <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">T</a> result = (<span class="keyword">static_cast&lt;</span><a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">T</a><span class="keyword">&gt;</span>(0xFF) &lt;&lt; (size-1)*8) + <a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml">max_value&lt;T, size-1&gt;::result</a>;</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    };</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00778"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1detail_1_1max__value_3_01T_00_010_01_4.shtml">  778</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml">max_value</a>&lt;<a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">T</a>, 0&gt;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    {</div><div class="line"><a name="l00780"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1detail_1_1max__value_3_01T_00_010_01_4.shtml#ac7d461ddec7ac180a645b11e023314a8">  780</a></span>&#160;      <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">T</a> result = 0;</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    };</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  }</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;  <span class="comment">// No unique id</span></div><div class="line"><a name="l00785"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">  785</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">NoId</a> = <a class="code" href="structOpenBabel_1_1detail_1_1max__value.shtml">detail::max_value&lt;unsigned long&gt;::result</a>;</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  <span class="comment">//Utility Macros</span></div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="preprocessor">#ifndef BUFF_SIZE</span></div><div class="line"><a name="l00790"></a><span class="lineno"><a class="line" href="mol_8h.shtml#a6c7cd32e1bac137f05e4a752b4ad10af">  790</a></span>&#160;<span class="preprocessor">#define BUFF_SIZE 32768</span></div><div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="preprocessor">#ifndef EQ</span></div><div class="line"><a name="l00794"></a><span class="lineno"><a class="line" href="mol_8h.shtml#ac07acfbb082b04f5bea72998c8976b3c">  794</a></span>&#160;<span class="preprocessor">#define EQ(a,b) (!strcmp((a), (b)))</span></div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="preprocessor">#ifndef EQn</span></div><div class="line"><a name="l00798"></a><span class="lineno"><a class="line" href="mol_8h.shtml#aff7047a291906910f63dcfc17c88ed12">  798</a></span>&#160;<span class="preprocessor">#define EQn(a,b,n) (!strncmp((a), (b), (n)))</span></div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="preprocessor">#ifndef SQUARE</span></div><div class="line"><a name="l00802"></a><span class="lineno"><a class="line" href="mol_8h.shtml#aa1cf70a99e21bc2032e8867c6cafbb43">  802</a></span>&#160;<span class="preprocessor">#define SQUARE(x) ((x)*(x))</span></div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="preprocessor">#ifndef IsUnsatType</span></div><div class="line"><a name="l00806"></a><span class="lineno"><a class="line" href="mol_8h.shtml#ae7364e14af885f05220a63486ca6d516">  806</a></span>&#160;<span class="preprocessor">#define IsUnsatType(x)  (EQ(x,&quot;Car&quot;) || EQ(x,&quot;C2&quot;) || EQ(x,&quot;Sox&quot;) || EQ(x,&quot;Sac&quot;) || EQ(x,&quot;Pac&quot;) || EQ(x,&quot;So2&quot;))</span></div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;</div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="preprocessor">#ifndef __KCC</span></div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;  <span class="keyword">extern</span> <span class="stringliteral">&quot;C&quot;</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;  {</div><div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;    OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);</div><div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;    OBAPI <span class="keywordtype">void</span>  <a class="code" href="namespaceOpenBabel.shtml#a594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);</div><div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;    OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  }</div><div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a>(<span class="keywordtype">double</span> mat[3][3],<span class="keywordtype">double</span> rmat[9]);</div><div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a594933a93529376dbae80405cf23afa8">qtrfit</a> (<span class="keywordtype">double</span> *r,<span class="keywordtype">double</span> *f,<span class="keywordtype">int</span> size,<span class="keywordtype">double</span> u[3][3]);</div><div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;  OBAPI <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a>(<span class="keywordtype">double</span>*,<span class="keywordtype">double</span>*,<span class="keywordtype">int</span>);</div><div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;<span class="preprocessor">#endif // __KCC</span></div><div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;</div><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;<span class="comment">//  extern OBMol* (*CreateMolecule) (void);</span></div><div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div><div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;} <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;</div><div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;<span class="preprocessor">#endif // OB_MOL_H</span></div><div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a4b93b72694e8a9a970eee7f0b65ecf9a"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a4b93b72694e8a9a970eee7f0b65ecf9a">OpenBabel::OBMol::SetHybridizationPerceived</a></div><div class="ttdeci">void SetHybridizationPerceived()</div><div class="ttdoc">Mark that hybridization of all atoms has been assigned. </div><div class="ttdef"><b>Definition:</b> mol.h:402</div></div>
<div class="ttc" id="namespaceOpenBabel_1_1OBResidueIndex_shtml_a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce"><div class="ttname"><a href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">OpenBabel::OBResidueIndex::T</a></div><div class="ttdef"><b>Definition:</b> residue.h:340</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a3726424b4f6e52a0af2b63da9e2e19f7"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a3726424b4f6e52a0af2b63da9e2e19f7">OpenBabel::OBMol::BeginConformer</a></div><div class="ttdeci">double * BeginConformer(std::vector&lt; double *&gt;::iterator &amp;i)</div><div class="ttdef"><b>Definition:</b> mol.h:660</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_afb25b05d950ca109bf9c6333b906a9ee"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#afb25b05d950ca109bf9c6333b906a9ee">OpenBabel::OBMol::HasClosureBondsPerceived</a></div><div class="ttdeci">bool HasClosureBondsPerceived()</div><div class="ttdoc">Have ring &quot;closure&quot; bonds been assigned? (e.g., OBBond::IsClosure()) </div><div class="ttdef"><b>Definition:</b> mol.h:616</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a63bf8bb4886f7062b3a6b99c77a14d30"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">OpenBabel::OBMol::NextInternalCoord</a></div><div class="ttdeci">OBInternalCoord * NextInternalCoord(std::vector&lt; OBInternalCoord *&gt;::iterator &amp;i)</div><div class="ttdef"><b>Definition:</b> mol.h:724</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a8aa7959b427e1c630f14732c2ad642c8"><div class="ttname"><a href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">OpenBabel::get_rmat</a></div><div class="ttdeci">void get_rmat(double *, double *, double *, int)</div><div class="ttdef"><b>Definition:</b> obutil.cpp:1192</div></div>
<div class="ttc" id="vector3_8h_shtml"><div class="ttname"><a href="vector3_8h.shtml">vector3.h</a></div><div class="ttdoc">Handle 3D coordinates. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a39df67d7e225b9dd721b9b8c7df809ce"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a39df67d7e225b9dd721b9b8c7df809ce">OpenBabel::OBMol::HasChiralityPerceived</a></div><div class="ttdeci">bool HasChiralityPerceived()</div><div class="ttdoc">Has atom chirality been assigned? </div><div class="ttdef"><b>Definition:</b> mol.h:606</div></div>
<div class="ttc" id="mol_8h_shtml_a5aaff7bcb11a37508fe32d17ad57dea0"><div class="ttname"><a href="mol_8h.shtml#a5aaff7bcb11a37508fe32d17ad57dea0">OB_CHAINS_MOL</a></div><div class="ttdeci">#define OB_CHAINS_MOL</div><div class="ttdoc">Biomolecular chains and residues have been set. See OBChainsParser. </div><div class="ttdef"><b>Definition:</b> mol.h:94</div></div>
<div class="ttc" id="mol_8h_shtml_ae62d8140a1f27fe185152e8ca29f2255"><div class="ttname"><a href="mol_8h.shtml#ae62d8140a1f27fe185152e8ca29f2255">OB_LSSR_MOL</a></div><div class="ttdeci">#define OB_LSSR_MOL</div><div class="ttdoc">Largest Set of Smallest Rings (LSSR) done. See OBRing and OBMol::FindLSSR. </div><div class="ttdef"><b>Definition:</b> mol.h:104</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a81afb84c73fe3e57e8edd5a472e175f6"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">OpenBabel::OBMol::EndAtoms</a></div><div class="ttdeci">OBAtomIterator EndAtoms()</div><div class="ttdef"><b>Definition:</b> mol.h:677</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ab81925dbd111f3bf1733a4cbba547131"><div class="ttname"><a href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131">OpenBabel::chainsparser</a></div><div class="ttdeci">OBChainsParser chainsparser</div><div class="ttdoc">Global OBChainsParser for detecting macromolecular chains and residues. </div><div class="ttdef"><b>Definition:</b> mol.h:760</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a394eef44b3dd6a9174067715712c2d16"><div class="ttname"><a href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">OpenBabel::obErrorLog</a></div><div class="ttdeci">OBMessageHandler obErrorLog</div><div class="ttdoc">Global OBMessageHandler error handler. </div><div class="ttdef"><b>Definition:</b> obconversion.h:55</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a2c5374c2c0b42dee2fd36cd475a3cb1c"><div class="ttname"><a href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">OpenBabel::superimpose</a></div><div class="ttdeci">double superimpose(double *, double *, int)</div><div class="ttdef"><b>Definition:</b> obutil.cpp:1098</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a2f0695eb7d6ff6321032d88655ae8d25"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a2f0695eb7d6ff6321032d88655ae8d25">OpenBabel::OBMol::NumAtoms</a></div><div class="ttdeci">unsigned int NumAtoms() const</div><div class="ttdef"><b>Definition:</b> mol.h:275</div></div>
<div class="ttc" id="base_8h_shtml"><div class="ttname"><a href="base_8h.shtml">base.h</a></div><div class="ttdoc">Base classes to build a graph. </div></div>
<div class="ttc" id="mol_8h_shtml_a2609984a86f8eaca60bd0995ab1ff082"><div class="ttname"><a href="mol_8h.shtml#a2609984a86f8eaca60bd0995ab1ff082">OB_HYBRID_MOL</a></div><div class="ttdeci">#define OB_HYBRID_MOL</div><div class="ttdoc">Atom hybridizations have been set. See OBAtomTyper. </div><div class="ttdef"><b>Definition:</b> mol.h:80</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aba303a094727738eb901cafbecd7c196"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aba303a094727738eb901cafbecd7c196">OpenBabel::OBMol::SetSSSRPerceived</a></div><div class="ttdeci">void SetSSSRPerceived()</div><div class="ttdoc">Mark that Smallest Set of Smallest Rings has been run (see OBRing class) </div><div class="ttdef"><b>Definition:</b> mol.h:386</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aa809ea95ee07e61c6dc00ae710d8a749"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aa809ea95ee07e61c6dc00ae710d8a749">OpenBabel::OBMol::SetAtomTypesPerceived</a></div><div class="ttdeci">void SetAtomTypesPerceived()</div><div class="ttdoc">Mark that atom types have been perceived (see OBAtomTyper for details) </div><div class="ttdef"><b>Definition:</b> mol.h:392</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_adc36b31f851665247f3c576cdd7aa0af"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#adc36b31f851665247f3c576cdd7aa0af">OpenBabel::OBMol::IncrementMod</a></div><div class="ttdeci">void IncrementMod()</div><div class="ttdef"><b>Definition:</b> mol.h:261</div></div>
<div class="ttc" id="bond_8h_shtml"><div class="ttname"><a href="bond_8h.shtml">bond.h</a></div><div class="ttdoc">Handle bonds. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml">OpenBabel::OBConversion</a></div><div class="ttdoc">Class to convert from one format to another. </div><div class="ttdef"><b>Definition:</b> obconversion.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a3c7208419c7703e947e9a1c365838b98"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98">OpenBabel::OBMol::_vbond</a></div><div class="ttdeci">std::vector&lt; OBBond * &gt; _vbond</div><div class="ttdoc">vector of bonds </div><div class="ttdef"><b>Definition:</b> mol.h:122</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aa4a61b1d913f2bee1e0ed5d9daf26549"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549">OpenBabel::OBMol::_flags</a></div><div class="ttdeci">int _flags</div><div class="ttdoc">bitfield of flags </div><div class="ttdef"><b>Definition:</b> mol.h:116</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMessageHandler_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMessageHandler.shtml">OpenBabel::OBMessageHandler</a></div><div class="ttdoc">Handle error messages, warnings, debugging information and the like. </div><div class="ttdef"><b>Definition:</b> oberror.h:106</div></div>
<div class="ttc" id="mol_8h_shtml_a488eaf115c8c8e3f8ac24384f80f6f88"><div class="ttname"><a href="mol_8h.shtml#a488eaf115c8c8e3f8ac24384f80f6f88">OB_H_ADDED_MOL</a></div><div class="ttdeci">#define OB_H_ADDED_MOL</div><div class="ttdoc">Hyrdogen atoms have been added where needed. See OBMol::AddHydrogens. </div><div class="ttdef"><b>Definition:</b> mol.h:88</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_af56db37c6a9f7049ed16469ab0a270c2"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#af56db37c6a9f7049ed16469ab0a270c2">OpenBabel::OBMol::SetCorrectedForPH</a></div><div class="ttdeci">void SetCorrectedForPH()</div><div class="ttdef"><b>Definition:</b> mol.h:411</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ac31a6af8f2b96fa35170523b6318c459"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ac31a6af8f2b96fa35170523b6318c459">OpenBabel::OBMol::HasChainsPerceived</a></div><div class="ttdeci">bool HasChainsPerceived()</div><div class="ttdoc">Have biomolecule chains and residues been assigned by OBChainsParser? </div><div class="ttdef"><b>Definition:</b> mol.h:618</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a7a92cb97f8aa52f145b2e928cf480a07"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07">OpenBabel::OBMol::_totalSpin</a></div><div class="ttdeci">unsigned int _totalSpin</div><div class="ttdoc">Total spin on the molecule (if not specified, assumes lowest possible spin) </div><div class="ttdef"><b>Definition:</b> mol.h:126</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aa335b17e7c11424cf44f3420de73b8cf"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aa335b17e7c11424cf44f3420de73b8cf">OpenBabel::OBMol::BeginInternalCoord</a></div><div class="ttdeci">OBInternalCoord * BeginInternalCoord(std::vector&lt; OBInternalCoord *&gt;::iterator &amp;i)</div><div class="ttdef"><b>Definition:</b> mol.h:716</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a35082995377e56142ee5a9fd351c7a70"><div class="ttname"><a href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70">OpenBabel::isotab</a></div><div class="ttdeci">OBIsotopeTable isotab</div><div class="ttdoc">Global OBIsotopeTable for isotope properties. </div><div class="ttdef"><b>Definition:</b> mol.h:753</div></div>
<div class="ttc" id="mol_8h_shtml_af3ca96a4c05940f8ed8fdc159b93656a"><div class="ttname"><a href="mol_8h.shtml#af3ca96a4c05940f8ed8fdc159b93656a">OB_PH_CORRECTED_MOL</a></div><div class="ttdeci">#define OB_PH_CORRECTED_MOL</div><div class="ttdoc">pH correction for hydrogen addition has been performed. </div><div class="ttdef"><b>Definition:</b> mol.h:90</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a1dda4ed41c70aef0a361682dd9b2b0f9"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9">OpenBabel::OBMol::_title</a></div><div class="ttdeci">std::string _title</div><div class="ttdoc">Molecule title. </div><div class="ttdef"><b>Definition:</b> mol.h:119</div></div>
<div class="ttc" id="mol_8h_shtml_aaba06b0d4348eedb3f32f764d4c9b9f8"><div class="ttname"><a href="mol_8h.shtml#aaba06b0d4348eedb3f32f764d4c9b9f8">OB_RINGTYPES_MOL</a></div><div class="ttdeci">#define OB_RINGTYPES_MOL</div><div class="ttdoc">Ring typing has been performed. See OBRingTyper. </div><div class="ttdef"><b>Definition:</b> mol.h:100</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:69</div></div>
<div class="ttc" id="internalcoord_8h_shtml"><div class="ttname"><a href="internalcoord_8h.shtml">internalcoord.h</a></div><div class="ttdoc">Declaration of OBInternalCoord class, conversion between Cartesian and Z-matrix form. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ae1c29d0efe6187e8726962008c81e956"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956">OpenBabel::OBMol::_residue</a></div><div class="ttdeci">std::vector&lt; OBResidue * &gt; _residue</div><div class="ttdoc">Residue information (if applicable) </div><div class="ttdef"><b>Definition:</b> mol.h:132</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a3368586a5a86bd9684f4b25ac53d2e44"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a3368586a5a86bd9684f4b25ac53d2e44">OpenBabel::OBMol::FindChiralCenters</a></div><div class="ttdeci">void FindChiralCenters()</div><div class="ttdef"><b>Definition:</b> mol.h:554</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a0ba2ebe76f1b15c48a8f1538efc8f9b4"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a0ba2ebe76f1b15c48a8f1538efc8f9b4">OpenBabel::OBMol::HasAtomTypesPerceived</a></div><div class="ttdeci">bool HasAtomTypesPerceived()</div><div class="ttdoc">Have atom types been assigned by OBAtomTyper? </div><div class="ttdef"><b>Definition:</b> mol.h:602</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ad93165c379393f8eb17506f1f9820a1a"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a">OpenBabel::OBMol::_energy</a></div><div class="ttdeci">double _energy</div><div class="ttdoc">heat of formation </div><div class="ttdef"><b>Definition:</b> mol.h:129</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aeae833c9dcc30e182f18554bd40242d6"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aeae833c9dcc30e182f18554bd40242d6">OpenBabel::OBMol::GetConformer</a></div><div class="ttdeci">double * GetConformer(int i)</div><div class="ttdef"><b>Definition:</b> mol.h:650</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a47b63124c405f9c2ecdb766c6de9c56e"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a47b63124c405f9c2ecdb766c6de9c56e">OpenBabel::OBMol::SetHydrogensAdded</a></div><div class="ttdeci">void SetHydrogensAdded()</div><div class="ttdoc">Mark that explicit hydrogen atoms have been added. </div><div class="ttdef"><b>Definition:</b> mol.h:410</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a31d1053aee208079bcc3c5e1884774df"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a31d1053aee208079bcc3c5e1884774df">OpenBabel::OBMol::Empty</a></div><div class="ttdeci">bool Empty()</div><div class="ttdoc">Are there any atoms in this molecule? </div><div class="ttdef"><b>Definition:</b> mol.h:630</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a7fe699ef7fee62ca46743d6aa78bdea5"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a7fe699ef7fee62ca46743d6aa78bdea5">OpenBabel::OBMol::HasImplicitValencePerceived</a></div><div class="ttdeci">bool HasImplicitValencePerceived()</div><div class="ttdoc">Has implicit hydrogen valence been assigned by OBAtomTyper? </div><div class="ttdef"><b>Definition:</b> mol.h:612</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aa21ddf3d7c7164e6e72d0228d75b974c"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aa21ddf3d7c7164e6e72d0228d75b974c">OpenBabel::OBMol::UnsetLSSRPerceived</a></div><div class="ttdeci">void UnsetLSSRPerceived()</div><div class="ttdoc">Mark that Largest Set of Smallest Rings will need to be run again if required (see OBRing class) ...</div><div class="ttdef"><b>Definition:</b> mol.h:419</div></div>
<div class="ttc" id="mol_8h_shtml_abdf1bef91d791e4ec64071377a06e491"><div class="ttname"><a href="mol_8h.shtml#abdf1bef91d791e4ec64071377a06e491">OB_CHIRALITY_MOL</a></div><div class="ttdeci">#define OB_CHIRALITY_MOL</div><div class="ttdoc">Chirality detection has been performed. See OBMol::IsChiral. </div><div class="ttdef"><b>Definition:</b> mol.h:76</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a783c51919c69da3287d51f34b2fa53a0"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a783c51919c69da3287d51f34b2fa53a0">OpenBabel::OBMol::HasAromaticPerceived</a></div><div class="ttdeci">bool HasAromaticPerceived()</div><div class="ttdoc">Has aromatic perception been performed? </div><div class="ttdef"><b>Definition:</b> mol.h:594</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_adc2702cffcab0a0d6907958e3327284b"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#adc2702cffcab0a0d6907958e3327284b">OpenBabel::OBMol::SetDimension</a></div><div class="ttdeci">void SetDimension(unsigned short int d)</div><div class="ttdoc">Set the dimension of this molecule (i.e., 0, 1 , 2, 3) </div><div class="ttdef"><b>Definition:</b> mol.h:364</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a6c2a9726c57abf03a40339776f5d9a0b"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b">OpenBabel::OBMol::_internals</a></div><div class="ttdeci">std::vector&lt; OBInternalCoord * &gt; _internals</div><div class="ttdoc">Internal Coordinates (if applicable) </div><div class="ttdef"><b>Definition:</b> mol.h:133</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a99dab86ea7c23d635f350a07644c16a6"><div class="ttname"><a href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">OpenBabel::NoId</a></div><div class="ttdeci">static const unsigned long NoId</div><div class="ttdef"><b>Definition:</b> mol.h:785</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a723933398f0402a92916d1cfcb8dadd6"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">OpenBabel::OBMol::ReserveAtoms</a></div><div class="ttdeci">void ReserveAtoms(int natoms)</div><div class="ttdef"><b>Definition:</b> mol.h:165</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ac4ea48df79e239b506d3501dd42adde9"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">OpenBabel::OBMol::BeginBonds</a></div><div class="ttdeci">OBBondIterator BeginBonds()</div><div class="ttdef"><b>Definition:</b> mol.h:679</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a0656401ba8b19bc9b9f2d3e8e833d3aa"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a0656401ba8b19bc9b9f2d3e8e833d3aa">OpenBabel::OBMol::SetRingAtomsAndBondsPerceived</a></div><div class="ttdeci">void SetRingAtomsAndBondsPerceived()</div><div class="ttdoc">Mark that rings have been perceived (see OBRing class for details) </div><div class="ttdef"><b>Definition:</b> mol.h:390</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ab57a4b5dd9752e593e2fdb80f48909d8"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ab57a4b5dd9752e593e2fdb80f48909d8">OpenBabel::OBMol::HasAromaticCorrected</a></div><div class="ttdeci">bool HasAromaticCorrected()</div><div class="ttdoc">Have aromatic nitrogens been &quot;corrected?&quot; (deprecated) </div><div class="ttdef"><b>Definition:</b> mol.h:622</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a594933a93529376dbae80405cf23afa8"><div class="ttname"><a href="namespaceOpenBabel.shtml#a594933a93529376dbae80405cf23afa8">OpenBabel::qtrfit</a></div><div class="ttdeci">void qtrfit(double *r, double *f, int size, double u[3][3])</div><div class="ttdef"><b>Definition:</b> obutil.cpp:681</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a32ba50e0b43cb1dfdf1978d1e72099c5"><div class="ttname"><a href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">OpenBabel::ThrowError</a></div><div class="ttdeci">void ThrowError(char *str)</div><div class="ttdef"><b>Definition:</b> obutil.cpp:50</div></div>
<div class="ttc" id="mol_8h_shtml_adb1c838e0460bae3347db0d94b4e63c7"><div class="ttname"><a href="mol_8h.shtml#adb1c838e0460bae3347db0d94b4e63c7">OB_KEKULE_MOL</a></div><div class="ttdeci">#define OB_KEKULE_MOL</div><div class="ttdoc">Kekule form has been set. See OBMol::Kekulize. </div><div class="ttdef"><b>Definition:</b> mol.h:84</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aafddb1ded7f589afbdd56062368602db"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aafddb1ded7f589afbdd56062368602db">OpenBabel::OBMol::HasKekulePerceived</a></div><div class="ttdeci">bool HasKekulePerceived()</div><div class="ttdoc">Has aromaticity and Kekule forms been assigned by Kekulize? </div><div class="ttdef"><b>Definition:</b> mol.h:614</div></div>
<div class="ttc" id="mol_8h_shtml_aade7aaf66074d41ccc89a88fde187ef0"><div class="ttname"><a href="mol_8h.shtml#aade7aaf66074d41ccc89a88fde187ef0">OB_PCHARGE_MOL</a></div><div class="ttdeci">#define OB_PCHARGE_MOL</div><div class="ttdoc">Partial charges have been set or percieved. </div><div class="ttdef"><b>Definition:</b> mol.h:78</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a36c0ee580e088fa888f7d96c16e969bd"><div class="ttname"><a href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd">OpenBabel::aromtyper</a></div><div class="ttdeci">OBAromaticTyper aromtyper</div><div class="ttdoc">Global OBAromaticTyper for detecting aromatic atoms and bonds. </div><div class="ttdef"><b>Definition:</b> mol.h:755</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a88f39becfe74f62c9d0ffedfb4098b77"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a88f39becfe74f62c9d0ffedfb4098b77">OpenBabel::OBMol::UnsetAromaticPerceived</a></div><div class="ttdeci">void UnsetAromaticPerceived()</div><div class="ttdef"><b>Definition:</b> mol.h:416</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aecd431b2cfaefa64d54c2dc4088551fb"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aecd431b2cfaefa64d54c2dc4088551fb">OpenBabel::OBMol::SetAromaticPerceived</a></div><div class="ttdeci">void SetAromaticPerceived()</div><div class="ttdoc">Mark that aromaticity has been perceived for this molecule (see OBAromaticTyper) </div><div class="ttdef"><b>Definition:</b> mol.h:384</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a717e026b570e71d0e648d851d34b6482"><div class="ttname"><a href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">OpenBabel::atomtyper</a></div><div class="ttdeci">OBAtomTyper atomtyper</div><div class="ttdef"><b>Definition:</b> mol.h:758</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ab78fa0a100d47ad2beb88c7cabb80e62"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ab78fa0a100d47ad2beb88c7cabb80e62">OpenBabel::OBMol::SetEnergy</a></div><div class="ttdeci">void SetEnergy(double energy)</div><div class="ttdoc">Set the heat of formation for this molecule (in kcal/mol) </div><div class="ttdef"><b>Definition:</b> mol.h:362</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a5ef07c8230811964a209e423abea11d2"><div class="ttname"><a href="namespaceOpenBabel.shtml#a5ef07c8230811964a209e423abea11d2">OpenBabel::CreateAtom</a></div><div class="ttdeci">static int CreateAtom(Pattern *, AtomExpr *, int, int vb=0)</div><div class="ttdef"><b>Definition:</b> parsmart.cpp:448</div></div>
<div class="ttc" id="mol_8h_shtml_ae9ad3600741ed030f463badacb48cbf9"><div class="ttname"><a href="mol_8h.shtml#ae9ad3600741ed030f463badacb48cbf9">OB_RINGFLAGS_MOL</a></div><div class="ttdeci">#define OB_RINGFLAGS_MOL</div><div class="ttdoc">Ring flags have been set: See OBRing::FindRingAtomsAndBonds. </div><div class="ttdef"><b>Definition:</b> mol.h:70</div></div>
<div class="ttc" id="classOpenBabel_1_1OBTypeTable_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBTypeTable.shtml">OpenBabel::OBTypeTable</a></div><div class="ttdoc">Atom Type Translation Table. </div><div class="ttdef"><b>Definition:</b> data.h:338</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a5246a44bf82aa31c2f428665db94bfb8"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a5246a44bf82aa31c2f428665db94bfb8">OpenBabel::OBMol::GetConformers</a></div><div class="ttdeci">std::vector&lt; double * &gt; &amp; GetConformers()</div><div class="ttdef"><b>Definition:</b> mol.h:669</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aed11ccd81d7abaccbdf10486a5ae0402"><div class="ttname"><a href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OpenBabel::OBAtomIterator</a></div><div class="ttdeci">std::vector&lt; OBAtom * &gt;::iterator OBAtomIterator</div><div class="ttdoc">A standard iterator over a vector of atoms. </div><div class="ttdef"><b>Definition:</b> atom.h:48</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ad07702b91130d560479a679ae1a536d2"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2">OpenBabel::OBMol::_bondIds</a></div><div class="ttdeci">std::vector&lt; OBBond * &gt; _bondIds</div><div class="ttdoc">vector of bonds </div><div class="ttdef"><b>Definition:</b> mol.h:123</div></div>
<div class="ttc" id="classOpenBabel_1_1OBChainsParser_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBChainsParser.shtml">OpenBabel::OBChainsParser</a></div><div class="ttdoc">Perceives peptide or nucleotide chains and residues in an OBMol. </div><div class="ttdef"><b>Definition:</b> chains.h:49</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a4dcfbb9780f44d5fca2effbc30b17ce0"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a4dcfbb9780f44d5fca2effbc30b17ce0">OpenBabel::OBMol::GetEnergy</a></div><div class="ttdeci">double GetEnergy() const</div><div class="ttdef"><b>Definition:</b> mol.h:329</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ab8d4d5690031703bcccb95ddbe7ebf0a"><div class="ttname"><a href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">OpenBabel::ttab</a></div><div class="ttdeci">OBTypeTable ttab</div><div class="ttdef"><b>Definition:</b> mol.h:751</div></div>
<div class="ttc" id="data_8h_shtml"><div class="ttname"><a href="data_8h.shtml">data.h</a></div><div class="ttdoc">Global data and resource file parsers. </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a54495d3eb8f9749d0237e6bda59e0abe"><div class="ttname"><a href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OpenBabel::OBBondIterator</a></div><div class="ttdeci">std::vector&lt; OBBond * &gt;::iterator OBBondIterator</div><div class="ttdoc">A standard iterator over a vector of bonds. </div><div class="ttdef"><b>Definition:</b> atom.h:46</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ad3bcdbfad8eedc0452fe543badd080d5"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5">OpenBabel::OBMol::_vatom</a></div><div class="ttdeci">std::vector&lt; OBAtom * &gt; _vatom</div><div class="ttdoc">vector of atoms </div><div class="ttdef"><b>Definition:</b> mol.h:120</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a684fbfa582ca28f08da6fa19bb6d2596"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a684fbfa582ca28f08da6fa19bb6d2596">OpenBabel::OBMol::NextConformer</a></div><div class="ttdeci">double * NextConformer(std::vector&lt; double *&gt;::iterator &amp;i)</div><div class="ttdef"><b>Definition:</b> mol.h:665</div></div>
<div class="ttc" id="namespaceKekulize_shtml"><div class="ttname"><a href="namespaceKekulize.shtml">Kekulize</a></div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aac15077eefb9e377d3c400f1f2273826"><div class="ttname"><a href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">OpenBabel::CartesianToInternal</a></div><div class="ttdeci">void CartesianToInternal(std::vector&lt; OBInternalCoord *&gt; &amp;, OBMol &amp;)</div><div class="ttdoc">Convert Cartesian XYZ to a set of OBInternalCoord coordinates. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:542</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a3be6b6496e799b9308b6c1beb927c265"><div class="ttname"><a href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">OpenBabel::InternalToCartesian</a></div><div class="ttdeci">void InternalToCartesian(std::vector&lt; OBInternalCoord *&gt; &amp;, OBMol &amp;)</div><div class="ttdoc">Convert set of OBInternalCoord coordinates into Cartesian XYZ. </div><div class="ttdef"><b>Definition:</b> obutil.cpp:439</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a706bc4f751bf06cf864893451a7d21e4"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4">OpenBabel::OBMol::_c</a></div><div class="ttdeci">double * _c</div><div class="ttdoc">coordinate array </div><div class="ttdef"><b>Definition:</b> mol.h:127</div></div>
<div class="ttc" id="mol_8h_shtml_a220b0e4aac833823ef37f6d10ac7a254"><div class="ttname"><a href="mol_8h.shtml#a220b0e4aac833823ef37f6d10ac7a254">OB_IMPVAL_MOL</a></div><div class="ttdeci">#define OB_IMPVAL_MOL</div><div class="ttdoc">Implicit valence has been set. See OBAtomTyper. </div><div class="ttdef"><b>Definition:</b> mol.h:82</div></div>
<div class="ttc" id="classOpenBabel_1_1OBInternalCoord_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBInternalCoord.shtml">OpenBabel::OBInternalCoord</a></div><div class="ttdoc">Used to transform from z-matrix to cartesian coordinates. </div><div class="ttdef"><b>Definition:</b> internalcoord.h:61</div></div>
<div class="ttc" id="classOpenBabel_1_1OBIsotopeTable_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBIsotopeTable.shtml">OpenBabel::OBIsotopeTable</a></div><div class="ttdoc">Table of atomic isotope masses. </div><div class="ttdef"><b>Definition:</b> data.h:208</div></div>
<div class="ttc" id="classOpenBabel_1_1OBElementTable_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBElementTable.shtml">OpenBabel::OBElementTable</a></div><div class="ttdoc">Periodic Table of the Elements. </div><div class="ttdef"><b>Definition:</b> data.h:152</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a62b81baba8ee7151f0aae8fb01e90358"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a62b81baba8ee7151f0aae8fb01e90358">OpenBabel::OBMol::EndResidues</a></div><div class="ttdeci">OBResidueIterator EndResidues()</div><div class="ttdef"><b>Definition:</b> mol.h:685</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a49f6fa37f54e72323ae1b9597fdca02e"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a49f6fa37f54e72323ae1b9597fdca02e">OpenBabel::OBMol::BeginResidue</a></div><div class="ttdeci">OBResidue * BeginResidue(OBResidueIterator &amp;i)</div><div class="ttdef"><b>Definition:</b> mol.h:701</div></div>
<div class="ttc" id="classOpenBabel_1_1vector3_shtml"><div class="ttname"><a href="classOpenBabel_1_1vector3.shtml">OpenBabel::vector3</a></div><div class="ttdoc">Represents a vector in 3-dimensional real space. </div><div class="ttdef"><b>Definition:</b> vector3.h:45</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aac2c45d000ac10ad770ec5e5eff97f30"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aac2c45d000ac10ad770ec5e5eff97f30">OpenBabel::OBMol::HasSSSRPerceived</a></div><div class="ttdeci">bool HasSSSRPerceived()</div><div class="ttdoc">Has the smallest set of smallest rings (FindSSSR) been performed? </div><div class="ttdef"><b>Definition:</b> mol.h:596</div></div>
<div class="ttc" id="structOpenBabel_1_1detail_1_1max__value_shtml"><div class="ttname"><a href="structOpenBabel_1_1detail_1_1max__value.shtml">OpenBabel::detail::max_value</a></div><div class="ttdoc">a C++ template to return the maximum value of a type (e.g., int) </div><div class="ttdef"><b>Definition:</b> mol.h:771</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_af2ee11d3efe6526c2eb352bb67684e6c"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#af2ee11d3efe6526c2eb352bb67684e6c">OpenBabel::OBMol::AutomaticPartialCharge</a></div><div class="ttdeci">bool AutomaticPartialCharge()</div><div class="ttdoc">Get the current flag for whether partial charges are auto-determined. </div><div class="ttdef"><b>Definition:</b> mol.h:349</div></div>
<div class="ttc" id="residue_8h_shtml"><div class="ttname"><a href="residue_8h.shtml">residue.h</a></div><div class="ttdoc">Defines for residue properties, names, etc. </div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac39166fa6f7c8df04002d2a94043d74c"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74c">OpenBabel::HydrogenType</a></div><div class="ttdeci">HydrogenType</div><div class="ttdef"><b>Definition:</b> mol.h:110</div></div>
<div class="ttc" id="chains_8h_shtml"><div class="ttname"><a href="chains_8h.shtml">chains.h</a></div><div class="ttdoc">Parse for macromolecule chains and residues. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ad646045c7f735c9ef05ba9e4bb768b7c"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ad646045c7f735c9ef05ba9e4bb768b7c">OpenBabel::OBMol::GetDimension</a></div><div class="ttdeci">unsigned short int GetDimension() const</div><div class="ttdef"><b>Definition:</b> mol.h:339</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidueData_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBResidueData.shtml">OpenBabel::OBResidueData</a></div><div class="ttdoc">Table of common biomolecule residues (for PDB or other files). </div><div class="ttdef"><b>Definition:</b> data.h:380</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ab0922e1fa0939499c024e1006433adf3"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ab0922e1fa0939499c024e1006433adf3">OpenBabel::OBMol::SetFlags</a></div><div class="ttdeci">void SetFlags(int flags)</div><div class="ttdef"><b>Definition:</b> mol.h:414</div></div>
<div class="ttc" id="ring_8h_shtml"><div class="ttname"><a href="ring_8h.shtml">ring.h</a></div><div class="ttdoc">Deal with rings, find smallest set of smallest rings (SSSR). </div></div>
<div class="ttc" id="mol_8h_shtml_ad34e5e48a2b7f4c149070647189d9d71"><div class="ttname"><a href="mol_8h.shtml#ad34e5e48a2b7f4c149070647189d9d71">OB_AROM_CORRECTED_MOL</a></div><div class="ttdeci">#define OB_AROM_CORRECTED_MOL</div><div class="ttdoc">Aromaticity has been corrected. See OBAtomTyper::CorrectAromaticNitrogens. </div><div class="ttdef"><b>Definition:</b> mol.h:92</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a3771eaf33a336f55348f80ca857a159f"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a3771eaf33a336f55348f80ca857a159f">OpenBabel::OBMol::HasLSSRPerceived</a></div><div class="ttdeci">bool HasLSSRPerceived()</div><div class="ttdoc">Has the largest set of smallest rings (FindLSSR) been performed? </div><div class="ttdef"><b>Definition:</b> mol.h:598</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_adfe42a839d62e3d8f31ce3c28dc2e4e0"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#adfe42a839d62e3d8f31ce3c28dc2e4e0">OpenBabel::OBMol::HasRingTypesPerceived</a></div><div class="ttdeci">bool HasRingTypesPerceived()</div><div class="ttdoc">Have ring types been assigned by OBRingTyper? </div><div class="ttdef"><b>Definition:</b> mol.h:604</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a0dc584d0582e8f76b7c9873dc1ccf569"><div class="ttname"><a href="namespaceOpenBabel.shtml#a0dc584d0582e8f76b7c9873dc1ccf569">OpenBabel::CreateBond</a></div><div class="ttdeci">static int CreateBond(Pattern *pat, BondExpr *expr, int src, int dst)</div><div class="ttdef"><b>Definition:</b> parsmart.cpp:480</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a601fbf5c8e5b7d92281dbe6a124d7f2c"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c">OpenBabel::OBMol::_dimension</a></div><div class="ttdeci">unsigned short int _dimension</div><div class="ttdoc">Dimensionality of coordinates. </div><div class="ttdef"><b>Definition:</b> mol.h:124</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAromaticTyper_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAromaticTyper.shtml">OpenBabel::OBAromaticTyper</a></div><div class="ttdoc">Assigns aromatic typing to atoms and bonds. </div><div class="ttdef"><b>Definition:</b> typer.h:66</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a87c2cd2043f749d5433a98df4ad8277d"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a87c2cd2043f749d5433a98df4ad8277d">OpenBabel::OBMol::HasPartialChargesPerceived</a></div><div class="ttdeci">bool HasPartialChargesPerceived()</div><div class="ttdoc">Have atomic Gasteiger partial charges been assigned by OBGastChrg? </div><div class="ttdef"><b>Definition:</b> mol.h:608</div></div>
<div class="ttc" id="mol_8h_shtml_a00796165b0d091f4b0987ee2a0ba5609"><div class="ttname"><a href="mol_8h.shtml#a00796165b0d091f4b0987ee2a0ba5609">OB_AROMATIC_MOL</a></div><div class="ttdeci">#define OB_AROMATIC_MOL</div><div class="ttdoc">Aromatic flags have been set for atoms and bonds. </div><div class="ttdef"><b>Definition:</b> mol.h:72</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a7b80e7015d000221e0cc92fd3cf6f9e4"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a7b80e7015d000221e0cc92fd3cf6f9e4">OpenBabel::OBMol::AddConformer</a></div><div class="ttdeci">void AddConformer(double *f)</div><div class="ttdoc">Add a new set of coordinates f as a new conformer. </div><div class="ttdef"><b>Definition:</b> mol.h:640</div></div>
<div class="ttc" id="typer_8h_shtml"><div class="ttname"><a href="typer_8h.shtml">typer.h</a></div><div class="ttdoc">Open Babel atom and aromaticity typer. </div></div>
<div class="ttc" id="mol_8h_shtml_a1ab7f39b595f0f69b77c5907c804afc4"><div class="ttname"><a href="mol_8h.shtml#a1ab7f39b595f0f69b77c5907c804afc4">OB_SSSR_MOL</a></div><div class="ttdeci">#define OB_SSSR_MOL</div><div class="ttdoc">Smallest Set of Smallest Rings (SSSR) done. See OBRing and OBMol::FindSSSR. </div><div class="ttdef"><b>Definition:</b> mol.h:68</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ae1c74119422bd6a52bb7c384b42dca4c"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c">OpenBabel::OBMol::_autoFormalCharge</a></div><div class="ttdeci">bool _autoFormalCharge</div><div class="ttdoc">Assign formal charges automatically. </div><div class="ttdef"><b>Definition:</b> mol.h:118</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_adcdab8f96dc4fdc2940749e527087245"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#adcdab8f96dc4fdc2940749e527087245">OpenBabel::OBMol::SetFlag</a></div><div class="ttdeci">void SetFlag(int flag)</div><div class="ttdef"><b>Definition:</b> mol.h:137</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a7358c2c15c4c0d88ae2489f586bc8e0b"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">OpenBabel::OBMol::NumBonds</a></div><div class="ttdeci">unsigned int NumBonds() const</div><div class="ttdef"><b>Definition:</b> mol.h:277</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac1c62bdae6cf7a9195c470e7d0e29883"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac1c62bdae6cf7a9195c470e7d0e29883">OpenBabel::NewExtension</a></div><div class="ttdeci">std::string NewExtension(std::string &amp;, char *)</div><div class="ttdoc">Utility function: replace the last extension in string &amp;src with new extension char *ext...</div><div class="ttdef"><b>Definition:</b> obutil.cpp:104</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a1e53ca6bf87ac2f6447c9ef2332c9418"><div class="ttname"><a href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418">OpenBabel::etab</a></div><div class="ttdeci">OBElementTable etab</div><div class="ttdoc">Global OBElementTable for element properties. </div><div class="ttdef"><b>Definition:</b> mol.h:748</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aa8df95db3695e5e7ce263c484ce5533d"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aa8df95db3695e5e7ce263c484ce5533d">OpenBabel::OBMol::SetAutomaticPartialCharge</a></div><div class="ttdeci">void SetAutomaticPartialCharge(bool val)</div><div class="ttdoc">Set the flag for determining partial charges automatically (default=true) </div><div class="ttdef"><b>Definition:</b> mol.h:380</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac39166fa6f7c8df04002d2a94043d74cabe1ce09c84714b0a9be0755e9c79c024"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74cabe1ce09c84714b0a9be0755e9c79c024">OpenBabel::AllHydrogen</a></div><div class="ttdef"><b>Definition:</b> mol.h:110</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a00fd4c76a7513a9c8087d975f5d8a51b"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a00fd4c76a7513a9c8087d975f5d8a51b">OpenBabel::OBMol::SetPartialChargesPerceived</a></div><div class="ttdeci">void SetPartialChargesPerceived()</div><div class="ttdoc">Mark that partial charges have been assigned. </div><div class="ttdef"><b>Definition:</b> mol.h:400</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a908e2d394d3a47cf821014899344ca37"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a908e2d394d3a47cf821014899344ca37">OpenBabel::OBMol::HasHybridizationPerceived</a></div><div class="ttdeci">bool HasHybridizationPerceived()</div><div class="ttdoc">Has atomic hybridization been assigned by OBAtomTyper? </div><div class="ttdef"><b>Definition:</b> mol.h:610</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a6fb1d704dcaeb179720ac771745850b1"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1">OpenBabel::OBMol::_vconf</a></div><div class="ttdeci">std::vector&lt; double * &gt; _vconf</div><div class="ttdoc">vector of conformers </div><div class="ttdef"><b>Definition:</b> mol.h:128</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aba8a1b036f4544f328db00b0939cbaf0"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0">OpenBabel::OBMol::_atomIds</a></div><div class="ttdeci">std::vector&lt; OBAtom * &gt; _atomIds</div><div class="ttdoc">vector of atoms indexed by id </div><div class="ttdef"><b>Definition:</b> mol.h:121</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a8efda275b959c94452e1ded1f568c934"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a8efda275b959c94452e1ded1f568c934">OpenBabel::OBMol::DecrementMod</a></div><div class="ttdeci">void DecrementMod()</div><div class="ttdef"><b>Definition:</b> mol.h:264</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a5db8eb0124fad1bf66ddaf930b4840f0"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0">OpenBabel::OBMol::_mod</a></div><div class="ttdeci">unsigned short int _mod</div><div class="ttdoc">Number of nested calls to BeginModify() </div><div class="ttdef"><b>Definition:</b> mol.h:134</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a370c739afb1e8ed20a96680ec9f1b219"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219">OpenBabel::OBMol::_natoms</a></div><div class="ttdeci">unsigned int _natoms</div><div class="ttdoc">Number of atoms. </div><div class="ttdef"><b>Definition:</b> mol.h:130</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a87859f951e8ea33345b76d93014486c9"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">OpenBabel::OBMol::EndBonds</a></div><div class="ttdeci">OBBondIterator EndBonds()</div><div class="ttdef"><b>Definition:</b> mol.h:681</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_af641753d0dbc017405280791048f0d88"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#af641753d0dbc017405280791048f0d88">OpenBabel::OBMol::NumResidues</a></div><div class="ttdeci">unsigned int NumResidues() const</div><div class="ttdef"><b>Definition:</b> mol.h:281</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac39166fa6f7c8df04002d2a94043d74caf4f0a00a8690e1ea23a90fac8d818e47"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74caf4f0a00a8690e1ea23a90fac8d818e47">OpenBabel::NonPolarHydrogen</a></div><div class="ttdef"><b>Definition:</b> mol.h:110</div></div>
<div class="ttc" id="mol_8h_shtml_a1dcfd219e32e29f2aa96b01c4d95021a"><div class="ttname"><a href="mol_8h.shtml#a1dcfd219e32e29f2aa96b01c4d95021a">OB_ATOMSPIN_MOL</a></div><div class="ttdeci">#define OB_ATOMSPIN_MOL</div><div class="ttdoc">SpinMultiplicities on atoms have been set in OBMol::AssignSpinMultiplicity() </div><div class="ttdef"><b>Definition:</b> mol.h:106</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a08b5caf5aa6fc21e7b6fcd44e3d32f58"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a08b5caf5aa6fc21e7b6fcd44e3d32f58">OpenBabel::OBMol::SetRingTypesPerceived</a></div><div class="ttdeci">void SetRingTypesPerceived()</div><div class="ttdoc">Mark that ring types have been perceived (see OBRingTyper for details) </div><div class="ttdef"><b>Definition:</b> mol.h:394</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_afc44b8ad27a62b9cfc670d4fd29bb52f"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#afc44b8ad27a62b9cfc670d4fd29bb52f">OpenBabel::OBMol::IsCorrectedForPH</a></div><div class="ttdeci">bool IsCorrectedForPH()</div><div class="ttdoc">Has the molecule been corrected for pH by CorrectForPH? </div><div class="ttdef"><b>Definition:</b> mol.h:624</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ad11003513310725bd54265ef5bf004c0"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">OpenBabel::OBMol::GetCoordinates</a></div><div class="ttdeci">double * GetCoordinates()</div><div class="ttdef"><b>Definition:</b> mol.h:341</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a116f93a9700551794731bf71cd17345a"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a116f93a9700551794731bf71cd17345a">OpenBabel::OBMol::UnsetSSSRPerceived</a></div><div class="ttdeci">void UnsetSSSRPerceived()</div><div class="ttdef"><b>Definition:</b> mol.h:417</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a6438e097839dbc98916fb00a3dc67305"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a6438e097839dbc98916fb00a3dc67305">OpenBabel::OBMol::SetAromaticCorrected</a></div><div class="ttdeci">void SetAromaticCorrected()</div><div class="ttdef"><b>Definition:</b> mol.h:412</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a0329d4256b426a4967afa867f415d06b"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a0329d4256b426a4967afa867f415d06b">OpenBabel::OBMol::HasRingAtomsAndBondsPerceived</a></div><div class="ttdeci">bool HasRingAtomsAndBondsPerceived()</div><div class="ttdoc">Have ring atoms and bonds been assigned? </div><div class="ttdef"><b>Definition:</b> mol.h:600</div></div>
<div class="ttc" id="oberror_8h_shtml"><div class="ttname"><a href="oberror_8h.shtml">oberror.h</a></div><div class="ttdoc">Handle error messages, warnings, notices, etc. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a9ecfb96410199c294c003f975d870832"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a9ecfb96410199c294c003f975d870832">OpenBabel::OBMol::SetImplicitValencePerceived</a></div><div class="ttdeci">void SetImplicitValencePerceived()</div><div class="ttdoc">Mark that the implicit hydrogen valence of all atoms has been assigned. </div><div class="ttdef"><b>Definition:</b> mol.h:404</div></div>
<div class="ttc" id="mol_8h_shtml_ad224f71d6aecaa29f7cb32ec475b8d58"><div class="ttname"><a href="mol_8h.shtml#ad224f71d6aecaa29f7cb32ec475b8d58">OB_PATTERN_STRUCTURE</a></div><div class="ttdeci">#define OB_PATTERN_STRUCTURE</div><div class="ttdoc">A pattern, not a complete molecule. </div><div class="ttdef"><b>Definition:</b> mol.h:102</div></div>
<div class="ttc" id="bitvec_8h_shtml"><div class="ttname"><a href="bitvec_8h.shtml">bitvec.h</a></div><div class="ttdoc">Fast and efficient bitstring class. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a35a920486c1a28ca09de0eeb9dbb174c"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c">OpenBabel::OBMol::_nbonds</a></div><div class="ttdeci">unsigned int _nbonds</div><div class="ttdoc">Number of bonds. </div><div class="ttdef"><b>Definition:</b> mol.h:131</div></div>
<div class="ttc" id="mol_8h_shtml_aa9b307d4356f47b80ba6516405bea32e"><div class="ttname"><a href="mol_8h.shtml#aa9b307d4356f47b80ba6516405bea32e">OB_CLOSURE_MOL</a></div><div class="ttdeci">#define OB_CLOSURE_MOL</div><div class="ttdoc">Ring &quot;closure&quot; bonds have been set. See OBBond::IsClosure. </div><div class="ttdef"><b>Definition:</b> mol.h:86</div></div>
<div class="ttc" id="mol_8h_shtml_abf2d91f3d8e6d4db13029a0130a262a5"><div class="ttname"><a href="mol_8h.shtml#abf2d91f3d8e6d4db13029a0130a262a5">OB_ATOMTYPES_MOL</a></div><div class="ttdeci">#define OB_ATOMTYPES_MOL</div><div class="ttdoc">Atom typing has been performed. See OBAtomTyper. </div><div class="ttdef"><b>Definition:</b> mol.h:74</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aefc6e71556f0cd4afdd34e4a99d06025"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aefc6e71556f0cd4afdd34e4a99d06025">OpenBabel::OBMol::HasHydrogensAdded</a></div><div class="ttdeci">bool HasHydrogensAdded()</div><div class="ttdoc">Have hydrogens been added to the molecule? </div><div class="ttdef"><b>Definition:</b> mol.h:620</div></div>
<div class="ttc" id="atom_8h_shtml"><div class="ttname"><a href="atom_8h.shtml">atom.h</a></div><div class="ttdoc">Handle atoms. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtomTyper_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtomTyper.shtml">OpenBabel::OBAtomTyper</a></div><div class="ttdoc">Assigns atom types, hybridization, implicit valence and formal charges. </div><div class="ttdef"><b>Definition:</b> typer.h:38</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a2c81eeba803bc59d6c40f97b0e0e17fd"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a2c81eeba803bc59d6c40f97b0e0e17fd">OpenBabel::OBMol::SetSpinMultiplicityAssigned</a></div><div class="ttdeci">void SetSpinMultiplicityAssigned()</div><div class="ttdef"><b>Definition:</b> mol.h:413</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a35e5693cfdc3b993440d29540ab0509d"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a35e5693cfdc3b993440d29540ab0509d">OpenBabel::OBMol::BeginResidues</a></div><div class="ttdeci">OBResidueIterator BeginResidues()</div><div class="ttdef"><b>Definition:</b> mol.h:683</div></div>
<div class="ttc" id="generic_8h_shtml"><div class="ttname"><a href="generic_8h.shtml">generic.h</a></div><div class="ttdoc">Handle generic data classes. Custom data for atoms, bonds, etc. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a31e0990c833c415708b3fc515dbb35d5"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a31e0990c833c415708b3fc515dbb35d5">OpenBabel::OBMol::SetAutomaticFormalCharge</a></div><div class="ttdeci">void SetAutomaticFormalCharge(bool val)</div><div class="ttdoc">Set the flag for determining automatic formal charges with pH (default=true) </div><div class="ttdef"><b>Definition:</b> mol.h:377</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ac5103c8b3cbe4f961bd353209bf2860e"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ac5103c8b3cbe4f961bd353209bf2860e">OpenBabel::OBMol::GetMod</a></div><div class="ttdeci">int GetMod()</div><div class="ttdef"><b>Definition:</b> mol.h:258</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a537294f8e96a7ec5263a79de7454326e"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a537294f8e96a7ec5263a79de7454326e">OpenBabel::OBMol::SetChainsPerceived</a></div><div class="ttdeci">void SetChainsPerceived()</div><div class="ttdoc">Mark that chains and residues have been perceived (see OBChainsParser) </div><div class="ttdef"><b>Definition:</b> mol.h:396</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a401b99defa8a57195dc40a2604cee115"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a401b99defa8a57195dc40a2604cee115">OpenBabel::OBMol::UnsetFlag</a></div><div class="ttdeci">void UnsetFlag(int flag)</div><div class="ttdef"><b>Definition:</b> mol.h:424</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_aaaeee07c1d80b2638b8b9ace0095c9cd"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd">OpenBabel::OBMol::_totalCharge</a></div><div class="ttdeci">int _totalCharge</div><div class="ttdoc">Total charge on the molecule. </div><div class="ttdef"><b>Definition:</b> mol.h:125</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a7d0001f1af294a0d5676a70e12115b43"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a7d0001f1af294a0d5676a70e12115b43">OpenBabel::OBMol::UnsetRingTypesPerceived</a></div><div class="ttdeci">void UnsetRingTypesPerceived()</div><div class="ttdef"><b>Definition:</b> mol.h:420</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a7900736a9f73a041ab8bade19be84cc9"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a7900736a9f73a041ab8bade19be84cc9">OpenBabel::OBMol::SetClosureBondsPerceived</a></div><div class="ttdeci">void SetClosureBondsPerceived()</div><div class="ttdoc">Mark that ring closure bonds have been assigned by graph traversal. </div><div class="ttdef"><b>Definition:</b> mol.h:408</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a4641fea7bd6513949147bb7a53b6a7e1"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a4641fea7bd6513949147bb7a53b6a7e1">OpenBabel::OBMol::SetLSSRPerceived</a></div><div class="ttdeci">void SetLSSRPerceived()</div><div class="ttdoc">Mark that Largest Set of Smallest Rings has been run (see OBRing class) </div><div class="ttdef"><b>Definition:</b> mol.h:388</div></div>
<div class="ttc" id="obiter_8h_shtml"><div class="ttname"><a href="obiter_8h.shtml">obiter.h</a></div><div class="ttdoc">STL-style iterators for Open Babel. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_af673e91c4869ca8c1057f006d4f06dae"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#af673e91c4869ca8c1057f006d4f06dae">OpenBabel::OBMol::UnsetImplicitValencePerceived</a></div><div class="ttdeci">void UnsetImplicitValencePerceived()</div><div class="ttdef"><b>Definition:</b> mol.h:422</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aa52bc907b6b29c913a85671c48ff8ad7"><div class="ttname"><a href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OpenBabel::OBResidueIterator</a></div><div class="ttdeci">std::vector&lt; OBResidue * &gt;::iterator OBResidueIterator</div><div class="ttdoc">A standard iterator over a vector of residues. </div><div class="ttdef"><b>Definition:</b> residue.h:183</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ac6df023071b8d662aa513a00579f076d"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ac6df023071b8d662aa513a00579f076d">OpenBabel::OBMol::UnsetHydrogensAdded</a></div><div class="ttdeci">void UnsetHydrogensAdded()</div><div class="ttdef"><b>Definition:</b> mol.h:423</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a0f0310aa379033994230e29e206106c7"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a0f0310aa379033994230e29e206106c7">OpenBabel::OBMol::SetIsPatternStructure</a></div><div class="ttdeci">void SetIsPatternStructure()</div><div class="ttdoc">The OBMol is a pattern, not a complete molecule. Left unchanged by Clear(). </div><div class="ttdef"><b>Definition:</b> mol.h:531</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a4a45f2c821b749250e070c3594289103"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a4a45f2c821b749250e070c3594289103">OpenBabel::OBMol::HasSpinMultiplicityAssigned</a></div><div class="ttdeci">bool HasSpinMultiplicityAssigned()</div><div class="ttdoc">Has total spin multiplicity been assigned? </div><div class="ttdef"><b>Definition:</b> mol.h:626</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a30154f62f3bd1a1b8613a080444e69d7"><div class="ttname"><a href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7">OpenBabel::resdat</a></div><div class="ttdeci">OBResidueData resdat</div><div class="ttdoc">Global OBResidueData biomolecule residue database. </div><div class="ttdef"><b>Definition:</b> mol.h:764</div></div>
<div class="ttc" id="classOpenBabel_1_1OBResidue_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBResidue.shtml">OpenBabel::OBResidue</a></div><div class="ttdoc">Residue information. </div><div class="ttdef"><b>Definition:</b> residue.h:50</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a9f801729475d1d17415af6376458c81e"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a9f801729475d1d17415af6376458c81e">OpenBabel::OBMol::AutomaticFormalCharge</a></div><div class="ttdeci">bool AutomaticFormalCharge()</div><div class="ttdoc">Get the current flag for whether formal charges are set with pH correction. </div><div class="ttdef"><b>Definition:</b> mol.h:347</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac39166fa6f7c8df04002d2a94043d74caa3d3ec6d4feccb909e375261fc5e747a"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74caa3d3ec6d4feccb909e375261fc5e747a">OpenBabel::PolarHydrogen</a></div><div class="ttdef"><b>Definition:</b> mol.h:110</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a0b8a9f6292b91ec5c4022a487e9d6092"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a0b8a9f6292b91ec5c4022a487e9d6092">OpenBabel::OBMol::UnsetPartialChargesPerceived</a></div><div class="ttdeci">void UnsetPartialChargesPerceived()</div><div class="ttdef"><b>Definition:</b> mol.h:421</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_ac23878536c8da0ff97c0985627dd5646"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646">OpenBabel::OBMol::_autoPartialCharge</a></div><div class="ttdeci">bool _autoPartialCharge</div><div class="ttdoc">Assign partial charges automatically. </div><div class="ttdef"><b>Definition:</b> mol.h:117</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a608e6f965afea1f4f64cb0f499a0cb27"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a608e6f965afea1f4f64cb0f499a0cb27">OpenBabel::OBMol::SetChiralityPerceived</a></div><div class="ttdeci">void SetChiralityPerceived()</div><div class="ttdoc">Mark that chirality has been perceived. </div><div class="ttdef"><b>Definition:</b> mol.h:398</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_af3747253310ab328967a8bcaf32842d3"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#af3747253310ab328967a8bcaf32842d3">OpenBabel::OBMol::NextResidue</a></div><div class="ttdeci">OBResidue * NextResidue(OBResidueIterator &amp;i)</div><div class="ttdef"><b>Definition:</b> mol.h:708</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a3a1dc0419a66d2e7288214342de43b7a"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a3a1dc0419a66d2e7288214342de43b7a">OpenBabel::OBMol::HasFlag</a></div><div class="ttdeci">bool HasFlag(int flag)</div><div class="ttdef"><b>Definition:</b> mol.h:136</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a7e02cd2874a2a4826c8587da507f62ef"><div class="ttname"><a href="namespaceOpenBabel.shtml#a7e02cd2874a2a4826c8587da507f62ef">OpenBabel::ob_make_rmat</a></div><div class="ttdeci">void ob_make_rmat(double mat[3][3], double rmat[9])</div><div class="ttdef"><b>Definition:</b> obutil.cpp:891</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml_a1e298bbe286ab2c5a6f3b086a07b1a2b"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml#a1e298bbe286ab2c5a6f3b086a07b1a2b">OpenBabel::OBMol::SetKekulePerceived</a></div><div class="ttdeci">void SetKekulePerceived()</div><div class="ttdoc">Mark that Kekule forms have been assigned by Kekulize() </div><div class="ttdef"><b>Definition:</b> mol.h:406</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMolAtomDFSIter_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a></div><div class="ttdoc">Iterate over all atoms in an OBMol in a depth-first search (DFS) </div><div class="ttdef"><b>Definition:</b> obiter.h:68</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml">OpenBabel::OBAtom</a></div><div class="ttdoc">Atom class. </div><div class="ttdef"><b>Definition:</b> atom.h:81</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
