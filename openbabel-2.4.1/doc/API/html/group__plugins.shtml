<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>Plugins</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#files">Files</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Plugins</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="files"></a>
Files</h2></td></tr>
<tr class="memitem:plugin_8h"><td class="memItemLeft" align="right" valign="top">file &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="plugin_8h.shtml">plugin.h</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:gadd740e2a386b7db3e1f0e271cbe8a3f1"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(BaseClass)</td></tr>
<tr class="separator:gadd740e2a386b7db3e1f0e271cbe8a3f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaac917d0f317751ba3ac45628fb467e58"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaac917d0f317751ba3ac45628fb467e58">OB_STATIC_PLUGIN</a>(className,  instanceName)</td></tr>
<tr class="separator:gaac917d0f317751ba3ac45628fb467e58"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
<tr class="separator:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
<tr class="separator:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ga5232a08d3981144998353bafd17731fe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga5232a08d3981144998353bafd17731fe">operator()</a> (const char *p1, const char *p2) const</td></tr>
<tr class="separator:ga5232a08d3981144998353bafd17731fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga2f6f0f4ddec879439f78de686c459fb0"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga2f6f0f4ddec879439f78de686c459fb0">~OBPlugin</a> ()</td></tr>
<tr class="separator:ga2f6f0f4ddec879439f78de686c459fb0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>
<tr class="separator:ga4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga45dfda1fb13d3c26ab7f8f7631e3351c"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">TypeID</a> ()</td></tr>
<tr class="separator:ga45dfda1fb13d3c26ab7f8f7631e3351c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0859fdbf134af95a8231eb32c73b7db"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gae0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>
<tr class="separator:gae0859fdbf134af95a8231eb32c73b7db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9399e9568ab809d714385f1b237a9335"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>
<tr class="separator:ga9399e9568ab809d714385f1b237a9335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e0b39e1326de703012f81ac2be7feba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a> ()</td></tr>
<tr class="separator:ga3e0b39e1326de703012f81ac2be7feba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga295dc7f1b94da710821c562bff3e7c97"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga295dc7f1b94da710821c562bff3e7c97">GetPlugin</a> (const char *Type, const char *ID)</td></tr>
<tr class="separator:ga295dc7f1b94da710821c562bff3e7c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaa55e5ad893f2566c6874224f9174b7d2">GetID</a> () const</td></tr>
<tr class="separator:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf95953a5793333ba51e978c4a0a00103"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaf95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>
<tr class="separator:gaf95953a5793333ba51e978c4a0a00103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>
<tr class="separator:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba22c5352d36c7f058299af7ddffb03e"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>
<tr class="separator:gaba22c5352d36c7f058299af7ddffb03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>
<tr class="separator:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>
<tr class="separator:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>
<tr class="separator:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
<tr class="separator:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">LoadAllPlugins</a> ()</td></tr>
<tr class="separator:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
<tr class="separator:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
<tr class="separator:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
<tr class="separator:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a0297c3c2a3fa58bbd5e321b900ddec"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga7a0297c3c2a3fa58bbd5e321b900ddec">EnableStaticPlugins</a> ()</td></tr>
<tr class="separator:ga7a0297c3c2a3fa58bbd5e321b900ddec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9d7dd3bbc482a65e28ca887b3faa2535">AllPluginsLoaded</a> = 0</td></tr>
<tr class="separator:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f8d25dafb0bc13814ca451035f67955"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>
<tr class="separator:ga1f8d25dafb0bc13814ca451035f67955"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<p>/ / </p>


<h3><a id="plugins"></a>Plugins</h3><div class="textblock">Plugins are a way of extending <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> without having to alter any of the existing code. They may be built as shared libraries (DLLs with an extension .obf or .so files in a specified location) and distributed separately, but plugin classes can also be in the main code. In both cases they are discovered at startup when a global instance of the plugin class is instantiated. It iss registered by its constructor and is added to a static record of all the plugins of its particular type that are currently loaded.There are two levels of plugin. The top layer (at the time of writing) are: formats descriptors fingerprints forcefields charges ops loaders but additional types can be added without disturbing the main API. At runtime babel -L will list the top level of plugins. They typically are abstract classes with virtual functions that define an interface for that type. Classes derived from these are the second layer of plugins, and can be listed at runtime like, for instance: babel -L formats cml where formats is the top level of plugin and cml is the id of a derived class of this type.The top level of plugins will usually have their interfaces declared in header files compiled with the main API. The second level of plugin will typically not be known to the API at compile time, usually will not have a header file and must be accessed indirectly, to allow for the possibility that they may not be loaded: </p><div class="fragment"><div class="line">OBOp* pOp = OBOp::FindType(<span class="stringliteral">&quot;gen3D&quot;</span>);</div><div class="line"><span class="keywordflow">if</span>(!pOp)</div><div class="line">  ...report error</div><div class="line">pOp-&gt;Do(mol);</div></div><!-- fragment --><p> This retrieves the global instance of the plugin. This is usually adequate but making a new instance may be appropriate in some cases.Instances of some plugin classes can be constructed at startup from information in a text file and used in the same way as those defined in code. See OBDefine. This is appropriate for some classes that differ only by the datafile or SMARTS strings they use. </div><h2 class="groupheader">Macro Definition Documentation</h2>
<a id="gadd740e2a386b7db3e1f0e271cbe8a3f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadd740e2a386b7db3e1f0e271cbe8a3f1">&sect;&nbsp;</a></span>MAKE_PLUGIN</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define MAKE_PLUGIN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">BaseClass</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="gaac917d0f317751ba3ac45628fb467e58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaac917d0f317751ba3ac45628fb467e58">&sect;&nbsp;</a></span>OB_STATIC_PLUGIN</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define OB_STATIC_PLUGIN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">className, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">instanceName&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keyword">class </span>className; \</div><div class="line">  OBAPI EXTERN className instanceName;</div></div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Typedef Documentation</h2>
<a id="ga0fd3c807ed3341c33070c93b14739bc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga0fd3c807ed3341c33070c93b14739bc8">&sect;&nbsp;</a></span>PluginMapType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;const char*, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>*, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a>&gt; <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ga8fac85f5497f873a2dd8734b47f0bdc0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga8fac85f5497f873a2dd8734b47f0bdc0">&sect;&nbsp;</a></span>PluginIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef PluginMapType::const_iterator <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="ga5232a08d3981144998353bafd17731fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga5232a08d3981144998353bafd17731fe">&sect;&nbsp;</a></span>operator()()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool operator() </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ga2f6f0f4ddec879439f78de686c459fb0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga2f6f0f4ddec879439f78de686c459fb0">&sect;&nbsp;</a></span>~OBPlugin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Virtual destructor necessary for classes with virtual functions. </p>

</div>
</div>
<a id="ga4a6b8d1611d5d963fc29982cc1ebcbf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga4a6b8d1611d5d963fc29982cc1ebcbf7">&sect;&nbsp;</a></span>Description()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Required description of a sub-type. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBFormat.shtml#ab87525f269e7819d8462f450d30d56a7">OBFormat</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#a4a6b8d1611d5d963fc29982cc1ebcbf7">OBGroupContrib</a>, and <a class="el" href="classOpenBabel_1_1OpTransform.shtml#a4a6b8d1611d5d963fc29982cc1ebcbf7">OpTransform</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBOp.shtml#a64e598f68f30107a74319b9fc6d26cd0">OBOp::OpOptions()</a>.</p>

</div>
</div>
<a id="ga45dfda1fb13d3c26ab7f8f7631e3351c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga45dfda1fb13d3c26ab7f8f7631e3351c">&sect;&nbsp;</a></span>TypeID()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* TypeID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Redefined by each plugin type: "formats", "fingerprints", etc. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a45db88b29eb37e9dd105bf4032e421d2">OBForceField</a>, <a class="el" href="classOpenBabel_1_1OBFormat.shtml#a45db88b29eb37e9dd105bf4032e421d2">OBFormat</a>, <a class="el" href="classOpenBabel_1_1OBOp.shtml#a45dfda1fb13d3c26ab7f8f7631e3351c">OBOp</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a45db88b29eb37e9dd105bf4032e421d2">OBDescriptor</a>, and <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a45db88b29eb37e9dd105bf4032e421d2">OBChargeModel</a>.</p>

</div>
</div>
<a id="gae0859fdbf134af95a8231eb32c73b7db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gae0859fdbf134af95a8231eb32c73b7db">&sect;&nbsp;</a></span>Display()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Display </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Write information on a plugin class to the string txt. Return false if not written. The default implementation outputs: the ID, a tab character, and the first line of the Description. The param string can be used in derived types to provide different outputs. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBFormat.shtml#ae0859fdbf134af95a8231eb32c73b7db">OBFormat</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ae0859fdbf134af95a8231eb32c73b7db">OBDescriptor</a>.</p>

</div>
</div>
<a id="ga9399e9568ab809d714385f1b237a9335"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9399e9568ab809d714385f1b237a9335">&sect;&nbsp;</a></span>MakeInstance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a>* MakeInstance </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Make a new instance of the class. See <a class="el" href="classOpenBabel_1_1OpTransform.shtml" title="Applies molecular reactions/transforms (OBChemTsfm class) read from a datafile. ">OpTransform</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms. ">OBGroupContrib</a>, SmartsDescriptor classes for derived versions. Usually, the first parameter is the classname, the next three are parameters(ID, filename, description) for a constructor, and the rest data. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#ab91e9dba77605edc84876eac596f2094">OBGroupContrib</a>, and <a class="el" href="classOpenBabel_1_1OpTransform.shtml#aed21db4d9fb23cb30d0440e844a69f57">OpTransform</a>.</p>

<p>Referenced by <a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">OBPlugin::LoadAllPlugins()</a>.</p>

</div>
</div>
<a id="ga3e0b39e1326de703012f81ac2be7feba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga3e0b39e1326de703012f81ac2be7feba">&sect;&nbsp;</a></span>Init()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Init </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Initialize the plugin. The default version does nothing. </p>

</div>
</div>
<a id="ga295dc7f1b94da710821c562bff3e7c97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga295dc7f1b94da710821c562bff3e7c97">&sect;&nbsp;</a></span>GetPlugin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> * GetPlugin </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>Type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get a pointer to a plugin from its type and ID. Return NULL if not found. If Type is NULL, search all types. Not cast to Type* </p>

</div>
</div>
<a id="gaa55e5ad893f2566c6874224f9174b7d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaa55e5ad893f2566c6874224f9174b7d2">&sect;&nbsp;</a></span>GetID()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* GetID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Return the ID of the sub-type instance. </p>

</div>
</div>
<a id="gaf95953a5793333ba51e978c4a0a00103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaf95953a5793333ba51e978c4a0a00103">&sect;&nbsp;</a></span>ListAsVector()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ListAsVector </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>vlist</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Output a list of sub-type classes of the the type PluginID, or, if PluginID is "plugins" or empty, a list of the base types. If PluginID is not recognized or is NULL, the base types are output and the return is false. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a137c540357b45e73f65e602e1196eed7">OBConversion::GetSupportedInputFormat()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a353b3a6a53808b22361c9f44713978e8">OBConversion::GetSupportedOutputFormat()</a>.</p>

</div>
</div>
<a id="ga9fabfd2513038ae6ac475ac0ff2c73cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9fabfd2513038ae6ac475ac0ff2c73cd">&sect;&nbsp;</a></span>List()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void List </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>param</em> = <code>NULL</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream *&#160;</td>
          <td class="paramname"><em>os</em> = <code>&amp;std::cout</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>As ListAsVector but sent to an ostream with a default of cout if not specified. </p>

</div>
</div>
<a id="gaba22c5352d36c7f058299af7ddffb03e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaba22c5352d36c7f058299af7ddffb03e">&sect;&nbsp;</a></span>ListAsString()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string ListAsString </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>PluginID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>param</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>As ListAsVector but returns a string containing the list. </p>

</div>
</div>
<a id="ga84fc973fdf4bba5a6b0e2d402077991c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga84fc973fdf4bba5a6b0e2d402077991c">&sect;&nbsp;</a></span>FirstLine()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string FirstLine </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>txt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Utility function to return only the first line of a string. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBOp.shtml#a64e598f68f30107a74319b9fc6d26cd0">OBOp::OpOptions()</a>.</p>

</div>
</div>
<a id="ga1d4d73999ab0518ee471c635bd0a7e87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1d4d73999ab0518ee471c635bd0a7e87">&sect;&nbsp;</a></span>Begin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> Begin </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>PluginID</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Return an iterator at the start of the map of the plugin types PluginID or, if there is no such map, the end of the top level plugin map. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#af0bee894a9ed7ca61637452dc2e264f2">OBConversion::GetNextFormat()</a>, and <a class="el" href="classOpenBabel_1_1OBOp.shtml#a64e598f68f30107a74319b9fc6d26cd0">OBOp::OpOptions()</a>.</p>

</div>
</div>
<a id="ga9a330280c1cd2e7119dac87a6fd0b762"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9a330280c1cd2e7119dac87a6fd0b762">&sect;&nbsp;</a></span>End()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a> End </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>PluginID</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConversion.shtml#af0bee894a9ed7ca61637452dc2e264f2">OBConversion::GetNextFormat()</a>, and <a class="el" href="classOpenBabel_1_1OBOp.shtml#a64e598f68f30107a74319b9fc6d26cd0">OBOp::OpOptions()</a>.</p>

</div>
</div>
<a id="gaabc1385cbe63145ffec6edf1f2c3be98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gaabc1385cbe63145ffec6edf1f2c3be98">&sect;&nbsp;</a></span>GetMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; GetMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the map of the subtypes. </p>

</div>
</div>
<a id="gabfb658dfec57d827a9e3c6db43c2d9d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gabfb658dfec57d827a9e3c6db43c2d9d1">&sect;&nbsp;</a></span>LoadAllPlugins()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void LoadAllPlugins </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load all plugins (formats, fingerprints, forcefields etc.) </p>

</div>
</div>
<a id="gac40457336d7b12bb632b4ac4e8955a3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gac40457336d7b12bb632b4ac4e8955a3a">&sect;&nbsp;</a></span>PluginMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a>&amp; PluginMap </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a reference to the map of the plugin types. Is a function rather than a static member variable to avoid initialization problems. </p>

</div>
</div>
<a id="gadfcf9fda27cfbc4301fc94517a4250ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#gadfcf9fda27cfbc4301fc94517a4250ef">&sect;&nbsp;</a></span>GetTypeMap()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">OBPlugin::PluginMapType</a> &amp; GetTypeMap </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>PluginID</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the map of a particular plugin type, e.g. GetMapType("fingerprints") </p>

</div>
</div>
<a id="ga1e58b1811ec8c1b88254ee46ccef0b78"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1e58b1811ec8c1b88254ee46ccef0b78">&sect;&nbsp;</a></span>BaseFindType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> * BaseFindType </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td>
          <td class="paramname"><em>Map</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the type with the specified ID, or NULL if not found. Needs to be cast to the appropriate class in the calling routine. </p>

</div>
</div>
<a id="ga7a0297c3c2a3fa58bbd5e321b900ddec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga7a0297c3c2a3fa58bbd5e321b900ddec">&sect;&nbsp;</a></span>EnableStaticPlugins()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; std::string &gt; EnableStaticPlugins </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="ga9d7dd3bbc482a65e28ca887b3faa2535"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga9d7dd3bbc482a65e28ca887b3faa2535">&sect;&nbsp;</a></span>AllPluginsLoaded</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int AllPluginsLoaded = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Keep a record if all plugins have been loaded. </p>

</div>
</div>
<a id="ga1f8d25dafb0bc13814ca451035f67955"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ga1f8d25dafb0bc13814ca451035f67955">&sect;&nbsp;</a></span>_id</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* _id</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
