<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>rotor.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">rotor.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="rotor_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">rotor.h - Rotate torsional according to rotor rules.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2000 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_ROTOR_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_ROTOR_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="parsmart_8h.shtml">openbabel/parsmart.h</a>&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="typer_8h.shtml">openbabel/typer.h</a>&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#ifndef SQUARE</span></div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="rotor_8h.shtml#aa1cf70a99e21bc2032e8867c6cafbb43">   30</a></span>&#160;<span class="preprocessor">#define SQUARE(x) ((x)*(x))</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml">   40</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml">OBRotorRule</a></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  {</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">int</span>                 _ref[4]; </div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordtype">double</span>              _delta;  </div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    std::string         _s;      </div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>*    _sp;     </div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    std::vector&lt;double&gt; _vals;   </div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">   49</a></span>&#160;  <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">OBRotorRule</a>(<span class="keywordtype">char</span> *buffer,<span class="keywordtype">int</span> ref[4],std::vector&lt;double&gt; &amp;vals,<span class="keywordtype">double</span> d):</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    _delta(d), _s(buffer), _vals(vals)</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      _sp = <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      _sp-&gt;<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">Init</a>(buffer);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      memcpy(_ref,ref,<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)*4);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    }</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a236044823d65dffe4868c831e45a157b">   57</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a236044823d65dffe4868c831e45a157b">~OBRotorRule</a>()</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      {</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">if</span> (_sp)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;          {</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keyword">delete</span> _sp;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            _sp = NULL;</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;          }</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      }</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a9dcb9b43a3d0fa9003d4c1c9d921f6b2">   67</a></span>&#160;    <span class="keywordtype">bool</span>    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a9dcb9b43a3d0fa9003d4c1c9d921f6b2">IsValid</a>()    {        <span class="keywordflow">return</span>(_sp-&gt;<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>());       }</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a6583697916569d12c1a113b4ad4dbcc2">   71</a></span>&#160;    <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a6583697916569d12c1a113b4ad4dbcc2">GetReferenceAtoms</a>(<span class="keywordtype">int</span> ref[4]) { memcpy(ref,_ref,<span class="keyword">sizeof</span>(<span class="keywordtype">int</span>)*4); }</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">   73</a></span>&#160;    <span class="keywordtype">void</span>    <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">SetDelta</a>(<span class="keywordtype">double</span> d)    {       _delta = d;           }</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#abaa1b786f36fb9bc98b5c46e74425056">   75</a></span>&#160;    <span class="keywordtype">double</span>  <a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#abaa1b786f36fb9bc98b5c46e74425056">GetDelta</a>()            {       <span class="keywordflow">return</span>(_delta);       }</div><div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a111e26305dbd8f7c211cc259dff440e7">   77</a></span>&#160;    std::vector&lt;double&gt;   &amp;<a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a111e26305dbd8f7c211cc259dff440e7">GetTorsionVals</a>()    { <span class="keywordflow">return</span>(_vals); }</div><div class="line"><a name="l00079"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a84366a387431ba9c8ed2f3813e60badd">   79</a></span>&#160;    std::string  &amp;<a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a84366a387431ba9c8ed2f3813e60badd">GetSmartsString</a>(){      <span class="keywordflow">return</span>(_s);           }</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRule.shtml#a1b97208b08b2495efa0a4484b4d61938">   81</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a> *<a class="code" href="classOpenBabel_1_1OBRotorRule.shtml#a1b97208b08b2495efa0a4484b4d61938">GetSmartsPattern</a>() {  <span class="keywordflow">return</span>(_sp);         }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  };</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml">   90</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml">OBGlobalDataBase</a></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  {</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordtype">bool</span>                       _quiet;  </div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    std::vector&lt;OBRotorRule*&gt;  _vr;     </div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    std::vector&lt;double&gt;        _sp3sp3; </div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    std::vector&lt;double&gt;        _sp3sp2; </div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    std::vector&lt;double&gt;        _sp2sp2; </div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a>();</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    ~<a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a>();</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">void</span> ParseLine(<span class="keyword">const</span> <span class="keywordtype">char</span>*);</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml#aab7c531e5ffc5174e57a85e853931534">  103</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#aab7c531e5ffc5174e57a85e853931534">GetSize</a>()                 { <span class="keywordflow">return</span> _vr.size();}</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">  106</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">SetFilename</a>(std::string &amp;s)       { _filename = s;    }</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordtype">void</span> GetRotorIncrements(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* bond,<span class="keywordtype">int</span> refs[4],</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                            std::vector&lt;double&gt; &amp;vals,<span class="keywordtype">double</span> &amp;delta);</div><div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">  117</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">Quiet</a>()                           { _quiet=<span class="keyword">true</span>;      }</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  };</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml">  124</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordtype">int</span> _idx; </div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    std::vector&lt;int&gt; _rotatoms; </div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordtype">double</span> _imag, _refang; </div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *_bond; </div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    std::vector&lt;int&gt; _ref, _torsion; </div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _fixedatoms,_fixedbonds, _evalatoms; </div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    std::vector&lt;double&gt; _torsionAngles;  </div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    std::vector&lt;double&gt; _invmag; </div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    std::vector&lt;std::vector&lt;double&gt; &gt; _sn,_cs,_t; </div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    std::vector&lt;OBRing *&gt; _rings; </div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a>();</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a6a1a300dca75a2089732a7a66f7e1234">  144</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a6a1a300dca75a2089732a7a66f7e1234">~OBRotor</a>()</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;      }</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a75c73979e73fb44e48424150fa0208c7">  153</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a75c73979e73fb44e48424150fa0208c7">SetBond</a>(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    {</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      _bond = bond;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      SetRings(bond);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">void</span> SetRings(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond);</div><div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ab994a975e39f5c62288f4f972b6f90c9">  166</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#ab994a975e39f5c62288f4f972b6f90c9">SetIdx</a>(<span class="keywordtype">int</span> idx)</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      _idx = idx;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordtype">void</span> SetDihedralAtoms(std::vector&lt;int&gt; &amp;ref);</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordtype">void</span> SetDihedralAtoms(<span class="keywordtype">int</span> ref[4]);</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">void</span> SetRotAtoms(std::vector&lt;int&gt; &amp;atoms);</div><div class="line"><a name="l00189"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a0d37d5e994df8c97fe401ee821a3cbe7">  189</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a0d37d5e994df8c97fe401ee821a3cbe7">SetTorsionValues</a>(std::vector&lt;double&gt; &amp;angles)</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      _torsionAngles = angles;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    }</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ab263260a251aaa20610c7ca9dba31491">  196</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#ab263260a251aaa20610c7ca9dba31491">SetFixedBonds</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    {</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      _fixedbonds = bv;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    }</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a00e2cf7f72570502a2e543e85499b1cc">  209</a></span>&#160;    <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a00e2cf7f72570502a2e543e85499b1cc">SetToAngle</a>(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">double</span> setang)</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <span class="keywordtype">double</span> <span class="comment">/*dx,dy,dz,*/</span> sn,cs,t,ang,mag;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;      <span class="comment">// compute the angle to rotate (radians)</span></div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      ang = setang - CalcTorsion(coordinates);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      <span class="comment">// if the angle to rotate is too small, we&#39;re done</span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;      <span class="keywordflow">if</span> (fabs(ang) &lt; 1e-5)</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">return</span>;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <span class="comment">// compute the bond length</span></div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      mag = CalcBondLength(coordinates);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="comment">// compute some rotation matrix elements</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      sn = sin(ang);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      cs = cos(ang);</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      t = 1 - cs;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      <span class="comment">// perform rotation</span></div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      Set(coordinates, sn, cs, t, 1.0 / mag);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordtype">void</span> SetRotor(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">int</span> next, <span class="keywordtype">int</span> prev = -1);</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordtype">void</span> Set(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">double</span> sine, <span class="keywordtype">double</span> cosine, <span class="keywordtype">double</span> translation, <span class="keywordtype">double</span> invmag);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    <span class="keywordtype">void</span> Precompute(<span class="keywordtype">double</span> *coordinates);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordtype">void</span> Set(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">int</span> idx);</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordtype">void</span> Precalc(std::vector&lt;double*&gt; &amp;conformers);</div><div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">  317</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">Set</a>(<span class="keywordtype">double</span> *coordinates, <span class="keywordtype">int</span> conformer, <span class="keywordtype">int</span> idx)</div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    {</div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      Set(coordinates, _sn[conformer][idx], _cs[conformer][idx], _t[conformer][idx], _invmag[conformer]);</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a1b723190c734e234d87398f8eb245a8e">  329</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a1b723190c734e234d87398f8eb245a8e">GetBond</a>()</div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      <span class="keywordflow">return</span>(_bond);</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    }</div><div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a7b470b21b5807f0a9162bef72aebfef9">  337</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a7b470b21b5807f0a9162bef72aebfef9">Size</a>()</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    {</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      <span class="keywordflow">return</span> _torsionAngles.size();</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    }</div><div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a141f8abda99de827deec22f935dc9e31">  344</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a141f8abda99de827deec22f935dc9e31">GetIdx</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;      <span class="keywordflow">return</span> _idx;</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    }</div><div class="line"><a name="l00351"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a44db679688b64e9032ea9bf6def76315">  351</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a44db679688b64e9032ea9bf6def76315">GetDihedralAtoms</a>(<span class="keywordtype">int</span> ref[4])</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    {</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; 4; ++i)</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        ref[i] = _ref[i];</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div><div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a75d6cacf7c1783272f74546387716902">  359</a></span>&#160;    std::vector&lt;int&gt; &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a75d6cacf7c1783272f74546387716902">GetDihedralAtoms</a>()</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;      {</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">return</span> _ref;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;      }</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a8041f518c97fbbb908c888f1c8309b27">  367</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;int&gt;&amp; <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a8041f518c97fbbb908c888f1c8309b27">GetRotAtoms</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      <span class="keywordflow">return</span> _rotatoms;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    }</div><div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">  374</a></span>&#160;    <span class="keyword">const</span> std::vector&lt;double&gt; &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      <span class="keywordflow">return</span> _torsionAngles;</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div><div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ade5378a288a25258f4e3cc28a954bc2e">  382</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#ade5378a288a25258f4e3cc28a954bc2e">GetFixedBonds</a>()</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;      {</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        <span class="keywordflow">return</span> _fixedbonds;</div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;      }</div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordtype">double</span> CalcTorsion(<span class="keywordtype">double</span> *coordinates);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordtype">double</span> CalcBondLength(<span class="keywordtype">double</span> *coordinates);</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div><div class="line"><a name="l00402"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a06d5fdac08688bdff198a92c78bdeb69">  402</a></span>&#160;    std::vector&lt;double&gt;::iterator <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a06d5fdac08688bdff198a92c78bdeb69">BeginTorIncrement</a>()</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;      {</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keywordflow">return</span> _torsionAngles.begin();</div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      }</div><div class="line"><a name="l00406"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ac5857c1e09978240624038b2c6352dcc">  406</a></span>&#160;    std::vector&lt;double&gt;::iterator <a class="code" href="classOpenBabel_1_1OBRotor.shtml#ac5857c1e09978240624038b2c6352dcc">EndTorIncrement</a>()</div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;      {</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">return</span> _torsionAngles.end();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;      }</div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordtype">void</span> RemoveSymTorsionValues(<span class="keywordtype">int</span>);</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">  417</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">SetDelta</a>(<span class="keywordtype">double</span> UNUSED(d)) {}</div><div class="line"><a name="l00419"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#abaa1b786f36fb9bc98b5c46e74425056">  419</a></span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#abaa1b786f36fb9bc98b5c46e74425056">GetDelta</a>() { <span class="keywordflow">return</span> 10.0; }</div><div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a937745b1178a21d8b223992d16d7d50a">  421</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a937745b1178a21d8b223992d16d7d50a">GetFixedAtoms</a>() { <span class="keywordflow">return</span> _fixedatoms; }</div><div class="line"><a name="l00423"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a530a0fd1a1e312d489b367ac73e56bb7">  423</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a530a0fd1a1e312d489b367ac73e56bb7">SetFixedAtoms</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv) { _fixedatoms = bv; }</div><div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#ab690ce98b2f06352f9079eeae94da3c4">  425</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#ab690ce98b2f06352f9079eeae94da3c4">GetEvalAtoms</a>() { <span class="keywordflow">return</span> _evalatoms; }</div><div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a33bdb71641015f05a632ffaf76e7672a">  427</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a33bdb71641015f05a632ffaf76e7672a">SetEvalAtoms</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv) { _evalatoms = bv; }</div><div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#aa68d318d4f18049ca83fbbe8d1c5fa90">  429</a></span>&#160;    <span class="keywordtype">void</span>* <a class="code" href="classOpenBabel_1_1OBRotor.shtml#aa68d318d4f18049ca83fbbe8d1c5fa90">GetRotAtoms</a>() { <span class="keywordflow">return</span> &amp;_rotatoms; }</div><div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a8feebfa38afe9888e7a50e421b8f5243">  431</a></span>&#160;    std::vector&lt;double&gt; &amp;<a class="code" href="classOpenBabel_1_1OBRotor.shtml#a8feebfa38afe9888e7a50e421b8f5243">GetResolution</a>() { <span class="keywordflow">return</span> _torsionAngles; }</div><div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotor.shtml#a4e82f80e2cd8faf3bce17c464ab1672c">  433</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotor.shtml#a4e82f80e2cd8faf3bce17c464ab1672c">SetNumCoords</a>(<span class="keywordtype">int</span> UNUSED(nc)) {}</div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  };</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;</div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;</div><div class="line"><a name="l00440"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">  440</a></span>&#160;  <span class="keyword">typedef</span> std::vector&lt;OBRotor*&gt;::iterator <a class="code" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OBRotorIterator</a>;</div><div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml">  446</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a></div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;  {</div><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordtype">bool</span> _quiet;                    </div><div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keywordtype">bool</span> _removesym;                </div><div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;    <span class="keywordtype">bool</span> _ringRotors;               </div><div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;    <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> _fixedatoms, _fixedbonds; </div><div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a> _rr;               </div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    std::vector&lt;int&gt; _dffv;         </div><div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    std::vector&lt;OBRotor*&gt; _rotor;   </div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    std::vector&lt;std::pair&lt;OBSmartsPattern*,std::pair&lt;int,int&gt; &gt; &gt; _vsym2;</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    std::vector&lt;std::pair&lt;OBSmartsPattern*,std::pair&lt;int,int&gt; &gt; &gt; _vsym3;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a>();</div><div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    ~<a class="code" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a>();</div><div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;    <span class="keywordtype">void</span> Clear();</div><div class="line"><a name="l00476"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a7b470b21b5807f0a9162bef72aebfef9">  476</a></span>&#160;    <span class="keywordtype">size_t</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a7b470b21b5807f0a9162bef72aebfef9">Size</a>()</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;      <span class="keywordflow">return</span> _rotor.size();</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;    }</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordtype">bool</span> IsFixedBond(<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*);</div><div class="line"><a name="l00490"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aa0258fc5190b093eb234530b7e09f60f">  490</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aa0258fc5190b093eb234530b7e09f60f">HasFixedBonds</a>()</div><div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;    {</div><div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      <span class="keywordflow">return</span> !_fixedbonds.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#abcfbdba215d3b15fbb4b682969943a6e">Empty</a>();</div><div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;    }</div><div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;    <span class="keywordtype">void</span> RemoveSymVals(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div><div class="line"><a name="l00503"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aa9808cfa0495b4e2859ce504a1f6f117">  503</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aa9808cfa0495b4e2859ce504a1f6f117">HasRingRotors</a>()</div><div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    { <span class="keywordflow">return</span> _ringRotors; }</div><div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div><div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;</div><div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keywordtype">bool</span> Setup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> sampleRings = <span class="keyword">false</span>);</div><div class="line"><a name="l00518"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#ade6c00d93af1e19168894486ad6cbdba">  518</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#ade6c00d93af1e19168894486ad6cbdba">SetFixedBonds</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;fix)</div><div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;    {</div><div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;      _fixedbonds = fix;</div><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;      _fixedatoms.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>();</div><div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    }</div><div class="line"><a name="l00526"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#addb143a5ae2f64420fa692a14489288b">  526</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#addb143a5ae2f64420fa692a14489288b">Init</a>(std::string &amp;fname)</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    {</div><div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;      _rr.<a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">SetFilename</a>(fname);</div><div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;      _rr.<a class="code" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">Init</a>();</div><div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    }</div><div class="line"><a name="l00534"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a15266fb4e5ef334d0de47b203d420f22">  534</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a15266fb4e5ef334d0de47b203d420f22">SetQuiet</a>() {</div><div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;      _quiet=<span class="keyword">true</span>;</div><div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;      _rr.<a class="code" href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">Quiet</a>();</div><div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    }</div><div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordtype">bool</span> SetRotAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keywordtype">bool</span> FindRotors(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> sampleRingBonds = <span class="keyword">false</span>);</div><div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;    <span class="keywordtype">bool</span> SetEvalAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;    <span class="keywordtype">bool</span> AssignTorVals(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;);</div><div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;</div><div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;</div><div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;</div><div class="line"><a name="l00577"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a0911c08e37e43925167a51149d143e3a">  577</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> *<a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a0911c08e37e43925167a51149d143e3a">BeginRotor</a>(OBRotorIterator &amp;i)</div><div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;    {</div><div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;      i = _rotor.begin();</div><div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;      <span class="keywordflow">return</span>((i ==_rotor.end()) ? NULL:*i);</div><div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;    }</div><div class="line"><a name="l00586"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a610d31fe22e09be685d1bc3e90584e56">  586</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> *<a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a610d31fe22e09be685d1bc3e90584e56">NextRotor</a>(OBRotorIterator &amp;i)</div><div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    {</div><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;      ++i;</div><div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;      <span class="keywordflow">return</span>((i ==_rotor.end()) ? NULL:*i);</div><div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    }</div><div class="line"><a name="l00594"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#a9168b57d7fd7c6ac082ab7349e6c82df">  594</a></span>&#160;    OBRotorIterator <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#a9168b57d7fd7c6ac082ab7349e6c82df">BeginRotors</a>()   { <span class="keywordflow">return</span>(_rotor.begin()); }</div><div class="line"><a name="l00598"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aac6c765496e1602cdf8a2160251cce9e">  598</a></span>&#160;    OBRotorIterator <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aac6c765496e1602cdf8a2160251cce9e">EndRotors</a>()     { <span class="keywordflow">return</span>(_rotor.end());   }</div><div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="comment">// Not declared</span></div><div class="line"><a name="l00605"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#af5b2891615e85e4fb9ff52d2931c6170">  605</a></span>&#160;<span class="comment"></span>    <span class="keywordtype">bool</span>   <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#af5b2891615e85e4fb9ff52d2931c6170">IdentifyEvalAtoms</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol) { <span class="keywordflow">return</span> SetEvalAtoms(mol); }</div><div class="line"><a name="l00610"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#aaabb93aa1f24c335405418bfa3ead95b">  610</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#aaabb93aa1f24c335405418bfa3ead95b">SetFixAtoms</a>(<a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;fix)</div><div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    {</div><div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;      _fixedatoms = fix;</div><div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;      _fixedbonds.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>();</div><div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    }</div><div class="line"><a name="l00619"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#acb5c0375aa5f28091792762a5f66f23e">  619</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#acb5c0375aa5f28091792762a5f66f23e">HasFixedAtoms</a>()</div><div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    {</div><div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;      <span class="keywordflow">return</span>(!_fixedatoms.<a class="code" href="classOpenBabel_1_1OBBitVec.shtml#abcfbdba215d3b15fbb4b682969943a6e">Empty</a>());</div><div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    }</div><div class="line"><a name="l00625"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorList.shtml#adbf9e2936af60825abb7f7812ba8fae8">  625</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorList.shtml#adbf9e2936af60825abb7f7812ba8fae8">IgnoreSymmetryRemoval</a>()    { _removesym = <span class="keyword">false</span>;}</div><div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <span class="keywordtype">void</span> SetRotAtomsByFix(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;);</div><div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;</div><div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  };</div><div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div><div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;  <span class="keyword">class </span>rotor_digit {</div><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    rotor_digit(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rs)</div><div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;      {</div><div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        resolution_size = rs;</div><div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        state = 0;</div><div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;      }</div><div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;</div><div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;    rotor_digit()</div><div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;      {</div><div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        resolution_size = 0;</div><div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        state = 0;</div><div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;      }</div><div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordtype">void</span> set_size(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> rs)</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    {</div><div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;      resolution_size = rs;</div><div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;      state = 0;</div><div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;    }</div><div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;</div><div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordtype">void</span> set_state(<span class="keywordtype">int</span> st)</div><div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;    {</div><div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;      state = st;</div><div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;    }</div><div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;</div><div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;    <span class="keywordtype">int</span> get_state()</div><div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;    {</div><div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;      <span class="keywordflow">return</span> state;</div><div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    }</div><div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;</div><div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size()</div><div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    {</div><div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;      <span class="keywordflow">return</span> resolution_size;</div><div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    }</div><div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <span class="keywordtype">bool</span> next()</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    {</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;      <span class="keywordflow">if</span> (state &lt; static_cast&lt;int&gt;(resolution_size - 1)) {</div><div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        ++state;</div><div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;      } <span class="keywordflow">else</span></div><div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        state = 0;</div><div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;</div><div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    }</div><div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  <span class="keyword">private</span>:</div><div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> resolution_size;</div><div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordtype">int</span> state;</div><div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  } <span class="keyword">typedef</span> rotor_digit;</div><div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;};</div><div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;</div><div class="line"><a name="l00692"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml">  692</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml">OBRotorKeys</a></div><div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  {</div><div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00741"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a1df6b471196fede2ca7816bdb48a55c4">  741</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a1df6b471196fede2ca7816bdb48a55c4">OBRotorKeys</a>()</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;      {</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        _vr.clear();</div><div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;      }</div><div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;</div><div class="line"><a name="l00747"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#aa71d36872f416feaa853788a7a7a7ef8">  747</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#aa71d36872f416feaa853788a7a7a7ef8">Clear</a>(){</div><div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        _vr.clear();</div><div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;      }</div><div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;</div><div class="line"><a name="l00752"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a5e2ff872d231d1a136588edf2f214812">  752</a></span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a5e2ff872d231d1a136588edf2f214812">NumKeys</a>()</div><div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;      {</div><div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> numKeys = 0;</div><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;</div><div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">while</span> (Next())</div><div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;          numKeys++;</div><div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;</div><div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordflow">return</span> numKeys;</div><div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;      }</div><div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;</div><div class="line"><a name="l00764"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a978846687be54138173a299d169bce37">  764</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a978846687be54138173a299d169bce37">AddRotor</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> size)</div><div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;      {</div><div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        rotor_digit rd(size);</div><div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        _vr.push_back(rd);</div><div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;      }</div><div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;</div><div class="line"><a name="l00772"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a3947d19ac087ef2cd68c2409920339c4">  772</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a3947d19ac087ef2cd68c2409920339c4">Next</a>()</div><div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;      {</div><div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        <span class="keywordflow">if</span>(_vr.size() == 0)</div><div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;</div><div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="keywordtype">bool</span> carry = _vr[0].next();</div><div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 1;</div><div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;        <span class="keywordflow">while</span> (carry) {</div><div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;          <span class="keywordflow">if</span>(i == _vr.size())</div><div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div><div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;          carry = _vr[i].next();</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;          i++;</div><div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;        }</div><div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;      }</div><div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;</div><div class="line"><a name="l00791"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBRotorKeys.shtml#a0ea664b7db8e291318eda525a542aa7f">  791</a></span>&#160;      std::vector&lt;int&gt; <a class="code" href="classOpenBabel_1_1OBRotorKeys.shtml#a0ea664b7db8e291318eda525a542aa7f">GetKey</a>()</div><div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;      {</div><div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        std::vector&lt;int&gt; rt;</div><div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        rt.clear();</div><div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        rt.push_back(0);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; _vr.size(); i++){</div><div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;          rt.push_back(_vr[i].get_state());</div><div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        }</div><div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;</div><div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <span class="keywordflow">return</span> rt;</div><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;      }</div><div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;</div><div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;      std::vector&lt;rotor_digit&gt; _vr;</div><div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  };</div><div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;</div><div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div><div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;} <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="preprocessor">#endif // OB_ROTOR_H</span></div><div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a1b97208b08b2495efa0a4484b4d61938"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a1b97208b08b2495efa0a4484b4d61938">OpenBabel::OBRotorRule::GetSmartsPattern</a></div><div class="ttdeci">OBSmartsPattern * GetSmartsPattern()</div><div class="ttdef"><b>Definition:</b> rotor.h:81</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_aa71d36872f416feaa853788a7a7a7ef8"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#aa71d36872f416feaa853788a7a7a7ef8">OpenBabel::OBRotorKeys::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clear all rotors. </div><div class="ttdef"><b>Definition:</b> rotor.h:747</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_acb5c0375aa5f28091792762a5f66f23e"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#acb5c0375aa5f28091792762a5f66f23e">OpenBabel::OBRotorList::HasFixedAtoms</a></div><div class="ttdeci">bool HasFixedAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:619</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a75c73979e73fb44e48424150fa0208c7"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a75c73979e73fb44e48424150fa0208c7">OpenBabel::OBRotor::SetBond</a></div><div class="ttdeci">void SetBond(OBBond *bond)</div><div class="ttdef"><b>Definition:</b> rotor.h:153</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a6583697916569d12c1a113b4ad4dbcc2"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a6583697916569d12c1a113b4ad4dbcc2">OpenBabel::OBRotorRule::GetReferenceAtoms</a></div><div class="ttdeci">void GetReferenceAtoms(int ref[4])</div><div class="ttdef"><b>Definition:</b> rotor.h:71</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a3947d19ac087ef2cd68c2409920339c4"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a3947d19ac087ef2cd68c2409920339c4">OpenBabel::OBRotorKeys::Next</a></div><div class="ttdeci">bool Next()</div><div class="ttdef"><b>Definition:</b> rotor.h:772</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aaabb93aa1f24c335405418bfa3ead95b"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aaabb93aa1f24c335405418bfa3ead95b">OpenBabel::OBRotorList::SetFixAtoms</a></div><div class="ttdeci">void SetFixAtoms(OBBitVec &amp;fix)</div><div class="ttdef"><b>Definition:</b> rotor.h:610</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a1ade9c212155ac04f25ddf32731657ea"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">OpenBabel::OBRotor::Set</a></div><div class="ttdeci">void Set(double *coordinates, int conformer, int idx)</div><div class="ttdef"><b>Definition:</b> rotor.h:317</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml_aab7c531e5ffc5174e57a85e853931534"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml#aab7c531e5ffc5174e57a85e853931534">OpenBabel::OBRotorRules::GetSize</a></div><div class="ttdeci">size_t GetSize()</div><div class="ttdef"><b>Definition:</b> rotor.h:103</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a7b470b21b5807f0a9162bef72aebfef9"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a7b470b21b5807f0a9162bef72aebfef9">OpenBabel::OBRotor::Size</a></div><div class="ttdeci">size_t Size()</div><div class="ttdef"><b>Definition:</b> rotor.h:337</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ac532c4b500b1a85ea22217f2c65a70ed"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">OpenBabel::OBSmartsPattern::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdef"><b>Definition:</b> parsmart.h:226</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ab994a975e39f5c62288f4f972b6f90c9"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ab994a975e39f5c62288f4f972b6f90c9">OpenBabel::OBRotor::SetIdx</a></div><div class="ttdeci">void SetIdx(int idx)</div><div class="ttdef"><b>Definition:</b> rotor.h:166</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a6a1a300dca75a2089732a7a66f7e1234"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a6a1a300dca75a2089732a7a66f7e1234">OpenBabel::OBRotor::~OBRotor</a></div><div class="ttdeci">~OBRotor()</div><div class="ttdef"><b>Definition:</b> rotor.h:144</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_adbf9e2936af60825abb7f7812ba8fae8"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#adbf9e2936af60825abb7f7812ba8fae8">OpenBabel::OBRotorList::IgnoreSymmetryRemoval</a></div><div class="ttdeci">void IgnoreSymmetryRemoval()</div><div class="ttdef"><b>Definition:</b> rotor.h:625</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ade5378a288a25258f4e3cc28a954bc2e"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ade5378a288a25258f4e3cc28a954bc2e">OpenBabel::OBRotor::GetFixedBonds</a></div><div class="ttdeci">OBBitVec &amp; GetFixedBonds()</div><div class="ttdef"><b>Definition:</b> rotor.h:382</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a530a0fd1a1e312d489b367ac73e56bb7"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a530a0fd1a1e312d489b367ac73e56bb7">OpenBabel::OBRotor::SetFixedAtoms</a></div><div class="ttdeci">void SetFixedAtoms(OBBitVec &amp;bv)</div><div class="ttdef"><b>Definition:</b> rotor.h:423</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aa0258fc5190b093eb234530b7e09f60f"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aa0258fc5190b093eb234530b7e09f60f">OpenBabel::OBRotorList::HasFixedBonds</a></div><div class="ttdeci">bool HasFixedBonds()</div><div class="ttdef"><b>Definition:</b> rotor.h:490</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:69</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml">OpenBabel::OBRotorList</a></div><div class="ttdoc">Given an OBMol, set up a list of possibly rotatable torsions,. </div><div class="ttdef"><b>Definition:</b> rotor.h:446</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a75d6cacf7c1783272f74546387716902"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a75d6cacf7c1783272f74546387716902">OpenBabel::OBRotor::GetDihedralAtoms</a></div><div class="ttdeci">std::vector&lt; int &gt; &amp; GetDihedralAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:359</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a44db679688b64e9032ea9bf6def76315"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a44db679688b64e9032ea9bf6def76315">OpenBabel::OBRotor::GetDihedralAtoms</a></div><div class="ttdeci">void GetDihedralAtoms(int ref[4])</div><div class="ttdef"><b>Definition:</b> rotor.h:351</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a33bdb71641015f05a632ffaf76e7672a"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a33bdb71641015f05a632ffaf76e7672a">OpenBabel::OBRotor::SetEvalAtoms</a></div><div class="ttdeci">void SetEvalAtoms(OBBitVec &amp;bv)</div><div class="ttdef"><b>Definition:</b> rotor.h:427</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a9dcb9b43a3d0fa9003d4c1c9d921f6b2"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a9dcb9b43a3d0fa9003d4c1c9d921f6b2">OpenBabel::OBRotorRule::IsValid</a></div><div class="ttdeci">bool IsValid()</div><div class="ttdef"><b>Definition:</b> rotor.h:67</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml">OpenBabel::OBRotorRules</a></div><div class="ttdoc">Database of default hybridization torsional rules and SMARTS-defined OBRotorRule objects. </div><div class="ttdef"><b>Definition:</b> rotor.h:90</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a937745b1178a21d8b223992d16d7d50a"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a937745b1178a21d8b223992d16d7d50a">OpenBabel::OBRotor::GetFixedAtoms</a></div><div class="ttdeci">OBBitVec &amp; GetFixedAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:421</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a8feebfa38afe9888e7a50e421b8f5243"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a8feebfa38afe9888e7a50e421b8f5243">OpenBabel::OBRotor::GetResolution</a></div><div class="ttdeci">std::vector&lt; double &gt; &amp; GetResolution()</div><div class="ttdef"><b>Definition:</b> rotor.h:431</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_abaa1b786f36fb9bc98b5c46e74425056"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#abaa1b786f36fb9bc98b5c46e74425056">OpenBabel::OBRotorRule::GetDelta</a></div><div class="ttdeci">double GetDelta()</div><div class="ttdef"><b>Definition:</b> rotor.h:75</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a800aee2a9873012ac7e2a1bcedd5c6ba"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">OpenBabel::OBRotorRule::SetDelta</a></div><div class="ttdeci">void SetDelta(double d)</div><div class="ttdoc">Set the resolution (delta) of a torsional step in degrees. </div><div class="ttdef"><b>Definition:</b> rotor.h:73</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a800aee2a9873012ac7e2a1bcedd5c6ba"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">OpenBabel::OBRotor::SetDelta</a></div><div class="ttdeci">void SetDelta(double d)</div><div class="ttdef"><b>Definition:</b> rotor.h:417</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a610d31fe22e09be685d1bc3e90584e56"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a610d31fe22e09be685d1bc3e90584e56">OpenBabel::OBRotorList::NextRotor</a></div><div class="ttdeci">OBRotor * NextRotor(OBRotorIterator &amp;i)</div><div class="ttdef"><b>Definition:</b> rotor.h:586</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_ac65f277d7001f0b88bfeb47c25490995"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#ac65f277d7001f0b88bfeb47c25490995">OpenBabel::OBRotorRule::OBRotorRule</a></div><div class="ttdeci">OBRotorRule(char *buffer, int ref[4], std::vector&lt; double &gt; &amp;vals, double d)</div><div class="ttdef"><b>Definition:</b> rotor.h:49</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a15266fb4e5ef334d0de47b203d420f22"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a15266fb4e5ef334d0de47b203d420f22">OpenBabel::OBRotorList::SetQuiet</a></div><div class="ttdeci">void SetQuiet()</div><div class="ttdef"><b>Definition:</b> rotor.h:534</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a7b470b21b5807f0a9162bef72aebfef9"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a7b470b21b5807f0a9162bef72aebfef9">OpenBabel::OBRotorList::Size</a></div><div class="ttdeci">size_t Size()</div><div class="ttdef"><b>Definition:</b> rotor.h:476</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a1df6b471196fede2ca7816bdb48a55c4"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a1df6b471196fede2ca7816bdb48a55c4">OpenBabel::OBRotorKeys::OBRotorKeys</a></div><div class="ttdeci">OBRotorKeys()</div><div class="ttdoc">A class to generate all possible rotorKeys. </div><div class="ttdef"><b>Definition:</b> rotor.h:741</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a06d5fdac08688bdff198a92c78bdeb69"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a06d5fdac08688bdff198a92c78bdeb69">OpenBabel::OBRotor::BeginTorIncrement</a></div><div class="ttdeci">std::vector&lt; double &gt;::iterator BeginTorIncrement()</div><div class="ttdef"><b>Definition:</b> rotor.h:402</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_addb143a5ae2f64420fa692a14489288b"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#addb143a5ae2f64420fa692a14489288b">OpenBabel::OBRotorList::Init</a></div><div class="ttdeci">void Init(std::string &amp;fname)</div><div class="ttdef"><b>Definition:</b> rotor.h:526</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml">OpenBabel::OBSmartsPattern</a></div><div class="ttdoc">SMARTS (SMiles ARbitrary Target Specification) substructure searching. </div><div class="ttdef"><b>Definition:</b> parsmart.h:151</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a0911c08e37e43925167a51149d143e3a"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a0911c08e37e43925167a51149d143e3a">OpenBabel::OBRotorList::BeginRotor</a></div><div class="ttdeci">OBRotor * BeginRotor(OBRotorIterator &amp;i)</div><div class="ttdef"><b>Definition:</b> rotor.h:577</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a0ea664b7db8e291318eda525a542aa7f"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a0ea664b7db8e291318eda525a542aa7f">OpenBabel::OBRotorKeys::GetKey</a></div><div class="ttdeci">std::vector&lt; int &gt; GetKey()</div><div class="ttdef"><b>Definition:</b> rotor.h:791</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a978846687be54138173a299d169bce37"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a978846687be54138173a299d169bce37">OpenBabel::OBRotorKeys::AddRotor</a></div><div class="ttdeci">void AddRotor(unsigned int size)</div><div class="ttdef"><b>Definition:</b> rotor.h:764</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml">OpenBabel::OBRotorKeys</a></div><div class="ttdoc">A class to generate all possible rotorKeys. </div><div class="ttdef"><b>Definition:</b> rotor.h:692</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_af5b2891615e85e4fb9ff52d2931c6170"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#af5b2891615e85e4fb9ff52d2931c6170">OpenBabel::OBRotorList::IdentifyEvalAtoms</a></div><div class="ttdeci">bool IdentifyEvalAtoms(OBMol &amp;mol)</div><div class="ttdef"><b>Definition:</b> rotor.h:605</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ab263260a251aaa20610c7ca9dba31491"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ab263260a251aaa20610c7ca9dba31491">OpenBabel::OBRotor::SetFixedBonds</a></div><div class="ttdeci">void SetFixedBonds(OBBitVec &amp;bv)</div><div class="ttdef"><b>Definition:</b> rotor.h:196</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_abcfbdba215d3b15fbb4b682969943a6e"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#abcfbdba215d3b15fbb4b682969943a6e">OpenBabel::OBBitVec::Empty</a></div><div class="ttdeci">bool Empty() const</div><div class="ttdef"><b>Definition:</b> bitvec.h:122</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_aa68d318d4f18049ca83fbbe8d1c5fa90"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#aa68d318d4f18049ca83fbbe8d1c5fa90">OpenBabel::OBRotor::GetRotAtoms</a></div><div class="ttdeci">void * GetRotAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:429</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorKeys_shtml_a5e2ff872d231d1a136588edf2f214812"><div class="ttname"><a href="classOpenBabel_1_1OBRotorKeys.shtml#a5e2ff872d231d1a136588edf2f214812">OpenBabel::OBRotorKeys::NumKeys</a></div><div class="ttdeci">unsigned int NumKeys()</div><div class="ttdoc">Number of rotor keys (= number of possible conformers) </div><div class="ttdef"><b>Definition:</b> rotor.h:752</div></div>
<div class="ttc" id="typer_8h_shtml"><div class="ttname"><a href="typer_8h.shtml">typer.h</a></div><div class="ttdoc">Open Babel atom and aromaticity typer. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a0d37d5e994df8c97fe401ee821a3cbe7"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a0d37d5e994df8c97fe401ee821a3cbe7">OpenBabel::OBRotor::SetTorsionValues</a></div><div class="ttdeci">void SetTorsionValues(std::vector&lt; double &gt; &amp;angles)</div><div class="ttdef"><b>Definition:</b> rotor.h:189</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_abaa1b786f36fb9bc98b5c46e74425056"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#abaa1b786f36fb9bc98b5c46e74425056">OpenBabel::OBRotor::GetDelta</a></div><div class="ttdeci">double GetDelta()</div><div class="ttdef"><b>Definition:</b> rotor.h:419</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a84366a387431ba9c8ed2f3813e60badd"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a84366a387431ba9c8ed2f3813e60badd">OpenBabel::OBRotorRule::GetSmartsString</a></div><div class="ttdeci">std::string &amp; GetSmartsString()</div><div class="ttdef"><b>Definition:</b> rotor.h:79</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a00e2cf7f72570502a2e543e85499b1cc"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a00e2cf7f72570502a2e543e85499b1cc">OpenBabel::OBRotor::SetToAngle</a></div><div class="ttdeci">void SetToAngle(double *coordinates, double setang)</div><div class="ttdef"><b>Definition:</b> rotor.h:209</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml">OpenBabel::OBRotor</a></div><div class="ttdoc">A single rotatable OBBond as part of rotamer searching. </div><div class="ttdef"><b>Definition:</b> rotor.h:124</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml_a3bf46031273468cc23720df1c59d3e85"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml#a3bf46031273468cc23720df1c59d3e85">OpenBabel::OBRotorRules::Quiet</a></div><div class="ttdeci">void Quiet()</div><div class="ttdoc">Turn off debugging output from GetRotorIncrements() </div><div class="ttdef"><b>Definition:</b> rotor.h:117</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml">OpenBabel::OBRotorRule</a></div><div class="ttdoc">A rule for torsional conformer searching, defined by a SMARTS pattern. </div><div class="ttdef"><b>Definition:</b> rotor.h:40</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a4e82f80e2cd8faf3bce17c464ab1672c"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a4e82f80e2cd8faf3bce17c464ab1672c">OpenBabel::OBRotor::SetNumCoords</a></div><div class="ttdeci">void SetNumCoords(int nc)</div><div class="ttdef"><b>Definition:</b> rotor.h:433</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a141f8abda99de827deec22f935dc9e31"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a141f8abda99de827deec22f935dc9e31">OpenBabel::OBRotor::GetIdx</a></div><div class="ttdeci">int GetIdx() const</div><div class="ttdef"><b>Definition:</b> rotor.h:344</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml_aa71d36872f416feaa853788a7a7a7ef8"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml#aa71d36872f416feaa853788a7a7a7ef8">OpenBabel::OBBitVec::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Set all bits to zero. </div><div class="ttdef"><b>Definition:</b> bitvec.cpp:381</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aa9808cfa0495b4e2859ce504a1f6f117"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aa9808cfa0495b4e2859ce504a1f6f117">OpenBabel::OBRotorList::HasRingRotors</a></div><div class="ttdeci">bool HasRingRotors()</div><div class="ttdef"><b>Definition:</b> rotor.h:503</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a0595d2cb4644a0491448a4c001edbb71"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">OpenBabel::OBRotor::GetTorsionValues</a></div><div class="ttdeci">const std::vector&lt; double &gt; &amp; GetTorsionValues() const</div><div class="ttdef"><b>Definition:</b> rotor.h:374</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a434f394d0613a8ef6c119670ff49710f"><div class="ttname"><a href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OpenBabel::OBRotorIterator</a></div><div class="ttdeci">std::vector&lt; OBRotor * &gt;::iterator OBRotorIterator</div><div class="ttdoc">A standard iterator over a vector of rotors. </div><div class="ttdef"><b>Definition:</b> rotor.h:440</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ab690ce98b2f06352f9079eeae94da3c4"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ab690ce98b2f06352f9079eeae94da3c4">OpenBabel::OBRotor::GetEvalAtoms</a></div><div class="ttdeci">OBBitVec &amp; GetEvalAtoms()</div><div class="ttdef"><b>Definition:</b> rotor.h:425</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a111e26305dbd8f7c211cc259dff440e7"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a111e26305dbd8f7c211cc259dff440e7">OpenBabel::OBRotorRule::GetTorsionVals</a></div><div class="ttdeci">std::vector&lt; double &gt; &amp; GetTorsionVals()</div><div class="ttdef"><b>Definition:</b> rotor.h:77</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a8041f518c97fbbb908c888f1c8309b27"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a8041f518c97fbbb908c888f1c8309b27">OpenBabel::OBRotor::GetRotAtoms</a></div><div class="ttdeci">const std::vector&lt; int &gt; &amp; GetRotAtoms() const</div><div class="ttdef"><b>Definition:</b> rotor.h:367</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ab90ce667d180e55f26e7054ed1c6c8b1"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ab90ce667d180e55f26e7054ed1c6c8b1">OpenBabel::OBSmartsPattern::Init</a></div><div class="ttdeci">bool Init(const char *pattern)</div><div class="ttdef"><b>Definition:</b> parsmart.cpp:1755</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_a9168b57d7fd7c6ac082ab7349e6c82df"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#a9168b57d7fd7c6ac082ab7349e6c82df">OpenBabel::OBRotorList::BeginRotors</a></div><div class="ttdeci">OBRotorIterator BeginRotors()</div><div class="ttdef"><b>Definition:</b> rotor.h:594</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_ade6c00d93af1e19168894486ad6cbdba"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#ade6c00d93af1e19168894486ad6cbdba">OpenBabel::OBRotorList::SetFixedBonds</a></div><div class="ttdeci">void SetFixedBonds(OBBitVec &amp;fix)</div><div class="ttdef"><b>Definition:</b> rotor.h:518</div></div>
<div class="ttc" id="parsmart_8h_shtml"><div class="ttname"><a href="parsmart_8h.shtml">parsmart.h</a></div><div class="ttdoc">Daylight SMARTS parser. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_ac5857c1e09978240624038b2c6352dcc"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#ac5857c1e09978240624038b2c6352dcc">OpenBabel::OBRotor::EndTorIncrement</a></div><div class="ttdeci">std::vector&lt; double &gt;::iterator EndTorIncrement()</div><div class="ttdef"><b>Definition:</b> rotor.h:406</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRules_shtml_adeb3abe4bd6c3443362068379a6b665e"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRules.shtml#adeb3abe4bd6c3443362068379a6b665e">OpenBabel::OBRotorRules::SetFilename</a></div><div class="ttdeci">void SetFilename(std::string &amp;s)</div><div class="ttdoc">Set the filename to be used for the database. Default = torlib.txt. </div><div class="ttdef"><b>Definition:</b> rotor.h:106</div></div>
<div class="ttc" id="classOpenBabel_1_1OBGlobalDataBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBGlobalDataBase.shtml">OpenBabel::OBGlobalDataBase</a></div><div class="ttdoc">Base data table class, handles reading data files. </div><div class="ttdef"><b>Definition:</b> data.h:49</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorList_shtml_aac6c765496e1602cdf8a2160251cce9e"><div class="ttname"><a href="classOpenBabel_1_1OBRotorList.shtml#aac6c765496e1602cdf8a2160251cce9e">OpenBabel::OBRotorList::EndRotors</a></div><div class="ttdeci">OBRotorIterator EndRotors()</div><div class="ttdef"><b>Definition:</b> rotor.h:598</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBGlobalDataBase_shtml_a1e3b6d38df0786ccf7f938d60e386aae"><div class="ttname"><a href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OpenBabel::OBGlobalDataBase::Init</a></div><div class="ttdeci">void Init()</div><div class="ttdoc">Read in the data file, falling back as needed. </div><div class="ttdef"><b>Definition:</b> data.cpp:1044</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotorRule_shtml_a236044823d65dffe4868c831e45a157b"><div class="ttname"><a href="classOpenBabel_1_1OBRotorRule.shtml#a236044823d65dffe4868c831e45a157b">OpenBabel::OBRotorRule::~OBRotorRule</a></div><div class="ttdeci">~OBRotorRule()</div><div class="ttdef"><b>Definition:</b> rotor.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBRotor_shtml_a1b723190c734e234d87398f8eb245a8e"><div class="ttname"><a href="classOpenBabel_1_1OBRotor.shtml#a1b723190c734e234d87398f8eb245a8e">OpenBabel::OBRotor::GetBond</a></div><div class="ttdeci">OBBond * GetBond()</div><div class="ttdef"><b>Definition:</b> rotor.h:329</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
