<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBTetraNonPlanarStereo Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml">OBTetraNonPlanarStereo</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1OBTetraNonPlanarStereo-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBTetraNonPlanarStereo Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span><div class="ingroups"><a class="el" href="group__stereo.shtml">Stereochemistry</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="tetranonplanar_8h_source.shtml">openbabel/stereo/tetranonplanar.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBTetraNonPlanarStereo:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBTetraNonPlanarStereo.png" usemap="#OBTetraNonPlanarStereo_map" alt=""/>
  <map id="OBTetraNonPlanarStereo_map" name="OBTetraNonPlanarStereo_map">
<area href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes. " alt="OBStereoBase" shape="rect" coords="0,56,156,80"/>
<area href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. " alt="OBGenericData" shape="rect" coords="0,0,156,24"/>
<area href="classOpenBabel_1_1OBTetrahedralStereo.shtml" title="Class for handling and storing tetrahedral atom stereochemistry. " alt="OBTetrahedralStereo" shape="rect" coords="0,168,156,192"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a76a717b3c27a5227213ad8fc615e7988"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#a76a717b3c27a5227213ad8fc615e7988">OBTetraNonPlanarStereo</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol)</td></tr>
<tr class="separator:a76a717b3c27a5227213ad8fc615e7988"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a852f4efe1f1a0b847ef22bef9203d493"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#a852f4efe1f1a0b847ef22bef9203d493">~OBTetraNonPlanarStereo</a> ()</td></tr>
<tr class="separator:a852f4efe1f1a0b847ef22bef9203d493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab00b0697ccbb41c687e4031c1f5e6761"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">Clone</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *) const</td></tr>
<tr class="separator:ab00b0697ccbb41c687e4031c1f5e6761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae3d15983201a2a115701b2c538fef77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#aae3d15983201a2a115701b2c538fef77">SetAttribute</a> (const std::string &amp;v)</td></tr>
<tr class="separator:aae3d15983201a2a115701b2c538fef77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45613e34598a9584fb0120ef3fdab9e0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a45613e34598a9584fb0120ef3fdab9e0">SetOrigin</a> (const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> s)</td></tr>
<tr class="separator:a45613e34598a9584fb0120ef3fdab9e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac61fc66ef692e79290d6eaf7231db92c"><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#ac61fc66ef692e79290d6eaf7231db92c">GetAttribute</a> () const</td></tr>
<tr class="separator:ac61fc66ef692e79290d6eaf7231db92c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91834e24b299c63cdf2cb77795298446"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a91834e24b299c63cdf2cb77795298446">GetDataType</a> () const</td></tr>
<tr class="separator:a91834e24b299c63cdf2cb77795298446"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6145f0df06364b6d58c728368db8f992"><td class="memItemLeft" align="right" valign="top">virtual const std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a6145f0df06364b6d58c728368db8f992">GetValue</a> () const</td></tr>
<tr class="separator:a6145f0df06364b6d58c728368db8f992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf131b210114ba636246ffc8dcb2ea13"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adf131b210114ba636246ffc8dcb2ea13">GetOrigin</a> () const</td></tr>
<tr class="separator:adf131b210114ba636246ffc8dcb2ea13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Geniric (for all OBStereo::Type) stereochemistry</div></td></tr>
<tr class="memitem:af2ef37946c0974e77c1d76e0e789443f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#af2ef37946c0974e77c1d76e0e789443f">GetMolecule</a> () const</td></tr>
<tr class="separator:af2ef37946c0974e77c1d76e0e789443f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cf9ac8023da9840e4cb56d138431e45"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#a6cf9ac8023da9840e4cb56d138431e45">GetType</a> () const =0</td></tr>
<tr class="separator:a6cf9ac8023da9840e4cb56d138431e45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa03f9b7e07be400ad77ba2306a2f1619"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#aa03f9b7e07be400ad77ba2306a2f1619">SetSpecified</a> (bool specified)</td></tr>
<tr class="separator:aa03f9b7e07be400ad77ba2306a2f1619"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92e950621d78cfc00bb29f66f0c67255"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml#a92e950621d78cfc00bb29f66f0c67255">IsSpecified</a> () const</td></tr>
<tr class="separator:a92e950621d78cfc00bb29f66f0c67255"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ac6f1bf41e38b3e8b182fa57269046070"><td class="memTemplParams" colspan="2">template&lt;typename ConfigType &gt; </td></tr>
<tr class="memitem:ac6f1bf41e38b3e8b182fa57269046070"><td class="memTemplItemLeft" align="right" valign="top">static ConfigType&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#ac6f1bf41e38b3e8b182fa57269046070">ToConfig</a> (const ConfigType &amp;cfg, unsigned long from_or_towards, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">OBStereo::Winding</a> winding=<a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7">OBStereo::Clockwise</a>, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">OBStereo::View</a> view=<a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e">OBStereo::ViewFrom</a>)</td></tr>
<tr class="separator:ac6f1bf41e38b3e8b182fa57269046070"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bcce1b06cf3b4bedda017788b670561"><td class="memTemplParams" colspan="2">template&lt;typename ConfigType &gt; </td></tr>
<tr class="memitem:a2bcce1b06cf3b4bedda017788b670561"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#a2bcce1b06cf3b4bedda017788b670561">ChangeWinding</a> (ConfigType &amp;cfg)</td></tr>
<tr class="separator:a2bcce1b06cf3b4bedda017788b670561"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b6468e32f45ddd869bb6562e48932ba"><td class="memTemplParams" colspan="2">template&lt;typename ConfigType &gt; </td></tr>
<tr class="memitem:a7b6468e32f45ddd869bb6562e48932ba"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#a7b6468e32f45ddd869bb6562e48932ba">ChangeView</a> (ConfigType &amp;cfg)</td></tr>
<tr class="separator:a7b6468e32f45ddd869bb6562e48932ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae41e67e3acadf06788b04ab7252e0e8"><td class="memTemplParams" colspan="2">template&lt;typename ConfigType &gt; </td></tr>
<tr class="memitem:aae41e67e3acadf06788b04ab7252e0e8"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#aae41e67e3acadf06788b04ab7252e0e8">Invert</a> (ConfigType &amp;cfg)</td></tr>
<tr class="separator:aae41e67e3acadf06788b04ab7252e0e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:adceb77134f15418a66cf1124dcef1b51"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#adceb77134f15418a66cf1124dcef1b51">_attr</a></td></tr>
<tr class="separator:adceb77134f15418a66cf1124dcef1b51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31291823d487a4a47f24aae5870505ef"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a31291823d487a4a47f24aae5870505ef">_type</a></td></tr>
<tr class="separator:a31291823d487a4a47f24aae5870505ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a239606b62a534e4df7626ea0cfdfb856"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml#a239606b62a534e4df7626ea0cfdfb856">_source</a></td></tr>
<tr class="separator:a239606b62a534e4df7626ea0cfdfb856"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Base class for handling and storing non-planar stereochemistry with 4 reference atom ids. </p>
<div class="image">
<img src="tetranonplanar.png" alt="tetranonplanar.png"/>
</div>
<h1><a class="anchor" id="Combinations"></a>
Combinations</h1>
<p>The four reference ids can be treated like a sequence of 4 numbers. Each element can only occur once. This means there are 4! = 24 combinations.</p>
<p>These are the 24 possible combinations or permutations. </p><div class="fragment"><div class="line">1234   2134   3124   4123</div><div class="line">1243   2143   3142   4132</div><div class="line">1324   2314   3214   4213</div><div class="line">1342   2341   3241   4231</div><div class="line">1423   2413   3412   4312</div><div class="line">1432   2431   3421   4321</div></div><!-- fragment --><p>However, when dealing with tetrahedral stereochemistry, it is often easier to visualize by viewing from/towards one of the reference atoms to/from the center atom. This reduces the 24 possible combinations to 3! = 6.</p>
<div class="fragment"><div class="line">123   321</div><div class="line">231   213</div><div class="line">312   132</div></div><!-- fragment --><p>These can be devided in 2 groups: clockwise or anti-clockwise</p>
<div class="fragment"><div class="line">clockwise: 123, 231, 312</div><div class="line">anti-clockwise: 321, 213, 132</div></div><!-- fragment --><p>Since subclass ConfigType structs accept refs viewing from/towards any atom, it is needed to have some rules for converting.</p>
<p>A single permutation of two consecutive elements in a sequence of 3 changes the winding. All permutations can be expressed as a combination of consecutive permutations. The number of consecutive permutations can be calculated from the difference in inversions (NumInversions()).</p>
<p>If we exchange the from atom with another atom in the sequence, the oddness of the difference in inversions between the 2 sequences is calculated. If this is even, no extra permutation is needed. If this is odd, an extra permutation is needed.</p>
<p>Switching between viewing from and viewing towards reverses the winding.</p>
<p>Like all stereo classes, errors, warnings or info is reported using <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a>.</p>
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a76a717b3c27a5227213ad8fc615e7988"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76a717b3c27a5227213ad8fc615e7988">&sect;&nbsp;</a></span>OBTetraNonPlanarStereo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml">OBTetraNonPlanarStereo</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Constructor </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a852f4efe1f1a0b847ef22bef9203d493"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a852f4efe1f1a0b847ef22bef9203d493">&sect;&nbsp;</a></span>~OBTetraNonPlanarStereo()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml">OBTetraNonPlanarStereo</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ac6f1bf41e38b3e8b182fa57269046070"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6f1bf41e38b3e8b182fa57269046070">&sect;&nbsp;</a></span>ToConfig()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static ConfigType ToConfig </td>
          <td>(</td>
          <td class="paramtype">const ConfigType &amp;&#160;</td>
          <td class="paramname"><em>cfg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>from_or_towards</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">OBStereo::Winding</a>&#160;</td>
          <td class="paramname"><em>winding</em> = <code><a class="el" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7">OBStereo::Clockwise</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">OBStereo::View</a>&#160;</td>
          <td class="paramname"><em>view</em> = <code><a class="el" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e">OBStereo::ViewFrom</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Convert a <code>ConfigType</code> struct from any View/Winding to the desired representation.</p>
<p>This is a template method which works on ConfigType structs from OBTetraNonPlanar subclasses. The subclasses can decide what data member are needed to store the stereogenic unit (i.e. 1 atom for tetrahedral, 3 for allene like, ...) and still use this generic method to handle the real stereochemistry.</p>
<p>A ConfigType struct should at least have the following data members: </p><div class="fragment"><div class="line"><span class="keyword">class </span>SomeNonPlanarStereo : <span class="keyword">public</span> TetraNonPlanarStereo</div><div class="line">{</div><div class="line">  <span class="keyword">public</span>:</div><div class="line">    <span class="keyword">struct </span>Config</div><div class="line">    {</div><div class="line">      <span class="comment">// constructor(s) are recommended!</span></div><div class="line"></div><div class="line">      <span class="comment">// subclass specific stereogenic unit</span></div><div class="line">      ...</div><div class="line"></div><div class="line">      <span class="keyword">union </span>{</div><div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> from;</div><div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> towards;</div><div class="line">      };</div><div class="line">      <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">OBStereo::Refs</a> refs;</div><div class="line">      <a class="code" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">OBStereo::Winding</a> winding;</div><div class="line">      <a class="code" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">OBStereo::View</a> view;</div><div class="line">    };</div><div class="line">};</div></div><!-- fragment --><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">cfg</td><td>A ConfigType struct from a OBTetraNonPlanar subclass. </td></tr>
    <tr><td class="paramname">from_or_towards</td><td>The desired from/towards reference id (see <code>view</code>) </td></tr>
    <tr><td class="paramname">winding</td><td>The desired winding. </td></tr>
    <tr><td class="paramname">view</td><td>The desired viewing direction.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The ConfigType struct with desired from/towards, winding and view. </dd></dl>

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBTetrahedralConfig.shtml#a1b196e01d93eb74fb83afbc4bc6ca548">OBTetrahedralConfig::operator==()</a>.</p>

</div>
</div>
<a id="a2bcce1b06cf3b4bedda017788b670561"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2bcce1b06cf3b4bedda017788b670561">&sect;&nbsp;</a></span>ChangeWinding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ChangeWinding </td>
          <td>(</td>
          <td class="paramtype">ConfigType &amp;&#160;</td>
          <td class="paramname"><em>cfg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Change the winding of the ConfigType struct while maintaining the stereochemistry. </p>

</div>
</div>
<a id="a7b6468e32f45ddd869bb6562e48932ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b6468e32f45ddd869bb6562e48932ba">&sect;&nbsp;</a></span>ChangeView()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ChangeView </td>
          <td>(</td>
          <td class="paramtype">ConfigType &amp;&#160;</td>
          <td class="paramname"><em>cfg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Change the view of the ConfigType struct while maintaining the stereochemistry. </p>

</div>
</div>
<a id="aae41e67e3acadf06788b04ab7252e0e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae41e67e3acadf06788b04ab7252e0e8">&sect;&nbsp;</a></span>Invert()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void Invert </td>
          <td>(</td>
          <td class="paramtype">ConfigType &amp;&#160;</td>
          <td class="paramname"><em>cfg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Invert the stereochemistry of the ConfigType struct. </p>

</div>
</div>
<a id="af2ef37946c0974e77c1d76e0e789443f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2ef37946c0974e77c1d76e0e789443f">&sect;&nbsp;</a></span>GetMolecule()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* GetMolecule </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the molecule. This can be used by subclasses when more information is needed (e.g. <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml#a822b380c82331958a3997b48154d2556">OBCisTransStereo::GetCisRef</a>, ...). </p>

</div>
</div>
<a id="a6cf9ac8023da9840e4cb56d138431e45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cf9ac8023da9840e4cb56d138431e45">&sect;&nbsp;</a></span>GetType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Reimplemented by subclasses to return the type defined in <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a>. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml#a498fb01456d4134b9730009c7af11da6">OBCisTransStereo</a>, <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml#a498fb01456d4134b9730009c7af11da6">OBTetrahedralStereo</a>, and <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a498fb01456d4134b9730009c7af11da6">OBSquarePlanarStereo</a>.</p>

</div>
</div>
<a id="aa03f9b7e07be400ad77ba2306a2f1619"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa03f9b7e07be400ad77ba2306a2f1619">&sect;&nbsp;</a></span>SetSpecified()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetSpecified </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>specified</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set whether the stereochemistry is specified. Comparing a specified <a class="el" href="classOpenBabel_1_1OBStereoBase.shtml" title="Base class for all stereochemistry classes. ">OBStereoBase</a> derived class (or it's Config struct) with an unspecified one, always returns true. </p>

</div>
</div>
<a id="a92e950621d78cfc00bb29f66f0c67255"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a92e950621d78cfc00bb29f66f0c67255">&sect;&nbsp;</a></span>IsSpecified()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsSpecified </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>True if the stereochemistry is specified. </dd></dl>

</div>
</div>
<a id="ab00b0697ccbb41c687e4031c1f5e6761"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab00b0697ccbb41c687e4031c1f5e6761">&sect;&nbsp;</a></span>Clone()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* Clone </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBMatrixData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBMatrixData</a>, <a class="el" href="classOpenBabel_1_1OBVectorData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBVectorData</a>, <a class="el" href="classOpenBabel_1_1OBRotationData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBRotationData</a>, <a class="el" href="classOpenBabel_1_1OBElectronicTransitionData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBElectronicTransitionData</a>, <a class="el" href="classOpenBabel_1_1OBOrbitalData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBOrbitalData</a>, <a class="el" href="classOpenBabel_1_1OBDOSData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBDOSData</a>, <a class="el" href="classOpenBabel_1_1OBVibrationData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBVibrationData</a>, <a class="el" href="classOpenBabel_1_1OBSerialNums.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBSerialNums</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBChiralData</a>, <a class="el" href="classOpenBabel_1_1OBAngleData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBAngleData</a>, <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBTorsionData</a>, <a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBSymmetryData</a>, <a class="el" href="classOpenBabel_1_1OBConformerData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBConformerData</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBUnitCell</a>, <a class="el" href="classOpenBabel_1_1OBRingData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBRingData</a>, <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml#a3935ba48816d0feefb2e2d941d1b4ba6">OBCisTransStereo</a>, <a class="el" href="classOpenBabel_1_1OBVirtualBond.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBVirtualBond</a>, <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml#a3935ba48816d0feefb2e2d941d1b4ba6">OBTetrahedralStereo</a>, <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a3935ba48816d0feefb2e2d941d1b4ba6">OBSquarePlanarStereo</a>, <a class="el" href="classOpenBabel_1_1OBSetData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBSetData</a>, <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a340df9e4f2c1c91ca091a91ed451da5e">OBNasaThermoData</a>, <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBPairTemplate&lt; ValueT &gt;</a>, <a class="el" href="classOpenBabel_1_1OBPairData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBPairData</a>, <a class="el" href="classOpenBabel_1_1OBExternalBondData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBExternalBondData</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">AliasData</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#ab7b6bdffe6ade9a2965ceaae38bb9340">OBRotamerList</a>, <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBCommentData</a>, <a class="el" href="classOpenBabel_1_1OBAtomClassData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OBAtomClassData</a>, and <a class="el" href="classOpenBabel_1_1OBRateData.shtml#a340df9e4f2c1c91ca091a91ed451da5e">OBRateData</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBase.shtml#aa6f692332837387535e337413d0100de">OBBase::CloneData()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="aae3d15983201a2a115701b2c538fef77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae3d15983201a2a115701b2c538fef77">&sect;&nbsp;</a></span>SetAttribute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAttribute </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the attribute (key), which can be used to retrieve this data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a id="a45613e34598a9584fb0120ef3fdab9e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45613e34598a9584fb0120ef3fdab9e0">&sect;&nbsp;</a></span>SetOrigin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetOrigin </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the origin of this data, which can be used to filter the data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abee51ea4be988357bb17c4e5fd3d7e12">OBMol::FindAngles()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">OBMol::FindTorsions()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">OBMol::GetLSSR()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">OBMol::GetSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">OBMol::SetFormula()</a>.</p>

</div>
</div>
<a id="ac61fc66ef692e79290d6eaf7231db92c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac61fc66ef692e79290d6eaf7231db92c">&sect;&nbsp;</a></span>GetAttribute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetAttribute </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The attribute (key), which can be used to retrieve this data </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a632be87a51811b515f7e9a5fc18e4476">OpenBabel::extract_thermochemistry()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a id="a91834e24b299c63cdf2cb77795298446"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91834e24b299c63cdf2cb77795298446">&sect;&nbsp;</a></span>GetDataType()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetDataType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the data type for this object as defined in <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a id="a6145f0df06364b6d58c728368db8f992"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6145f0df06364b6d58c728368db8f992">&sect;&nbsp;</a></span>GetValue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const std::string&amp; GetValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Base class returns a default value (the attribute type) but should never be called. </p>

<p>Reimplemented in <a class="el" href="classOpenBabel_1_1OBPairData.shtml#a6145f0df06364b6d58c728368db8f992">OBPairData</a>, and <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#a6145f0df06364b6d58c728368db8f992">OBCommentData</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>.</p>

</div>
</div>
<a id="adf131b210114ba636246ffc8dcb2ea13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf131b210114ba636246ffc8dcb2ea13">&sect;&nbsp;</a></span>GetOrigin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> GetOrigin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="adceb77134f15418a66cf1124dcef1b51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adceb77134f15418a66cf1124dcef1b51">&sect;&nbsp;</a></span>_attr</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _attr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>attribute tag (e.g., "UnitCell", "Comment" or "Author") </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#ab7b6bdffe6ade9a2965ceaae38bb9340">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a id="a31291823d487a4a47f24aae5870505ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31291823d487a4a47f24aae5870505ef">&sect;&nbsp;</a></span>_type</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int _type</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>attribute type &ndash; declared for each subclass </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#ab7b6bdffe6ade9a2965ceaae38bb9340">OBRotamerList::Clone()</a>, and <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a id="a239606b62a534e4df7626ea0cfdfb856"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a239606b62a534e4df7626ea0cfdfb856">&sect;&nbsp;</a></span>_source</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> _source</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>source of data for accounting </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConformerData.shtml#a7c2db1828edcca7ff07c8591744ec3a4">OBConformerData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml#ae1e415e9a406f4965be7352a3c66fa3a">OBSymmetryData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml#ab526e7eddb908b711e19aa355d133241">OBTorsionData::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBAngleData.shtml#af0af03b552fac05db59787be08a443eb">OBAngleData::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a2d8a571296610389b9427aef139b1d8d">OBChiralData::operator=()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="tetranonplanar_8h_source.shtml">tetranonplanar.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
