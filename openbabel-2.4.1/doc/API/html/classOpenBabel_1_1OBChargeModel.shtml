<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBChargeModel Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml">OBChargeModel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1OBChargeModel-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBChargeModel Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="chargemodel_8h_source.shtml">openbabel/chargemodel.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBChargeModel:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBChargeModel.png" usemap="#OBChargeModel_map" alt=""/>
  <map id="OBChargeModel_map" name="OBChargeModel_map">
<area href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime. " alt="OBPlugin" shape="rect" coords="0,0,107,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
<tr class="separator:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
<tr class="separator:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a45db88b29eb37e9dd105bf4032e421d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a> ()</td></tr>
<tr class="separator:a45db88b29eb37e9dd105bf4032e421d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1565bad41b60b6a497cb6a6b76f36d4b"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a1565bad41b60b6a497cb6a6b76f36d4b">ComputeCharges</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;m)</td></tr>
<tr class="separator:a1565bad41b60b6a497cb6a6b76f36d4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bbe8c6fc8446fc2e544dee511a14957"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a1bbe8c6fc8446fc2e544dee511a14957">ComputeCharges</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;m, const char *args)</td></tr>
<tr class="separator:a1bbe8c6fc8446fc2e544dee511a14957"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99676efc4f2c394ed7780d22f3d2959c"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; double &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a99676efc4f2c394ed7780d22f3d2959c">GetFormalCharges</a> () const</td></tr>
<tr class="separator:a99676efc4f2c394ed7780d22f3d2959c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad285304ea97143af5eba278f69002539"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; double &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#ad285304ea97143af5eba278f69002539">GetPartialCharges</a> () const</td></tr>
<tr class="separator:ad285304ea97143af5eba278f69002539"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b1ae06b444f49a68b2e2c8ac9a0c534"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a9b1ae06b444f49a68b2e2c8ac9a0c534">GetDipoleMoment</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr class="separator:a9b1ae06b444f49a68b2e2c8ac9a0c534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>
<tr class="separator:ga4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gae0859fdbf134af95a8231eb32c73b7db"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gae0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>
<tr class="separator:gae0859fdbf134af95a8231eb32c73b7db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9399e9568ab809d714385f1b237a9335"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;)</td></tr>
<tr class="separator:ga9399e9568ab809d714385f1b237a9335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e0b39e1326de703012f81ac2be7feba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a> ()</td></tr>
<tr class="separator:ga3e0b39e1326de703012f81ac2be7feba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaa55e5ad893f2566c6874224f9174b7d2">GetID</a> () const</td></tr>
<tr class="separator:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
<tr class="separator:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ga295dc7f1b94da710821c562bff3e7c97"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga295dc7f1b94da710821c562bff3e7c97">GetPlugin</a> (const char *Type, const char *ID)</td></tr>
<tr class="separator:ga295dc7f1b94da710821c562bff3e7c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf95953a5793333ba51e978c4a0a00103"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaf95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>
<tr class="separator:gaf95953a5793333ba51e978c4a0a00103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>
<tr class="separator:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba22c5352d36c7f058299af7ddffb03e"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>
<tr class="separator:gaba22c5352d36c7f058299af7ddffb03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>
<tr class="separator:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>
<tr class="separator:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>
<tr class="separator:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">LoadAllPlugins</a> ()</td></tr>
<tr class="separator:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:aefec0fbdf06bb4199614da22f1a9deee"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aefec0fbdf06bb4199614da22f1a9deee">FillChargeVectors</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:aefec0fbdf06bb4199614da22f1a9deee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38074e4c8bdf55f4c0fc5f66bf8e8065"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a38074e4c8bdf55f4c0fc5f66bf8e8065">DipoleScalingFactor</a> ()</td></tr>
<tr class="separator:a38074e4c8bdf55f4c0fc5f66bf8e8065"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
<tr class="separator:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
<tr class="separator:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
<tr class="separator:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:aacfd3c312da07c274fddf70535d5485e"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aacfd3c312da07c274fddf70535d5485e">m_partialCharges</a></td></tr>
<tr class="separator:aacfd3c312da07c274fddf70535d5485e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfe2c37552d808ee93749e89ba1e1030"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#adfe2c37552d808ee93749e89ba1e1030">m_formalCharges</a></td></tr>
<tr class="separator:adfe2c37552d808ee93749e89ba1e1030"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1f8d25dafb0bc13814ca451035f67955"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>
<tr class="separator:ga1f8d25dafb0bc13814ca451035f67955"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9d7dd3bbc482a65e28ca887b3faa2535">AllPluginsLoaded</a> = 0</td></tr>
<tr class="separator:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Atomic partial charge models. </p>
<dl class="section since"><dt>Since</dt><dd>version 2.3</dd></dl>
<p>Classes derived from <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml" title="Atomic partial charge models. ">OBChargeModel</a> implement different atomic partial charge models. It is intended to allow assinging partial charges beyond the traditional Gasteiger-Marsili sigma charges previously used in Open Babel. A &ndash;partialcharge method is provided for the babel command-line, allowing you to override the Gasteiger charge assignment and use other charge models.</p>
<p>The advantage of plugin classes is that no existing code has to be modified when a new class is added. You can list those that are present by babel -L charges or from a menu item in the GUI.</p>
<p>Any <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml" title="Atomic partial charge models. ">OBChargeModel</a> derived class works like other plugins and needs to to have a constructor, a function returning a short description, and a <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a1565bad41b60b6a497cb6a6b76f36d4b">ComputeCharges()</a> function which does the work. A single global instance of the class needs to be instantiated to define the ID, by which the class is subsequently accessed.</p>
<p>Once <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a1565bad41b60b6a497cb6a6b76f36d4b">ComputeCharges()</a> has been called, the atoms of the molecule can be queried for partial or formal charges using <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aeccf78db112723467e7756a5734c82b9">OBAtom::GetPartialCharge()</a> or in vector form from the model itself:</p>
<div class="fragment"><div class="line">OBMol inputMolecule;</div><div class="line">OBChargeModel *mmffCharges = OBChargeModel::FindType(<span class="stringliteral">&quot;mmff94&quot;</span>);</div><div class="line"><span class="keyword">const</span> std::vector&lt;double&gt; partialCharges;</div><div class="line"><span class="keywordflow">if</span> (mmffCharges &amp;&amp; mmffCharges-&gt;ComputeCharges(inputMolecule)) {</div><div class="line">  partialCharges = mmffCharges-&gt;GetPartialCharges();</div><div class="line">}</div></div><!-- fragment --><p>Note: Formal charges are also returned as floating point values, since some charge models consider delocalized charges (e.g., 0.5 for an O in a carboxylate CO2- group).</p>
<div class="fragment"><div class="line">OBChargeModel *gasteiger = OBChargeModel::FindType(<span class="stringliteral">&quot;gasteiger&quot;</span>);</div><div class="line"><span class="keywordflow">if</span> (gasteiger) {</div><div class="line">  cout &lt;&lt; <span class="stringliteral">&quot; gasteiger: &quot;</span> &lt;&lt; dipoleMagnitude(gasteiger-&gt;GetDipoleMoment(mol));</div><div class="line">}</div></div><!-- fragment --><p>By default, Open Babel 2.3 includes Gasteiger and MMFF94 partial charges. If the Eigen matrix library is found when compiling, the QEq and QTPIE methods will be added. Future releases will likely add additional charge models, including the EEM method. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a45db88b29eb37e9dd105bf4032e421d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45db88b29eb37e9dd105bf4032e421d2">&sect;&nbsp;</a></span>TypeID()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* TypeID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Redefined by each plugin type: "formats", "fingerprints", etc. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">OBPlugin</a>.</p>

</div>
</div>
<a id="a1565bad41b60b6a497cb6a6b76f36d4b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1565bad41b60b6a497cb6a6b76f36d4b">&sect;&nbsp;</a></span>ComputeCharges() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ComputeCharges </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether partial charges were successfully assigned to this molecule </dd></dl>
<dl class="section note"><dt>Note</dt><dd>The method should fill m_partialCharges and m_formalCharges as well </dd></dl>

</div>
</div>
<a id="a1bbe8c6fc8446fc2e544dee511a14957"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bbe8c6fc8446fc2e544dee511a14957">&sect;&nbsp;</a></span>ComputeCharges() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool ComputeCharges </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>args</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a1bbe8c6fc8446fc2e544dee511a14957">OBChargeModel::ComputeCharges()</a>.</p>

</div>
</div>
<a id="a99676efc4f2c394ed7780d22f3d2959c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99676efc4f2c394ed7780d22f3d2959c">&sect;&nbsp;</a></span>GetFormalCharges()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;double&gt;&amp; GetFormalCharges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a vector of the formal charges on each atom, indexed from 0 This method returns floating point formal charges since some charge models consider fractional charges (e.g., 0.5 for an oxygen in a carboxylate CO2- group). </dd></dl>
<dl class="section note"><dt>Note</dt><dd>If <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a1565bad41b60b6a497cb6a6b76f36d4b">ComputeCharges()</a> has not been called, this will return an empty vector </dd></dl>

</div>
</div>
<a id="ad285304ea97143af5eba278f69002539"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad285304ea97143af5eba278f69002539">&sect;&nbsp;</a></span>GetPartialCharges()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;double&gt;&amp; GetPartialCharges </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a vector of the partial charges on each atom, indexed from 0 </dd></dl>
<dl class="section note"><dt>Note</dt><dd>If <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a1565bad41b60b6a497cb6a6b76f36d4b">ComputeCharges()</a> has not been called, this will return an empty vector </dd></dl>

</div>
</div>
<a id="a9b1ae06b444f49a68b2e2c8ac9a0c534"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b1ae06b444f49a68b2e2c8ac9a0c534">&sect;&nbsp;</a></span>GetDipoleMoment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> GetDipoleMoment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>a vector of the dipole moment from this molecule </dd></dl>

</div>
</div>
<a id="aefec0fbdf06bb4199614da22f1a9deee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefec0fbdf06bb4199614da22f1a9deee">&sect;&nbsp;</a></span>FillChargeVectors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FillChargeVectors </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fill the internal partial and formal charge vectors (convenience function) </p>

</div>
</div>
<a id="a38074e4c8bdf55f4c0fc5f66bf8e8065"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38074e4c8bdf55f4c0fc5f66bf8e8065">&sect;&nbsp;</a></span>DipoleScalingFactor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual double DipoleScalingFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Provide a scaling factor for the dipole moment &ndash; ideally calibrated from many molecules. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="aacfd3c312da07c274fddf70535d5485e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aacfd3c312da07c274fddf70535d5485e">&sect;&nbsp;</a></span>m_partialCharges</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double&gt; m_partialCharges</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adfe2c37552d808ee93749e89ba1e1030"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfe2c37552d808ee93749e89ba1e1030">&sect;&nbsp;</a></span>m_formalCharges</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double&gt; m_formalCharges</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="chargemodel_8h_source.shtml">chargemodel.h</a></li>
<li><a class="el" href="chargemodel_8cpp.shtml">chargemodel.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
