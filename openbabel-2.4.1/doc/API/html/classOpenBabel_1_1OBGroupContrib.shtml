<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBGroupContrib Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-static-methods">Static Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pro-static-attribs">Static Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1OBGroupContrib-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBGroupContrib Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="groupcontrib_8h_source.shtml">openbabel/groupcontrib.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBGroupContrib:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBGroupContrib.png" usemap="#OBGroupContrib_map" alt=""/>
  <map id="OBGroupContrib_map" name="OBGroupContrib_map">
<area href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features. " alt="OBDescriptor" shape="rect" coords="0,56,106,80"/>
<area href="classOpenBabel_1_1OBPlugin.shtml" title="Base class for all types of dynamic classes discovered at runtime. " alt="OBPlugin" shape="rect" coords="0,0,106,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; const char *, <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *, <a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a></td></tr>
<tr class="separator:ga0fd3c807ed3341c33070c93b14739bc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memItemLeft" align="right" valign="top">typedef PluginMapType::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a></td></tr>
<tr class="separator:ga8fac85f5497f873a2dd8734b47f0bdc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab9a6ae6c869cad36dc6628f18b2ce677"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#ab9a6ae6c869cad36dc6628f18b2ce677">OBGroupContrib</a> (const char *ID, const char *filename, const char *descr)</td></tr>
<tr class="separator:ab9a6ae6c869cad36dc6628f18b2ce677"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memItemLeft" align="right" valign="top">virtual const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#a4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a> ()</td></tr>
<tr class="separator:a4a6b8d1611d5d963fc29982cc1ebcbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab91e9dba77605edc84876eac596f2094"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#ab91e9dba77605edc84876eac596f2094">MakeInstance</a> (const std::vector&lt; std::string &gt; &amp;textlines)</td></tr>
<tr class="separator:ab91e9dba77605edc84876eac596f2094"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad81c5bb776314e5eb855eca1e5bca292"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#ad81c5bb776314e5eb855eca1e5bca292">Predict</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string *param=NULL)</td></tr>
<tr class="separator:ad81c5bb776314e5eb855eca1e5bca292"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45db88b29eb37e9dd105bf4032e421d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a> ()</td></tr>
<tr class="separator:a45db88b29eb37e9dd105bf4032e421d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a6e9ddee5b20a8911bc9f6e407d1abd"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">PredictAndSave</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string *param=NULL)</td></tr>
<tr class="separator:a3a6e9ddee5b20a8911bc9f6e407d1abd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade8613a3e82627568adbac497bd3422b"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ade8613a3e82627568adbac497bd3422b">GetStringValue</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string &amp;svalue, std::string *param=NULL)</td></tr>
<tr class="separator:ade8613a3e82627568adbac497bd3422b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a775da37f5ce464013813ec66b3a349"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a5a775da37f5ce464013813ec66b3a349">Compare</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::istream &amp;ss, bool noEval, std::string *param=NULL)</td></tr>
<tr class="separator:a5a775da37f5ce464013813ec66b3a349"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0859fdbf134af95a8231eb32c73b7db"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ae0859fdbf134af95a8231eb32c73b7db">Display</a> (std::string &amp;txt, const char *param, const char *ID=NULL)</td></tr>
<tr class="separator:ae0859fdbf134af95a8231eb32c73b7db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9b3638a021a9cafc06d8e7059907740"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ac9b3638a021a9cafc06d8e7059907740">Order</a> (double p1, double p2)</td></tr>
<tr class="separator:ac9b3638a021a9cafc06d8e7059907740"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada86af1dfb13dd68c119d412480c78c3"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ada86af1dfb13dd68c119d412480c78c3">Order</a> (std::string s1, std::string s2)</td></tr>
<tr class="separator:ada86af1dfb13dd68c119d412480c78c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga3e0b39e1326de703012f81ac2be7feba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga3e0b39e1326de703012f81ac2be7feba">Init</a> ()</td></tr>
<tr class="separator:ga3e0b39e1326de703012f81ac2be7feba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaa55e5ad893f2566c6874224f9174b7d2">GetID</a> () const</td></tr>
<tr class="separator:gaa55e5ad893f2566c6874224f9174b7d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaabc1385cbe63145ffec6edf1f2c3be98">GetMap</a> () const =0</td></tr>
<tr class="separator:gaabc1385cbe63145ffec6edf1f2c3be98"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a1d0907c6fab9cdb01ce11858eb5f0860"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">FilterCompare</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::istream &amp;ss, bool noEval)</td></tr>
<tr class="separator:a1d0907c6fab9cdb01ce11858eb5f0860"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2230dfc67c9b617df81f950e382844cc"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a2230dfc67c9b617df81f950e382844cc">AddProperties</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, const std::string &amp;DescrList)</td></tr>
<tr class="separator:a2230dfc67c9b617df81f950e382844cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a089d9c827830b5a9a2e644b267e510"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">DeleteProperties</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, const std::string &amp;DescrList)</td></tr>
<tr class="separator:a1a089d9c827830b5a9a2e644b267e510"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a789fe3d5cae737f1caa28590fe29f460"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">GetValues</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, const std::string &amp;DescrList)</td></tr>
<tr class="separator:a789fe3d5cae737f1caa28590fe29f460"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d1adeb0f4720b6af7f0fc5569a8bb3e"><td class="memItemLeft" align="right" valign="top">static std::pair&lt; std::string, std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a9d1adeb0f4720b6af7f0fc5569a8bb3e">GetIdentifier</a> (std::istream &amp;optionText)</td></tr>
<tr class="separator:a9d1adeb0f4720b6af7f0fc5569a8bb3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga295dc7f1b94da710821c562bff3e7c97"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga295dc7f1b94da710821c562bff3e7c97">GetPlugin</a> (const char *Type, const char *ID)</td></tr>
<tr class="separator:ga295dc7f1b94da710821c562bff3e7c97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaf95953a5793333ba51e978c4a0a00103"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaf95953a5793333ba51e978c4a0a00103">ListAsVector</a> (const char *PluginID, const char *param, std::vector&lt; std::string &gt; &amp;vlist)</td></tr>
<tr class="separator:gaf95953a5793333ba51e978c4a0a00103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9fabfd2513038ae6ac475ac0ff2c73cd">List</a> (const char *PluginID, const char *param=NULL, std::ostream *os=&amp;std::cout)</td></tr>
<tr class="separator:ga9fabfd2513038ae6ac475ac0ff2c73cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaba22c5352d36c7f058299af7ddffb03e"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gaba22c5352d36c7f058299af7ddffb03e">ListAsString</a> (const char *PluginID, const char *param=NULL)</td></tr>
<tr class="separator:gaba22c5352d36c7f058299af7ddffb03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">FirstLine</a> (const char *txt)</td></tr>
<tr class="separator:ga84fc973fdf4bba5a6b0e2d402077991c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">Begin</a> (const char *PluginID)</td></tr>
<tr class="separator:ga1d4d73999ab0518ee471c635bd0a7e87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">End</a> (const char *PluginID)</td></tr>
<tr class="separator:ga9a330280c1cd2e7119dac87a6fd0b762"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gabfb658dfec57d827a9e3c6db43c2d9d1">LoadAllPlugins</a> ()</td></tr>
<tr class="separator:gabfb658dfec57d827a9e3c6db43c2d9d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-methods"></a>
Static Protected Member Functions</h2></td></tr>
<tr class="memitem:a20b0788ed84f1b69746dfd9ed06be507"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a20b0788ed84f1b69746dfd9ed06be507">ParsePredicate</a> (std::istream &amp;optionText, char &amp;ch1, char &amp;ch2, std::string &amp;svalue)</td></tr>
<tr class="separator:a20b0788ed84f1b69746dfd9ed06be507"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac41e9b3233ce576c2e4c5b242767eaec"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ac41e9b3233ce576c2e4c5b242767eaec">ReadStringFromFilter</a> (std::istream &amp;ss, std::string &amp;result)</td></tr>
<tr class="separator:ac41e9b3233ce576c2e4c5b242767eaec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00c8a88c0a36c9a1167b119214e015e6"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a00c8a88c0a36c9a1167b119214e015e6">CompareStringWithFilter</a> (std::istream &amp;optionText, std::string &amp;s, bool noEval, bool NoCompOK=false)</td></tr>
<tr class="separator:a00c8a88c0a36c9a1167b119214e015e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a865d2be70640a96f185bf78dcaaea8b2"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a865d2be70640a96f185bf78dcaaea8b2">ispunctU</a> (char ch)</td></tr>
<tr class="separator:a865d2be70640a96f185bf78dcaaea8b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e794d96851deaad479e17b30928a3cd"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a4e794d96851deaad479e17b30928a3cd">MatchPairData</a> (<a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *pOb, std::string &amp;s)</td></tr>
<tr class="separator:a4e794d96851deaad479e17b30928a3cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gac40457336d7b12bb632b4ac4e8955a3a">PluginMap</a> ()</td></tr>
<tr class="separator:gac40457336d7b12bb632b4ac4e8955a3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#gadfcf9fda27cfbc4301fc94517a4250ef">GetTypeMap</a> (const char *PluginID)</td></tr>
<tr class="separator:gadfcf9fda27cfbc4301fc94517a4250ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1e58b1811ec8c1b88254ee46ccef0b78">BaseFindType</a> (<a class="el" href="group__plugins.shtml#ga0fd3c807ed3341c33070c93b14739bc8">PluginMapType</a> &amp;Map, const char *ID)</td></tr>
<tr class="separator:ga1e58b1811ec8c1b88254ee46ccef0b78"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:ga1f8d25dafb0bc13814ca451035f67955"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga1f8d25dafb0bc13814ca451035f67955">_id</a></td></tr>
<tr class="separator:ga1f8d25dafb0bc13814ca451035f67955"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-static-attribs"></a>
Static Protected Attributes</h2></td></tr>
<tr class="memitem:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga9d7dd3bbc482a65e28ca887b3faa2535">AllPluginsLoaded</a> = 0</td></tr>
<tr class="separator:ga9d7dd3bbc482a65e28ca887b3faa2535"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Handle group contribution algorithms. </p>
<p>This is the base class for calculations that use the JOELib2 contribution algorithm. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="ab9a6ae6c869cad36dc6628f18b2ce677"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9a6ae6c869cad36dc6628f18b2ce677">&sect;&nbsp;</a></span>OBGroupContrib()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a> </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>descr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>constructor. Each instance provides an ID and a datafile. </p>
<p>Predict the logP, MR, TPSA (each instance of <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms. ">OBGroupContrib</a> uses different parameters loaded from its own datafile) for molecule mol using the group contributions algorithm from JOELib2. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4a6b8d1611d5d963fc29982cc1ebcbf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a6b8d1611d5d963fc29982cc1ebcbf7">&sect;&nbsp;</a></span>Description()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const char* Description </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Required description of a sub-type. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">OBPlugin</a>.</p>

</div>
</div>
<a id="ab91e9dba77605edc84876eac596f2094"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab91e9dba77605edc84876eac596f2094">&sect;&nbsp;</a></span>MakeInstance()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a>* MakeInstance </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Make a new instance of the class. See <a class="el" href="classOpenBabel_1_1OpTransform.shtml" title="Applies molecular reactions/transforms (OBChemTsfm class) read from a datafile. ">OpTransform</a>, <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml" title="Handle group contribution algorithms. ">OBGroupContrib</a>, SmartsDescriptor classes for derived versions. Usually, the first parameter is the classname, the next three are parameters(ID, filename, description) for a constructor, and the rest data. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga9399e9568ab809d714385f1b237a9335">OBPlugin</a>.</p>

</div>
</div>
<a id="ad81c5bb776314e5eb855eca1e5bca292"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad81c5bb776314e5eb855eca1e5bca292">&sect;&nbsp;</a></span>Predict()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual double Predict </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the value of a numeric descriptor </dd></dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a21c9550baf45496df7f4b4ee9e494683">OBDescriptor</a>.</p>

</div>
</div>
<a id="a45db88b29eb37e9dd105bf4032e421d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a45db88b29eb37e9dd105bf4032e421d2">&sect;&nbsp;</a></span>TypeID()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* TypeID </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Redefined by each plugin type: "formats", "fingerprints", etc. </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#ga45dfda1fb13d3c26ab7f8f7631e3351c">OBPlugin</a>.</p>

</div>
</div>
<a id="a3a6e9ddee5b20a8911bc9f6e407d1abd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a6e9ddee5b20a8911bc9f6e407d1abd">&sect;&nbsp;</a></span>PredictAndSave()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double PredictAndSave </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>param</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the value of the descriptor and adds it to the object's <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships. ">OBPairData</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a2230dfc67c9b617df81f950e382844cc">OBDescriptor::AddProperties()</a>.</p>

</div>
</div>
<a id="ade8613a3e82627568adbac497bd3422b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade8613a3e82627568adbac497bd3422b">&sect;&nbsp;</a></span>GetStringValue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double GetStringValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>svalue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>param</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Provides a string value for non-numeric descriptors and returns NaN, or a string representation and returns a numeric value. </p>
<p>This default version provides a string representation of the numeric value. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>.</p>

</div>
</div>
<a id="a5a775da37f5ce464013813ec66b3a349"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5a775da37f5ce464013813ec66b3a349">&sect;&nbsp;</a></span>Compare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Compare </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>ss</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>noEval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string *&#160;</td>
          <td class="paramname"><em>param</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Parses the filter stream for a relational expression and returns its result when applied to the chemical object. </p>
<p><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a5a775da37f5ce464013813ec66b3a349" title="Parses the filter stream for a relational expression and returns its result when applied to the chemi...">Compare()</a> is a virtual function and can be overridden to allow different comparison behaviour. The default implementation here is suitable for <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features. ">OBDescriptor</a> classes which return a double value. The stringstream is parsed to retrieve a comparison operator, one of &gt; &lt; &gt;= &lt;= = == != , and a numerical value. The function compares this the value returned by <a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml#ad81c5bb776314e5eb855eca1e5bca292">Predict()</a> and returns the result. The stringstream is left after the number, and its state reflects whether any errors have occurred. If noEval is true, the parsing is as normal but Predict is not called and the function returns false. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>.</p>

</div>
</div>
<a id="ae0859fdbf134af95a8231eb32c73b7db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae0859fdbf134af95a8231eb32c73b7db">&sect;&nbsp;</a></span>Display()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Display </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>param</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ID</em> = <code>NULL</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Write information on a plugin class to the string txt. If the parameter is a descriptor ID, displays the verbose description for that descriptor only e.g. babel -L descriptors HBA1 </p>

<p>Reimplemented from <a class="el" href="group__plugins.shtml#gae0859fdbf134af95a8231eb32c73b7db">OBPlugin</a>.</p>

</div>
</div>
<a id="ac9b3638a021a9cafc06d8e7059907740"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9b3638a021a9cafc06d8e7059907740">&sect;&nbsp;</a></span>Order() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Order </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Comparison of the values of the descriptor. Used in sorting. Descriptors may use more complicated ordering than this default (e.g.InChIFilter) </p>

</div>
</div>
<a id="ada86af1dfb13dd68c119d412480c78c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada86af1dfb13dd68c119d412480c78c3">&sect;&nbsp;</a></span>Order() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Order </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>s2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1d0907c6fab9cdb01ce11858eb5f0860"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d0907c6fab9cdb01ce11858eb5f0860">&sect;&nbsp;</a></span>FilterCompare()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool FilterCompare </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>optionText</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>noEval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Interprets the &ndash;filter option string and returns the combined result of all the comparisons it contains. </p>
<p>The string has the form: PropertyID1 predicate1 [booleanOp] PropertyID2 predicate2 ... The propertyIDs are the ID of instances of a <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features. ">OBDescriptor</a> class or the Attributes of <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships. ">OBPairData</a>, and contain only letters, numbers and underscores. The predicates must start with a punctuation character and are interpreted by the Compare function of the <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features. ">OBDescriptor</a> class. The default implementation expects a comparison operator and a number, e.g. &gt;=1.3 Whitespace is optional and is ignored. Each predicate and this <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a> object (usually <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>) is passed to the Compare function of a <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml" title="Base class for molecular properties, descriptors or features. ">OBDescriptor</a>. The result of each comparison is combined in a boolean expression (which can include parentheses) in the normal way. The AND operator can be &amp; or &amp;&amp;, the OR operator can be | or ||, and a unitary NOT is ! The expected operator precedence is achieved using recursive calls of the function. If there is no boolean Op, all the tests have to return true for the function to return true, i.e. the default is AND. If the first operand of an AND is 0, or of an OR is 1, the parsing of the second operand continues but no comparisons are done since the result does not matter. </p>

</div>
</div>
<a id="a2230dfc67c9b617df81f950e382844cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2230dfc67c9b617df81f950e382844cc">&sect;&nbsp;</a></span>AddProperties()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void AddProperties </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>DescrList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads list of descriptor IDs and calls <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">PredictAndSave()</a> for each. </p>

</div>
</div>
<a id="a1a089d9c827830b5a9a2e644b267e510"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a089d9c827830b5a9a2e644b267e510">&sect;&nbsp;</a></span>DeleteProperties()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteProperties </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>DescrList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deletes all the OBPairDatas whose attribute names are in the list (if they exist). </p>

</div>
</div>
<a id="a789fe3d5cae737f1caa28590fe29f460"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a789fe3d5cae737f1caa28590fe29f460">&sect;&nbsp;</a></span>GetValues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">string GetValues </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>DescrList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Reads list of descriptor IDs and <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships. ">OBPairData</a> names and returns a list of values, each precede by a space or the first character in the list if it is whitespace or punctuation. </p>

</div>
</div>
<a id="a9d1adeb0f4720b6af7f0fc5569a8bb3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d1adeb0f4720b6af7f0fc5569a8bb3e">&sect;&nbsp;</a></span>GetIdentifier()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">pair&lt; string, string &gt; GetIdentifier </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>optionText</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read an identifier and its parameter from the filter string. </p>

</div>
</div>
<a id="a20b0788ed84f1b69746dfd9ed06be507"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20b0788ed84f1b69746dfd9ed06be507">&sect;&nbsp;</a></span>ParsePredicate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double ParsePredicate </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>optionText</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char &amp;&#160;</td>
          <td class="paramname"><em>ch1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char &amp;&#160;</td>
          <td class="paramname"><em>ch2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>svalue</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads comparison operator and the following string. Return its value if possible else NaN. </p>

</div>
</div>
<a id="ac41e9b3233ce576c2e4c5b242767eaec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac41e9b3233ce576c2e4c5b242767eaec">&sect;&nbsp;</a></span>ReadStringFromFilter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool ReadStringFromFilter </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>ss</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reads a string from the filter string optionally preceded by = or !=. </p>
<p>Reads a string from the filter stream, optionally preceded by = or != </p><dl class="section return"><dt>Returns</dt><dd>false if != operator found, and true otherwise.</dd></dl>
<p>On entry the stringstream position should be just after the ID. On exit it is after the string. If there is an error, the stringstream badbit is set. Returns false if != found, to indicate negation. Can be of any of the following forms: mystring =mystring ==mystring [must be terminated by a space or tab] "mystring" 'mystring' ="mystring" ='mystring' [mystring can contain spaces or tabs] !=mystring !="mystring" [Returns false indicating negate] There can be spaces or tabs after the operator = == != </p>

</div>
</div>
<a id="a00c8a88c0a36c9a1167b119214e015e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00c8a88c0a36c9a1167b119214e015e6">&sect;&nbsp;</a></span>CompareStringWithFilter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareStringWithFilter </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>optionText</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>noEval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>NoCompOK</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Makes a comparison using the operator and a string read from the filter stream with a provided string. </p><dl class="section return"><dt>Returns</dt><dd>the result of the comparison and true if NoCompOK==true and there is no comparison operator. </dd></dl>

</div>
</div>
<a id="a865d2be70640a96f185bf78dcaaea8b2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a865d2be70640a96f185bf78dcaaea8b2">&sect;&nbsp;</a></span>ispunctU()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool ispunctU </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4e794d96851deaad479e17b30928a3cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e794d96851deaad479e17b30928a3cd">&sect;&nbsp;</a></span>MatchPairData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool MatchPairData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td>
          <td class="paramname"><em>pOb</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>true if s (with or without _ replaced by spaces) is a PairData attribute. On return s is the form which matches. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="groupcontrib_8h_source.shtml">groupcontrib.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
