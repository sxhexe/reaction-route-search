<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>parsmart.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">parsmart.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="parsmart_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">parsmart.h - Daylight SMARTS parser.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 1998-2001 by OpenEye Scientific Software, Inc.</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Some portions Copyright (C) 2001-2005 by Geoffrey R. Hutchison</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#ifndef OB_PARSMART_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#define OB_PARSMART_H</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">/*==========================*/</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">/*  SMARTS Data Structures  */</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">/*==========================*/</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="comment">// mark this so that SWIG will not attempt to wrap for scripting languages</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor">#ifndef SWIG</span></div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__AtomExpr.shtml">   42</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> {</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">   43</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">struct</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    {</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;      <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__AtomExpr.shtml#ac4f474c82e82cbb89ca7c36dd52be0ed">   47</a></span>&#160;      <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac4f474c82e82cbb89ca7c36dd52be0ed">value</a>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#add9b1387523fd7ca8a99e43de1a6ebd9">leaf</a>;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">struct</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    {</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__AtomExpr.shtml#af94d20e7c35dc6021db672bddc719e59">   53</a></span>&#160;      <span class="keywordtype">void</span> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#af94d20e7c35dc6021db672bddc719e59">recur</a>;</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#af94d20e7c35dc6021db672bddc719e59">recur</a>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">struct</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__AtomExpr.shtml#afbc749edb3aa435b2dfe658c401dd8dd">   59</a></span>&#160;      <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#afbc749edb3aa435b2dfe658c401dd8dd">arg</a>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#a59ea3d363e8bd7376d61752e3b8d302d">mon</a>;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">struct</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__AtomExpr.shtml#ae14ee7287ec01247b373819da1466f2e">   65</a></span>&#160;      <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ae14ee7287ec01247b373819da1466f2e">lft</a>;</div><div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__AtomExpr.shtml#a3ac29da5e05a062a121b17962c0962a4">   66</a></span>&#160;      <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a> *<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#a3ac29da5e05a062a121b17962c0962a4">rgt</a>;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#a0265adfe793b0eec6c950ec832fa6a60">bin</a>;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  } <a class="code" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__BondExpr.shtml">   73</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> {</div><div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__BondExpr.shtml#ac765329451135abec74c45e1897abf26">   74</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keyword">struct</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    {</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__BondExpr.shtml#ae83b8626d4f03cc85eb9cd454d01dfeb">   78</a></span>&#160;      <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#ae83b8626d4f03cc85eb9cd454d01dfeb">arg</a>;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    }</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#a59ea3d363e8bd7376d61752e3b8d302d">mon</a>;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">struct</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <span class="keywordtype">int</span> <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">type</a>;</div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__BondExpr.shtml#acc869ddf951fb816bc6971baf892a666">   84</a></span>&#160;      <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#acc869ddf951fb816bc6971baf892a666">lft</a>;</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="unionOpenBabel_1_1__BondExpr.shtml#a92d143f4a18107be5ba1889660041341">   85</a></span>&#160;      <span class="keyword">union </span><a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a> *<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml#a92d143f4a18107be5ba1889660041341">rgt</a>;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml#a0265adfe793b0eec6c950ec832fa6a60">bin</a>;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  } <a class="code" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>;</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1BondSpec.shtml">   92</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  {</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1BondSpec.shtml#a88bcbd740c73c2bdcce39f48af6405b6">   94</a></span>&#160;    <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *<a class="code" href="structOpenBabel_1_1BondSpec.shtml#a88bcbd740c73c2bdcce39f48af6405b6">expr</a>;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1BondSpec.shtml#aaa998788ffdfc338ed9bc652ca3d2534">   95</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1BondSpec.shtml#aaa998788ffdfc338ed9bc652ca3d2534">src</a>,dst;</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1BondSpec.shtml#a8ef53b5e857e12c63baf40bbf78595c5">   96</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1BondSpec.shtml#a8ef53b5e857e12c63baf40bbf78595c5">visit</a>;</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1BondSpec.shtml#a4406f5d19bad5748e3eb1c5e4a1cddb4">   97</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1BondSpec.shtml#a4406f5d19bad5748e3eb1c5e4a1cddb4">grow</a>;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <a class="code" href="structOpenBabel_1_1BondSpec.shtml">BondSpec</a>;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1AtomSpec.shtml">  103</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  {</div><div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1AtomSpec.shtml#a1269526f9f29728992306e8e649b3540">  105</a></span>&#160;    <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *<a class="code" href="structOpenBabel_1_1AtomSpec.shtml#a1269526f9f29728992306e8e649b3540">expr</a>;</div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1AtomSpec.shtml#a8ef53b5e857e12c63baf40bbf78595c5">  106</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1AtomSpec.shtml#a8ef53b5e857e12c63baf40bbf78595c5">visit</a>;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1AtomSpec.shtml#a54e2f07c0624c79d98700aff96030e81">  107</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1AtomSpec.shtml#a54e2f07c0624c79d98700aff96030e81">part</a>;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1AtomSpec.shtml#ac33192e42f79427d5d5dd48f3ae51327">  108</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1AtomSpec.shtml#ac33192e42f79427d5d5dd48f3ae51327">chiral_flag</a>;</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1AtomSpec.shtml#a8354c3fd354f51bceee89a4772d3d520">  109</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1AtomSpec.shtml#a8354c3fd354f51bceee89a4772d3d520">vb</a>;</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1AtomSpec.shtml#a80466fce9162d1650a9407a8d2212c8e">  110</a></span>&#160;    std::vector&lt;int&gt; <a class="code" href="structOpenBabel_1_1AtomSpec.shtml#a80466fce9162d1650a9407a8d2212c8e">nbrs</a>;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <a class="code" href="structOpenBabel_1_1AtomSpec.shtml">AtomSpec</a>;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml">  116</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  {</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml#a960ddd1f182adce68ce96b532be2119e">  118</a></span>&#160;    <span class="keywordtype">int</span> aalloc,<a class="code" href="structOpenBabel_1_1Pattern.shtml#a960ddd1f182adce68ce96b532be2119e">acount</a>;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml#a1279b4e5cdc209e79aeac8393187d8fb">  119</a></span>&#160;    <span class="keywordtype">int</span> balloc,<a class="code" href="structOpenBabel_1_1Pattern.shtml#a1279b4e5cdc209e79aeac8393187d8fb">bcount</a>;</div><div class="line"><a name="l00120"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml#a489239383a443901c5ddf88d1965c43f">  120</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml#a489239383a443901c5ddf88d1965c43f">ischiral</a>;</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml#acc47701840e9e597e8743f9d2f7f9666">  121</a></span>&#160;    <a class="code" href="structOpenBabel_1_1AtomSpec.shtml">AtomSpec</a> *<a class="code" href="structOpenBabel_1_1Pattern.shtml#acc47701840e9e597e8743f9d2f7f9666">atom</a>;</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml#a180e82138b439cdbc63565ce0c63f0e7">  122</a></span>&#160;    <a class="code" href="structOpenBabel_1_1BondSpec.shtml">BondSpec</a> *<a class="code" href="structOpenBabel_1_1Pattern.shtml#a180e82138b439cdbc63565ce0c63f0e7">bond</a>;</div><div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml#a4b389e40c7e1fda0f658c3e5af589a66">  123</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml#a4b389e40c7e1fda0f658c3e5af589a66">parts</a>;</div><div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1Pattern.shtml#ab4578762eca2fb48d53d796b02d30f3b">  124</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml#ab4578762eca2fb48d53d796b02d30f3b">hasExplicitH</a>;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1ParseState.shtml">  130</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">struct</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  {</div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1ParseState.shtml#ace96fe929ba644e4fb2810678d8eef05">  132</a></span>&#160;    <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *closord[100];</div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1ParseState.shtml#ad37c2265134e72b14d91f6195997a472">  133</a></span>&#160;    <span class="keywordtype">int</span>       closure[100];</div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1ParseState.shtml#a9a402df040c755233a98f8903883cc9c">  134</a></span>&#160;    <span class="keywordtype">int</span>       <a class="code" href="structOpenBabel_1_1ParseState.shtml#a9a402df040c755233a98f8903883cc9c">closindex</a>;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  } <a class="code" href="structOpenBabel_1_1ParseState.shtml">ParseState</a>;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="comment">// for SWIG, just forward declare that we have some Pattern struct</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="comment">// (but this is private and not wrapped for scripting languages)</span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keyword">class </span>OBSmartsPrivate;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="comment">// class introduction in parsmart.cpp</span></div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml">  151</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a></div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  {</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keyword">protected</span>:</div><div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a36fb3feb1132393275cf6164d3ccf2a9">  154</a></span>&#160;    OBSmartsPrivate                *<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a36fb3feb1132393275cf6164d3ccf2a9">_d</a>;        </div><div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a9aa91437a607c7d33353f38857add180">  155</a></span>&#160;    std::vector&lt;bool&gt;                     <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a9aa91437a607c7d33353f38857add180">_growbond</a>; </div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab4d28e672d513c538ae9ff92e409bece">  156</a></span>&#160;    std::vector&lt;std::vector&lt;int&gt; &gt;      <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ab4d28e672d513c538ae9ff92e409bece">_mlist</a>;    </div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad43f81cd2cc637e810b38c7686d9917d">  157</a></span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>                        *<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad43f81cd2cc637e810b38c7686d9917d">_pat</a>;      </div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a433559ab344e4266e3d109bce29ee417">  158</a></span>&#160;    std::string                                       <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a433559ab344e4266e3d109bce29ee417">_str</a>;      </div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#af076ed3307ccc419f46ed857bb321a2f">  160</a></span>&#160;    <span class="keywordtype">char</span> *<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#af076ed3307ccc419f46ed857bb321a2f">_buffer</a>;</div><div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a24f5f7e6d2d4aeccecabdbbf89719bc5">  161</a></span>&#160;    <span class="keywordtype">char</span> *<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a24f5f7e6d2d4aeccecabdbbf89719bc5">LexPtr</a>;</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2860b525fbfe4f29b416c37f8b13f561">  162</a></span>&#160;    <span class="keywordtype">char</span> *<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2860b525fbfe4f29b416c37f8b13f561">MainPtr</a>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *ParseSMARTSPattern( <span class="keywordtype">void</span> );</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *ParseSMARTSPart( <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>*, <span class="keywordtype">int</span> );</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *SMARTSError( <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat );</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *ParseSMARTSError( <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr );</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *ParseSimpleAtomPrimitive( <span class="keywordtype">void</span> );</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *ParseComplexAtomPrimitive( <span class="keywordtype">void</span> );</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *ParseAtomExpr( <span class="keywordtype">int</span> level );</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *ParseBondPrimitive( <span class="keywordtype">void</span> );</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *ParseBondExpr( <span class="keywordtype">int</span> level );</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *ParseSMARTSString( <span class="keywordtype">char</span> *ptr );</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *ParseSMARTSRecord( <span class="keywordtype">char</span> *ptr );</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a7b5986b1238c63b45e7fb0fdfdfc4ed0">GetVectorBinding</a>();</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *SMARTSParser( <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="code" href="structOpenBabel_1_1ParseState.shtml">ParseState</a> *stat,</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                           <span class="keywordtype">int</span> prev, <span class="keywordtype">int</span> part );</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa930ba6620356e94683a1d5d4a4a25e3">  180</a></span>&#160;  <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa930ba6620356e94683a1d5d4a4a25e3">OBSmartsPattern</a>() : _pat(NULL), _buffer(NULL), LexPtr(NULL), MainPtr(NULL) { }</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">virtual</span> ~<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>();</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#ada1c40a99620ab595049ba01934b7ca6">  183</a></span>&#160;  <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ada1c40a99620ab595049ba01934b7ca6">OBSmartsPattern</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>&amp; cp): _pat(NULL), _buffer(NULL), LexPtr(NULL), MainPtr(NULL)</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      {</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        *<span class="keyword">this</span> = cp;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      }</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a644ca84fee80513682392b90a2841ec6">  188</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>&amp; <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a644ca84fee80513682392b90a2841ec6">operator=</a>(<span class="keyword">const</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a>&amp; cp)</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      {</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">this</span> == &amp;cp)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;          <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">if</span> (_pat)</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;          <span class="keyword">delete</span>[] _pat;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="keywordflow">if</span> (_buffer)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;          <span class="keyword">delete</span>[] _buffer;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        _buffer = NULL;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        _pat = NULL;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        std::string s = cp.<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a433559ab344e4266e3d109bce29ee417">_str</a>;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        Init(s);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">return</span> (*<span class="keyword">this</span>);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      }</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordtype">bool</span>         Init(<span class="keyword">const</span> <span class="keywordtype">char</span>* pattern);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">bool</span>         Init(<span class="keyword">const</span> std::string&amp; pattern);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">const</span> std::string &amp;GetSMARTS()<span class="keyword"> const    </span>{      <span class="keywordflow">return</span> _str;    }</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="preprocessor">#ifndef SWIG    </span></div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a1f769a4a64988a131b80fdda554eda1e">  221</a></span>&#160;    std::string  &amp;<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a1f769a4a64988a131b80fdda554eda1e">GetSMARTS</a>()               {      <span class="keywordflow">return</span> _str;    }</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordtype">bool</span>         Empty()<span class="keyword"> const     </span>{      <span class="keywordflow">return</span>(_pat == NULL);    }</div><div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">  226</a></span>&#160;    <span class="keywordtype">bool</span>         <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">IsValid</a>()<span class="keyword"> const   </span>{      <span class="keywordflow">return</span>(_pat != NULL);    }</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2f0695eb7d6ff6321032d88655ae8d25">  229</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a>()<span class="keyword">   const</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;      <span class="keywordflow">return</span> _pat ? _pat-&gt;<a class="code" href="structOpenBabel_1_1Pattern.shtml#a960ddd1f182adce68ce96b532be2119e">acount</a> : 0;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    }</div><div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">  234</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">NumBonds</a>()<span class="keyword">   const</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      <span class="keywordflow">return</span> _pat ? _pat-&gt;<a class="code" href="structOpenBabel_1_1Pattern.shtml#a1279b4e5cdc209e79aeac8393187d8fb">bcount</a> : 0;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordtype">void</span>         GetBond(<span class="keywordtype">int</span>&amp; src,<span class="keywordtype">int</span>&amp; dst,<span class="keywordtype">int</span>&amp; ord,<span class="keywordtype">int</span> idx);</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordtype">int</span>          GetAtomicNum(<span class="keywordtype">int</span> idx);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordtype">int</span>          GetCharge(<span class="keywordtype">int</span> idx);</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a19be5f1813cac9a3f60152844d7d8af8">  251</a></span>&#160;    <span class="keywordtype">int</span>          <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a19be5f1813cac9a3f60152844d7d8af8">GetVectorBinding</a>(<span class="keywordtype">int</span> idx)<span class="keyword"> const</span></div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="keywordflow">return</span>(_pat-&gt;<a class="code" href="structOpenBabel_1_1Pattern.shtml#acc47701840e9e597e8743f9d2f7f9666">atom</a>[idx].<a class="code" href="structOpenBabel_1_1AtomSpec.shtml#a8354c3fd354f51bceee89a4772d3d520">vb</a>);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="comment">// number and kind of matches to return</span></div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258">  258</a></span>&#160;    <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a> {All, <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258">Single</a>, AllUnique};</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordtype">bool</span> Match(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordtype">bool</span> Match(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt;std::vector&lt;int&gt; &gt; &amp; mlist, <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">MatchType</a> mtype = All) <span class="keyword">const</span>;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordtype">bool</span> HasMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol) <span class="keyword">const</span>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordtype">bool</span> RestrictedMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt;std::pair&lt;int,int&gt; &gt; &amp;pairs, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);</div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    <span class="keywordtype">bool</span> RestrictedMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="code" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv, <span class="keywordtype">bool</span> single=<span class="keyword">false</span>);</div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4bf864960d56b1aae66780af7512d5f7">  290</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4bf864960d56b1aae66780af7512d5f7">NumMatches</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keyword">    </span>{</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(_mlist.size());</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    }</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">  297</a></span>&#160;    std::vector&lt;std::vector&lt;int&gt; &gt; &amp;<a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">GetMapList</a>()</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      {</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        <span class="keywordflow">return</span>(_mlist);</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;      }</div><div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a548b220ea8c00d0297e81ebc7b31c6d7">  302</a></span>&#160;    std::vector&lt;std::vector&lt;int&gt; &gt;::iterator <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a548b220ea8c00d0297e81ebc7b31c6d7">BeginMList</a>()</div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;      {</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">return</span>(_mlist.begin());</div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;      }</div><div class="line"><a name="l00307"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsPattern.shtml#a7db4777fec63048db41fb890ac0a22ac">  307</a></span>&#160;    std::vector&lt;std::vector&lt;int&gt; &gt;::iterator <a class="code" href="classOpenBabel_1_1OBSmartsPattern.shtml#a7db4777fec63048db41fb890ac0a22ac">EndMList</a>()</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      {</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">return</span>(_mlist.end());</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      }</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    std::vector&lt;std::vector&lt;int&gt; &gt; &amp;GetUMapList();</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    <span class="keywordtype">void</span>         WriteMapList(std::ostream&amp;);</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  };</div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div><div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsMatcher.shtml">  335</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSmartsMatcher.shtml">OBSmartsMatcher</a></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  {</div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keyword">protected</span>:</div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;          <span class="comment">//recursive smarts cache</span></div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a0941360bb72df02227939bd307707c25">  339</a></span>&#160;          std::vector&lt;std::pair&lt;const Pattern*,std::vector&lt;bool&gt; &gt; &gt; <a class="code" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a0941360bb72df02227939bd307707c25">RSCACHE</a>;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;          <span class="comment">// list of fragment patterns (e.g., (*).(*)</span></div><div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6dbd99a64fdb16a6ac0c48cb200449ad">  341</a></span>&#160;          std::vector&lt;const Pattern*&gt; <a class="code" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6dbd99a64fdb16a6ac0c48cb200449ad">Fragments</a>;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="comment">/*</span></div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">      bool EvalAtomExpr(AtomExpr *expr,OBAtom *atom);</span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">      bool EvalBondExpr(BondExpr *expr,OBBond *bond);</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">      int GetVectorBinding();</span></div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">      int CreateAtom(Pattern*,AtomExpr*,int,int vb=0);</span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">    */</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keywordtype">bool</span> EvalAtomExpr(<a class="code" href="unionOpenBabel_1_1__AtomExpr.shtml">AtomExpr</a> *expr,<a class="code" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom);</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;    <span class="keywordtype">bool</span> EvalBondExpr(<a class="code" href="unionOpenBabel_1_1__BondExpr.shtml">BondExpr</a> *expr,<a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond);</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="keywordtype">void</span> SetupAtomMatchTable(std::vector&lt;std::vector&lt;bool&gt; &gt; &amp;<a class="code" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">ttab</a>,</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                   <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordtype">void</span> FastSingleMatch(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol,<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat,</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                         std::vector&lt;std::vector&lt;int&gt; &gt; &amp;mlist);</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div><div class="line"><a name="l00355"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a129a7087cc88b19562f6840d91f2990f">  355</a></span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBSSMatch.shtml">OBSSMatch</a>;</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsMatcher.shtml#ab2a36f09ba1abd6cb748e74d433423ce">  357</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBSmartsMatcher.shtml#ab2a36f09ba1abd6cb748e74d433423ce">OBSmartsMatcher</a>() {}</div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a464e4dc777a586ec969199dc4aaba764">  358</a></span>&#160;    <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a464e4dc777a586ec969199dc4aaba764">~OBSmartsMatcher</a>() {}</div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordtype">bool</span> match(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat,std::vector&lt;std::vector&lt;int&gt; &gt; &amp;mlist,<span class="keywordtype">bool</span> single=<span class="keyword">false</span>);</div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  };</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSSMatch.shtml">  367</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBSSMatch.shtml">OBSSMatch</a></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="keyword">protected</span>:</div><div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSSMatch.shtml#ade85500cee2cdd5840c1637f558a8407">  370</a></span>&#160;    <span class="keywordtype">bool</span>        *<a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#ade85500cee2cdd5840c1637f558a8407">_uatoms</a>;</div><div class="line"><a name="l00371"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSSMatch.shtml#a49fc50c0d3567160b94f7a15aba18da0">  371</a></span>&#160;    <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>       *<a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#a49fc50c0d3567160b94f7a15aba18da0">_mol</a>;</div><div class="line"><a name="l00372"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSSMatch.shtml#a9ee3a52af1af26de9547b080e0b950c7">  372</a></span>&#160;    <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>     *<a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#a9ee3a52af1af26de9547b080e0b950c7">_pat</a>;</div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBSSMatch.shtml#a46054c62ce67984c978b60b2b9059593">  373</a></span>&#160;    std::vector&lt;int&gt;  <a class="code" href="classOpenBabel_1_1OBSSMatch.shtml#a46054c62ce67984c978b60b2b9059593">_map</a>;</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;</div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  <span class="keyword">public</span>:</div><div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <a class="code" href="classOpenBabel_1_1OBSSMatch.shtml">OBSSMatch</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp;,<span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>*);</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    ~<a class="code" href="classOpenBabel_1_1OBSSMatch.shtml">OBSSMatch</a>();</div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keywordtype">void</span> Match(std::vector&lt;std::vector&lt;int&gt; &gt; &amp;v, <span class="keywordtype">int</span> bidx=-1);</div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  };</div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;</div><div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a6b397e6876fbb7f13d0e4a3cac7edfdc">SmartsLexReplace</a>(std::string &amp;,</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                              std::vector&lt;std::pair&lt;std::string,std::string&gt; &gt; &amp;);</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div><div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;} <span class="comment">// end namespace OpenBabel</span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="preprocessor">#endif // OB_PARSMART_H</span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div><div class="ttc" id="namespaceOpenBabel_shtml_a6b397e6876fbb7f13d0e4a3cac7edfdc"><div class="ttname"><a href="namespaceOpenBabel.shtml#a6b397e6876fbb7f13d0e4a3cac7edfdc">OpenBabel::SmartsLexReplace</a></div><div class="ttdeci">void SmartsLexReplace(std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a4bf864960d56b1aae66780af7512d5f7"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a4bf864960d56b1aae66780af7512d5f7">OpenBabel::OBSmartsPattern::NumMatches</a></div><div class="ttdeci">unsigned int NumMatches() const</div><div class="ttdef"><b>Definition:</b> parsmart.h:290</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_afbc749edb3aa435b2dfe658c401dd8dd"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#afbc749edb3aa435b2dfe658c401dd8dd">OpenBabel::_AtomExpr::arg</a></div><div class="ttdeci">union _AtomExpr * arg</div><div class="ttdef"><b>Definition:</b> parsmart.h:59</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a747637046be33d7273262104aad8069d"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069d">OpenBabel::OBSmartsPattern::MatchType</a></div><div class="ttdeci">MatchType</div><div class="ttdef"><b>Definition:</b> parsmart.h:258</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml_ab4578762eca2fb48d53d796b02d30f3b"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml#ab4578762eca2fb48d53d796b02d30f3b">OpenBabel::Pattern::hasExplicitH</a></div><div class="ttdeci">bool hasExplicitH</div><div class="ttdef"><b>Definition:</b> parsmart.h:124</div></div>
<div class="ttc" id="unionOpenBabel_1_1__BondExpr_shtml_a92d143f4a18107be5ba1889660041341"><div class="ttname"><a href="unionOpenBabel_1_1__BondExpr.shtml#a92d143f4a18107be5ba1889660041341">OpenBabel::_BondExpr::rgt</a></div><div class="ttdeci">union _BondExpr * rgt</div><div class="ttdef"><b>Definition:</b> parsmart.h:85</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsMatcher_shtml_ab2a36f09ba1abd6cb748e74d433423ce"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsMatcher.shtml#ab2a36f09ba1abd6cb748e74d433423ce">OpenBabel::OBSmartsMatcher::OBSmartsMatcher</a></div><div class="ttdeci">OBSmartsMatcher()</div><div class="ttdef"><b>Definition:</b> parsmart.h:357</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a24f5f7e6d2d4aeccecabdbbf89719bc5"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a24f5f7e6d2d4aeccecabdbbf89719bc5">OpenBabel::OBSmartsPattern::LexPtr</a></div><div class="ttdeci">char * LexPtr</div><div class="ttdef"><b>Definition:</b> parsmart.h:161</div></div>
<div class="ttc" id="structOpenBabel_1_1AtomSpec_shtml_a54e2f07c0624c79d98700aff96030e81"><div class="ttname"><a href="structOpenBabel_1_1AtomSpec.shtml#a54e2f07c0624c79d98700aff96030e81">OpenBabel::AtomSpec::part</a></div><div class="ttdeci">int part</div><div class="ttdef"><b>Definition:</b> parsmart.h:107</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSSMatch_shtml_ade85500cee2cdd5840c1637f558a8407"><div class="ttname"><a href="classOpenBabel_1_1OBSSMatch.shtml#ade85500cee2cdd5840c1637f558a8407">OpenBabel::OBSSMatch::_uatoms</a></div><div class="ttdeci">bool * _uatoms</div><div class="ttdef"><b>Definition:</b> parsmart.h:370</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a36fb3feb1132393275cf6164d3ccf2a9"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a36fb3feb1132393275cf6164d3ccf2a9">OpenBabel::OBSmartsPattern::_d</a></div><div class="ttdeci">OBSmartsPrivate * _d</div><div class="ttdoc">Internal data storage for future expansion. </div><div class="ttdef"><b>Definition:</b> parsmart.h:154</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml">OpenBabel::Pattern</a></div><div class="ttdoc">A SMARTS parser internal pattern. </div><div class="ttdef"><b>Definition:</b> parsmart.h:116</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ac532c4b500b1a85ea22217f2c65a70ed"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ac532c4b500b1a85ea22217f2c65a70ed">OpenBabel::OBSmartsPattern::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdef"><b>Definition:</b> parsmart.h:226</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a2f0695eb7d6ff6321032d88655ae8d25"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a2f0695eb7d6ff6321032d88655ae8d25">OpenBabel::OBSmartsPattern::NumAtoms</a></div><div class="ttdeci">unsigned int NumAtoms() const</div><div class="ttdef"><b>Definition:</b> parsmart.h:229</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a7358c2c15c4c0d88ae2489f586bc8e0b"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">OpenBabel::OBSmartsPattern::NumBonds</a></div><div class="ttdeci">unsigned int NumBonds() const</div><div class="ttdef"><b>Definition:</b> parsmart.h:234</div></div>
<div class="ttc" id="structOpenBabel_1_1AtomSpec_shtml"><div class="ttname"><a href="structOpenBabel_1_1AtomSpec.shtml">OpenBabel::AtomSpec</a></div><div class="ttdoc">An internal (SMARTS parser) atom specification. </div><div class="ttdef"><b>Definition:</b> parsmart.h:103</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ad43f81cd2cc637e810b38c7686d9917d"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ad43f81cd2cc637e810b38c7686d9917d">OpenBabel::OBSmartsPattern::_pat</a></div><div class="ttdeci">Pattern * _pat</div><div class="ttdoc">The parsed SMARTS pattern. </div><div class="ttdef"><b>Definition:</b> parsmart.h:157</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSSMatch_shtml_a9ee3a52af1af26de9547b080e0b950c7"><div class="ttname"><a href="classOpenBabel_1_1OBSSMatch.shtml#a9ee3a52af1af26de9547b080e0b950c7">OpenBabel::OBSSMatch::_pat</a></div><div class="ttdeci">const Pattern * _pat</div><div class="ttdef"><b>Definition:</b> parsmart.h:372</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a433559ab344e4266e3d109bce29ee417"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a433559ab344e4266e3d109bce29ee417">OpenBabel::OBSmartsPattern::_str</a></div><div class="ttdeci">std::string _str</div><div class="ttdoc">The string of the SMARTS expression. </div><div class="ttdef"><b>Definition:</b> parsmart.h:158</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ac7bd9a9f7066eb36f2cfa568d180cb80"><div class="ttname"><a href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">OpenBabel::BondExpr</a></div><div class="ttdeci">union OpenBabel::_BondExpr BondExpr</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSSMatch_shtml_a46054c62ce67984c978b60b2b9059593"><div class="ttname"><a href="classOpenBabel_1_1OBSSMatch.shtml#a46054c62ce67984c978b60b2b9059593">OpenBabel::OBSSMatch::_map</a></div><div class="ttdeci">std::vector&lt; int &gt; _map</div><div class="ttdef"><b>Definition:</b> parsmart.h:373</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_aa930ba6620356e94683a1d5d4a4a25e3"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#aa930ba6620356e94683a1d5d4a4a25e3">OpenBabel::OBSmartsPattern::OBSmartsPattern</a></div><div class="ttdeci">OBSmartsPattern()</div><div class="ttdef"><b>Definition:</b> parsmart.h:180</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:69</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_a0265adfe793b0eec6c950ec832fa6a60"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#a0265adfe793b0eec6c950ec832fa6a60">OpenBabel::_AtomExpr::bin</a></div><div class="ttdeci">struct OpenBabel::_AtomExpr::@5 bin</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_a3ac29da5e05a062a121b17962c0962a4"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#a3ac29da5e05a062a121b17962c0962a4">OpenBabel::_AtomExpr::rgt</a></div><div class="ttdeci">union _AtomExpr * rgt</div><div class="ttdef"><b>Definition:</b> parsmart.h:66</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_add9b1387523fd7ca8a99e43de1a6ebd9"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#add9b1387523fd7ca8a99e43de1a6ebd9">OpenBabel::_AtomExpr::leaf</a></div><div class="ttdeci">struct OpenBabel::_AtomExpr::@2 leaf</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a2860b525fbfe4f29b416c37f8b13f561"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a2860b525fbfe4f29b416c37f8b13f561">OpenBabel::OBSmartsPattern::MainPtr</a></div><div class="ttdeci">char * MainPtr</div><div class="ttdef"><b>Definition:</b> parsmart.h:162</div></div>
<div class="ttc" id="unionOpenBabel_1_1__BondExpr_shtml_ac765329451135abec74c45e1897abf26"><div class="ttname"><a href="unionOpenBabel_1_1__BondExpr.shtml#ac765329451135abec74c45e1897abf26">OpenBabel::_BondExpr::type</a></div><div class="ttdeci">int type</div><div class="ttdef"><b>Definition:</b> parsmart.h:74</div></div>
<div class="ttc" id="structOpenBabel_1_1AtomSpec_shtml_a1269526f9f29728992306e8e649b3540"><div class="ttname"><a href="structOpenBabel_1_1AtomSpec.shtml#a1269526f9f29728992306e8e649b3540">OpenBabel::AtomSpec::expr</a></div><div class="ttdeci">AtomExpr * expr</div><div class="ttdef"><b>Definition:</b> parsmart.h:105</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml_a489239383a443901c5ddf88d1965c43f"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml#a489239383a443901c5ddf88d1965c43f">OpenBabel::Pattern::ischiral</a></div><div class="ttdeci">bool ischiral</div><div class="ttdef"><b>Definition:</b> parsmart.h:120</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_af94d20e7c35dc6021db672bddc719e59"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#af94d20e7c35dc6021db672bddc719e59">OpenBabel::_AtomExpr::recur</a></div><div class="ttdeci">void * recur</div><div class="ttdef"><b>Definition:</b> parsmart.h:53</div></div>
<div class="ttc" id="mol_8h_shtml"><div class="ttname"><a href="mol_8h.shtml">mol.h</a></div><div class="ttdoc">Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel) ...</div></div>
<div class="ttc" id="unionOpenBabel_1_1__BondExpr_shtml"><div class="ttname"><a href="unionOpenBabel_1_1__BondExpr.shtml">OpenBabel::_BondExpr</a></div><div class="ttdoc">An internal (SMARTS parser) bond expression. </div><div class="ttdef"><b>Definition:</b> parsmart.h:73</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml">OpenBabel::_AtomExpr</a></div><div class="ttdoc">An internal (SMARTS parser) atomic expression. </div><div class="ttdef"><b>Definition:</b> parsmart.h:42</div></div>
<div class="ttc" id="structOpenBabel_1_1ParseState_shtml_a9a402df040c755233a98f8903883cc9c"><div class="ttname"><a href="structOpenBabel_1_1ParseState.shtml#a9a402df040c755233a98f8903883cc9c">OpenBabel::ParseState::closindex</a></div><div class="ttdeci">int closindex</div><div class="ttdef"><b>Definition:</b> parsmart.h:134</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSSMatch_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSSMatch.shtml">OpenBabel::OBSSMatch</a></div><div class="ttdoc">Internal class: performs fast, exhaustive matching used to find just a single match in match() using ...</div><div class="ttdef"><b>Definition:</b> parsmart.h:367</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBitVec_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBitVec.shtml">OpenBabel::OBBitVec</a></div><div class="ttdoc">A speed-optimized vector of bits. </div><div class="ttdef"><b>Definition:</b> bitvec.h:57</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsMatcher_shtml_a464e4dc777a586ec969199dc4aaba764"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsMatcher.shtml#a464e4dc777a586ec969199dc4aaba764">OpenBabel::OBSmartsMatcher::~OBSmartsMatcher</a></div><div class="ttdeci">virtual ~OBSmartsMatcher()</div><div class="ttdef"><b>Definition:</b> parsmart.h:358</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsMatcher_shtml_a0941360bb72df02227939bd307707c25"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsMatcher.shtml#a0941360bb72df02227939bd307707c25">OpenBabel::OBSmartsMatcher::RSCACHE</a></div><div class="ttdeci">std::vector&lt; std::pair&lt; const Pattern *, std::vector&lt; bool &gt; &gt; &gt; RSCACHE</div><div class="ttdef"><b>Definition:</b> parsmart.h:339</div></div>
<div class="ttc" id="structOpenBabel_1_1BondSpec_shtml_a4406f5d19bad5748e3eb1c5e4a1cddb4"><div class="ttname"><a href="structOpenBabel_1_1BondSpec.shtml#a4406f5d19bad5748e3eb1c5e4a1cddb4">OpenBabel::BondSpec::grow</a></div><div class="ttdeci">bool grow</div><div class="ttdef"><b>Definition:</b> parsmart.h:97</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_ac765329451135abec74c45e1897abf26"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#ac765329451135abec74c45e1897abf26">OpenBabel::_AtomExpr::type</a></div><div class="ttdeci">int type</div><div class="ttdef"><b>Definition:</b> parsmart.h:43</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml">OpenBabel::OBSmartsPattern</a></div><div class="ttdoc">SMARTS (SMiles ARbitrary Target Specification) substructure searching. </div><div class="ttdef"><b>Definition:</b> parsmart.h:151</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a19be5f1813cac9a3f60152844d7d8af8"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a19be5f1813cac9a3f60152844d7d8af8">OpenBabel::OBSmartsPattern::GetVectorBinding</a></div><div class="ttdeci">int GetVectorBinding(int idx) const</div><div class="ttdef"><b>Definition:</b> parsmart.h:251</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ab8d4d5690031703bcccb95ddbe7ebf0a"><div class="ttname"><a href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">OpenBabel::ttab</a></div><div class="ttdeci">OBTypeTable ttab</div><div class="ttdef"><b>Definition:</b> mol.h:751</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_ae14ee7287ec01247b373819da1466f2e"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#ae14ee7287ec01247b373819da1466f2e">OpenBabel::_AtomExpr::lft</a></div><div class="ttdeci">union _AtomExpr * lft</div><div class="ttdef"><b>Definition:</b> parsmart.h:65</div></div>
<div class="ttc" id="structOpenBabel_1_1AtomSpec_shtml_a80466fce9162d1650a9407a8d2212c8e"><div class="ttname"><a href="structOpenBabel_1_1AtomSpec.shtml#a80466fce9162d1650a9407a8d2212c8e">OpenBabel::AtomSpec::nbrs</a></div><div class="ttdeci">std::vector&lt; int &gt; nbrs</div><div class="ttdef"><b>Definition:</b> parsmart.h:110</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml_a180e82138b439cdbc63565ce0c63f0e7"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml#a180e82138b439cdbc63565ce0c63f0e7">OpenBabel::Pattern::bond</a></div><div class="ttdeci">BondSpec * bond</div><div class="ttdef"><b>Definition:</b> parsmart.h:122</div></div>
<div class="ttc" id="structOpenBabel_1_1BondSpec_shtml_a8ef53b5e857e12c63baf40bbf78595c5"><div class="ttname"><a href="structOpenBabel_1_1BondSpec.shtml#a8ef53b5e857e12c63baf40bbf78595c5">OpenBabel::BondSpec::visit</a></div><div class="ttdeci">int visit</div><div class="ttdef"><b>Definition:</b> parsmart.h:96</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a1f769a4a64988a131b80fdda554eda1e"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a1f769a4a64988a131b80fdda554eda1e">OpenBabel::OBSmartsPattern::GetSMARTS</a></div><div class="ttdeci">std::string &amp; GetSMARTS()</div><div class="ttdef"><b>Definition:</b> parsmart.h:221</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ab4d28e672d513c538ae9ff92e409bece"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ab4d28e672d513c538ae9ff92e409bece">OpenBabel::OBSmartsPattern::_mlist</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; int &gt; &gt; _mlist</div><div class="ttdoc">The list of matches. </div><div class="ttdef"><b>Definition:</b> parsmart.h:156</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a5633f1fa229ec0ff8fd3991e09d791c2"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a5633f1fa229ec0ff8fd3991e09d791c2">OpenBabel::OBSmartsPattern::GetMapList</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; int &gt; &gt; &amp; GetMapList()</div><div class="ttdef"><b>Definition:</b> parsmart.h:297</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a7b5986b1238c63b45e7fb0fdfdfc4ed0"><div class="ttname"><a href="namespaceOpenBabel.shtml#a7b5986b1238c63b45e7fb0fdfdfc4ed0">OpenBabel::GetVectorBinding</a></div><div class="ttdeci">static int GetVectorBinding()</div></div>
<div class="ttc" id="unionOpenBabel_1_1__BondExpr_shtml_acc869ddf951fb816bc6971baf892a666"><div class="ttname"><a href="unionOpenBabel_1_1__BondExpr.shtml#acc869ddf951fb816bc6971baf892a666">OpenBabel::_BondExpr::lft</a></div><div class="ttdeci">union _BondExpr * lft</div><div class="ttdef"><b>Definition:</b> parsmart.h:84</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a7db4777fec63048db41fb890ac0a22ac"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a7db4777fec63048db41fb890ac0a22ac">OpenBabel::OBSmartsPattern::EndMList</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; int &gt; &gt;::iterator EndMList()</div><div class="ttdef"><b>Definition:</b> parsmart.h:307</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_ac4f474c82e82cbb89ca7c36dd52be0ed"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#ac4f474c82e82cbb89ca7c36dd52be0ed">OpenBabel::_AtomExpr::value</a></div><div class="ttdeci">int value</div><div class="ttdef"><b>Definition:</b> parsmart.h:47</div></div>
<div class="ttc" id="structOpenBabel_1_1BondSpec_shtml_aaa998788ffdfc338ed9bc652ca3d2534"><div class="ttname"><a href="structOpenBabel_1_1BondSpec.shtml#aaa998788ffdfc338ed9bc652ca3d2534">OpenBabel::BondSpec::src</a></div><div class="ttdeci">int src</div><div class="ttdef"><b>Definition:</b> parsmart.h:95</div></div>
<div class="ttc" id="unionOpenBabel_1_1__AtomExpr_shtml_a59ea3d363e8bd7376d61752e3b8d302d"><div class="ttname"><a href="unionOpenBabel_1_1__AtomExpr.shtml#a59ea3d363e8bd7376d61752e3b8d302d">OpenBabel::_AtomExpr::mon</a></div><div class="ttdeci">struct OpenBabel::_AtomExpr::@4 mon</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml_acc47701840e9e597e8743f9d2f7f9666"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml#acc47701840e9e597e8743f9d2f7f9666">OpenBabel::Pattern::atom</a></div><div class="ttdeci">AtomSpec * atom</div><div class="ttdef"><b>Definition:</b> parsmart.h:121</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a644ca84fee80513682392b90a2841ec6"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a644ca84fee80513682392b90a2841ec6">OpenBabel::OBSmartsPattern::operator=</a></div><div class="ttdeci">OBSmartsPattern &amp; operator=(const OBSmartsPattern &amp;cp)</div><div class="ttdef"><b>Definition:</b> parsmart.h:188</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSSMatch_shtml_a49fc50c0d3567160b94f7a15aba18da0"><div class="ttname"><a href="classOpenBabel_1_1OBSSMatch.shtml#a49fc50c0d3567160b94f7a15aba18da0">OpenBabel::OBSSMatch::_mol</a></div><div class="ttdeci">OBMol * _mol</div><div class="ttdef"><b>Definition:</b> parsmart.h:371</div></div>
<div class="ttc" id="structOpenBabel_1_1BondSpec_shtml"><div class="ttname"><a href="structOpenBabel_1_1BondSpec.shtml">OpenBabel::BondSpec</a></div><div class="ttdoc">An internal (SMARTS parser) bond specification. </div><div class="ttdef"><b>Definition:</b> parsmart.h:92</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a747637046be33d7273262104aad8069da68168ddfb80052045df470955d649258">OpenBabel::OBSmartsPattern::Single</a></div><div class="ttdef"><b>Definition:</b> parsmart.h:258</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a548b220ea8c00d0297e81ebc7b31c6d7"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a548b220ea8c00d0297e81ebc7b31c6d7">OpenBabel::OBSmartsPattern::BeginMList</a></div><div class="ttdeci">std::vector&lt; std::vector&lt; int &gt; &gt;::iterator BeginMList()</div><div class="ttdef"><b>Definition:</b> parsmart.h:302</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml_a1279b4e5cdc209e79aeac8393187d8fb"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml#a1279b4e5cdc209e79aeac8393187d8fb">OpenBabel::Pattern::bcount</a></div><div class="ttdeci">int bcount</div><div class="ttdef"><b>Definition:</b> parsmart.h:119</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_af076ed3307ccc419f46ed857bb321a2f"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#af076ed3307ccc419f46ed857bb321a2f">OpenBabel::OBSmartsPattern::_buffer</a></div><div class="ttdeci">char * _buffer</div><div class="ttdef"><b>Definition:</b> parsmart.h:160</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_ada1c40a99620ab595049ba01934b7ca6"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#ada1c40a99620ab595049ba01934b7ca6">OpenBabel::OBSmartsPattern::OBSmartsPattern</a></div><div class="ttdeci">OBSmartsPattern(const OBSmartsPattern &amp;cp)</div><div class="ttdef"><b>Definition:</b> parsmart.h:183</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a8df92ddf377e8839e49c4c1d4a617f1e"><div class="ttname"><a href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">OpenBabel::AtomExpr</a></div><div class="ttdeci">union OpenBabel::_AtomExpr AtomExpr</div></div>
<div class="ttc" id="structOpenBabel_1_1ParseState_shtml"><div class="ttname"><a href="structOpenBabel_1_1ParseState.shtml">OpenBabel::ParseState</a></div><div class="ttdoc">A SMARTS parser internal state. </div><div class="ttdef"><b>Definition:</b> parsmart.h:130</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsPattern_shtml_a9aa91437a607c7d33353f38857add180"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsPattern.shtml#a9aa91437a607c7d33353f38857add180">OpenBabel::OBSmartsPattern::_growbond</a></div><div class="ttdeci">std::vector&lt; bool &gt; _growbond</div><div class="ttdef"><b>Definition:</b> parsmart.h:155</div></div>
<div class="ttc" id="structOpenBabel_1_1BondSpec_shtml_a88bcbd740c73c2bdcce39f48af6405b6"><div class="ttname"><a href="structOpenBabel_1_1BondSpec.shtml#a88bcbd740c73c2bdcce39f48af6405b6">OpenBabel::BondSpec::expr</a></div><div class="ttdeci">BondExpr * expr</div><div class="ttdef"><b>Definition:</b> parsmart.h:94</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsMatcher_shtml_a6dbd99a64fdb16a6ac0c48cb200449ad"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsMatcher.shtml#a6dbd99a64fdb16a6ac0c48cb200449ad">OpenBabel::OBSmartsMatcher::Fragments</a></div><div class="ttdeci">std::vector&lt; const Pattern * &gt; Fragments</div><div class="ttdef"><b>Definition:</b> parsmart.h:341</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml_a4b389e40c7e1fda0f658c3e5af589a66"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml#a4b389e40c7e1fda0f658c3e5af589a66">OpenBabel::Pattern::parts</a></div><div class="ttdeci">int parts</div><div class="ttdef"><b>Definition:</b> parsmart.h:123</div></div>
<div class="ttc" id="structOpenBabel_1_1Pattern_shtml_a960ddd1f182adce68ce96b532be2119e"><div class="ttname"><a href="structOpenBabel_1_1Pattern.shtml#a960ddd1f182adce68ce96b532be2119e">OpenBabel::Pattern::acount</a></div><div class="ttdeci">int acount</div><div class="ttdef"><b>Definition:</b> parsmart.h:118</div></div>
<div class="ttc" id="structOpenBabel_1_1AtomSpec_shtml_a8ef53b5e857e12c63baf40bbf78595c5"><div class="ttname"><a href="structOpenBabel_1_1AtomSpec.shtml#a8ef53b5e857e12c63baf40bbf78595c5">OpenBabel::AtomSpec::visit</a></div><div class="ttdeci">int visit</div><div class="ttdef"><b>Definition:</b> parsmart.h:106</div></div>
<div class="ttc" id="unionOpenBabel_1_1__BondExpr_shtml_ae83b8626d4f03cc85eb9cd454d01dfeb"><div class="ttname"><a href="unionOpenBabel_1_1__BondExpr.shtml#ae83b8626d4f03cc85eb9cd454d01dfeb">OpenBabel::_BondExpr::arg</a></div><div class="ttdeci">union _BondExpr * arg</div><div class="ttdef"><b>Definition:</b> parsmart.h:78</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSmartsMatcher_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSmartsMatcher.shtml">OpenBabel::OBSmartsMatcher</a></div><div class="ttdoc">Internal class: performs matching; a wrapper around previous C matching code to make it thread safe...</div><div class="ttdef"><b>Definition:</b> parsmart.h:335</div></div>
<div class="ttc" id="structOpenBabel_1_1AtomSpec_shtml_ac33192e42f79427d5d5dd48f3ae51327"><div class="ttname"><a href="structOpenBabel_1_1AtomSpec.shtml#ac33192e42f79427d5d5dd48f3ae51327">OpenBabel::AtomSpec::chiral_flag</a></div><div class="ttdeci">int chiral_flag</div><div class="ttdef"><b>Definition:</b> parsmart.h:108</div></div>
<div class="ttc" id="structOpenBabel_1_1AtomSpec_shtml_a8354c3fd354f51bceee89a4772d3d520"><div class="ttname"><a href="structOpenBabel_1_1AtomSpec.shtml#a8354c3fd354f51bceee89a4772d3d520">OpenBabel::AtomSpec::vb</a></div><div class="ttdeci">int vb</div><div class="ttdef"><b>Definition:</b> parsmart.h:109</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
<div class="ttc" id="classOpenBabel_1_1OBAtom_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBAtom.shtml">OpenBabel::OBAtom</a></div><div class="ttdoc">Atom class. </div><div class="ttdef"><b>Definition:</b> atom.h:81</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
