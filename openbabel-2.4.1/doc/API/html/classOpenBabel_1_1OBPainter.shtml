<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBPainter Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBPainter.shtml">OBPainter</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classOpenBabel_1_1OBPainter-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBPainter Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="painter_8h_source.shtml">openbabel/depict/painter.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBPainter:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBPainter.png" usemap="#OBPainter_map" alt=""/>
  <map id="OBPainter_map" name="OBPainter_map">
<area href="classOpenBabel_1_1ASCIIPainter.shtml" alt="ASCIIPainter" shape="rect" coords="0,56,107,80"/>
<area href="classOpenBabel_1_1CairoPainter.shtml" alt="CairoPainter" shape="rect" coords="117,56,224,80"/>
<area href="classOpenBabel_1_1CommandPainter.shtml" alt="CommandPainter" shape="rect" coords="234,56,341,80"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a39de5fab752e8e6d2af9e86041ab59e9"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a39de5fab752e8e6d2af9e86041ab59e9">~OBPainter</a> ()</td></tr>
<tr class="separator:a39de5fab752e8e6d2af9e86041ab59e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a135a190c2d8717af6c4b491504a17458"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a135a190c2d8717af6c4b491504a17458">NewCanvas</a> (double width, double height)=0</td></tr>
<tr class="separator:a135a190c2d8717af6c4b491504a17458"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b00885efc9bf26c5868f53f13ff3995"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a6b00885efc9bf26c5868f53f13ff3995">IsGood</a> () const =0</td></tr>
<tr class="separator:a6b00885efc9bf26c5868f53f13ff3995"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7180ada44a877dec7004fe197ac353d9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a7180ada44a877dec7004fe197ac353d9">SetFontFamily</a> (const std::string &amp;fontFamily)=0</td></tr>
<tr class="separator:a7180ada44a877dec7004fe197ac353d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39a2ee83c7d868d98fb6d6505448368c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a39a2ee83c7d868d98fb6d6505448368c">SetFontSize</a> (int pointSize)=0</td></tr>
<tr class="separator:a39a2ee83c7d868d98fb6d6505448368c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38087c772403c5a64295e847e52d88f8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a38087c772403c5a64295e847e52d88f8">SetFillColor</a> (const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;color)=0</td></tr>
<tr class="separator:a38087c772403c5a64295e847e52d88f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b4f83b050aa6301baff2c9b82adf80d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a5b4f83b050aa6301baff2c9b82adf80d">SetFillRadial</a> (const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;start, const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;end)=0</td></tr>
<tr class="separator:a5b4f83b050aa6301baff2c9b82adf80d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10c3142535e0162c928ad36b9c7ad7ff"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a10c3142535e0162c928ad36b9c7ad7ff">SetPenColor</a> (const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;color)=0</td></tr>
<tr class="separator:a10c3142535e0162c928ad36b9c7ad7ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a49a7a87584f4321e7a9c2d1d1cd4ae"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a6a49a7a87584f4321e7a9c2d1d1cd4ae">SetPenWidth</a> (double width)=0</td></tr>
<tr class="separator:a6a49a7a87584f4321e7a9c2d1d1cd4ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4069c1f8fdcdc2df1f22ac6dcb27e6e2"><td class="memItemLeft" align="right" valign="top">virtual double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a4069c1f8fdcdc2df1f22ac6dcb27e6e2">GetPenWidth</a> ()=0</td></tr>
<tr class="separator:a4069c1f8fdcdc2df1f22ac6dcb27e6e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af29e9dcb6c0abeb27867a097f2293657"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#af29e9dcb6c0abeb27867a097f2293657">DrawLine</a> (double x1, double y1, double x2, double y2, const std::vector&lt; double &gt; &amp;dashes=std::vector&lt; double &gt;())=0</td></tr>
<tr class="separator:af29e9dcb6c0abeb27867a097f2293657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a863bcec97ffd4ca82a3669860943ad2c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a863bcec97ffd4ca82a3669860943ad2c">DrawCircle</a> (double x, double y, double r)=0</td></tr>
<tr class="separator:a863bcec97ffd4ca82a3669860943ad2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47edaf962916310d2b3eb21aeecace05"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#a47edaf962916310d2b3eb21aeecace05">DrawPolygon</a> (const std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;points)=0</td></tr>
<tr class="separator:a47edaf962916310d2b3eb21aeecace05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab26badf5b227aaad8fd3b2f566df78a1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#ab26badf5b227aaad8fd3b2f566df78a1">DrawBall</a> (double x, double y, double r, double opacity=1.0)=0</td></tr>
<tr class="separator:ab26badf5b227aaad8fd3b2f566df78a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd406d7a4ecb123aaf335a5eed7a559f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#abd406d7a4ecb123aaf335a5eed7a559f">DrawText</a> (double x, double y, const std::string &amp;text)=0</td></tr>
<tr class="separator:abd406d7a4ecb123aaf335a5eed7a559f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec3268ffd531e78091929eaaaf99634a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structOpenBabel_1_1OBFontMetrics.shtml">OBFontMetrics</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml#aec3268ffd531e78091929eaaaf99634a">GetFontMetrics</a> (const std::string &amp;text)=0</td></tr>
<tr class="separator:aec3268ffd531e78091929eaaaf99634a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Abstract painter base class used by <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter. ">OBDepict</a>. </p>
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a39de5fab752e8e6d2af9e86041ab59e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39de5fab752e8e6d2af9e86041ab59e9">&sect;&nbsp;</a></span>~OBPainter()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ~<a class="el" href="classOpenBabel_1_1OBPainter.shtml">OBPainter</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Virtual destructor to be inhereted by subclasses </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a135a190c2d8717af6c4b491504a17458"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a135a190c2d8717af6c4b491504a17458">&sect;&nbsp;</a></span>NewCanvas()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void NewCanvas </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a new canvas to paint on with size <code>width</code> x <code>height</code>. <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter. ">OBDepict</a> will always call NewCanvas before performing any drawing operations. Painters that are capable of drawing on a previously unspecified area don't need to implement this. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a550d23b07eacaa9b599c86821c72d918">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a550d23b07eacaa9b599c86821c72d918">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a550d23b07eacaa9b599c86821c72d918">CairoPainter</a>.</p>

</div>
</div>
<a id="a6b00885efc9bf26c5868f53f13ff3995"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b00885efc9bf26c5868f53f13ff3995">&sect;&nbsp;</a></span>IsGood()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool IsGood </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Before <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter. ">OBDepict</a> performes any drawing operation, this method is called to check if the painter is ready to start drawing. If this method returns false, drawing is aborted. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a1589ac745e58f97d59ed254149af57e2">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a1589ac745e58f97d59ed254149af57e2">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a1589ac745e58f97d59ed254149af57e2">CairoPainter</a>.</p>

</div>
</div>
<a id="a7180ada44a877dec7004fe197ac353d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7180ada44a877dec7004fe197ac353d9">&sect;&nbsp;</a></span>SetFontFamily()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetFontFamily </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fontFamily</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's font family. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a9fd65900e68befc5f17d836c58d74590">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CairoPainter</a>.</p>

</div>
</div>
<a id="a39a2ee83c7d868d98fb6d6505448368c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39a2ee83c7d868d98fb6d6505448368c">&sect;&nbsp;</a></span>SetFontSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetFontSize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pointSize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's font point size. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a642db2c67b0a803ddf516a309cf3db63">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a642db2c67b0a803ddf516a309cf3db63">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a642db2c67b0a803ddf516a309cf3db63">CairoPainter</a>.</p>

</div>
</div>
<a id="a38087c772403c5a64295e847e52d88f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a38087c772403c5a64295e847e52d88f8">&sect;&nbsp;</a></span>SetFillColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetFillColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's fill color. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#ab8eebb0cb991191d0add843b581a6995">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ab8eebb0cb991191d0add843b581a6995">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#ab8eebb0cb991191d0add843b581a6995">CairoPainter</a>.</p>

</div>
</div>
<a id="a5b4f83b050aa6301baff2c9b82adf80d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b4f83b050aa6301baff2c9b82adf80d">&sect;&nbsp;</a></span>SetFillRadial()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetFillRadial </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's fill as a radial gradient. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a5203f18c0b9667a06cccff5d0867d368">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a5203f18c0b9667a06cccff5d0867d368">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a5203f18c0b9667a06cccff5d0867d368">CairoPainter</a>.</p>

</div>
</div>
<a id="a10c3142535e0162c928ad36b9c7ad7ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10c3142535e0162c928ad36b9c7ad7ff">&sect;&nbsp;</a></span>SetPenColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetPenColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's pen color. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#ac15e0798f03a90030b7476216ea80c9b">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ac15e0798f03a90030b7476216ea80c9b">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#ac15e0798f03a90030b7476216ea80c9b">CairoPainter</a>.</p>

</div>
</div>
<a id="a6a49a7a87584f4321e7a9c2d1d1cd4ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a49a7a87584f4321e7a9c2d1d1cd4ae">&sect;&nbsp;</a></span>SetPenWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void SetPenWidth </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's pen width. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a533cee84ce534e491635dbfa48a38c88">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a533cee84ce534e491635dbfa48a38c88">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a533cee84ce534e491635dbfa48a38c88">CairoPainter</a>.</p>

</div>
</div>
<a id="a4069c1f8fdcdc2df1f22ac6dcb27e6e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4069c1f8fdcdc2df1f22ac6dcb27e6e2">&sect;&nbsp;</a></span>GetPenWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual double GetPenWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the painter's pen width. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a1e60e6817cf5d10f13e0e91dd3f7044a">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a1e60e6817cf5d10f13e0e91dd3f7044a">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a1e60e6817cf5d10f13e0e91dd3f7044a">CairoPainter</a>.</p>

</div>
</div>
<a id="af29e9dcb6c0abeb27867a097f2293657"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af29e9dcb6c0abeb27867a097f2293657">&sect;&nbsp;</a></span>DrawLine()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DrawLine </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>dashes</em> = <code>std::vector&lt;&#160;double&#160;&gt;()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Draw a line from <code>x1</code>, <code>y1</code> to <code>x2</code>, <code>y2</code>. The line is drawn using the current pen color and width. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#ac6894e2e815dd036358c481b52cbaf21">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ac6894e2e815dd036358c481b52cbaf21">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#ac6894e2e815dd036358c481b52cbaf21">CairoPainter</a>.</p>

</div>
</div>
<a id="a863bcec97ffd4ca82a3669860943ad2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a863bcec97ffd4ca82a3669860943ad2c">&sect;&nbsp;</a></span>DrawCircle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DrawCircle </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#ae85b79bdf3eca6e115ca27ab9d4a3fcc">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ae85b79bdf3eca6e115ca27ab9d4a3fcc">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#ae85b79bdf3eca6e115ca27ab9d4a3fcc">CairoPainter</a>.</p>

</div>
</div>
<a id="a47edaf962916310d2b3eb21aeecace05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47edaf962916310d2b3eb21aeecace05">&sect;&nbsp;</a></span>DrawPolygon()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DrawPolygon </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Draw a polygon by connecting consecutive points. The last point will be connected to the first one. The lines are drawn using the current pen color and width. The area inside the polygon is filled with the current fill color. </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#ad58425475eb726e5a312d33f6a9b18a8">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ad58425475eb726e5a312d33f6a9b18a8">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#ad58425475eb726e5a312d33f6a9b18a8">CairoPainter</a>.</p>

</div>
</div>
<a id="ab26badf5b227aaad8fd3b2f566df78a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab26badf5b227aaad8fd3b2f566df78a1">&sect;&nbsp;</a></span>DrawBall()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DrawBall </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>opacity</em> = <code>1.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Draw a pseudo 3D ball, centered on (<code>x</code>,<code>y</code>) of radius <code>r</code> filled with the current Fill color or gradient </p>

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#acb2e2340001b9432171bace2c04799bf">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#acb2e2340001b9432171bace2c04799bf">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a3eaee0f1148288fac2ba04d0eac7ec12">CairoPainter</a>.</p>

</div>
</div>
<a id="abd406d7a4ecb123aaf335a5eed7a559f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd406d7a4ecb123aaf335a5eed7a559f">&sect;&nbsp;</a></span>DrawText()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void DrawText </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a69d3479c35fd7b378e1ac94ded85d3ad">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a69d3479c35fd7b378e1ac94ded85d3ad">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a69d3479c35fd7b378e1ac94ded85d3ad">CairoPainter</a>.</p>

</div>
</div>
<a id="aec3268ffd531e78091929eaaaf99634a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec3268ffd531e78091929eaaaf99634a">&sect;&nbsp;</a></span>GetFontMetrics()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="structOpenBabel_1_1OBFontMetrics.shtml">OBFontMetrics</a> GetFontMetrics </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implemented in <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a28e06a6647207a2da44748adb732ad7c">ASCIIPainter</a>, <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a28e06a6647207a2da44748adb732ad7c">CommandPainter</a>, and <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#a28e06a6647207a2da44748adb732ad7c">CairoPainter</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="painter_8h_source.shtml">painter.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
