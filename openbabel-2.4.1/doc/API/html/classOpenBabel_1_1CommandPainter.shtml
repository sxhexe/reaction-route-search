<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>CommandPainter Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml">CommandPainter</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classOpenBabel_1_1CommandPainter-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">CommandPainter Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="commandpainter_8h_source.shtml">commandpainter.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for CommandPainter:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1CommandPainter.png" usemap="#CommandPainter_map" alt=""/>
  <map id="CommandPainter_map" name="CommandPainter_map">
<area href="classOpenBabel_1_1OBPainter.shtml" title="Abstract painter base class used by OBDepict. " alt="OBPainter" shape="rect" coords="0,0,107,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a271fe56f437dfc7c021891bb9848cd2b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a271fe56f437dfc7c021891bb9848cd2b">CommandPainter</a> (std::ostream &amp;ofs)</td></tr>
<tr class="separator:a271fe56f437dfc7c021891bb9848cd2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e71c95ed629fb18221f0bd0b8fa5a9d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a5e71c95ed629fb18221f0bd0b8fa5a9d">~CommandPainter</a> ()</td></tr>
<tr class="separator:a5e71c95ed629fb18221f0bd0b8fa5a9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">OBPainter methods</div></td></tr>
<tr class="memitem:a550d23b07eacaa9b599c86821c72d918"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a550d23b07eacaa9b599c86821c72d918">NewCanvas</a> (double width, double height)</td></tr>
<tr class="separator:a550d23b07eacaa9b599c86821c72d918"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1589ac745e58f97d59ed254149af57e2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a1589ac745e58f97d59ed254149af57e2">IsGood</a> () const</td></tr>
<tr class="separator:a1589ac745e58f97d59ed254149af57e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd65900e68befc5f17d836c58d74590"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">SetFontFamily</a> (const std::string &amp;fontFamily)</td></tr>
<tr class="separator:a9fd65900e68befc5f17d836c58d74590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a642db2c67b0a803ddf516a309cf3db63"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a642db2c67b0a803ddf516a309cf3db63">SetFontSize</a> (int pointSize)</td></tr>
<tr class="separator:a642db2c67b0a803ddf516a309cf3db63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8eebb0cb991191d0add843b581a6995"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ab8eebb0cb991191d0add843b581a6995">SetFillColor</a> (const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;color)</td></tr>
<tr class="separator:ab8eebb0cb991191d0add843b581a6995"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5203f18c0b9667a06cccff5d0867d368"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a5203f18c0b9667a06cccff5d0867d368">SetFillRadial</a> (const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;start, const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;end)</td></tr>
<tr class="separator:a5203f18c0b9667a06cccff5d0867d368"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac15e0798f03a90030b7476216ea80c9b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ac15e0798f03a90030b7476216ea80c9b">SetPenColor</a> (const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;color)</td></tr>
<tr class="separator:ac15e0798f03a90030b7476216ea80c9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a533cee84ce534e491635dbfa48a38c88"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a533cee84ce534e491635dbfa48a38c88">SetPenWidth</a> (double width)</td></tr>
<tr class="separator:a533cee84ce534e491635dbfa48a38c88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e60e6817cf5d10f13e0e91dd3f7044a"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a1e60e6817cf5d10f13e0e91dd3f7044a">GetPenWidth</a> ()</td></tr>
<tr class="separator:a1e60e6817cf5d10f13e0e91dd3f7044a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6894e2e815dd036358c481b52cbaf21"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ac6894e2e815dd036358c481b52cbaf21">DrawLine</a> (double x1, double y1, double x2, double y2, const std::vector&lt; double &gt; &amp;dashes=std::vector&lt; double &gt;())</td></tr>
<tr class="separator:ac6894e2e815dd036358c481b52cbaf21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad58425475eb726e5a312d33f6a9b18a8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ad58425475eb726e5a312d33f6a9b18a8">DrawPolygon</a> (const std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;points)</td></tr>
<tr class="separator:ad58425475eb726e5a312d33f6a9b18a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae85b79bdf3eca6e115ca27ab9d4a3fcc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#ae85b79bdf3eca6e115ca27ab9d4a3fcc">DrawCircle</a> (double x, double y, double r)</td></tr>
<tr class="separator:ae85b79bdf3eca6e115ca27ab9d4a3fcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb2e2340001b9432171bace2c04799bf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#acb2e2340001b9432171bace2c04799bf">DrawBall</a> (double x, double y, double r, double opacity=1.0)</td></tr>
<tr class="separator:acb2e2340001b9432171bace2c04799bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69d3479c35fd7b378e1ac94ded85d3ad"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a69d3479c35fd7b378e1ac94ded85d3ad">DrawText</a> (double x, double y, const std::string &amp;text)</td></tr>
<tr class="separator:a69d3479c35fd7b378e1ac94ded85d3ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28e06a6647207a2da44748adb732ad7c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structOpenBabel_1_1OBFontMetrics.shtml">OBFontMetrics</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a28e06a6647207a2da44748adb732ad7c">GetFontMetrics</a> (const std::string &amp;text)</td></tr>
<tr class="separator:a28e06a6647207a2da44748adb732ad7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a271fe56f437dfc7c021891bb9848cd2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a271fe56f437dfc7c021891bb9848cd2b">&sect;&nbsp;</a></span>CommandPainter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml">CommandPainter</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5e71c95ed629fb18221f0bd0b8fa5a9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e71c95ed629fb18221f0bd0b8fa5a9d">&sect;&nbsp;</a></span>~CommandPainter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1CommandPainter.shtml">CommandPainter</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a550d23b07eacaa9b599c86821c72d918"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a550d23b07eacaa9b599c86821c72d918">&sect;&nbsp;</a></span>NewCanvas()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void NewCanvas </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>height</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a new canvas to paint on with size <code>width</code> x <code>height</code>. <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter. ">OBDepict</a> will always call NewCanvas before performing any drawing operations. Painters that are capable of drawing on a previously unspecified area don't need to implement this. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a135a190c2d8717af6c4b491504a17458">OBPainter</a>.</p>

</div>
</div>
<a id="a1589ac745e58f97d59ed254149af57e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1589ac745e58f97d59ed254149af57e2">&sect;&nbsp;</a></span>IsGood()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsGood </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Before <a class="el" href="classOpenBabel_1_1OBDepict.shtml" title="2D depiction of molecules using OBPainter. ">OBDepict</a> performes any drawing operation, this method is called to check if the painter is ready to start drawing. If this method returns false, drawing is aborted. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a6b00885efc9bf26c5868f53f13ff3995">OBPainter</a>.</p>

</div>
</div>
<a id="a9fd65900e68befc5f17d836c58d74590"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9fd65900e68befc5f17d836c58d74590">&sect;&nbsp;</a></span>SetFontFamily()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFontFamily </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>fontFamily</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's font family. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a7180ada44a877dec7004fe197ac353d9">OBPainter</a>.</p>

</div>
</div>
<a id="a642db2c67b0a803ddf516a309cf3db63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a642db2c67b0a803ddf516a309cf3db63">&sect;&nbsp;</a></span>SetFontSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFontSize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>pointSize</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's font point size. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a39a2ee83c7d868d98fb6d6505448368c">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="ab8eebb0cb991191d0add843b581a6995"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8eebb0cb991191d0add843b581a6995">&sect;&nbsp;</a></span>SetFillColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFillColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's fill color. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a38087c772403c5a64295e847e52d88f8">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="a5203f18c0b9667a06cccff5d0867d368"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5203f18c0b9667a06cccff5d0867d368">&sect;&nbsp;</a></span>SetFillRadial()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFillRadial </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's fill as a radial gradient. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a5b4f83b050aa6301baff2c9b82adf80d">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="ac15e0798f03a90030b7476216ea80c9b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac15e0798f03a90030b7476216ea80c9b">&sect;&nbsp;</a></span>SetPenColor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetPenColor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a> &amp;&#160;</td>
          <td class="paramname"><em>color</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's pen color. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a10c3142535e0162c928ad36b9c7ad7ff">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="a533cee84ce534e491635dbfa48a38c88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a533cee84ce534e491635dbfa48a38c88">&sect;&nbsp;</a></span>SetPenWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetPenWidth </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>width</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the painter's pen width. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a6a49a7a87584f4321e7a9c2d1d1cd4ae">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="a1e60e6817cf5d10f13e0e91dd3f7044a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e60e6817cf5d10f13e0e91dd3f7044a">&sect;&nbsp;</a></span>GetPenWidth()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double GetPenWidth </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the painter's pen width. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a4069c1f8fdcdc2df1f22ac6dcb27e6e2">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="ac6894e2e815dd036358c481b52cbaf21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6894e2e815dd036358c481b52cbaf21">&sect;&nbsp;</a></span>DrawLine()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DrawLine </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>dashes</em> = <code>std::vector&lt;&#160;double&#160;&gt;()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Draw a line from <code>x1</code>, <code>y1</code> to <code>x2</code>, <code>y2</code>. The line is drawn using the current pen color and width. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#af29e9dcb6c0abeb27867a097f2293657">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="ad58425475eb726e5a312d33f6a9b18a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad58425475eb726e5a312d33f6a9b18a8">&sect;&nbsp;</a></span>DrawPolygon()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DrawPolygon </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; std::pair&lt; double, double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>points</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Draw a polygon by connecting consecutive points. The last point will be connected to the first one. The lines are drawn using the current pen color and width. The area inside the polygon is filled with the current fill color. </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a47edaf962916310d2b3eb21aeecace05">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="ae85b79bdf3eca6e115ca27ab9d4a3fcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae85b79bdf3eca6e115ca27ab9d4a3fcc">&sect;&nbsp;</a></span>DrawCircle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DrawCircle </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#a863bcec97ffd4ca82a3669860943ad2c">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="acb2e2340001b9432171bace2c04799bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb2e2340001b9432171bace2c04799bf">&sect;&nbsp;</a></span>DrawBall()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DrawBall </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>opacity</em> = <code>1.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Draw a pseudo 3D ball, centered on (<code>x</code>,<code>y</code>) of radius <code>r</code> filled with the current Fill color or gradient </p>

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#ab26badf5b227aaad8fd3b2f566df78a1">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="a69d3479c35fd7b378e1ac94ded85d3ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69d3479c35fd7b378e1ac94ded85d3ad">&sect;&nbsp;</a></span>DrawText()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DrawText </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#abd406d7a4ecb123aaf335a5eed7a559f">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<a id="a28e06a6647207a2da44748adb732ad7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28e06a6647207a2da44748adb732ad7c">&sect;&nbsp;</a></span>GetFontMetrics()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structOpenBabel_1_1OBFontMetrics.shtml">OBFontMetrics</a> GetFontMetrics </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>text</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Implements <a class="el" href="classOpenBabel_1_1OBPainter.shtml#aec3268ffd531e78091929eaaaf99634a">OBPainter</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1CommandPainter.shtml#a9fd65900e68befc5f17d836c58d74590">CommandPainter::SetFontFamily()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="commandpainter_8h_source.shtml">commandpainter.h</a></li>
<li><a class="el" href="commandpainter_8cpp.shtml">commandpainter.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
