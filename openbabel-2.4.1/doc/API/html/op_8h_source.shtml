<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>op.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">op.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="op_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">op.h - plugin options or operations</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2007 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful, but</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">General Public License for more details.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef OB_OP_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define OB_OP_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keyword">class </span>OBConversion; <span class="comment">//used only as a pointer</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">// Class introduction below</span></div><div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBOp.shtml">   33</a></span>&#160;<span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBOp.shtml">OBOp</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;{</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <a class="code" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBOp.shtml">OBOp</a>);</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBOp.shtml#a4e98002937e35472f2b829eaf98913d3">   38</a></span>&#160;  <span class="keyword">typedef</span> <span class="keyword">const</span> std::map&lt;std::string, std::string&gt; <a class="code" href="classOpenBabel_1_1OBOp.shtml#a4e98002937e35472f2b829eaf98913d3">OpMap</a> ;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBOp.shtml#a45dfda1fb13d3c26ab7f8f7631e3351c">   41</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBOp.shtml#a45dfda1fb13d3c26ab7f8f7631e3351c">TypeID</a>(){ <span class="keywordflow">return</span> <span class="stringliteral">&quot;ops&quot;</span>; }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="comment">//NOTE: the parameters were changed in r3532</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Do(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <span class="keyword">const</span> <span class="keywordtype">char</span>* OptionText=NULL, OpMap* pOptions=NULL, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv=NULL)=0;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> WorksWith(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb)<span class="keyword">const</span>=0;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBOp.shtml#a72b971e7aaf24917543e55e65e4f9898">   51</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBOp.shtml#a72b971e7aaf24917543e55e65e4f9898">ProcessVec</a>(std::vector&lt;OBBase*&gt;&amp; <span class="comment">/* vec */</span>){ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBOp.shtml#a64e598f68f30107a74319b9fc6d26cd0">   54</a></span>&#160;  <span class="keyword">static</span> std::string <a class="code" href="classOpenBabel_1_1OBOp.shtml#a64e598f68f30107a74319b9fc6d26cd0">OpOptions</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  {</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    std::string s;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a> itr;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">for</span>(itr=<a class="code" href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">OBPlugin::Begin</a>(<span class="stringliteral">&quot;ops&quot;</span>);itr!=<a class="code" href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">OBPlugin::End</a>(<span class="stringliteral">&quot;ops&quot;</span>);++itr)</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <a class="code" href="classOpenBabel_1_1OBOp.shtml">OBOp</a>* pOp = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classOpenBabel_1_1OBOp.shtml">OBOp</a>*<span class="keyword">&gt;</span>(itr-&gt;second);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;       <span class="comment">//ignore ops with IDs that begin with &#39;_&#39; or have &quot;not displayed in GUI&quot; in their first line of description</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="keywordflow">if</span>(*(itr-&gt;first)==<span class="charliteral">&#39;_&#39;</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        || <a class="code" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">OBPlugin::FirstLine</a>(pOp-&gt;<a class="code" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a>()).find(<span class="stringliteral">&quot;not displayed in GUI&quot;</span>)!=std::string::npos)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">continue</span>;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      <span class="keywordflow">if</span>(pOp &amp;&amp; pOp-&gt;<a class="code" href="classOpenBabel_1_1OBOp.shtml#a841238ff5ff03c1c9341dea0105469c6">WorksWith</a>(pOb))</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        s += <span class="stringliteral">&quot;--&quot;</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        s += itr-&gt;first; <span class="comment">//ID</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        s += <span class="charliteral">&#39; &#39;</span>;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        s += <a class="code" href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">OBPlugin::FirstLine</a>(pOp-&gt;<a class="code" href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">Description</a>()) + <span class="charliteral">&#39;\n&#39;</span>;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    s += <span class="charliteral">&#39;\n&#39;</span>;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">return</span> s;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBOp.shtml#a139b43c8cee15687f02550c031e558d7">   82</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBOp.shtml#a139b43c8cee15687f02550c031e558d7">DoOps</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, OpMap* pOptions, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  {</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    OpMap::const_iterator itr;</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">for</span>(itr=pOptions-&gt;begin();itr!=pOptions-&gt;end();++itr)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <a class="code" href="classOpenBabel_1_1OBOp.shtml">OBOp</a>* pOp = FindType(itr-&gt;first.c_str());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      <span class="keywordflow">if</span>(pOp)</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span>(!pOp-&gt;<a class="code" href="classOpenBabel_1_1OBOp.shtml#ad1f068b2923689e4c4c48a76a3e885e4">Do</a>(pOb, itr-&gt;second.c_str(), pOptions, pConv))</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>; <span class="comment">//Op has decided molecule should not be output</span></div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;};</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;}<span class="comment">//namespace</span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBOp_shtml_a841238ff5ff03c1c9341dea0105469c6"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml#a841238ff5ff03c1c9341dea0105469c6">OpenBabel::OBOp::WorksWith</a></div><div class="ttdeci">virtual bool WorksWith(OBBase *pOb) const =0</div></div>
<div class="ttc" id="group__plugins_shtml_ga4a6b8d1611d5d963fc29982cc1ebcbf7"><div class="ttname"><a href="group__plugins.shtml#ga4a6b8d1611d5d963fc29982cc1ebcbf7">OpenBabel::OBPlugin::Description</a></div><div class="ttdeci">virtual const char * Description()</div><div class="ttdoc">Required description of a sub-type. </div><div class="ttdef"><b>Definition:</b> plugin.h:66</div></div>
<div class="ttc" id="classOpenBabel_1_1OBOp_shtml_a4e98002937e35472f2b829eaf98913d3"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml#a4e98002937e35472f2b829eaf98913d3">OpenBabel::OBOp::OpMap</a></div><div class="ttdeci">const std::map&lt; std::string, std::string &gt; OpMap</div><div class="ttdef"><b>Definition:</b> op.h:38</div></div>
<div class="ttc" id="base_8h_shtml"><div class="ttname"><a href="base_8h.shtml">base.h</a></div><div class="ttdoc">Base classes to build a graph. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBPlugin_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBPlugin.shtml">OpenBabel::OBPlugin</a></div><div class="ttdoc">Base class for all types of dynamic classes discovered at runtime. </div><div class="ttdef"><b>Definition:</b> plugin.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml">OpenBabel::OBConversion</a></div><div class="ttdoc">Class to convert from one format to another. </div><div class="ttdef"><b>Definition:</b> obconversion.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBOp_shtml_ad1f068b2923689e4c4c48a76a3e885e4"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml#ad1f068b2923689e4c4c48a76a3e885e4">OpenBabel::OBOp::Do</a></div><div class="ttdeci">virtual bool Do(OBBase *pOb, const char *OptionText=NULL, OpMap *pOptions=NULL, OBConversion *pConv=NULL)=0</div><div class="ttdoc">Required function that does the work. Normally return true, unless object is not to be output...</div></div>
<div class="ttc" id="group__plugins_shtml_ga8fac85f5497f873a2dd8734b47f0bdc0"><div class="ttname"><a href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OpenBabel::OBPlugin::PluginIterator</a></div><div class="ttdeci">PluginMapType::const_iterator PluginIterator</div><div class="ttdef"><b>Definition:</b> plugin.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1OBOp_shtml_a72b971e7aaf24917543e55e65e4f9898"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml#a72b971e7aaf24917543e55e65e4f9898">OpenBabel::OBOp::ProcessVec</a></div><div class="ttdeci">virtual bool ProcessVec(std::vector&lt; OBBase *&gt; &amp;)</div><div class="ttdoc">Do something with an array of objects. Used a a callback routine in OpSort, etc. </div><div class="ttdef"><b>Definition:</b> op.h:51</div></div>
<div class="ttc" id="classOpenBabel_1_1OBOp_shtml_a64e598f68f30107a74319b9fc6d26cd0"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml#a64e598f68f30107a74319b9fc6d26cd0">OpenBabel::OBOp::OpOptions</a></div><div class="ttdeci">static std::string OpOptions(OBBase *pOb)</div><div class="ttdef"><b>Definition:</b> op.h:54</div></div>
<div class="ttc" id="group__plugins_shtml_gadd740e2a386b7db3e1f0e271cbe8a3f1"><div class="ttname"><a href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a></div><div class="ttdeci">#define MAKE_PLUGIN(BaseClass)</div><div class="ttdef"><b>Definition:</b> plugin.h:195</div></div>
<div class="ttc" id="plugin_8h_shtml"><div class="ttname"><a href="plugin_8h.shtml">plugin.h</a></div><div class="ttdoc">Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime. </div></div>
<div class="ttc" id="group__plugins_shtml_ga84fc973fdf4bba5a6b0e2d402077991c"><div class="ttname"><a href="group__plugins.shtml#ga84fc973fdf4bba5a6b0e2d402077991c">OpenBabel::OBPlugin::FirstLine</a></div><div class="ttdeci">static std::string FirstLine(const char *txt)</div><div class="ttdoc">Utility function to return only the first line of a string. </div><div class="ttdef"><b>Definition:</b> plugin.cpp:191</div></div>
<div class="ttc" id="classOpenBabel_1_1OBOp_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml">OpenBabel::OBOp</a></div><div class="ttdoc">Operations to modify molecules before output. </div><div class="ttdef"><b>Definition:</b> op.h:33</div></div>
<div class="ttc" id="classOpenBabel_1_1OBOp_shtml_a45dfda1fb13d3c26ab7f8f7631e3351c"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml#a45dfda1fb13d3c26ab7f8f7631e3351c">OpenBabel::OBOp::TypeID</a></div><div class="ttdeci">virtual const char * TypeID()</div><div class="ttdoc">Provides the name of this kind of plugin. Use -L &quot;ops&quot; to list from commandline. </div><div class="ttdef"><b>Definition:</b> op.h:41</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="group__plugins_shtml_ga9a330280c1cd2e7119dac87a6fd0b762"><div class="ttname"><a href="group__plugins.shtml#ga9a330280c1cd2e7119dac87a6fd0b762">OpenBabel::OBPlugin::End</a></div><div class="ttdeci">static PluginIterator End(const char *PluginID)</div><div class="ttdef"><b>Definition:</b> plugin.h:119</div></div>
<div class="ttc" id="group__plugins_shtml_ga1d4d73999ab0518ee471c635bd0a7e87"><div class="ttname"><a href="group__plugins.shtml#ga1d4d73999ab0518ee471c635bd0a7e87">OpenBabel::OBPlugin::Begin</a></div><div class="ttdeci">static PluginIterator Begin(const char *PluginID)</div><div class="ttdef"><b>Definition:</b> plugin.h:111</div></div>
<div class="ttc" id="classOpenBabel_1_1OBOp_shtml_a139b43c8cee15687f02550c031e558d7"><div class="ttname"><a href="classOpenBabel_1_1OBOp.shtml#a139b43c8cee15687f02550c031e558d7">OpenBabel::OBOp::DoOps</a></div><div class="ttdeci">static bool DoOps(OBBase *pOb, OpMap *pOptions, OBConversion *pConv)</div><div class="ttdef"><b>Definition:</b> op.h:82</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
