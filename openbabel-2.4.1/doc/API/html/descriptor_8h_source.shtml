<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>descriptor.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">descriptor.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="descriptor_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">descriptor.h - Base class for molecular descriptors</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2007 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef OB_DESCRIPTOR_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define OB_DESCRIPTOR_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;limits&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;openbabel/babelconfig.h&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">class </span>OBBase; <span class="comment">//Forward declaration; used only as pointer.</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">// Class introduction in descriptor.cpp</span></div><div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBDescriptor.shtml">   34</a></span>&#160;<span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBDescriptor.shtml">OBDescriptor</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <a class="code" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBDescriptor.shtml">OBDescriptor</a>)</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBDescriptor.shtml#a45db88b29eb37e9dd105bf4032e421d2">   39</a></span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#a45db88b29eb37e9dd105bf4032e421d2">TypeID</a>(){<span class="keywordflow">return</span> <span class="stringliteral">&quot;descriptors&quot;</span>;};</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBDescriptor.shtml#a21c9550baf45496df7f4b4ee9e494683">   42</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#a21c9550baf45496df7f4b4ee9e494683">Predict</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/* pOb */</span>, std::string* <span class="comment">/* param */</span> =NULL)</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  {<span class="keywordflow">return</span> std::numeric_limits&lt;double&gt;::quiet_NaN();}</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordtype">double</span> PredictAndSave(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string* param=NULL);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">double</span> GetStringValue(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string&amp; svalue, std::string* param=NULL);</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Compare(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::istream&amp; ss, <span class="keywordtype">bool</span> noEval, std::string* param=NULL);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Display(std::string&amp; txt, <span class="keyword">const</span> <span class="keywordtype">char</span>* param, <span class="keyword">const</span> <span class="keywordtype">char</span>* ID=NULL);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBDescriptor.shtml#ac9b3638a021a9cafc06d8e7059907740">   61</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#ac9b3638a021a9cafc06d8e7059907740">Order</a>(<span class="keywordtype">double</span> p1, <span class="keywordtype">double</span> p2){ <span class="keywordflow">return</span> p1&lt;p2; }</div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBDescriptor.shtml#ada86af1dfb13dd68c119d412480c78c3">   62</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#ada86af1dfb13dd68c119d412480c78c3">Order</a>(std::string s1, std::string s2){ <span class="keywordflow">return</span> s1&lt;s2; }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> FilterCompare(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::istream&amp; ss, <span class="keywordtype">bool</span> noEval);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> AddProperties(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <span class="keyword">const</span> std::string&amp; DescrList);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> DeleteProperties(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <span class="keyword">const</span> std::string&amp; DescrList);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keyword">static</span> std::string GetValues(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <span class="keyword">const</span> std::string&amp; DescrList);</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="keyword">static</span> std::pair&lt;std::string, std::string&gt; GetIdentifier(std::istream&amp; optionText);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">double</span> ParsePredicate(std::istream&amp; optionText, <span class="keywordtype">char</span>&amp; ch1, <span class="keywordtype">char</span>&amp; ch2, std::string&amp; svalue);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> ReadStringFromFilter(std::istream&amp; ss, std::string&amp; result);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> CompareStringWithFilter(std::istream&amp; optionText, std::string&amp; s, <span class="keywordtype">bool</span> noEval, <span class="keywordtype">bool</span> NoCompOK=<span class="keyword">false</span>);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="comment">// Treats _ as not a punctuation character and since 2.3.2 also $ # and %</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBDescriptor.shtml#a865d2be70640a96f185bf78dcaaea8b2">   93</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBDescriptor.shtml#a865d2be70640a96f185bf78dcaaea8b2">ispunctU</a>(<span class="keywordtype">char</span> ch)</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  {</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> ispunct(ch) &amp;&amp; ch!=<span class="charliteral">&#39;_&#39;</span> &amp;&amp; ch!=<span class="charliteral">&#39;$&#39;</span> &amp;&amp; ch!=<span class="charliteral">&#39;#&#39;</span> &amp;&amp; ch!=<span class="charliteral">&#39;%&#39;</span>;</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  }</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> MatchPairData(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::string&amp; s);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;};</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#aabfb2457435c6dd85d16016101b3e4d7">  103</a></span>&#160;<span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#aabfb2457435c6dd85d16016101b3e4d7">DoComparison</a>(<span class="keywordtype">char</span> ch1, <span class="keywordtype">char</span> ch2, <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">T</a>&amp; val, <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">T</a>&amp; filterval)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">switch</span>(ch1)</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">case</span> (0):  <span class="comment">//no comparison operator is same as =</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keywordflow">case</span>(<span class="charliteral">&#39;=&#39;</span>):</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordflow">return</span> val==filterval; <span class="comment">//**needs a better floating point comparison**</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">case</span>(<span class="charliteral">&#39;!&#39;</span>):</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordflow">return</span> val!=filterval; <span class="comment">//**needs a better floating point comparison**</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">case</span>(<span class="charliteral">&#39;&gt;&#39;</span>):</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordflow">if</span>(ch2==<span class="charliteral">&#39;=&#39;</span>)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> val&gt;=filterval;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">return</span> val&gt;filterval;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">case</span>(<span class="charliteral">&#39;&lt;&#39;</span>):</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keywordflow">if</span>(ch2==<span class="charliteral">&#39;=&#39;</span>)</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> val&lt;=filterval;</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">else</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">return</span> val&lt;filterval;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;}</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}<span class="comment">//namespace</span></div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="ttc" id="namespaceOpenBabel_1_1OBResidueIndex_shtml_a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce"><div class="ttname"><a href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">OpenBabel::OBResidueIndex::T</a></div><div class="ttdef"><b>Definition:</b> residue.h:340</div></div>
<div class="ttc" id="classOpenBabel_1_1OBDescriptor_shtml_a865d2be70640a96f185bf78dcaaea8b2"><div class="ttname"><a href="classOpenBabel_1_1OBDescriptor.shtml#a865d2be70640a96f185bf78dcaaea8b2">OpenBabel::OBDescriptor::ispunctU</a></div><div class="ttdeci">static bool ispunctU(char ch)</div><div class="ttdef"><b>Definition:</b> descriptor.h:93</div></div>
<div class="ttc" id="classOpenBabel_1_1OBPlugin_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBPlugin.shtml">OpenBabel::OBPlugin</a></div><div class="ttdoc">Base class for all types of dynamic classes discovered at runtime. </div><div class="ttdef"><b>Definition:</b> plugin.h:52</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aabfb2457435c6dd85d16016101b3e4d7"><div class="ttname"><a href="namespaceOpenBabel.shtml#aabfb2457435c6dd85d16016101b3e4d7">OpenBabel::DoComparison</a></div><div class="ttdeci">static bool DoComparison(char ch1, char ch2, T &amp;val, T &amp;filterval)</div><div class="ttdef"><b>Definition:</b> descriptor.h:103</div></div>
<div class="ttc" id="classOpenBabel_1_1OBDescriptor_shtml_ada86af1dfb13dd68c119d412480c78c3"><div class="ttname"><a href="classOpenBabel_1_1OBDescriptor.shtml#ada86af1dfb13dd68c119d412480c78c3">OpenBabel::OBDescriptor::Order</a></div><div class="ttdeci">virtual bool Order(std::string s1, std::string s2)</div><div class="ttdef"><b>Definition:</b> descriptor.h:62</div></div>
<div class="ttc" id="group__plugins_shtml_gadd740e2a386b7db3e1f0e271cbe8a3f1"><div class="ttname"><a href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a></div><div class="ttdeci">#define MAKE_PLUGIN(BaseClass)</div><div class="ttdef"><b>Definition:</b> plugin.h:195</div></div>
<div class="ttc" id="plugin_8h_shtml"><div class="ttname"><a href="plugin_8h.shtml">plugin.h</a></div><div class="ttdoc">Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBDescriptor_shtml_ac9b3638a021a9cafc06d8e7059907740"><div class="ttname"><a href="classOpenBabel_1_1OBDescriptor.shtml#ac9b3638a021a9cafc06d8e7059907740">OpenBabel::OBDescriptor::Order</a></div><div class="ttdeci">virtual bool Order(double p1, double p2)</div><div class="ttdef"><b>Definition:</b> descriptor.h:61</div></div>
<div class="ttc" id="classOpenBabel_1_1OBDescriptor_shtml_a45db88b29eb37e9dd105bf4032e421d2"><div class="ttname"><a href="classOpenBabel_1_1OBDescriptor.shtml#a45db88b29eb37e9dd105bf4032e421d2">OpenBabel::OBDescriptor::TypeID</a></div><div class="ttdeci">const char * TypeID()</div><div class="ttdoc">Redefined by each plugin type: &quot;formats&quot;, &quot;fingerprints&quot;, etc. </div><div class="ttdef"><b>Definition:</b> descriptor.h:39</div></div>
<div class="ttc" id="classOpenBabel_1_1OBDescriptor_shtml_a21c9550baf45496df7f4b4ee9e494683"><div class="ttname"><a href="classOpenBabel_1_1OBDescriptor.shtml#a21c9550baf45496df7f4b4ee9e494683">OpenBabel::OBDescriptor::Predict</a></div><div class="ttdeci">virtual double Predict(OBBase *, std::string *=NULL)</div><div class="ttdef"><b>Definition:</b> descriptor.h:42</div></div>
<div class="ttc" id="classOpenBabel_1_1OBDescriptor_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBDescriptor.shtml">OpenBabel::OBDescriptor</a></div><div class="ttdoc">Base class for molecular properties, descriptors or features. </div><div class="ttdef"><b>Definition:</b> descriptor.h:34</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:28 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
