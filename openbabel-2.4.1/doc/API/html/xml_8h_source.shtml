<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>xml.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">xml.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="xml_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">xml.h Declaration of XMLConversion,</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">declaration and definition of XMLBaseFormat and XMLMoleculeFormat</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2005-2006 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#ifndef OB_XML_H</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#define OB_XML_H</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="obconversion_8h.shtml">openbabel/obconversion.h</a>&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="obmolecformat_8h.shtml">openbabel/obmolecformat.h</a>&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;libxml/xmlreader.h&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;libxml/xmlwriter.h&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;typeinfo&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="comment">//forward declaration</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">class </span>XMLBaseFormat;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="comment">//******************************************************</span></div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml">   53</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    {</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a88492ed87e2bb55fa507a811230aa843">XMLConversion</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#aac1b603c1695a1a41ebbeaa3fd398e10">~XMLConversion</a>();</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a59c32b70bb5bf6ee27b0611920d5afde">SetupReader</a>();</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#af91d68d5aff24430ababf0a5d847b9cb">SetupWriter</a>();</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ad107b052021a4cd6976288dc3d9d797b">ReadXML</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* pFormat, <a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ae5615879f0acad951ce4c86dca89d328">SkipXML</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ctag);</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">   72</a></span>&#160;      <span class="keyword">typedef</span> std::map&lt;std::string, XMLBaseFormat*&gt; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">NsMapType</a>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00076"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">   76</a></span>&#160;      <span class="keyword">static</span> NsMapType&amp; <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">Namespaces</a>()</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;          <span class="keyword">static</span> NsMapType ns;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;          <span class="keywordflow">return</span> ns;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;          <span class="comment">//static NsMapType* nsm = NULL;</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;          <span class="comment">//if (!nsm)</span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;          <span class="comment">//  nsm = new NsMapType;</span></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;          <span class="comment">//return *nsm;</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        };</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a09777c99e10d28476c0c920dd784a235">RegisterXMLFormat</a>(<a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* pFormat,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                                    <span class="keywordtype">bool</span> IsDefault=<span class="keyword">false</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* uri=NULL);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf">GetDerived</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv, <span class="keywordtype">bool</span> ForReading=<span class="keyword">true</span>);</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">   95</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">IsLast</a>()</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        { <span class="keywordflow">return</span> _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">IsLast</a>(); }</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#a162677bee472136c7078735ac5a3142b">   97</a></span>&#160;      <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a162677bee472136c7078735ac5a3142b">GetOutputIndex</a>()</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        { <span class="keywordflow">return</span>  _pConv-&gt;<a class="code" href="classOpenBabel_1_1OBConversion.shtml#a3b26998ae845717455f1fff3c59470be">GetOutputIndex</a>(); }</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#a503005e902a848ab2ec665e1ebcab06e">  101</a></span>&#160;      xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a503005e902a848ab2ec665e1ebcab06e">GetReader</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">        </span>{ <span class="keywordflow">return</span> _reader;   };</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div><div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#ae1b388db38d0ea2f4c7d94bf0c1c2090">  104</a></span>&#160;      xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ae1b388db38d0ea2f4c7d94bf0c1c2090">GetWriter</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">        </span>{ <span class="keywordflow">return</span> _writer;   };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div><div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">  107</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a>()</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        {</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;          xmlOutputBufferFlush(_buf);</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        }</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div><div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#a2edcc253b10dd0b9f5e1b600a1dc24e9">  112</a></span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a2edcc253b10dd0b9f5e1b600a1dc24e9">GetDefaultXMLClass</a>() <span class="comment">//TODO make dependent on object type</span></div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        { <span class="keywordflow">return</span> _pDefault;};</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">  115</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">LookForNamespace</a>()</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        { _LookingForNamespace = <span class="keyword">true</span>; };</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a499db0113e7e419a0488316e2c51ca05">ReadStream</a>(<span class="keywordtype">void</span> * context, <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keyword">static</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a2dcb149cda158829b4bd51979532798a">WriteStream</a>(<span class="keywordtype">void</span> * context, <span class="keyword">const</span> <span class="keywordtype">char</span> * buffer, <span class="keywordtype">int</span> len);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      <span class="comment">//static int CloseStream(void* context);</span></div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ad465787fba2c11cf2574fb3d142460b5">GetAttribute</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* attrname);</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      std::string <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a81f0e81929276d8fa2d28af1bc47960c">GetContent</a>();</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keywordtype">bool</span>    <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a5717310e3e50ca47144910f9968d2011">GetContentInt</a>(<span class="keywordtype">int</span>&amp; value);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a7b14e97eab5859b8a02cd97abfc7e860">GetContentDouble</a>(<span class="keywordtype">double</span>&amp; value);</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      <span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a>* _pDefault;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* _pConv;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      std::streampos  _requestedpos, _lastpos;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      xmlTextReaderPtr _reader;</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;      xmlTextWriterPtr _writer;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;      xmlOutputBufferPtr _buf;</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      <span class="comment">//    xmlBufferPtr _buf;</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <span class="keywordtype">bool</span> _LookingForNamespace;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLConversion.shtml#afecc511417086050a7506ca632546cdb">  144</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#afecc511417086050a7506ca632546cdb">_SkipNextRead</a>;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    };</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="comment">//*************************************************</span></div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml">  150</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a></div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">  153</a></span>&#160;      <a class="code" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">_pxmlConv</a>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="comment">//formating for output</span></div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">  156</a></span>&#160;      std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">_prefix</a>;</div><div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">  157</a></span>&#160;      <span class="keywordtype">int</span> baseindent, <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">ind</a>;</div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">  158</a></span>&#160;      std::string <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">nsdecl</a>;</div><div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">  159</a></span>&#160;      <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">_embedlevel</a>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a429ba96990b23caaca913a23345f3793">  162</a></span>&#160;      <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a429ba96990b23caaca913a23345f3793">~XMLBaseFormat</a>(){}</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* NamespaceURI()<span class="keyword">const</span>=0;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a6b007f43192f527944eef5136e4b2703">  164</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a6b007f43192f527944eef5136e4b2703">DoElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};</div><div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a0e59feda5d3eb85765b53cf4b42f77ef">  165</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a0e59feda5d3eb85765b53cf4b42f77ef">EndElement</a>(<span class="keyword">const</span> std::string&amp; ElName){<span class="keywordflow">return</span> <span class="keyword">false</span>;};</div><div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c">  167</a></span>&#160;      <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c">EndTag</a>(){<span class="keywordflow">return</span> <span class="stringliteral">&quot;&gt;&quot;</span>;};</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4f78f6b785dbc43f74d44c6bb39cfb78">  170</a></span>&#160;      xmlTextReaderPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4f78f6b785dbc43f74d44c6bb39cfb78">reader</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;          <span class="keywordflow">return</span> _pxmlConv-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a503005e902a848ab2ec665e1ebcab06e">GetReader</a>();</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab13d5085d6f8bb5fc391fdc1ad1f8000">  175</a></span>&#160;      xmlTextWriterPtr <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#ab13d5085d6f8bb5fc391fdc1ad1f8000">writer</a>()<span class="keyword"> const</span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">        </span>{</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;          <span class="keywordflow">return</span> _pxmlConv-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ae1b388db38d0ea2f4c7d94bf0c1c2090">GetWriter</a>();</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        }</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">  180</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a>()</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        {</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;          _pxmlConv-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">OutputToStream</a>();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">  187</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">SkipObjects</a>(<span class="keywordtype">int</span> n, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        {</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;          <span class="comment">//don&#39;t implement on base class</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;          <span class="keywordflow">if</span>(*EndTag()==<span class="charliteral">&#39;&gt;&#39;</span>)</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;          <span class="comment">//Set up XMLConversion class with reader</span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;          _pxmlConv = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;          <span class="keywordflow">if</span>(!_pxmlConv)</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;          <span class="comment">//always find the end of at least 1 object</span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;          <span class="keywordflow">if</span>(n==0)++n;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;          <span class="comment">//Skip n objects, returning -1 if not successful</span></div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;          <span class="keywordtype">int</span> i;</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;          <span class="keywordflow">for</span>(i=0; i&lt;n; ++i)</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">if</span>(_pxmlConv-&gt;<a class="code" href="classOpenBabel_1_1XMLConversion.shtml#ae5615879f0acad951ce4c86dca89d328">SkipXML</a>(EndTag())!=1)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;              <span class="keywordflow">return</span> -1;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;          <span class="keywordflow">return</span> 1;</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        }</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    };</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="comment">//*************************************************</span></div><div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">  215</a></span>&#160;<span class="comment"></span>  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">XMLMoleculeFormat</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">protected</span>:</div><div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">  218</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">_pmol</a>;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ad794fc5cf08a2a6b1e877168bb784e0f">  221</a></span>&#160;      <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ad794fc5cf08a2a6b1e877168bb784e0f">~XMLMoleculeFormat</a>(){}</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723">  222</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723">ReadChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        {</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl</a>(pConv, <span class="keyword">this</span>);</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        };</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div><div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003">  227</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003">WriteChemObject</a>(<a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl</a>(pConv, <span class="keyword">this</span>);</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        };</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">  232</a></span>&#160;      <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">ReadMolecule</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, <a class="code" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a>* pConv)</div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        {</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;          _pmol = <span class="keyword">dynamic_cast&lt;</span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>*<span class="keyword">&gt;</span>(pOb);</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;          <span class="keywordflow">if</span>(!_pmol)</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;          _pxmlConv = <a class="code" href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf">XMLConversion::GetDerived</a>(pConv,<span class="keyword">true</span>);</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;          <span class="keywordflow">if</span>(!_pxmlConv)</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;          _embedlevel = -1;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;          <span class="keywordflow">return</span> _pxmlConv-&gt;ReadXML(<span class="keyword">this</span>,pOb);</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        };</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;</div><div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">  244</a></span>&#160;      <span class="keyword">const</span> std::type_info&amp; <a class="code" href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">GetType</a>()</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        {</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">typeid</span>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>*);</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        };</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    };</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;}<span class="comment">//namespace</span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="preprocessor">#endif</span></div><div class="ttc" id="classOpenBabel_1_1XMLMoleculeFormat_shtml_a5a3cd5ffc0d21fe9b95d804c44e7d146"><div class="ttname"><a href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a5a3cd5ffc0d21fe9b95d804c44e7d146">OpenBabel::XMLMoleculeFormat::ReadMolecule</a></div><div class="ttdeci">virtual bool ReadMolecule(OBBase *pOb, OBConversion *pConv)</div><div class="ttdoc">The &quot;API&quot; interface Read function. </div><div class="ttdef"><b>Definition:</b> xml.h:232</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a8000c477c493f1dc954e8a538ae6fda8"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a8000c477c493f1dc954e8a538ae6fda8">OpenBabel::XMLBaseFormat::nsdecl</a></div><div class="ttdeci">std::string nsdecl</div><div class="ttdef"><b>Definition:</b> xml.h:158</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLMoleculeFormat_shtml_ae286ac3ecc365473ace5c0da2c656ffe"><div class="ttname"><a href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ae286ac3ecc365473ace5c0da2c656ffe">OpenBabel::XMLMoleculeFormat::_pmol</a></div><div class="ttdeci">OBMol * _pmol</div><div class="ttdef"><b>Definition:</b> xml.h:218</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a4964d8defcb0f638a51963d436188f12"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a4964d8defcb0f638a51963d436188f12">OpenBabel::XMLConversion::OutputToStream</a></div><div class="ttdeci">void OutputToStream()</div><div class="ttdef"><b>Definition:</b> xml.h:107</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml">OpenBabel::XMLBaseFormat</a></div><div class="ttdoc">Abstract class containing common functionality for XML formats. </div><div class="ttdef"><b>Definition:</b> xml.h:150</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a4f78f6b785dbc43f74d44c6bb39cfb78"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a4f78f6b785dbc43f74d44c6bb39cfb78">OpenBabel::XMLBaseFormat::reader</a></div><div class="ttdeci">xmlTextReaderPtr reader() const</div><div class="ttdef"><b>Definition:</b> xml.h:170</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_ab50420582d1794a71702ae17e176dc07"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#ab50420582d1794a71702ae17e176dc07">OpenBabel::XMLBaseFormat::_pxmlConv</a></div><div class="ttdeci">XMLConversion * _pxmlConv</div><div class="ttdef"><b>Definition:</b> xml.h:153</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_ad107b052021a4cd6976288dc3d9d797b"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#ad107b052021a4cd6976288dc3d9d797b">OpenBabel::XMLConversion::ReadXML</a></div><div class="ttdeci">bool ReadXML(XMLBaseFormat *pFormat, OBBase *pOb)</div><div class="ttdoc">Parses the input xml stream and sends each element to the format&amp;#39;s callback routines. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml">OpenBabel::OBConversion</a></div><div class="ttdoc">Class to convert from one format to another. </div><div class="ttdef"><b>Definition:</b> obconversion.h:60</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_ae5615879f0acad951ce4c86dca89d328"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#ae5615879f0acad951ce4c86dca89d328">OpenBabel::XMLConversion::SkipXML</a></div><div class="ttdeci">int SkipXML(const char *ctag)</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a482fc8135a5ecf62b88f7e5348e62fbf"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a482fc8135a5ecf62b88f7e5348e62fbf">OpenBabel::XMLConversion::GetDerived</a></div><div class="ttdeci">static XMLConversion * GetDerived(OBConversion *pConv, bool ForReading=true)</div><div class="ttdoc">Returns the extended OBConversion class, making it if necessary. </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a0cc38e7988805424c15d68f5444a2a5d"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">OpenBabel::XMLConversion::IsLast</a></div><div class="ttdeci">bool IsLast()</div><div class="ttdef"><b>Definition:</b> xml.h:95</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_ad2f75af8aac19e5c3c48dc26c1fa319c"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#ad2f75af8aac19e5c3c48dc26c1fa319c">OpenBabel::XMLBaseFormat::EndTag</a></div><div class="ttdeci">virtual const char * EndTag()</div><div class="ttdoc">The tag at the end of the chemical object e.g. &quot;/molecule&gt;&quot;. </div><div class="ttdef"><b>Definition:</b> xml.h:167</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_afecc511417086050a7506ca632546cdb"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#afecc511417086050a7506ca632546cdb">OpenBabel::XMLConversion::_SkipNextRead</a></div><div class="ttdeci">bool _SkipNextRead</div><div class="ttdef"><b>Definition:</b> xml.h:144</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_adfcd8e84805c262d8cbca79a83f9d4cc"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#adfcd8e84805c262d8cbca79a83f9d4cc">OpenBabel::XMLBaseFormat::SkipObjects</a></div><div class="ttdeci">virtual int SkipObjects(int n, OBConversion *pConv)</div><div class="ttdef"><b>Definition:</b> xml.h:187</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a499db0113e7e419a0488316e2c51ca05"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a499db0113e7e419a0488316e2c51ca05">OpenBabel::XMLConversion::ReadStream</a></div><div class="ttdeci">static int ReadStream(void *context, char *buffer, int len)</div><div class="ttdoc">Static callback functions for xmlReaderForIO() </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a82425091d5dc3a7becda24e6cd3d13db"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a82425091d5dc3a7becda24e6cd3d13db">OpenBabel::XMLConversion::LookForNamespace</a></div><div class="ttdeci">void LookForNamespace()</div><div class="ttdef"><b>Definition:</b> xml.h:115</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a0e59feda5d3eb85765b53cf4b42f77ef"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a0e59feda5d3eb85765b53cf4b42f77ef">OpenBabel::XMLBaseFormat::EndElement</a></div><div class="ttdeci">virtual bool EndElement(const std::string &amp;ElName)</div><div class="ttdef"><b>Definition:</b> xml.h:165</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_ab13d5085d6f8bb5fc391fdc1ad1f8000"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#ab13d5085d6f8bb5fc391fdc1ad1f8000">OpenBabel::XMLBaseFormat::writer</a></div><div class="ttdeci">xmlTextWriterPtr writer() const</div><div class="ttdef"><b>Definition:</b> xml.h:175</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_af91d68d5aff24430ababf0a5d847b9cb"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#af91d68d5aff24430ababf0a5d847b9cb">OpenBabel::XMLConversion::SetupWriter</a></div><div class="ttdeci">bool SetupWriter()</div><div class="ttdoc">opens libxml2 writer </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a2dcb149cda158829b4bd51979532798a"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a2dcb149cda158829b4bd51979532798a">OpenBabel::XMLConversion::WriteStream</a></div><div class="ttdeci">static int WriteStream(void *context, const char *buffer, int len)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="obmolecformat_8h_shtml"><div class="ttname"><a href="obmolecformat_8h.shtml">obmolecformat.h</a></div><div class="ttdoc">Subclass of OBFormat for conversion of OBMol. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBMoleculeFormat_shtml_a2a5208bfd803385534526eea570bf6b0"><div class="ttname"><a href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OpenBabel::OBMoleculeFormat::ReadChemObjectImpl</a></div><div class="ttdeci">static bool ReadChemObjectImpl(OBConversion *pConv, OBFormat *)</div><div class="ttdoc">Static routine, which can be called from elsewhere. </div><div class="ttdef"><b>Definition:</b> obmolecformat.cpp:32</div></div>
<div class="ttc" id="mol_8h_shtml"><div class="ttname"><a href="mol_8h.shtml">mol.h</a></div><div class="ttdoc">Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel) ...</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a6b007f43192f527944eef5136e4b2703"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a6b007f43192f527944eef5136e4b2703">OpenBabel::XMLBaseFormat::DoElement</a></div><div class="ttdeci">virtual bool DoElement(const std::string &amp;ElName)</div><div class="ttdef"><b>Definition:</b> xml.h:164</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml">OpenBabel::XMLConversion</a></div><div class="ttdoc">A subclass for conversion of XML formats. </div><div class="ttdef"><b>Definition:</b> xml.h:53</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a5717310e3e50ca47144910f9968d2011"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a5717310e3e50ca47144910f9968d2011">OpenBabel::XMLConversion::GetContentInt</a></div><div class="ttdeci">bool GetContentInt(int &amp;value)</div><div class="ttdoc">Sets value to element content as an integer. Returns false if there is no content. </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a429ba96990b23caaca913a23345f3793"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a429ba96990b23caaca913a23345f3793">OpenBabel::XMLBaseFormat::~XMLBaseFormat</a></div><div class="ttdeci">~XMLBaseFormat()</div><div class="ttdef"><b>Definition:</b> xml.h:162</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLMoleculeFormat_shtml_a54e576034bd51c66256aa6a98f81d644"><div class="ttname"><a href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a54e576034bd51c66256aa6a98f81d644">OpenBabel::XMLMoleculeFormat::GetType</a></div><div class="ttdeci">const std::type_info &amp; GetType()</div><div class="ttdef"><b>Definition:</b> xml.h:244</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a7b14e97eab5859b8a02cd97abfc7e860"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a7b14e97eab5859b8a02cd97abfc7e860">OpenBabel::XMLConversion::GetContentDouble</a></div><div class="ttdeci">bool GetContentDouble(double &amp;value)</div><div class="ttdoc">Sets value to element content as an double. Returns false if there is no content. ...</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLMoleculeFormat_shtml_ad794fc5cf08a2a6b1e877168bb784e0f"><div class="ttname"><a href="classOpenBabel_1_1XMLMoleculeFormat.shtml#ad794fc5cf08a2a6b1e877168bb784e0f">OpenBabel::XMLMoleculeFormat::~XMLMoleculeFormat</a></div><div class="ttdeci">~XMLMoleculeFormat()</div><div class="ttdef"><b>Definition:</b> xml.h:221</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_ab188d28fc6fab286f1b4ff18c0a81ae1"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#ab188d28fc6fab286f1b4ff18c0a81ae1">OpenBabel::XMLConversion::Namespaces</a></div><div class="ttdeci">static NsMapType &amp; Namespaces()</div><div class="ttdef"><b>Definition:</b> xml.h:76</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a162677bee472136c7078735ac5a3142b"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a162677bee472136c7078735ac5a3142b">OpenBabel::XMLConversion::GetOutputIndex</a></div><div class="ttdeci">int GetOutputIndex()</div><div class="ttdef"><b>Definition:</b> xml.h:97</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLMoleculeFormat_shtml_a9acd362b27e30c19a2c870ca71592723"><div class="ttname"><a href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a9acd362b27e30c19a2c870ca71592723">OpenBabel::XMLMoleculeFormat::ReadChemObject</a></div><div class="ttdeci">virtual bool ReadChemObject(OBConversion *pConv)</div><div class="ttdoc">The &quot;Convert&quot; interface Read function. </div><div class="ttdef"><b>Definition:</b> xml.h:222</div></div>
<div class="ttc" id="obconversion_8h_shtml"><div class="ttname"><a href="obconversion_8h.shtml">obconversion.h</a></div><div class="ttdoc">Handle file conversions. Declaration of OBFormat, OBConversion. </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a6fbcab1e9ed906780aa61cba35c3744a"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a6fbcab1e9ed906780aa61cba35c3744a">OpenBabel::XMLConversion::NsMapType</a></div><div class="ttdeci">std::map&lt; std::string, XMLBaseFormat * &gt; NsMapType</div><div class="ttdef"><b>Definition:</b> xml.h:72</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a59c32b70bb5bf6ee27b0611920d5afde"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a59c32b70bb5bf6ee27b0611920d5afde">OpenBabel::XMLConversion::SetupReader</a></div><div class="ttdeci">bool SetupReader()</div><div class="ttdoc">opens libxml2 reader </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_ac0224265e7d214b7ed98e091fe559c88"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#ac0224265e7d214b7ed98e091fe559c88">OpenBabel::XMLBaseFormat::_embedlevel</a></div><div class="ttdeci">int _embedlevel</div><div class="ttdef"><b>Definition:</b> xml.h:159</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a88492ed87e2bb55fa507a811230aa843"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a88492ed87e2bb55fa507a811230aa843">OpenBabel::XMLConversion::XMLConversion</a></div><div class="ttdeci">XMLConversion(OBConversion *pConv)</div><div class="ttdoc">Existing OBConversion instance copied. </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a5fd9fbe1a6ecd9798543ec2a55c472a8"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a5fd9fbe1a6ecd9798543ec2a55c472a8">OpenBabel::XMLBaseFormat::_prefix</a></div><div class="ttdeci">std::string _prefix</div><div class="ttdef"><b>Definition:</b> xml.h:156</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLMoleculeFormat_shtml"><div class="ttname"><a href="classOpenBabel_1_1XMLMoleculeFormat.shtml">OpenBabel::XMLMoleculeFormat</a></div><div class="ttdoc">Abstract class for XML formats which represent molecules. </div><div class="ttdef"><b>Definition:</b> xml.h:215</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a503005e902a848ab2ec665e1ebcab06e"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a503005e902a848ab2ec665e1ebcab06e">OpenBabel::XMLConversion::GetReader</a></div><div class="ttdeci">xmlTextReaderPtr GetReader() const</div><div class="ttdef"><b>Definition:</b> xml.h:101</div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a3b26998ae845717455f1fff3c59470be"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a3b26998ae845717455f1fff3c59470be">OpenBabel::OBConversion::GetOutputIndex</a></div><div class="ttdeci">int GetOutputIndex() const</div><div class="ttdoc">Retrieves number of ChemObjects that have been actually output. </div><div class="ttdef"><b>Definition:</b> obconversion.cpp:738</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_ae1b388db38d0ea2f4c7d94bf0c1c2090"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#ae1b388db38d0ea2f4c7d94bf0c1c2090">OpenBabel::XMLConversion::GetWriter</a></div><div class="ttdeci">xmlTextWriterPtr GetWriter() const</div><div class="ttdef"><b>Definition:</b> xml.h:104</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_aac1b603c1695a1a41ebbeaa3fd398e10"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#aac1b603c1695a1a41ebbeaa3fd398e10">OpenBabel::XMLConversion::~XMLConversion</a></div><div class="ttdeci">~XMLConversion()</div><div class="ttdoc">Frees reader and writer if necessary. </div></div>
<div class="ttc" id="classOpenBabel_1_1OBConversion_shtml_a0cc38e7988805424c15d68f5444a2a5d"><div class="ttname"><a href="classOpenBabel_1_1OBConversion.shtml#a0cc38e7988805424c15d68f5444a2a5d">OpenBabel::OBConversion::IsLast</a></div><div class="ttdeci">bool IsLast()</div><div class="ttdoc">True if no more objects to be output. </div><div class="ttdef"><b>Definition:</b> obconversion.cpp:1143</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a81f0e81929276d8fa2d28af1bc47960c"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a81f0e81929276d8fa2d28af1bc47960c">OpenBabel::XMLConversion::GetContent</a></div><div class="ttdeci">std::string GetContent()</div><div class="ttdoc">Sets value to element content. Returns false if there is no content. </div></div>
<div class="ttc" id="classOpenBabel_1_1XMLMoleculeFormat_shtml_a39c2aaf250dde6e85d05ff9357d8b003"><div class="ttname"><a href="classOpenBabel_1_1XMLMoleculeFormat.shtml#a39c2aaf250dde6e85d05ff9357d8b003">OpenBabel::XMLMoleculeFormat::WriteChemObject</a></div><div class="ttdeci">virtual bool WriteChemObject(OBConversion *pConv)</div><div class="ttdoc">The &quot;Convert&quot; interface Write function. </div><div class="ttdef"><b>Definition:</b> xml.h:227</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMoleculeFormat_shtml_a9c04a77825af89227b6f83f19909d01d"><div class="ttname"><a href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OpenBabel::OBMoleculeFormat::WriteChemObjectImpl</a></div><div class="ttdeci">static bool WriteChemObjectImpl(OBConversion *pConv, OBFormat *)</div><div class="ttdoc">Static routine, which can be called from elsewhere. </div><div class="ttdef"><b>Definition:</b> obmolecformat.cpp:137</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a4b00721003b8d35559a55c9098ff36c5"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a4b00721003b8d35559a55c9098ff36c5">OpenBabel::XMLBaseFormat::ind</a></div><div class="ttdeci">int ind</div><div class="ttdef"><b>Definition:</b> xml.h:157</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a2edcc253b10dd0b9f5e1b600a1dc24e9"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a2edcc253b10dd0b9f5e1b600a1dc24e9">OpenBabel::XMLConversion::GetDefaultXMLClass</a></div><div class="ttdeci">static XMLBaseFormat * GetDefaultXMLClass()</div><div class="ttdef"><b>Definition:</b> xml.h:112</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFormat_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBFormat.shtml">OpenBabel::OBFormat</a></div><div class="ttdoc">Base class for file formats. </div><div class="ttdef"><b>Definition:</b> format.h:44</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLBaseFormat_shtml_a4964d8defcb0f638a51963d436188f12"><div class="ttname"><a href="classOpenBabel_1_1XMLBaseFormat.shtml#a4964d8defcb0f638a51963d436188f12">OpenBabel::XMLBaseFormat::OutputToStream</a></div><div class="ttdeci">void OutputToStream()</div><div class="ttdef"><b>Definition:</b> xml.h:180</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_ad465787fba2c11cf2574fb3d142460b5"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#ad465787fba2c11cf2574fb3d142460b5">OpenBabel::XMLConversion::GetAttribute</a></div><div class="ttdeci">std::string GetAttribute(const char *attrname)</div></div>
<div class="ttc" id="classOpenBabel_1_1XMLConversion_shtml_a09777c99e10d28476c0c920dd784a235"><div class="ttname"><a href="classOpenBabel_1_1XMLConversion.shtml#a09777c99e10d28476c0c920dd784a235">OpenBabel::XMLConversion::RegisterXMLFormat</a></div><div class="ttdeci">static void RegisterXMLFormat(XMLBaseFormat *pFormat, bool IsDefault=false, const char *uri=NULL)</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
