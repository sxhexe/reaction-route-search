<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>stereo.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li><li class="navelem"><a class="el" href="dir_8fb503b1b9ed5a853b0ce57a9277e655.shtml">stereo</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">stereo.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="stereo_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">  stereo.h - OBStereo &amp; OBStereoBase</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">  Copyright (C) 2009-2010 by Tim Vandermeersch</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">  This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">  For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">  This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">  it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">  the Free Software Foundation; either version 2 of the License, or</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">  (at your option) any later version.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">  This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">  GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">  You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">  along with this program; if not, write to the Free Software</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">  02110-1301, USA.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> **********************************************************************/</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef OB_STEREO_H</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define OB_STEREO_H</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="base_8h.shtml">openbabel/base.h</a>&gt;</span> <span class="comment">// OBGenericData</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="isomorphism_8h.shtml">openbabel/isomorphism.h</a>&gt;</span> <span class="comment">// Automorphisms</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;climits&gt;</span> <span class="comment">// UINT_MAX</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a> {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml">   75</a></span>&#160;  <span class="keyword">struct </span>OBAPI <a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  {</div><div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">   80</a></span>&#160;    <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">Type</a> {</div><div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7abf2462b166f389c17adccf7a95941396">   81</a></span>&#160;      CisTrans            = (1&lt;&lt;0), </div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a3115cb247d1cb271c7157b4db2407932">   82</a></span>&#160;      ExtendedCisTrans    = (1&lt;&lt;1), </div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a793d15fd6e6d225fcddc0cf4b65259d3">   83</a></span>&#160;      SquarePlanar        = (1&lt;&lt;2), </div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a398755acaa38c780e5a4dc5db1c205be">   84</a></span>&#160;      Tetrahedral         = (1&lt;&lt;3), </div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a8c2578d01eef213503d0894e8be33ad3">   85</a></span>&#160;      ExtendedTetrahedral = (1&lt;&lt;4), </div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a7cadd5a7e8d25d88807992426f62a397">   86</a></span>&#160;      TrigonalBipyramidal = (1&lt;&lt;5), </div><div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7a48563b1c184d9fab3497e3e519ce50af">   87</a></span>&#160;      Octahedral          = (1&lt;&lt;6)  </div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    };</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">   94</a></span>&#160;    <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">BondDirection</a> { <span class="comment">// Values taken from MDL format</span></div><div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97ad207f41315a26ce638464caf613b60a1">   95</a></span>&#160;      NotStereo =   0,</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97af4cfb1f053e0e8a980850336a1dcdab1">   96</a></span>&#160;      UpBond =      1,</div><div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97a6b3b36219bd6afd10e935be8526cb4ea">   97</a></span>&#160;      DownBond =    6,</div><div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97a3d121ce0cfdbe400c4a41e185030d262">   98</a></span>&#160;      UnknownDir =  4</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    };</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">  108</a></span>&#160;    <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">Shape</a> {</div><div class="line"><a name="l00109"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37ca0ab366e13e0cfd59ccb06cd77b673bca">  109</a></span>&#160;      ShapeU = 1,</div><div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37cacbf3a0dadf9e3e7a8dd4f0a81f8b010d">  110</a></span>&#160;      ShapeZ = 2,</div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37cafb39b2d794a5fd22489031455416fa31">  111</a></span>&#160;      Shape4 = 3</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    };</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div><div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">  119</a></span>&#160;    <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">View</a></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7ad67cd67454910029af59ecf137366d0e">  121</a></span>&#160;      ViewFrom = 1, </div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7a82407be1a15d633a8bf5df6eaecad155">  122</a></span>&#160;      ViewTowards = 2 </div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    };</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">  130</a></span>&#160;    <span class="keyword">enum</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">Winding</a> {</div><div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31adc82829d52b935bb1ba087f98f44dac7">  131</a></span>&#160;      Clockwise = 1,     </div><div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31a6bf12c9b9fea555c370c5f75629cd609">  132</a></span>&#160;      AntiClockwise = 2, </div><div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31a7c3b131410d13135cf3b0f159a6cb899">  133</a></span>&#160;      UnknownWinding = 3 </div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    };</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">  145</a></span>&#160;    <span class="keyword">typedef</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">Ref</a>;</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">enum</span> {</div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a16af7b253440dadd46a80a4b9fddba4da7295d9aeb6e0e6f3a5b77aa0ce7ed0db">  150</a></span>&#160;      NoRef = UINT_MAX,       </div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a16af7b253440dadd46a80a4b9fddba4da02b1798105615b9c057d777fd19f1015">  151</a></span>&#160;      ImplicitRef = UINT_MAX - 1  </div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    };</div><div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">  156</a></span>&#160;    <span class="keyword">typedef</span> std::vector&lt;Ref&gt; <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">Refs</a>;</div><div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a1380cd3ca593dd317be63064b47e14db">  160</a></span>&#160;    <span class="keyword">typedef</span> Refs::iterator <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1380cd3ca593dd317be63064b47e14db">RefIter</a>;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a6f0021eb4868fb5540a2cedde823ada1">  164</a></span>&#160;    <span class="keyword">typedef</span> Refs::const_iterator <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a6f0021eb4868fb5540a2cedde823ada1">ConstRefIter</a>;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">  175</a></span>&#160;    <span class="keyword">static</span> Refs <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">MakeRefs</a>(Ref ref1, Ref ref2, Ref ref3, Ref ref4 = NoRef)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    {</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      Refs refs(3);</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      refs[0] = ref1;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      refs[1] = ref2;</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      refs[2] = ref3;</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      <span class="keywordflow">if</span> (ref4 != NoRef)</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        refs.push_back(ref4);</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      <span class="keywordflow">return</span> refs;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    }</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> ContainsSameRefs(<span class="keyword">const</span> Refs &amp;refs1, <span class="keyword">const</span> Refs &amp;refs2);</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">bool</span> ContainsRef(<span class="keyword">const</span> Refs &amp;refs, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> ref);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">int</span> NumInversions(<span class="keyword">const</span> Refs &amp;refs);</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">static</span> <span class="keywordtype">void</span> Permutate(Refs &amp;refs, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j);</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keyword">static</span> Refs Permutated(<span class="keyword">const</span> Refs &amp;refs, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j);</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  };</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;</div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereoUnit.shtml">  258</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml">OBStereoUnit</a></div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  {</div><div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereoUnit.shtml#ad200dcf5a41b516d592daf60cab1fd0e">  264</a></span>&#160;    <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#ad200dcf5a41b516d592daf60cab1fd0e">OBStereoUnit</a>() : type(static_cast&lt;<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::Type&gt;(0)), id(<a class="code" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a>::NoRef), para(false)</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    {</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div><div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereoUnit.shtml#a65527f1c8d53729db66c6fdc5e43e46b">  271</a></span>&#160;    <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#a65527f1c8d53729db66c6fdc5e43e46b">OBStereoUnit</a>(<a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> _type, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> _id, <span class="keywordtype">bool</span> _para = <span class="keyword">false</span>) :</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        type(_type), id(_id), para(_para)</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    {</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div><div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereoUnit.shtml#aeecb8f40f1a4fa558dbf6383d1b72771">  276</a></span>&#160;    <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#aeecb8f40f1a4fa558dbf6383d1b72771">type</a>; </div><div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereoUnit.shtml#af17b8bd946e0f93c6550050f9e8aa349">  277</a></span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#af17b8bd946e0f93c6550050f9e8aa349">id</a>; </div><div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1OBStereoUnit.shtml#a85967158ea10743b1e69bfe4edbcb6a1">  278</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="structOpenBabel_1_1OBStereoUnit.shtml#a85967158ea10743b1e69bfe4edbcb6a1">para</a>; </div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  };</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">  287</a></span>&#160;  <span class="keyword">typedef</span> std::vector&lt;OBStereoUnit&gt; <a class="code" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a>;</div><div class="line"><a name="l00294"></a><span class="lineno"><a class="line" href="group__stereo.shtml#ga75c7c66edf2555b974417a77968ebb57">  294</a></span>&#160;  <span class="keyword">typedef</span> std::vector&lt;OBStereoUnitSet&gt; <a class="code" href="group__stereo.shtml#ga75c7c66edf2555b974417a77968ebb57">OBStereoUnitSetOfSets</a>;</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="comment">// fwd decl</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>;</div><div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoBase.shtml">  321</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml">OBStereoBase</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a></div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoBase.shtml#a4e9716db658a2f725a214f4f23b6a68d">  330</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#a4e9716db658a2f725a214f4f23b6a68d">OBStereoBase</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol) :</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">&quot;StereoData&quot;</span>, OBGenericDataType::<a class="code" href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba3f9974bdbccde7c26064d7ec21d570ef">StereoData</a>, <a class="code" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392">perceived</a>),</div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        m_mol(mol), m_specified(true)</div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      {</div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      }</div><div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoBase.shtml#af79f43b5cb6090d98dac9da71e083499">  338</a></span>&#160;      <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#af79f43b5cb6090d98dac9da71e083499">~OBStereoBase</a>() { m_mol = 0; }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;</div><div class="line"><a name="l00346"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoBase.shtml#af2ef37946c0974e77c1d76e0e789443f">  346</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#af2ef37946c0974e77c1d76e0e789443f">GetMolecule</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_mol; }</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      <span class="keyword">virtual</span> <a class="code" href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OBStereo::Type</a> GetType() <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00356"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoBase.shtml#aa03f9b7e07be400ad77ba2306a2f1619">  356</a></span>&#160;      <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#aa03f9b7e07be400ad77ba2306a2f1619">SetSpecified</a>(<span class="keywordtype">bool</span> specified) { m_specified = specified; }</div><div class="line"><a name="l00360"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoBase.shtml#a92e950621d78cfc00bb29f66f0c67255">  360</a></span>&#160;      <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1OBStereoBase.shtml#a92e950621d78cfc00bb29f66f0c67255">IsSpecified</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_specified; }</div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;      <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *m_mol; </div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      <span class="keywordtype">bool</span> m_specified; </div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  };</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;</div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="comment">// fwd decl</span></div><div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a>;</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a>;</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a>;</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoFacade.shtml">  384</a></span>&#160;  <span class="keyword">class </span>OBAPI <a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml">OBStereoFacade</a></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  {</div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="keyword">public</span>:</div><div class="line"><a name="l00394"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBStereoFacade.shtml#af8355c7f4c1621336979f3bb83bc48c1">  394</a></span>&#160;      <a class="code" href="classOpenBabel_1_1OBStereoFacade.shtml#af8355c7f4c1621336979f3bb83bc48c1">OBStereoFacade</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">bool</span> perceive = <span class="keyword">true</span>) :</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;          m_mol(mol), m_init(false), m_perceive(perceive)</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;      {</div><div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;      }</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumTetrahedralStereo();</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;      <span class="keywordtype">bool</span> HasTetrahedralStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);</div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      <a class="code" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a>* GetTetrahedralStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);</div><div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumCisTransStereo();</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;      <span class="keywordtype">bool</span> HasCisTransStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> bondId);</div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;      <a class="code" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a>* GetCisTransStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> bondId);</div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NumSquarePlanarStereo();</div><div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;      <span class="keywordtype">bool</span> HasSquarePlanarStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);</div><div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;      <a class="code" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a>* GetSquarePlanarStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> atomId);</div><div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;</div><div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;      <span class="keyword">template</span>&lt;<span class="keywordtype">int</span> StereoType&gt;</div><div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;      <span class="keywordtype">bool</span> HasStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);</div><div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;      <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;      <a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">T</a>* GetStereo(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">id</span>);</div><div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;</div><div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div><div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keyword">private</span>:</div><div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;      <span class="keyword">inline</span> <span class="keywordtype">void</span> EnsureInit() { <span class="keywordflow">if</span> (!m_init) InitMaps(); }</div><div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;      <span class="keywordtype">void</span> InitMaps();</div><div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div><div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;      <a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *m_mol;</div><div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;      <span class="keywordtype">bool</span> m_init;</div><div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;      <span class="keywordtype">bool</span> m_perceive;</div><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;      std::map&lt;unsigned long, OBTetrahedralStereo*&gt; m_tetrahedralMap;</div><div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;      std::map&lt;unsigned long, OBCisTransStereo*&gt; m_cistransMap;</div><div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;      std::map&lt;unsigned long, OBSquarePlanarStereo*&gt; m_squarePlanarMap;</div><div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  };</div><div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div><div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  <span class="comment">// fwd decl</span></div><div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  <span class="keyword">class </span><a class="code" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>;</div><div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;</div><div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#gae7aedffc6994cf26d16524389c56bdac">PerceiveStereo</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);</div><div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ga305c9600a3a336da16683baa395e20f4">StereoFrom2D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; *updown = NULL, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);</div><div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#gaebcf38fd76c5d76fffbae808b8571f9b">StereoFrom3D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <span class="keywordtype">bool</span> force = <span class="keyword">false</span>);</div><div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ga419e494a34740f1f8003acabfa30a95b">StereoFrom0D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol);</div><div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div><div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;</div><div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#ga35e07645a245db366b115f0dc20542fd">TetrahedralFrom3D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;      <span class="keyword">const</span> OBStereoUnitSet &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);</div><div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#gab85c5ef4c9416ee7af02b21658fe9de2">TetrahedralFrom2D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;      <span class="keyword">const</span> OBStereoUnitSet &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);</div><div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;  OBAPI std::vector&lt;OBTetrahedralStereo*&gt; <a class="code" href="group__stereo.shtml#gac3049b86debe9059b851825b29b1557c">TetrahedralFrom0D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;      <span class="keyword">const</span> OBStereoUnitSet &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);</div><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;</div><div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;  OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#ga7e1ba3a4ac33b0c6404b0d960cc53d00">CisTransFrom3D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;      <span class="keyword">const</span> OBStereoUnitSet &amp;stereoUnits, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);</div><div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;  OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#ga98528c3002ed718695ccfaf031ca3f04">CisTransFrom2D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;      <span class="keyword">const</span> OBStereoUnitSet &amp;stereoUnits,</div><div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;      <span class="keyword">const</span> std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; *updown = NULL, <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);</div><div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;  OBAPI <span class="keywordtype">bool</span> <a class="code" href="group__stereo.shtml#ga182a53150e1793ac1ec14958afb05f17">TetStereoToWedgeHash</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol,</div><div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;      std::map&lt;OBBond*, enum OBStereo::BondDirection&gt; &amp;updown,</div><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;      std::map&lt;OBBond*, OBStereo::Ref&gt; &amp;from);</div><div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;  OBAPI std::set&lt;OBBond*&gt; <a class="code" href="group__stereo.shtml#ga63e739a42d88ac64ed77c07d73866a45">GetUnspecifiedCisTrans</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol);</div><div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ga9b44683d071146220a97390283944f70">StereoRefToImplicit</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol, <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> atomId);</div><div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;  OBAPI <span class="keywordtype">void</span> <a class="code" href="group__stereo.shtml#ga770c2caccc494438333bfd8a66078a77">ImplicitRefToStereo</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol, <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> centerId, <a class="code" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> newId);</div><div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;  OBAPI std::vector&lt;OBCisTransStereo*&gt; <a class="code" href="group__stereo.shtml#gac74fff254a639ede4d92a59fa44318a6">CisTransFrom0D</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;      <span class="keyword">const</span> OBStereoUnitSet &amp;stereoUnits,</div><div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;      <span class="keywordtype">bool</span> addToMol = <span class="keyword">true</span>);</div><div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div><div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div><div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div><div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;  OBAPI OBStereoUnitSet <a class="code" href="group__stereo.shtml#gaebf264394d502844b99b1dbe031ea185">FindStereogenicUnits</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;      <span class="keyword">const</span> std::vector&lt;unsigned int&gt; &amp;symClasses);</div><div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;  OBAPI OBStereoUnitSet <a class="code" href="group__stereo.shtml#gaebf264394d502844b99b1dbe031ea185">FindStereogenicUnits</a>(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol,</div><div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;      <span class="keyword">const</span> std::vector&lt;unsigned int&gt; &amp;symClasses,</div><div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;      <span class="keyword">const</span> <a class="code" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;automorphisms);</div><div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;</div><div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;}</div><div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;</div><div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1OBStereoBase_shtml_a92e950621d78cfc00bb29f66f0c67255"><div class="ttname"><a href="classOpenBabel_1_1OBStereoBase.shtml#a92e950621d78cfc00bb29f66f0c67255">OpenBabel::OBStereoBase::IsSpecified</a></div><div class="ttdeci">bool IsSpecified() const</div><div class="ttdef"><b>Definition:</b> stereo.h:360</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStereoBase_shtml_a4e9716db658a2f725a214f4f23b6a68d"><div class="ttname"><a href="classOpenBabel_1_1OBStereoBase.shtml#a4e9716db658a2f725a214f4f23b6a68d">OpenBabel::OBStereoBase::OBStereoBase</a></div><div class="ttdeci">OBStereoBase(OBMol *mol)</div><div class="ttdef"><b>Definition:</b> stereo.h:330</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereoUnit_shtml"><div class="ttname"><a href="structOpenBabel_1_1OBStereoUnit.shtml">OpenBabel::OBStereoUnit</a></div><div class="ttdoc">Struct representing a single stereogenic unit. </div><div class="ttdef"><b>Definition:</b> stereo.h:258</div></div>
<div class="ttc" id="namespaceOpenBabel_1_1OBResidueIndex_shtml_a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce"><div class="ttname"><a href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a21f40778b7db9343a6ca75ec2c41ccce">OpenBabel::OBResidueIndex::T</a></div><div class="ttdef"><b>Definition:</b> residue.h:340</div></div>
<div class="ttc" id="isomorphism_8h_shtml"><div class="ttname"><a href="isomorphism_8h.shtml">isomorphism.h</a></div><div class="ttdoc">OBIsomorphismMapper class for finding isomorphisms. </div></div>
<div class="ttc" id="group__stereo_shtml_ga63e739a42d88ac64ed77c07d73866a45"><div class="ttname"><a href="group__stereo.shtml#ga63e739a42d88ac64ed77c07d73866a45">OpenBabel::GetUnspecifiedCisTrans</a></div><div class="ttdeci">std::set&lt; OBBond * &gt; GetUnspecifiedCisTrans(OBMol &amp;mol)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBGenericData_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBGenericData.shtml">OpenBabel::OBGenericData</a></div><div class="ttdoc">Base class for generic data. </div><div class="ttdef"><b>Definition:</b> base.h:189</div></div>
<div class="ttc" id="group__stereo_shtml_ga7e1ba3a4ac33b0c6404b0d960cc53d00"><div class="ttname"><a href="group__stereo.shtml#ga7e1ba3a4ac33b0c6404b0d960cc53d00">OpenBabel::CisTransFrom3D</a></div><div class="ttdeci">std::vector&lt; OBCisTransStereo * &gt; CisTransFrom3D(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</div></div>
<div class="ttc" id="namespaceOpenBabel_1_1OBGenericDataType_shtml_a06fc87d81c62e9abb8790b6e5713c55ba3f9974bdbccde7c26064d7ec21d570ef"><div class="ttname"><a href="namespaceOpenBabel_1_1OBGenericDataType.shtml#a06fc87d81c62e9abb8790b6e5713c55ba3f9974bdbccde7c26064d7ec21d570ef">OpenBabel::OBGenericDataType::StereoData</a></div><div class="ttdoc">Stereochemistry data (see OBStereoBase) </div><div class="ttdef"><b>Definition:</b> base.h:148</div></div>
<div class="ttc" id="base_8h_shtml"><div class="ttname"><a href="base_8h.shtml">base.h</a></div><div class="ttdoc">Base classes to build a graph. </div></div>
<div class="ttc" id="group__stereo_shtml_gaebf264394d502844b99b1dbe031ea185"><div class="ttname"><a href="group__stereo.shtml#gaebf264394d502844b99b1dbe031ea185">OpenBabel::FindStereogenicUnits</a></div><div class="ttdeci">OBStereoUnitSet FindStereogenicUnits(OBMol *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses)</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a6f0021eb4868fb5540a2cedde823ada1"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a6f0021eb4868fb5540a2cedde823ada1">OpenBabel::OBStereo::ConstRefIter</a></div><div class="ttdeci">Refs::const_iterator ConstRefIter</div><div class="ttdef"><b>Definition:</b> stereo.h:164</div></div>
<div class="ttc" id="classOpenBabel_1_1OBCisTransStereo_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBCisTransStereo.shtml">OpenBabel::OBCisTransStereo</a></div><div class="ttdoc">Class for handling and storing cis/trans stereochemistry. </div><div class="ttdef"><b>Definition:</b> cistrans.h:75</div></div>
<div class="ttc" id="group__stereo_shtml_ga770c2caccc494438333bfd8a66078a77"><div class="ttname"><a href="group__stereo.shtml#ga770c2caccc494438333bfd8a66078a77">OpenBabel::ImplicitRefToStereo</a></div><div class="ttdeci">void ImplicitRefToStereo(OBMol &amp;mol, OBStereo::Ref centerId, OBStereo::Ref newId)</div></div>
<div class="ttc" id="group__stereo_shtml_gaebcf38fd76c5d76fffbae808b8571f9b"><div class="ttname"><a href="group__stereo.shtml#gaebcf38fd76c5d76fffbae808b8571f9b">OpenBabel::StereoFrom3D</a></div><div class="ttdeci">void StereoFrom3D(OBMol *mol, bool force=false)</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392"><div class="ttname"><a href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392">OpenBabel::perceived</a></div><div class="ttdoc">Perceived by Open Babel library methods. </div><div class="ttdef"><b>Definition:</b> base.h:181</div></div>
<div class="ttc" id="group__stereo_shtml_ga419e494a34740f1f8003acabfa30a95b"><div class="ttname"><a href="group__stereo.shtml#ga419e494a34740f1f8003acabfa30a95b">OpenBabel::StereoFrom0D</a></div><div class="ttdeci">void StereoFrom0D(OBMol *mol)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBond_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBond.shtml">OpenBabel::OBBond</a></div><div class="ttdoc">Bond class. </div><div class="ttdef"><b>Definition:</b> bond.h:69</div></div>
<div class="ttc" id="group__substructure_shtml_ga6179e6c11d4f797e8d0ef6ac5c9f25a8"><div class="ttname"><a href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">OpenBabel::Automorphisms</a></div><div class="ttdeci">OBIsomorphismMapper::Mappings Automorphisms</div><div class="ttdoc">A group of automorphic permutations. </div><div class="ttdef"><b>Definition:</b> isomorphism.h:205</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStereoBase_shtml_aa03f9b7e07be400ad77ba2306a2f1619"><div class="ttname"><a href="classOpenBabel_1_1OBStereoBase.shtml#aa03f9b7e07be400ad77ba2306a2f1619">OpenBabel::OBStereoBase::SetSpecified</a></div><div class="ttdeci">void SetSpecified(bool specified)</div><div class="ttdef"><b>Definition:</b> stereo.h:356</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml">OpenBabel::OBStereo</a></div><div class="ttdoc">Placeholder for enums &amp; Ref/Refs related functions. </div><div class="ttdef"><b>Definition:</b> stereo.h:75</div></div>
<div class="ttc" id="group__stereo_shtml_ga35e07645a245db366b115f0dc20542fd"><div class="ttname"><a href="group__stereo.shtml#ga35e07645a245db366b115f0dc20542fd">OpenBabel::TetrahedralFrom3D</a></div><div class="ttdeci">std::vector&lt; OBTetrahedralStereo * &gt; TetrahedralFrom3D(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStereoFacade_shtml_af8355c7f4c1621336979f3bb83bc48c1"><div class="ttname"><a href="classOpenBabel_1_1OBStereoFacade.shtml#af8355c7f4c1621336979f3bb83bc48c1">OpenBabel::OBStereoFacade::OBStereoFacade</a></div><div class="ttdeci">OBStereoFacade(OBMol *mol, bool perceive=true)</div><div class="ttdef"><b>Definition:</b> stereo.h:394</div></div>
<div class="ttc" id="group__stereo_shtml_ga9b44683d071146220a97390283944f70"><div class="ttname"><a href="group__stereo.shtml#ga9b44683d071146220a97390283944f70">OpenBabel::StereoRefToImplicit</a></div><div class="ttdeci">void StereoRefToImplicit(OBMol &amp;mol, OBStereo::Ref atomId)</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_af1dfb9e747d80437422fdb5fba87c2c7"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#af1dfb9e747d80437422fdb5fba87c2c7">OpenBabel::OBStereo::View</a></div><div class="ttdeci">View</div><div class="ttdef"><b>Definition:</b> stereo.h:119</div></div>
<div class="ttc" id="group__stereo_shtml_gac3049b86debe9059b851825b29b1557c"><div class="ttname"><a href="group__stereo.shtml#gac3049b86debe9059b851825b29b1557c">OpenBabel::TetrahedralFrom0D</a></div><div class="ttdeci">std::vector&lt; OBTetrahedralStereo * &gt; TetrahedralFrom0D(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a677b4acc48f3ee3d31f35e20b62ea534"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a677b4acc48f3ee3d31f35e20b62ea534">OpenBabel::OBStereo::MakeRefs</a></div><div class="ttdeci">static Refs MakeRefs(Ref ref1, Ref ref2, Ref ref3, Ref ref4=NoRef)</div><div class="ttdef"><b>Definition:</b> stereo.h:175</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a90087c9021331c97c28e9a8329f41e97"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OpenBabel::OBStereo::BondDirection</a></div><div class="ttdeci">BondDirection</div><div class="ttdef"><b>Definition:</b> stereo.h:94</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a55b506070847a13554f8b879c1bfb37c"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a55b506070847a13554f8b879c1bfb37c">OpenBabel::OBStereo::Shape</a></div><div class="ttdeci">Shape</div><div class="ttdef"><b>Definition:</b> stereo.h:108</div></div>
<div class="ttc" id="group__stereo_shtml_ga305c9600a3a336da16683baa395e20f4"><div class="ttname"><a href="group__stereo.shtml#ga305c9600a3a336da16683baa395e20f4">OpenBabel::StereoFrom2D</a></div><div class="ttdeci">void StereoFrom2D(OBMol *mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool force=false)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStereoBase_shtml_af2ef37946c0974e77c1d76e0e789443f"><div class="ttname"><a href="classOpenBabel_1_1OBStereoBase.shtml#af2ef37946c0974e77c1d76e0e789443f">OpenBabel::OBStereoBase::GetMolecule</a></div><div class="ttdeci">OBMol * GetMolecule() const</div><div class="ttdef"><b>Definition:</b> stereo.h:346</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStereoBase_shtml_af79f43b5cb6090d98dac9da71e083499"><div class="ttname"><a href="classOpenBabel_1_1OBStereoBase.shtml#af79f43b5cb6090d98dac9da71e083499">OpenBabel::OBStereoBase::~OBStereoBase</a></div><div class="ttdeci">virtual ~OBStereoBase()</div><div class="ttdef"><b>Definition:</b> stereo.h:338</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereoUnit_shtml_af17b8bd946e0f93c6550050f9e8aa349"><div class="ttname"><a href="structOpenBabel_1_1OBStereoUnit.shtml#af17b8bd946e0f93c6550050f9e8aa349">OpenBabel::OBStereoUnit::id</a></div><div class="ttdeci">unsigned long id</div><div class="ttdef"><b>Definition:</b> stereo.h:277</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStereoBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBStereoBase.shtml">OpenBabel::OBStereoBase</a></div><div class="ttdoc">Base class for all stereochemistry classes. </div><div class="ttdef"><b>Definition:</b> stereo.h:321</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereoUnit_shtml_a85967158ea10743b1e69bfe4edbcb6a1"><div class="ttname"><a href="structOpenBabel_1_1OBStereoUnit.shtml#a85967158ea10743b1e69bfe4edbcb6a1">OpenBabel::OBStereoUnit::para</a></div><div class="ttdeci">bool para</div><div class="ttdoc">the atom/bond (depends on type) unique id </div><div class="ttdef"><b>Definition:</b> stereo.h:278</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_ac3e0e8e3a194037cdf6103a95a1c6d31"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#ac3e0e8e3a194037cdf6103a95a1c6d31">OpenBabel::OBStereo::Winding</a></div><div class="ttdeci">Winding</div><div class="ttdef"><b>Definition:</b> stereo.h:130</div></div>
<div class="ttc" id="group__stereo_shtml_gae7aedffc6994cf26d16524389c56bdac"><div class="ttname"><a href="group__stereo.shtml#gae7aedffc6994cf26d16524389c56bdac">OpenBabel::PerceiveStereo</a></div><div class="ttdeci">void PerceiveStereo(OBMol *mol, bool force=false)</div></div>
<div class="ttc" id="group__stereo_shtml_ga042299211c7a52f5aee1975d32820af7"><div class="ttname"><a href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OpenBabel::OBStereoUnitSet</a></div><div class="ttdeci">std::vector&lt; OBStereoUnit &gt; OBStereoUnitSet</div><div class="ttdoc">A single set of OBStereoUnit objects. </div><div class="ttdef"><b>Definition:</b> stereo.h:287</div></div>
<div class="ttc" id="classOpenBabel_1_1OBStereoFacade_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBStereoFacade.shtml">OpenBabel::OBStereoFacade</a></div><div class="ttdoc">Facade to simplify retrieval of OBStereoBase derived objects. </div><div class="ttdef"><b>Definition:</b> stereo.h:384</div></div>
<div class="ttc" id="group__stereo_shtml_ga182a53150e1793ac1ec14958afb05f17"><div class="ttname"><a href="group__stereo.shtml#ga182a53150e1793ac1ec14958afb05f17">OpenBabel::TetStereoToWedgeHash</a></div><div class="ttdeci">bool TetStereoToWedgeHash(OBMol &amp;mol, std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; &amp;updown, std::map&lt; OBBond *, OBStereo::Ref &gt; &amp;from)</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_aa6d4491769cb9af32f3ea22e9f9a66c4"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#aa6d4491769cb9af32f3ea22e9f9a66c4">OpenBabel::OBStereo::Refs</a></div><div class="ttdeci">std::vector&lt; Ref &gt; Refs</div><div class="ttdef"><b>Definition:</b> stereo.h:156</div></div>
<div class="ttc" id="group__stereo_shtml_gab85c5ef4c9416ee7af02b21658fe9de2"><div class="ttname"><a href="group__stereo.shtml#gab85c5ef4c9416ee7af02b21658fe9de2">OpenBabel::TetrahedralFrom2D</a></div><div class="ttdeci">std::vector&lt; OBTetrahedralStereo * &gt; TetrahedralFrom2D(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBSquarePlanarStereo_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OpenBabel::OBSquarePlanarStereo</a></div><div class="ttdoc">Class for handling and storing square planar stereochemistry. </div><div class="ttdef"><b>Definition:</b> squareplanar.h:48</div></div>
<div class="ttc" id="group__stereo_shtml_ga75c7c66edf2555b974417a77968ebb57"><div class="ttname"><a href="group__stereo.shtml#ga75c7c66edf2555b974417a77968ebb57">OpenBabel::OBStereoUnitSetOfSets</a></div><div class="ttdeci">std::vector&lt; OBStereoUnitSet &gt; OBStereoUnitSetOfSets</div><div class="ttdoc">A set of sets of OBStereoUnit objects. </div><div class="ttdef"><b>Definition:</b> stereo.h:294</div></div>
<div class="ttc" id="group__stereo_shtml_ga98528c3002ed718695ccfaf031ca3f04"><div class="ttname"><a href="group__stereo.shtml#ga98528c3002ed718695ccfaf031ca3f04">OpenBabel::CisTransFrom2D</a></div><div class="ttdeci">std::vector&lt; OBCisTransStereo * &gt; CisTransFrom2D(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, const std::map&lt; OBBond *, enum OBStereo::BondDirection &gt; *updown=NULL, bool addToMol=true)</div></div>
<div class="ttc" id="classOpenBabel_1_1OBTetrahedralStereo_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OpenBabel::OBTetrahedralStereo</a></div><div class="ttdoc">Class for handling and storing tetrahedral atom stereochemistry. </div><div class="ttdef"><b>Definition:</b> tetrahedral.h:58</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereoUnit_shtml_ad200dcf5a41b516d592daf60cab1fd0e"><div class="ttname"><a href="structOpenBabel_1_1OBStereoUnit.shtml#ad200dcf5a41b516d592daf60cab1fd0e">OpenBabel::OBStereoUnit::OBStereoUnit</a></div><div class="ttdeci">OBStereoUnit()</div><div class="ttdef"><b>Definition:</b> stereo.h:264</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_aff913cc7d694153b33e2b3ac168a6350"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OpenBabel::OBStereo::Ref</a></div><div class="ttdeci">unsigned long Ref</div><div class="ttdef"><b>Definition:</b> stereo.h:145</div></div>
<div class="ttc" id="group__stereo_shtml_gac74fff254a639ede4d92a59fa44318a6"><div class="ttname"><a href="group__stereo.shtml#gac74fff254a639ede4d92a59fa44318a6">OpenBabel::CisTransFrom0D</a></div><div class="ttdeci">std::vector&lt; OBCisTransStereo * &gt; CisTransFrom0D(OBMol *mol, const OBStereoUnitSet &amp;stereoUnits, bool addToMol=true)</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a1d1cfd8ffb84e947f82999c682b666a7"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a1d1cfd8ffb84e947f82999c682b666a7">OpenBabel::OBStereo::Type</a></div><div class="ttdeci">Type</div><div class="ttdef"><b>Definition:</b> stereo.h:80</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereoUnit_shtml_aeecb8f40f1a4fa558dbf6383d1b72771"><div class="ttname"><a href="structOpenBabel_1_1OBStereoUnit.shtml#aeecb8f40f1a4fa558dbf6383d1b72771">OpenBabel::OBStereoUnit::type</a></div><div class="ttdeci">OBStereo::Type type</div><div class="ttdoc">the type for this stereogenic unit </div><div class="ttdef"><b>Definition:</b> stereo.h:276</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereo_shtml_a1380cd3ca593dd317be63064b47e14db"><div class="ttname"><a href="structOpenBabel_1_1OBStereo.shtml#a1380cd3ca593dd317be63064b47e14db">OpenBabel::OBStereo::RefIter</a></div><div class="ttdeci">Refs::iterator RefIter</div><div class="ttdef"><b>Definition:</b> stereo.h:160</div></div>
<div class="ttc" id="structOpenBabel_1_1OBStereoUnit_shtml_a65527f1c8d53729db66c6fdc5e43e46b"><div class="ttname"><a href="structOpenBabel_1_1OBStereoUnit.shtml#a65527f1c8d53729db66c6fdc5e43e46b">OpenBabel::OBStereoUnit::OBStereoUnit</a></div><div class="ttdeci">OBStereoUnit(OBStereo::Type _type, unsigned long _id, bool _para=false)</div><div class="ttdef"><b>Definition:</b> stereo.h:271</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
