<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>mcdlutil.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">mcdlutil.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="mcdlutil_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*-*-C++-*-</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">**********************************************************************</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2007,2008 by Sergei V. Trepalin sergey_trepalin@chemical-block.com</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">Copyright (C) 2007,2008 by Andrei Gakh andrei.gakh@nnsa.doe.gov</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">***********************************************************************</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">  Diagram is generated using templates, which are stored in SD file templates.sdf</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">  The SD file is usual SD file, which contain chemical structures and might contain data.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">  Only chemical structures are used. Subgraph isomorphisme search is executed and coordinates</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">  of atoms are determined from templates. See Molecules, 11, 129-141 (2006) for algorithm decription.</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">  Structures in SD file are converted in next manner:</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">  1. All atoms, except explicit hydrogens, are replaced with generic ANY_ATOM (matched with any atom in subgraph isomorphisme search)</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">  2. All bonds are replaces with generic ANY_BOND, which can be matched with any bond in molecule</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">  3. All hydrogen are removed, but they are used for search-query and structure atom matching is believed fo be</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">     sucessfukk if chemical structure contains more or equal number of hydrogens, than query. Using explicitly-defined hydrogens</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">         on query enables ones to remove substitutors attachment for atom, which are sterically hidden on templates</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">  if the file will not be found, predefined templates will be used</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">*/</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a> {</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="comment">//common constants</span></div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">   38</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a>=300;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">   39</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">MAXFRAGS</a>=200;</div><div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">   40</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">MAXCHARS</a>=1000;</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">   41</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">MAX_DEPTH</a>=10;</div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">   42</a></span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">NELEMMAX</a>=120;</div><div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">   43</a></span>&#160;<span class="preprocessor">  #define NELEMMCDL 121</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="comment">// Return valency by hydrogen for given atomic position in the Periodic Table</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a>(<span class="keywordtype">int</span> na);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">maxValency</a>(<span class="keywordtype">int</span> na);</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="comment">//Alternate overloaded methods</span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ad2919564689dee084f06b0eb433779cb">alternate</a>(OBMol * pmol, <span class="keyword">const</span> <span class="keywordtype">int</span> nH[], <span class="keywordtype">int</span> bondOrders []);  <span class="comment">//This method does not work!</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="comment">//Zero-based atomic numeration should be in connection matrix arrays iA1 and iA2-so first atom has indez zero</span></div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#ad2919564689dee084f06b0eb433779cb">alternate</a>(<span class="keyword">const</span> std::vector&lt;int&gt; aPosition,<span class="keyword">const</span> std::vector&lt;int&gt; aCharge,</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; aRad,<span class="keyword">const</span> std::vector&lt;int&gt; nHydr, <span class="keyword">const</span> std::vector&lt;int&gt; iA1,</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; iA2, std::vector&lt;int&gt; &amp; bondOrders, <span class="keywordtype">int</span> nAtoms, <span class="keywordtype">int</span> nBonds);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="comment">//Diagram generation overloaded methods</span></div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a>(OBMol * pmol);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="comment">//Zero-based atomic numeration should be in connection matrix arrays iA1 and iA2-so first atom has indez zero</span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a>(<span class="keyword">const</span> std::vector&lt;int&gt; iA1, <span class="keyword">const</span> std::vector&lt;int&gt; iA2,</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      std::vector&lt;double&gt;&amp; rx, std::vector&lt;double&gt;&amp; ry, <span class="keywordtype">int</span> nAtoms, <span class="keywordtype">int</span> nBonds);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a>(OBMol * pmol, std::ostream &amp; ofs);  <span class="comment">//for testing purposes only</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="comment">//Fragment search - pure subgraph isomorphisme</span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a60aab5dcc934001076e5079960cb9be4">fragmentSearch</a>(OBMol * query, OBMol * structure);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a60aab5dcc934001076e5079960cb9be4">fragmentSearch</a>(<span class="keyword">const</span> std::vector&lt;int&gt; aPositionQuery, <span class="keyword">const</span> std::vector&lt;int&gt; iA1Query,</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; iA2Query, <span class="keyword">const</span> std::vector&lt;int&gt; bondTypesQuery,</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; aPositionStructure, <span class="keyword">const</span> std::vector&lt;int&gt; iA1Structure,</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; iA2Structure,  <span class="keyword">const</span> std::vector&lt;int&gt; bondTypesStructure,</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;      <span class="keywordtype">int</span> nAtomsQuery, <span class="keywordtype">int</span> nBondsQuery, <span class="keywordtype">int</span> nAtomsStructure, <span class="keywordtype">int</span> nBondsStructure);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a16e9982dc3b96f14397fe55ede7b8f1f">equivalenceList</a>(OBMol * pmol,  std::vector&lt;int&gt;&amp; eqList);</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a16e9982dc3b96f14397fe55ede7b8f1f">equivalenceList</a>(<span class="keyword">const</span> std::vector&lt;int&gt; aPosition,<span class="keyword">const</span> std::vector&lt;int&gt; aCharge,</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; aRad, <span class="keyword">const</span> std::vector&lt;int&gt; iA1, <span class="keyword">const</span> std::vector&lt;int&gt; iA2,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; bondTypes,  std::vector&lt;int&gt;&amp; eqList, <span class="keywordtype">int</span> nAtoms, <span class="keywordtype">int</span> nBonds);</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="comment">//Fragment addition</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">addFragment</a>(OBMol * molecule, OBMol * fragment, <span class="keywordtype">int</span> molAN, <span class="keywordtype">int</span> fragAN, <span class="keywordtype">int</span> molBN,</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      <span class="keywordtype">int</span> fragBN, <span class="keywordtype">bool</span> isAddition);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="comment">//routines below have no common meaning, but are necessary to process stereo information</span></div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#abce282c45ee77ea965aaacd47b4e8d72">createStereoLists</a>(OBMol * pmol, std::vector&lt;int&gt;&amp; bondStereoList,</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      std::vector&lt;int&gt;&amp; atomStereoList, std::vector&lt;int&gt;&amp; eqList);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  OBMCDL std::string <a class="code" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL</a>(OBMol * pmol, <span class="keywordtype">int</span> ntatoms, <span class="keyword">const</span> std::vector&lt;int&gt; ix,</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; aNumber, <span class="keyword">const</span> std::vector&lt;int&gt; atomStereoList, <span class="keyword">const</span> std::vector&lt;int&gt; eqList);</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  OBMCDL std::string <a class="code" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL</a>(OBMol * pmol, <span class="keywordtype">int</span> nbStore, <span class="keywordtype">int</span> ntatoms, <span class="keyword">const</span> std::vector&lt;int&gt; ix,</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; aNumber, <span class="keywordtype">int</span> bonds[MAXBONDS][4], <span class="keyword">const</span> std::vector&lt;int&gt; bondStereoList,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;      <span class="keyword">const</span> std::vector&lt;int&gt; eqList);</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo</a>(std::vector&lt;int&gt;&amp; iA1, std::vector&lt;int&gt;&amp; iA2, std::vector&lt;int&gt;&amp; stereoBonds,</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keyword">const</span> std::vector&lt;double&gt;rx, <span class="keyword">const</span> std::vector&lt;double&gt; ry, <span class="keywordtype">int</span> acount, <span class="keywordtype">int</span> bcount, std::string astereo);</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo</a>(<span class="keyword">const</span> std::vector&lt;int&gt; iA1, <span class="keyword">const</span> std::vector&lt;int&gt; iA2,</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      std::vector&lt;double&gt;&amp; rx, std::vector&lt;double&gt;&amp; ry, <span class="keywordtype">int</span> acount, <span class="keywordtype">int</span> bcount, std::string bstereo);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  OBMCDL <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#a23997cd29f45df86f90e4f7de02baccd">groupRedraw</a>(OBMol * pmol, <span class="keywordtype">int</span> bondN, <span class="keywordtype">int</span> atomN, <span class="keywordtype">bool</span> atomNInGroup);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="comment">//int  groupRedrawFrameAtom(OBMol * pmol, int bondN, int atomInFrame);</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  OBMCDL <span class="keywordtype">int</span>  <a class="code" href="namespaceOpenBabel.shtml#a82011594cefb0a924a4cc938800de614">canonizeMCDL</a>(<span class="keyword">const</span> std::string atomBlock, std::vector&lt;std::string&gt; &amp; structureList);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  OBMCDL <span class="keywordtype">bool</span> <a class="code" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula</a>(<span class="keyword">const</span> std::string formulaString, std::vector &lt;int&gt;&amp; enumber, <span class="keywordtype">int</span> &amp; valency);</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  OBMCDL <span class="keywordtype">void</span> <a class="code" href="namespaceOpenBabel.shtml#aaa14c59df78025ce6e8dfd3f27feb106">prepareTest</a>(OBMol * pmol, std::ostream &amp; ofs);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;} <span class="comment">// namespace OpenBabel</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;</div><div class="ttc" id="namespaceOpenBabel_shtml_ad087045047b2155479ef662be1be3abc"><div class="ttname"><a href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">OpenBabel::MAX_DEPTH</a></div><div class="ttdeci">static const int MAX_DEPTH</div><div class="ttdef"><b>Definition:</b> mcdlutil.h:41</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a6a41a690c691e47bc63facef0e2e449d"><div class="ttname"><a href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">OpenBabel::parseFormula</a></div><div class="ttdeci">bool parseFormula(const std::string formulaString, std::vector&lt; int &gt; &amp;enumber, int &amp;valency)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:7187</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a82011594cefb0a924a4cc938800de614"><div class="ttname"><a href="namespaceOpenBabel.shtml#a82011594cefb0a924a4cc938800de614">OpenBabel::canonizeMCDL</a></div><div class="ttdeci">int canonizeMCDL(const std::string atomBlock, std::vector&lt; std::string &gt; &amp;structureList)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:7263</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a16e9982dc3b96f14397fe55ede7b8f1f"><div class="ttname"><a href="namespaceOpenBabel.shtml#a16e9982dc3b96f14397fe55ede7b8f1f">OpenBabel::equivalenceList</a></div><div class="ttdeci">void equivalenceList(OBMol *pmol, std::vector&lt; int &gt; &amp;eqList)</div><div class="ttdoc">Equivalence list generation. </div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6189</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a60aab5dcc934001076e5079960cb9be4"><div class="ttname"><a href="namespaceOpenBabel.shtml#a60aab5dcc934001076e5079960cb9be4">OpenBabel::fragmentSearch</a></div><div class="ttdeci">bool fragmentSearch(OBMol *query, OBMol *structure)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6103</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ad1eec14ce20cfaf366e19721f1f27090"><div class="ttname"><a href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">OpenBabel::NELEMMAX</a></div><div class="ttdeci">static const int NELEMMAX</div><div class="ttdef"><b>Definition:</b> mcdlutil.h:42</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a22febe826ea2f93f69725fbef532c921"><div class="ttname"><a href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">OpenBabel::MAXFRAGS</a></div><div class="ttdeci">static const int MAXFRAGS</div><div class="ttdef"><b>Definition:</b> mcdlutil.h:39</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_adaa889d3747ea9e2ba1a83207556dce3"><div class="ttname"><a href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment</a></div><div class="ttdeci">void addFragment(OBMol *molecule, OBMol *fragment, int molAN, int fragAN, int molBN, int fragBN, bool isAddition)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6198</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a3c50491b940d1a3d368bf7eba3bebfa1"><div class="ttname"><a href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">OpenBabel::implementAtomStereo</a></div><div class="ttdeci">void implementAtomStereo(std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds, const std::vector&lt; double &gt;rx, const std::vector&lt; double &gt; ry, int acount, int bcount, std::string astereo)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6942</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a23997cd29f45df86f90e4f7de02baccd"><div class="ttname"><a href="namespaceOpenBabel.shtml#a23997cd29f45df86f90e4f7de02baccd">OpenBabel::groupRedraw</a></div><div class="ttdeci">int groupRedraw(OBMol *pmol, int bondN, int atomN, bool atomNInGroup)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:7114</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a417a2925a2ec60c86ff3edc04ce4142c"><div class="ttname"><a href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">OpenBabel::implementBondStereo</a></div><div class="ttdeci">void implementBondStereo(const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int acount, int bcount, std::string bstereo)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:7009</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aec2830d51995ac9802efa4aad43121ca"><div class="ttname"><a href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">OpenBabel::generateDiagram</a></div><div class="ttdeci">void generateDiagram(OBMol *pmol)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6071</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_abce282c45ee77ea965aaacd47b4e8d72"><div class="ttname"><a href="namespaceOpenBabel.shtml#abce282c45ee77ea965aaacd47b4e8d72">OpenBabel::createStereoLists</a></div><div class="ttdeci">void createStereoLists(OBMol *pmol, std::vector&lt; int &gt; &amp;bondStereoList, std::vector&lt; int &gt; &amp;atomStereoList, std::vector&lt; int &gt; &amp;eqList)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6222</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aa51b217d32346d4f341a227be63de160"><div class="ttname"><a href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">OpenBabel::maxValency</a></div><div class="ttdeci">int maxValency(int na)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:3550</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_acd680ed8783717254f074205cd6b24a4"><div class="ttname"><a href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">OpenBabel::getBondMCDL</a></div><div class="ttdeci">std::string getBondMCDL(OBMol *pmol, int nbStore, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, int bonds[MAXBONDS][4], const std::vector&lt; int &gt; bondStereoList, const std::vector&lt; int &gt; eqList)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6676</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a82ccfbdf4943a4e74a708edafcced9f6"><div class="ttname"><a href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">OpenBabel::MAXBONDS</a></div><div class="ttdeci">static const int MAXBONDS</div><div class="ttdef"><b>Definition:</b> mcdlutil.h:38</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ad2919564689dee084f06b0eb433779cb"><div class="ttname"><a href="namespaceOpenBabel.shtml#ad2919564689dee084f06b0eb433779cb">OpenBabel::alternate</a></div><div class="ttdeci">int alternate(OBMol *pmol, const int nH[], int bondOrders [])</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aaa14c59df78025ce6e8dfd3f27feb106"><div class="ttname"><a href="namespaceOpenBabel.shtml#aaa14c59df78025ce6e8dfd3f27feb106">OpenBabel::prepareTest</a></div><div class="ttdeci">void prepareTest(OBMol *pmol, std::ostream &amp;ofs)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:7272</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_ab91841d785674a38b34fcf2fd9685142"><div class="ttname"><a href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">OpenBabel::MAXCHARS</a></div><div class="ttdeci">static const int MAXCHARS</div><div class="ttdef"><b>Definition:</b> mcdlutil.h:40</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a47053116206f7c8cf7b278aec7e35cb1"><div class="ttname"><a href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">OpenBabel::hydrogenValency</a></div><div class="ttdeci">int hydrogenValency(int na)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:3544</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_a29e765f8943f7aa7b50aca9380196e96"><div class="ttname"><a href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">OpenBabel::getAtomMCDL</a></div><div class="ttdeci">std::string getAtomMCDL(OBMol *pmol, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, const std::vector&lt; int &gt; atomStereoList, const std::vector&lt; int &gt; eqList)</div><div class="ttdef"><b>Definition:</b> mcdlutil.cpp:6520</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:29 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
