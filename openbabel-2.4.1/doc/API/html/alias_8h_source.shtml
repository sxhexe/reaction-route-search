<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>alias.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">alias.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="alias_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">alias.h - OBGenericData class to hold alias information on atoms</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">Copyright (C) Copyright (C) 2007 by Chris Morley</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#ifndef OB_ALIAS_H</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#define OB_ALIAS_H</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="shared__ptr_8h.shtml">openbabel/shared_ptr.h</a>&gt;</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml">   22</a></span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">// This macro is used in DLL builds. If it has not</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">// been set in babelconfig.h, define it as nothing.</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#ifndef OBCOMMON</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">  #define OBCOMMON</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="namespaceOpenBabel.shtml#af962a429bf8fe8b8f222ff1a6018c35e">   30</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="namespaceOpenBabel.shtml#af962a429bf8fe8b8f222ff1a6018c35e">AliasDataType</a> = 0x7883;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml">   49</a></span>&#160;<span class="keyword">class </span>OBCOMMON <a class="code" href="classOpenBabel_1_1AliasData.shtml">AliasData</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">protected</span>:</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#a7dd8464fd3023ffafa56a134e663a4ae">   52</a></span>&#160;  std::string <a class="code" href="classOpenBabel_1_1AliasData.shtml#a7dd8464fd3023ffafa56a134e663a4ae">_alias</a>;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#ac8b232648a71f527f8a33b13d9562013">   53</a></span>&#160;  std::string <a class="code" href="classOpenBabel_1_1AliasData.shtml#ac8b232648a71f527f8a33b13d9562013">_right_form</a>;</div><div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#a08d5887a8d97196910cb41a2d551f375">   54</a></span>&#160;  std::vector&lt;unsigned long&gt; <a class="code" href="classOpenBabel_1_1AliasData.shtml#a08d5887a8d97196910cb41a2d551f375">_expandedatoms</a>; <span class="comment">//atom ids (not idxs)</span></div><div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#a1134e770ae4315ea8bc1201e2f21da8b">   55</a></span>&#160;  std::string <a class="code" href="classOpenBabel_1_1AliasData.shtml#a1134e770ae4315ea8bc1201e2f21da8b">_color</a>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#a55d097a56763789d4b0d070e51a580fb">   58</a></span>&#160;  <a class="code" href="classOpenBabel_1_1AliasData.shtml#a55d097a56763789d4b0d070e51a580fb">AliasData</a>(): <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>(<span class="stringliteral">&quot;Alias&quot;</span>, AliasDataType){ }</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div><div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">   60</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>* <a class="code" href="classOpenBabel_1_1AliasData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">Clone</a>(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* <span class="comment">/*parent*/</span>)<span class="keyword"> const</span>{<span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classOpenBabel_1_1AliasData.shtml">AliasData</a>(*<span class="keyword">this</span>);}</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#ad3cc04112e0d8320faff12cd8e70bcd4">   63</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1AliasData.shtml#ad3cc04112e0d8320faff12cd8e70bcd4">SetAlias</a>(<span class="keyword">const</span> std::string&amp; alias) {_alias = alias;}</div><div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#aff1fad2cef60a4d52443058c69ec835d">   64</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1AliasData.shtml#aff1fad2cef60a4d52443058c69ec835d">SetAlias</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* alias) {_alias = alias;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  std::string GetAlias(<span class="keywordtype">bool</span> rightAligned = <span class="keyword">false</span>) <span class="keyword">const</span>;</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#a5e77a3ac3691c87e41f72e6b10c716e6">   70</a></span>&#160;  std::string <a class="code" href="classOpenBabel_1_1AliasData.shtml#a5e77a3ac3691c87e41f72e6b10c716e6">GetColor</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> _color; }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#adae56afc36beb65bb8fb4cc32afd7d19">   73</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1AliasData.shtml#adae56afc36beb65bb8fb4cc32afd7d19">SetColor</a>(std::string color){ _color = color; }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1AliasData.shtml#a227b63501b1490001ea9b21cf694b24d">   75</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="classOpenBabel_1_1AliasData.shtml#a227b63501b1490001ea9b21cf694b24d">IsExpanded</a>()<span class="keyword">const </span>{ <span class="keywordflow">return</span> !_expandedatoms.empty(); }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> RevertToAliasForm(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol);</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordtype">bool</span> Expand(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomindex);</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="preprocessor"> #ifdef HAVE_SHARED_POINTER</span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> AddAliases(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>* pmol);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor"> #endif</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordtype">bool</span> FormulaParse(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> atomindex);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="keywordtype">void</span> AddExpandedAtom(<span class="keywordtype">int</span> <span class="keywordtype">id</span>);</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordtype">void</span> DeleteExpandedAtoms(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keyword">struct </span>AliasItem</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  {</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    std::string right_form;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    std::string smiles;</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    std::string color;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  };</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keyword">typedef</span> std::map&lt;std::string, AliasItem&gt; SuperAtomTable; <span class="comment">//key=alias left-form</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> LoadFile(SuperAtomTable&amp; table);</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keyword">static</span> SuperAtomTable&amp; table()</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  {</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">static</span> SuperAtomTable t;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span>(t.empty())</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      LoadFile(t);</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> t;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordtype">bool</span>        FromNameLookup(<a class="code" href="classOpenBabel_1_1OBMol.shtml">OBMol</a>&amp; mol, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> atomindex);</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#ifdef HAVE_SHARED_POINTER</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keyword">typedef</span> std::vector&lt; std::pair&lt;std::string, obsharedptr&lt;OBSmartsPattern&gt; &gt; &gt; SmartsTable;</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> LoadFile(SmartsTable&amp; smtable);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;};</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;} <span class="comment">//namespace</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#endif // OB_ALIAS_H</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="ttc" id="classOpenBabel_1_1AliasData_shtml_a08d5887a8d97196910cb41a2d551f375"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#a08d5887a8d97196910cb41a2d551f375">OpenBabel::AliasData::_expandedatoms</a></div><div class="ttdeci">std::vector&lt; unsigned long &gt; _expandedatoms</div><div class="ttdef"><b>Definition:</b> alias.h:54</div></div>
<div class="ttc" id="classOpenBabel_1_1OBGenericData_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBGenericData.shtml">OpenBabel::OBGenericData</a></div><div class="ttdoc">Base class for generic data. </div><div class="ttdef"><b>Definition:</b> base.h:189</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_af962a429bf8fe8b8f222ff1a6018c35e"><div class="ttname"><a href="namespaceOpenBabel.shtml#af962a429bf8fe8b8f222ff1a6018c35e">OpenBabel::AliasDataType</a></div><div class="ttdeci">const unsigned int AliasDataType</div><div class="ttdef"><b>Definition:</b> alias.h:30</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_a227b63501b1490001ea9b21cf694b24d"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#a227b63501b1490001ea9b21cf694b24d">OpenBabel::AliasData::IsExpanded</a></div><div class="ttdeci">bool IsExpanded() const</div><div class="ttdef"><b>Definition:</b> alias.h:75</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_ac8b232648a71f527f8a33b13d9562013"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#ac8b232648a71f527f8a33b13d9562013">OpenBabel::AliasData::_right_form</a></div><div class="ttdeci">std::string _right_form</div><div class="ttdef"><b>Definition:</b> alias.h:53</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_a7dd8464fd3023ffafa56a134e663a4ae"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#a7dd8464fd3023ffafa56a134e663a4ae">OpenBabel::AliasData::_alias</a></div><div class="ttdeci">std::string _alias</div><div class="ttdef"><b>Definition:</b> alias.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1OBMol_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a></div><div class="ttdoc">Molecule Class. </div><div class="ttdef"><b>Definition:</b> mol.h:113</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_a5e77a3ac3691c87e41f72e6b10c716e6"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#a5e77a3ac3691c87e41f72e6b10c716e6">OpenBabel::AliasData::GetColor</a></div><div class="ttdeci">std::string GetColor() const</div><div class="ttdoc">Return the color which has been assigned to this alias. </div><div class="ttdef"><b>Definition:</b> alias.h:70</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_ad3cc04112e0d8320faff12cd8e70bcd4"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#ad3cc04112e0d8320faff12cd8e70bcd4">OpenBabel::AliasData::SetAlias</a></div><div class="ttdeci">void SetAlias(const std::string &amp;alias)</div><div class="ttdoc">Add an alias. </div><div class="ttdef"><b>Definition:</b> alias.h:63</div></div>
<div class="ttc" id="mol_8h_shtml"><div class="ttname"><a href="mol_8h.shtml">mol.h</a></div><div class="ttdoc">Handle molecules. Declarations of OBMol, OBAtom, OBBond, OBResidue. (the main header for Open Babel) ...</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_a55d097a56763789d4b0d070e51a580fb"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#a55d097a56763789d4b0d070e51a580fb">OpenBabel::AliasData::AliasData</a></div><div class="ttdeci">AliasData()</div><div class="ttdef"><b>Definition:</b> alias.h:58</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_aff1fad2cef60a4d52443058c69ec835d"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#aff1fad2cef60a4d52443058c69ec835d">OpenBabel::AliasData::SetAlias</a></div><div class="ttdeci">void SetAlias(const char *alias)</div><div class="ttdef"><b>Definition:</b> alias.h:64</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_adae56afc36beb65bb8fb4cc32afd7d19"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#adae56afc36beb65bb8fb4cc32afd7d19">OpenBabel::AliasData::SetColor</a></div><div class="ttdeci">void SetColor(std::string color)</div><div class="ttdoc">Assign a color to this alias. </div><div class="ttdef"><b>Definition:</b> alias.h:73</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_ab00b0697ccbb41c687e4031c1f5e6761"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#ab00b0697ccbb41c687e4031c1f5e6761">OpenBabel::AliasData::Clone</a></div><div class="ttdeci">virtual OBGenericData * Clone(OBBase *) const</div><div class="ttdef"><b>Definition:</b> alias.h:60</div></div>
<div class="ttc" id="shared__ptr_8h_shtml"><div class="ttname"><a href="shared__ptr_8h.shtml">shared_ptr.h</a></div><div class="ttdoc">Shared pointer. </div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml_a1134e770ae4315ea8bc1201e2f21da8b"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml#a1134e770ae4315ea8bc1201e2f21da8b">OpenBabel::AliasData::_color</a></div><div class="ttdeci">std::string _color</div><div class="ttdef"><b>Definition:</b> alias.h:55</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="classOpenBabel_1_1AliasData_shtml"><div class="ttname"><a href="classOpenBabel_1_1AliasData.shtml">OpenBabel::AliasData</a></div><div class="ttdoc">Indicate atoms as aliases for larger functional groups. </div><div class="ttdef"><b>Definition:</b> alias.h:49</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:28 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
