<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OpenBabel Namespace Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a> &#124;
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">OpenBabel Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceOpenBabel_1_1detail"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1detail.shtml">detail</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceOpenBabel_1_1OBAminoAcidProperty"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBAminoAcidProperty.shtml">OBAminoAcidProperty</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceOpenBabel_1_1OBGenericDataType"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml">OBGenericDataType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceOpenBabel_1_1OBResidueAtomProperty"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueAtomProperty.shtml">OBResidueAtomProperty</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceOpenBabel_1_1OBResidueIndex"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueIndex.shtml">OBResidueIndex</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:namespaceOpenBabel_1_1OBResidueProperty"><td class="memItemLeft" align="right" valign="top"> &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel_1_1OBResidueProperty.shtml">OBResidueProperty</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">_AtomExpr</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">union &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">_BondExpr</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1AliasData.shtml">AliasData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml">ASCIIPainter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1AtomSpec.shtml">AtomSpec</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1BondSpec.shtml">BondSpec</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CairoPainter.shtml">CairoPainter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1CharPtrLess.shtml">CharPtrLess</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1CommandPainter.shtml">CommandPainter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1DeleteObject.shtml">DeleteObject</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FastSearch.shtml">FastSearch</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FastSearchIndexer.shtml">FastSearchIndexer</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStream.shtml">FilteringInputStream</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1FilteringInputStreambuf.shtml">FilteringInputStreambuf</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1FptIndex.shtml">FptIndex</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1FptIndexHeader.shtml">FptIndexHeader</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1GasteigerState.shtml">GasteigerState</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1LineEndingExtractor.shtml">LineEndingExtractor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1LineSearchType.shtml">LineSearchType</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAlign.shtml">OBAlign</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAngle.shtml">OBAngle</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAngleData.shtml">OBAngleData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomAtomIter.shtml">OBAtomAtomIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomBondIter.shtml">OBAtomBondIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomClassData.shtml">OBAtomClassData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomHOF.shtml">OBAtomHOF</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomicHeatOfFormationTable.shtml">OBAtomicHeatOfFormationTable</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBuilder.shtml">OBBuilder</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChargeModel.shtml">OBChargeModel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml">OBChemTsfm</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBChiralData.shtml">OBChiralData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBCisTransConfig.shtml">OBCisTransConfig</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBColor.shtml">OBColor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBCommentData.shtml">OBCommentData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerData.shtml">OBConformerData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerFilter.shtml">OBConformerFilter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerFilters.shtml">OBConformerFilters</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerScore.shtml">OBConformerScore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml">OBConformerSearch</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDepict.shtml">OBDepict</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDescriptor.shtml">OBDescriptor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBDOSData.shtml">OBDOSData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElectronicTransitionData.shtml">OBElectronicTransitionData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElement.shtml">OBElement</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml">OBEnergyConformerScore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBError.shtml">OBError</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBExternalBond.shtml">OBExternalBond</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBExternalBondData.shtml">OBExternalBondData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFCalculation2.shtml">OBFFCalculation2</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFCalculation3.shtml">OBFFCalculation3</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFCalculation4.shtml">OBFFCalculation4</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFConstraint.shtml">OBFFConstraint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml">OBFFConstraints</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFFParameter.shtml">OBFFParameter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBFontMetrics.shtml">OBFontMetrics</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBForceField.shtml">OBForceField</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFormat.shtml">OBFormat</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFreeGrid.shtml">OBFreeGrid</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBFreeGridPoint.shtml">OBFreeGridPoint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGastChrg.shtml">OBGastChrg</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml">OBGlobalDataBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGraphSym.shtml">OBGraphSym</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGrid.shtml">OBGrid</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGridData.shtml">OBGridData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBGroupContrib.shtml">OBGroupContrib</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml">OBIsomorphismMapper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBLocale.shtml">OBLocale</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1obLogBuf.shtml">obLogBuf</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMatrixData.shtml">OBMatrixData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMinimizingEnergyConformerScore.shtml">OBMinimizingEnergyConformerScore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMinimizingRMSDConformerScore.shtml">OBMinimizingRMSDConformerScore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml">OBMolAngleIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml">OBMolAtomBFSIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OBMolAtomDFSIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolAtomIter.shtml">OBMolAtomIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml">OBMolBondBFSIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml">OBMolBondIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml">OBMoleculeFormat</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml">OBMolPairIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml">OBMolRingIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml">OBMolTorsionIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml">OBNasaThermoData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOp.shtml">OBOp</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOrbital.shtml">OBOrbital</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBOrbitalData.shtml">OBOrbitalData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPainter.shtml">OBPainter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPairData.shtml">OBPairData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBPointGroup.shtml">OBPointGroup</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBProxGrid.shtml">OBProxGrid</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBQueryAtom.shtml">OBQueryAtom</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBQueryBond.shtml">OBQueryBond</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRandom.shtml">OBRandom</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRateData.shtml">OBRateData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBReaction.shtml">OBReaction</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueAtomIter.shtml">OBResidueAtomIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBResidueIter.shtml">OBResidueIter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingData.shtml">OBRingData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingSearch.shtml">OBRingSearch</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRingTyper.shtml">OBRingTyper</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRMSDConformerScore.shtml">OBRMSDConformerScore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotamerList.shtml">OBRotamerList</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotationData.shtml">OBRotationData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorKeys.shtml">OBRotorKeys</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorList.shtml">OBRotorList</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorRule.shtml">OBRotorRule</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotorRules.shtml">OBRotorRules</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml">OBScoreGrid</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSerialNums.shtml">OBSerialNums</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSetData.shtml">OBSetData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml">OBSmartsMatcher</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml">OBSmartsPattern</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSpectrophore.shtml">OBSpectrophore</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml">OBSqrtTbl</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBSquarePlanarConfig.shtml">OBSquarePlanarConfig</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml">OBSquarePlanarStereo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSSMatch.shtml">OBSSMatch</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereo.shtml">OBStereo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoBase.shtml">OBStereoBase</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStereoFacade.shtml">OBStereoFacade</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBStereoUnit.shtml">OBStereoUnit</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStericConformerFilter.shtml">OBStericConformerFilter</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBStopwatch.shtml">OBStopwatch</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBSymmetryData.shtml">OBSymmetryData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1OBTetrahedralConfig.shtml">OBTetrahedralConfig</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml">OBTetraNonPlanarStereo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTetraPlanarStereo.shtml">OBTetraPlanarStereo</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBText.shtml">OBText</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTorsion.shtml">OBTorsion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTorsionData.shtml">OBTorsionData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBUnitCell.shtml">OBUnitCell</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBVectorData.shtml">OBVectorData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBVibrationData.shtml">OBVibrationData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBVirtualBond.shtml">OBVirtualBond</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OpTransform.shtml">OpTransform</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1ParseState.shtml">ParseState</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1quad.shtml">quad</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1SpaceGroup.shtml">SpaceGroup</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1TautomerFunctor.shtml">TautomerFunctor</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1transform3d.shtml">transform3d</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structOpenBabel_1_1triple.shtml">triple</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLBaseFormat.shtml">XMLBaseFormat</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLConversion.shtml">XMLConversion</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1XMLMoleculeFormat.shtml">XMLMoleculeFormat</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:ac0863bf2485bd66ba3afa6e50ddc20f6"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac0863bf2485bd66ba3afa6e50ddc20f6">OBNodeBase</a></td></tr>
<tr class="separator:ac0863bf2485bd66ba3afa6e50ddc20f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54495d3eb8f9749d0237e6bda59e0abe"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a></td></tr>
<tr class="separator:a54495d3eb8f9749d0237e6bda59e0abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed11ccd81d7abaccbdf10486a5ae0402"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a></td></tr>
<tr class="separator:aed11ccd81d7abaccbdf10486a5ae0402"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ca88aa35c43da1b791c7703ec8978d"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a></td></tr>
<tr class="separator:ad5ca88aa35c43da1b791c7703ec8978d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad30fc0fda0a0c8a6f7d22b8202af0dce"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad30fc0fda0a0c8a6f7d22b8202af0dce">OBEdgeBase</a></td></tr>
<tr class="separator:ad30fc0fda0a0c8a6f7d22b8202af0dce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eff09d0456c2308e2afb34e824d9c33"><td class="memItemLeft" align="right" valign="top">typedef struct Template&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a></td></tr>
<tr class="separator:a8eff09d0456c2308e2afb34e824d9c33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a087fe4bdc2d57b56addb4b9fd7fc0415"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a></td></tr>
<tr class="separator:a087fe4bdc2d57b56addb4b9fd7fc0415"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ae0fb6c3d3406efb549fbc9f8c26f0"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad5ae0fb6c3d3406efb549fbc9f8c26f0">RotorKeys</a></td></tr>
<tr class="separator:ad5ae0fb6c3d3406efb549fbc9f8c26f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e6627493ac696e72867261d976dcde7"><td class="memItemLeft" align="right" valign="top">typedef std::map&lt; std::vector&lt; int &gt;, double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9e6627493ac696e72867261d976dcde7">mapRotorEnergy</a></td></tr>
<tr class="separator:a9e6627493ac696e72867261d976dcde7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bdf8334aad62a6bb7ad50f58060c9b6"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0bdf8334aad62a6bb7ad50f58060c9b6">OBPairInteger</a></td></tr>
<tr class="separator:a0bdf8334aad62a6bb7ad50f58060c9b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ba6d4475315df1100427dc98074c087"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5ba6d4475315df1100427dc98074c087">OBPairFloatingPoint</a></td></tr>
<tr class="separator:a5ba6d4475315df1100427dc98074c087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a292afe6930530f12172ef452712fc5e3"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt; bool &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a292afe6930530f12172ef452712fc5e3">OBPairBool</a></td></tr>
<tr class="separator:a292afe6930530f12172ef452712fc5e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c88120c4ba657484c76994abad6ff9"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBFreeGridPoint.shtml">OBFreeGridPoint</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a06c88120c4ba657484c76994abad6ff9">OBFreeGridPointIterator</a></td></tr>
<tr class="separator:a06c88120c4ba657484c76994abad6ff9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9373f6c3f788157de6f03c9403be34c4"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga9373f6c3f788157de6f03c9403be34c4">Automorphism</a></td></tr>
<tr class="separator:ga9373f6c3f788157de6f03c9403be34c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6179e6c11d4f797e8d0ef6ac5c9f25a8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#af45ae29000944170414da618d8d5d677">OBIsomorphismMapper::Mappings</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a></td></tr>
<tr class="separator:ga6179e6c11d4f797e8d0ef6ac5c9f25a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f32238b69be1e83980d0ff3a90b206f"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a></td></tr>
<tr class="separator:a8f32238b69be1e83980d0ff3a90b206f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8df92ddf377e8839e49c4c1d4a617f1e"><td class="memItemLeft" align="right" valign="top">typedef union <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">OpenBabel::_AtomExpr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a></td></tr>
<tr class="separator:a8df92ddf377e8839e49c4c1d4a617f1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7bd9a9f7066eb36f2cfa568d180cb80"><td class="memItemLeft" align="right" valign="top">typedef union <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">OpenBabel::_BondExpr</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a></td></tr>
<tr class="separator:ac7bd9a9f7066eb36f2cfa568d180cb80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa52bc907b6b29c913a85671c48ff8ad7"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a></td></tr>
<tr class="separator:aa52bc907b6b29c913a85671c48ff8ad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a434f394d0613a8ef6c119670ff49710f"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OBRotorIterator</a></td></tr>
<tr class="separator:a434f394d0613a8ef6c119670ff49710f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ae0ba0c317c360c22eaa4b481e2dc87"><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; <a class="el" href="classOpenBabel_1_1transform3d.shtml">transform3d</a> * &gt;::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7ae0ba0c317c360c22eaa4b481e2dc87">transform3dIterator</a></td></tr>
<tr class="separator:a7ae0ba0c317c360c22eaa4b481e2dc87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga042299211c7a52f5aee1975d32820af7"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="structOpenBabel_1_1OBStereoUnit.shtml">OBStereoUnit</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a></td></tr>
<tr class="separator:ga042299211c7a52f5aee1975d32820af7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga75c7c66edf2555b974417a77968ebb57"><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga75c7c66edf2555b974417a77968ebb57">OBStereoUnitSetOfSets</a></td></tr>
<tr class="separator:ga75c7c66edf2555b974417a77968ebb57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcd91e4b018d533740f00f35ae44e4f3"><td class="memItemLeft" align="right" valign="top">typedef union OpenBabel::_ByteCode&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a></td></tr>
<tr class="separator:abcd91e4b018d533740f00f35ae44e4f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84aaa93d3e94f64164e85131f205e919"><td class="memItemLeft" align="right" valign="top">typedef struct OpenBabel::adjustedlist&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">adjustedlist</a></td></tr>
<tr class="separator:a84aaa93d3e94f64164e85131f205e919"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d21f9052f92a540c18774a49739b025"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">adjustedlist</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0d21f9052f92a540c18774a49739b025">neighbourlist</a></td></tr>
<tr class="separator:a0d21f9052f92a540c18774a49739b025"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a87d90c5296e904e126b8520e1daacc14"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> { <br />
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a08e68258d108979edaae8bed94e25048">any</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a887e83e320499ec89236722bbdf56f50">fileformatInput</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d">userInput</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392">perceived</a>, 
<br />
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a6aef01ed9b1c198e6944f87e370f00b2">external</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14a140dc6ce49ef5aee319af1854c3dad23">local</a>
<br />
 }</td></tr>
<tr class="separator:a87d90c5296e904e126b8520e1daacc14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa88341c74a59194a8884e929f97b87b8"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> { <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545">output</a>, 
<a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a>, 
<a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810">calcvolume</a>
 }</td></tr>
<tr class="separator:aa88341c74a59194a8884e929f97b87b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5725304290545e0b3b549501893ce2f"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2f">score_t</a> { <a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2fa18f893264a00711081b62de694f99db4">Undefined</a> = -1, 
<a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2fa39cfa0b4108a78db97edfb547ad3af91">PLP</a>, 
<a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2fae5edd6b49548b767c8b120ad2640b28c">ChemScore</a>
 }</td></tr>
<tr class="separator:ad5725304290545e0b3b549501893ce2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac39166fa6f7c8df04002d2a94043d74c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74c">HydrogenType</a> { <a class="el" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74cabe1ce09c84714b0a9be0755e9c79c024">AllHydrogen</a>, 
<a class="el" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74caa3d3ec6d4feccb909e375261fc5e747a">PolarHydrogen</a>, 
<a class="el" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74caf4f0a00a8690e1ea23a90fac8d818e47">NonPolarHydrogen</a>
 }</td></tr>
<tr class="separator:ac39166fa6f7c8df04002d2a94043d74c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf195409ac7024002db5c178f20862d9"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9">obMessageLevel</a> { <br />
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9afbf66ee4ae8ad04bc5003a16aa9b2b77">obError</a>, 
<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9a600e966aac7d34fec05f2067eb6b989b">obWarning</a>, 
<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9a8239e6e8daa5c812be192e6447979814">obInfo</a>, 
<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9afca370a4ce993c0a266c7d120c3a6310">obAuditMsg</a>, 
<br />
&#160;&#160;<a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9afd56eb19b254da4133c9c28f7cccf5ce">obDebug</a>
<br />
 }</td></tr>
<tr class="separator:acf195409ac7024002db5c178f20862d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91e6912277f7537a670952698f7b2d82"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82">errorQualifier</a> { <a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82a94bec3e41bc9810307020aaae030baa5">always</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82ae7f48063a6bfea08184eda6c5eba743b">onceOnly</a>
 }</td></tr>
<tr class="separator:a91e6912277f7537a670952698f7b2d82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80155586fa275b28773c9b203f52caba"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="namespaceOpenBabel.shtml#a80155586fa275b28773c9b203f52cabaa9ec83f377b3c4e2b987789c1f273a8a3">SPACE_GROUP_ID</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a80155586fa275b28773c9b203f52cabaa732f4d3d79b99f8b9364cfc16e8003e6">SPACE_GROUP_HALL</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a80155586fa275b28773c9b203f52cabaac6dbb396b7703e533fee3676da46fec7">SPACE_GROUP_HM</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a80155586fa275b28773c9b203f52cabaa6150efae0567911e2f8c49bacdce6ffa">SPACE_GROUP_TRANSFORM</a>
 }</td></tr>
<tr class="separator:a80155586fa275b28773c9b203f52caba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b7b47dd702d9e331586d485013fd1ea"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom">{ <a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaa9d4d8b0b72fc2659da772d761a3c5ecb">Left</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaad48f7af8c070184f3774c8e85854eb66">Right</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaa57a7edcbc04d6175683383cad5c3e0a2">Up</a>, 
<a class="el" href="namespaceOpenBabel.shtml#a6b7b47dd702d9e331586d485013fd1eaabcf8c79e9a5f5f9d606fb35645a0fb27">Down</a>
 }</td></tr>
<tr class="separator:a6b7b47dd702d9e331586d485013fd1ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a456fbf388c19a1a63a95fe60d28dd869"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a456fbf388c19a1a63a95fe60d28dd869">OBReleaseVersion</a> ()</td></tr>
<tr class="separator:a456fbf388c19a1a63a95fe60d28dd869"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb3b137500bda8573ee1aa5757011a66"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aeb3b137500bda8573ee1aa5757011a66">Tanimoto</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr class="separator:aeb3b137500bda8573ee1aa5757011a66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d602f9ffb93ae1f37c2d3bbf010d77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">CanonicalLabels</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, std::vector&lt; unsigned int &gt; &amp;canonical_labels, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>(), int maxSeconds=5, bool onlyOne=false)</td></tr>
<tr class="separator:a62d602f9ffb93ae1f37c2d3bbf010d77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4c135379236431c7436651de978ef32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; double &gt; &amp;pot)</td></tr>
<tr class="separator:af4c135379236431c7436651de978ef32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49d9094d3843107b37a072e7e4597fc3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">construct_g_matrix</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>
<tr class="separator:a49d9094d3843107b37a072e7e4597fc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae050b0cbe133308c07688d2438155504"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">construct_c_matrix</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>
<tr class="separator:ae050b0cbe133308c07688d2438155504"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8f591b34d70fd0063b836ddf6d8cdbc"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, bool ReZeroZ=true)</td></tr>
<tr class="separator:ac8f591b34d70fd0063b836ddf6d8cdbc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07c3e3dff340f78121cc2c15da53cdb2"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a07c3e3dff340f78121cc2c15da53cdb2">signed_volume</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>
<tr class="separator:a07c3e3dff340f78121cc2c15da53cdb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7009a91e72c28783be5346611efde3e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">GetChirality</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; int &gt; &amp;chirality)</td></tr>
<tr class="separator:ad7009a91e72c28783be5346611efde3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7483e613b770424c7f1ff797900b9987"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7483e613b770424c7f1ff797900b9987">GetParity4Ref</a> (std::vector&lt; unsigned int &gt; pref)</td></tr>
<tr class="separator:a7483e613b770424c7f1ff797900b9987"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abefbf418290927a56b3d124d3cc646d7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">CorrectChirality</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm, <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> i=<a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a>, <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a> o=<a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545">output</a>)</td></tr>
<tr class="separator:abefbf418290927a56b3d124d3cc646d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a632be87a51811b515f7e9a5fc18e4476"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a632be87a51811b515f7e9a5fc18e4476">extract_thermochemistry</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a> &amp;mol, bool bVerbose, int *Nsymm, int Nrotbonds, double dbdt, double *temperature, double *DeltaHf0, double *DeltaHfT, double *DeltaGfT, double *DeltaSfT, double *S0T, double *CVT, double *CPT, std::vector&lt; double &gt; &amp;Scomponents)</td></tr>
<tr class="separator:a632be87a51811b515f7e9a5fc18e4476"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabfb2457435c6dd85d16016101b3e4d7"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:aabfb2457435c6dd85d16016101b3e4d7"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aabfb2457435c6dd85d16016101b3e4d7">DoComparison</a> (char ch1, char ch2, T &amp;val, T &amp;filterval)</td></tr>
<tr class="separator:aabfb2457435c6dd85d16016101b3e4d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga4edd651fb377c60f3b7ac2f48b7f5e57"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga4edd651fb377c60f3b7ac2f48b7f5e57">MapsTo</a> (const <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> &amp;map, unsigned int queryIndex, unsigned int &amp;queriedIndex)</td></tr>
<tr class="separator:ga4edd651fb377c60f3b7ac2f48b7f5e57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga16841a730cf92c8e51a804ad8d746307"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga16841a730cf92c8e51a804ad8d746307">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> &gt; &amp;aut, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>(), std::size_t maxMemory=3000000)</td></tr>
<tr class="separator:ga16841a730cf92c8e51a804ad8d746307"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7753422526ba34488edf393803aabad7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga7753422526ba34488edf393803aabad7">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a97df663c0fc8a3ba6e9113802cac5c82">OBIsomorphismMapper::Mapping</a> &gt; &amp;aut, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>(), std::size_t maxMemory=3000000)</td></tr>
<tr class="separator:ga7753422526ba34488edf393803aabad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga6a2b6b84fc5e4432152e29001877c59b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBIsomorphismMapper_1_1Functor.shtml">OBIsomorphismMapper::Functor</a> &amp;functor, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())</td></tr>
<tr class="separator:ga6a2b6b84fc5e4432152e29001877c59b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5741f7ec581130f899f17f4d9477aea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab5741f7ec581130f899f17f4d9477aea">print_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m)</td></tr>
<tr class="separator:ab5741f7ec581130f899f17f4d9477aea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab323a3745c477d9eb4c796786db39075"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab323a3745c477d9eb4c796786db39075">print_matrix_f</a> (double *m, int rows, int cols)</td></tr>
<tr class="separator:ab323a3745c477d9eb4c796786db39075"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac09eff5e59b6a7dd424dc71f4a37e464"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac09eff5e59b6a7dd424dc71f4a37e464">print_matrix_ff</a> (double **m, int rows, int cols)</td></tr>
<tr class="separator:ac09eff5e59b6a7dd424dc71f4a37e464"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b2b9be34ace132aa9506d9ee043824f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3b2b9be34ace132aa9506d9ee043824f">mult_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;c, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;a, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;b)</td></tr>
<tr class="separator:a3b2b9be34ace132aa9506d9ee043824f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a067494738d0f55b9df745866cdc3fe56"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a067494738d0f55b9df745866cdc3fe56">mult_matrix_f</a> (double *c, double *a, double *b, int rows, int cols)</td></tr>
<tr class="separator:a067494738d0f55b9df745866cdc3fe56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37830c949ab96aad9b5041a82895ba8e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a37830c949ab96aad9b5041a82895ba8e">mult_matrix_ff</a> (double **c, double **a, double **b, int rows, int cols)</td></tr>
<tr class="separator:a37830c949ab96aad9b5041a82895ba8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e5ee2fd1515457cb4a6e9394a5a14ff"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6e5ee2fd1515457cb4a6e9394a5a14ff">invert_matrix</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;m, double &amp;det)</td></tr>
<tr class="separator:a6e5ee2fd1515457cb4a6e9394a5a14ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb96cdaafd5073c2e806d36ec4e7eef4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afb96cdaafd5073c2e806d36ec4e7eef4">invert_matrix_f</a> (double *m, double &amp;det, int rows, int cols)</td></tr>
<tr class="separator:afb96cdaafd5073c2e806d36ec4e7eef4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa4aad5bde182eebe57cedcf1727b2fc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afa4aad5bde182eebe57cedcf1727b2fc">invert_matrix_ff</a> (double **m, double &amp;det, int rows, int cols)</td></tr>
<tr class="separator:afa4aad5bde182eebe57cedcf1727b2fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8580b3fa2a0435b2d073c22097d1d35e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8580b3fa2a0435b2d073c22097d1d35e">convert_matrix_f</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double *dst)</td></tr>
<tr class="separator:a8580b3fa2a0435b2d073c22097d1d35e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab06c9b9e02affa91406755a0b9fb28e1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab06c9b9e02affa91406755a0b9fb28e1">convert_matrix_ff</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;src, double **dst)</td></tr>
<tr class="separator:ab06c9b9e02affa91406755a0b9fb28e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b2a8069e01dd4287fb85f90a991972c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b2a8069e01dd4287fb85f90a991972c">convert_matrix_f</a> (double *src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</td></tr>
<tr class="separator:a6b2a8069e01dd4287fb85f90a991972c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a050184ff6264447d6923e1be4df061b3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a050184ff6264447d6923e1be4df061b3">convert_matrix_ff</a> (double **src, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;dst, int rows, int cols)</td></tr>
<tr class="separator:a050184ff6264447d6923e1be4df061b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a3508df81e444f875d5f493a1bcbe28"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8a3508df81e444f875d5f493a1bcbe28">convert_matrix_ff_f</a> (double **src, double *dst, int rows, int cols)</td></tr>
<tr class="separator:a8a3508df81e444f875d5f493a1bcbe28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbf2348ce7eae39aca355a630f06484c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acbf2348ce7eae39aca355a630f06484c">convert_matrix_f_ff</a> (double *src, double **dst, int rows, int cols)</td></tr>
<tr class="separator:acbf2348ce7eae39aca355a630f06484c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47053116206f7c8cf7b278aec7e35cb1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a> (int na)</td></tr>
<tr class="separator:a47053116206f7c8cf7b278aec7e35cb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa51b217d32346d4f341a227be63de160"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">maxValency</a> (int na)</td></tr>
<tr class="separator:aa51b217d32346d4f341a227be63de160"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2919564689dee084f06b0eb433779cb"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad2919564689dee084f06b0eb433779cb">alternate</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, const int nH[], int bondOrders [])</td></tr>
<tr class="separator:ad2919564689dee084f06b0eb433779cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a207029ffc607d34863546dddbe014d6b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate</a> (const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; nHydr, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; int &gt; &amp;bondOrders, int nAtoms, int nBonds)</td></tr>
<tr class="separator:a207029ffc607d34863546dddbe014d6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec2830d51995ac9802efa4aad43121ca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aec2830d51995ac9802efa4aad43121ca">generateDiagram</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol)</td></tr>
<tr class="separator:aec2830d51995ac9802efa4aad43121ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a827934a434ef208e2644aecb679ec930"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a827934a434ef208e2644aecb679ec930">generateDiagram</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int nAtoms, int nBonds)</td></tr>
<tr class="separator:a827934a434ef208e2644aecb679ec930"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a742566d425db558fa968c725f8a708cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a742566d425db558fa968c725f8a708cc">generateDiagram</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::ostream &amp;ofs)</td></tr>
<tr class="separator:a742566d425db558fa968c725f8a708cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60aab5dcc934001076e5079960cb9be4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a60aab5dcc934001076e5079960cb9be4">fragmentSearch</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *query, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *structure)</td></tr>
<tr class="separator:a60aab5dcc934001076e5079960cb9be4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0561905f67fffeb3fae74b786fab642"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa0561905f67fffeb3fae74b786fab642">fragmentSearch</a> (const std::vector&lt; int &gt; aPositionQuery, const std::vector&lt; int &gt; iA1Query, const std::vector&lt; int &gt; iA2Query, const std::vector&lt; int &gt; bondTypesQuery, const std::vector&lt; int &gt; aPositionStructure, const std::vector&lt; int &gt; iA1Structure, const std::vector&lt; int &gt; iA2Structure, const std::vector&lt; int &gt; bondTypesStructure, int nAtomsQuery, int nBondsQuery, int nAtomsStructure, int nBondsStructure)</td></tr>
<tr class="separator:aa0561905f67fffeb3fae74b786fab642"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16e9982dc3b96f14397fe55ede7b8f1f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a16e9982dc3b96f14397fe55ede7b8f1f">equivalenceList</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::vector&lt; int &gt; &amp;eqList)</td></tr>
<tr class="separator:a16e9982dc3b96f14397fe55ede7b8f1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e78d25ada5c11fba4e216e1d782e5b7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6e78d25ada5c11fba4e216e1d782e5b7">equivalenceList</a> (const std::vector&lt; int &gt; aPosition, const std::vector&lt; int &gt; aCharge, const std::vector&lt; int &gt; aRad, const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; bondTypes, std::vector&lt; int &gt; &amp;eqList, int nAtoms, int nBonds)</td></tr>
<tr class="separator:a6e78d25ada5c11fba4e216e1d782e5b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaa889d3747ea9e2ba1a83207556dce3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">addFragment</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *molecule, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *fragment, int molAN, int fragAN, int molBN, int fragBN, bool isAddition)</td></tr>
<tr class="separator:adaa889d3747ea9e2ba1a83207556dce3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abce282c45ee77ea965aaacd47b4e8d72"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abce282c45ee77ea965aaacd47b4e8d72">createStereoLists</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::vector&lt; int &gt; &amp;bondStereoList, std::vector&lt; int &gt; &amp;atomStereoList, std::vector&lt; int &gt; &amp;eqList)</td></tr>
<tr class="separator:abce282c45ee77ea965aaacd47b4e8d72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29e765f8943f7aa7b50aca9380196e96"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, const std::vector&lt; int &gt; atomStereoList, const std::vector&lt; int &gt; eqList)</td></tr>
<tr class="separator:a29e765f8943f7aa7b50aca9380196e96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd680ed8783717254f074205cd6b24a4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, int nbStore, int ntatoms, const std::vector&lt; int &gt; ix, const std::vector&lt; int &gt; aNumber, int bonds[<a class="el" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a>][4], const std::vector&lt; int &gt; bondStereoList, const std::vector&lt; int &gt; eqList)</td></tr>
<tr class="separator:acd680ed8783717254f074205cd6b24a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c50491b940d1a3d368bf7eba3bebfa1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo</a> (std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds, const std::vector&lt; double &gt;rx, const std::vector&lt; double &gt; ry, int acount, int bcount, std::string astereo)</td></tr>
<tr class="separator:a3c50491b940d1a3d368bf7eba3bebfa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a417a2925a2ec60c86ff3edc04ce4142c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, std::vector&lt; double &gt; &amp;rx, std::vector&lt; double &gt; &amp;ry, int acount, int bcount, std::string bstereo)</td></tr>
<tr class="separator:a417a2925a2ec60c86ff3edc04ce4142c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23997cd29f45df86f90e4f7de02baccd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a23997cd29f45df86f90e4f7de02baccd">groupRedraw</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, int bondN, int atomN, bool atomNInGroup)</td></tr>
<tr class="separator:a23997cd29f45df86f90e4f7de02baccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82011594cefb0a924a4cc938800de614"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a82011594cefb0a924a4cc938800de614">canonizeMCDL</a> (const std::string atomBlock, std::vector&lt; std::string &gt; &amp;structureList)</td></tr>
<tr class="separator:a82011594cefb0a924a4cc938800de614"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a41a690c691e47bc63facef0e2e449d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula</a> (const std::string formulaString, std::vector&lt; int &gt; &amp;enumber, int &amp;valency)</td></tr>
<tr class="separator:a6a41a690c691e47bc63facef0e2e449d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa14c59df78025ce6e8dfd3f27feb106"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aaa14c59df78025ce6e8dfd3f27feb106">prepareTest</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, std::ostream &amp;ofs)</td></tr>
<tr class="separator:aaa14c59df78025ce6e8dfd3f27feb106"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32ba50e0b43cb1dfdf1978d1e72099c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32ba50e0b43cb1dfdf1978d1e72099c5">ThrowError</a> (char *str)</td></tr>
<tr class="separator:a32ba50e0b43cb1dfdf1978d1e72099c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac9aac27fe3b12d7201f8eb7cb95a3c57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac9aac27fe3b12d7201f8eb7cb95a3c57">ThrowError</a> (std::string &amp;str)</td></tr>
<tr class="separator:ac9aac27fe3b12d7201f8eb7cb95a3c57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac15077eefb9e377d3c400f1f2273826"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">CartesianToInternal</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt; &amp;, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr class="separator:aac15077eefb9e377d3c400f1f2273826"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3be6b6496e799b9308b6c1beb927c265"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">InternalToCartesian</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt; &amp;, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr class="separator:a3be6b6496e799b9308b6c1beb927c265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1c62bdae6cf7a9195c470e7d0e29883"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac1c62bdae6cf7a9195c470e7d0e29883">NewExtension</a> (string &amp;src, char *ext)</td></tr>
<tr class="separator:ac1c62bdae6cf7a9195c470e7d0e29883"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aa7959b427e1c630f14732c2ad642c8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat</a> (double *, double *, double *, int)</td></tr>
<tr class="separator:a8aa7959b427e1c630f14732c2ad642c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e02cd2874a2a4826c8587da507f62ef"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7e02cd2874a2a4826c8587da507f62ef">ob_make_rmat</a> (double mat[3][3], double rmat[9])</td></tr>
<tr class="separator:a7e02cd2874a2a4826c8587da507f62ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a594933a93529376dbae80405cf23afa8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a594933a93529376dbae80405cf23afa8">qtrfit</a> (double *r, double *f, int size, double u[3][3])</td></tr>
<tr class="separator:a594933a93529376dbae80405cf23afa8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c5374c2c0b42dee2fd36cd475a3cb1c"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose</a> (double *, double *, int)</td></tr>
<tr class="separator:a2c5374c2c0b42dee2fd36cd475a3cb1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60625165cc16932d1c2f34976dbc54dd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a60625165cc16932d1c2f34976dbc54dd">rotate_coords</a> (double *, double m[3][3], unsigned)</td></tr>
<tr class="separator:a60625165cc16932d1c2f34976dbc54dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25d610b9255993505f2dbdd9690d068f"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a25d610b9255993505f2dbdd9690d068f">calc_rms</a> (double *r, double *f, unsigned int N)</td></tr>
<tr class="separator:a25d610b9255993505f2dbdd9690d068f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4216f2e0672bf6a9ee72d3029838a213"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4216f2e0672bf6a9ee72d3029838a213">OBCompareInt</a> (const int &amp;a, const int &amp;b)</td></tr>
<tr class="separator:a4216f2e0672bf6a9ee72d3029838a213"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb48ec7a1b3301248a1147cf2dbbe600"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abb48ec7a1b3301248a1147cf2dbbe600">OBCompareUnsigned</a> (const unsigned int &amp;a, const unsigned int &amp;b)</td></tr>
<tr class="separator:abb48ec7a1b3301248a1147cf2dbbe600"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a362770307f86a3b9acd494d9ccbbcf51"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a362770307f86a3b9acd494d9ccbbcf51">IsNear</a> (const double &amp;a, const double &amp;b, const double epsilon)</td></tr>
<tr class="separator:a362770307f86a3b9acd494d9ccbbcf51"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29e51098e105d63b04b5517299d1b772"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a29e51098e105d63b04b5517299d1b772">IsNearZero</a> (const double &amp;a, const double epsilon)</td></tr>
<tr class="separator:a29e51098e105d63b04b5517299d1b772"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a227ab5b29e8122dd6d8ac76d2b58778a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a227ab5b29e8122dd6d8ac76d2b58778a">IsNan</a> (const double &amp;a)</td></tr>
<tr class="separator:a227ab5b29e8122dd6d8ac76d2b58778a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3802301a4e7c389095313a77861a959"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae3802301a4e7c389095313a77861a959">IsNegligible</a> (const double &amp;a, const double &amp;b, const double precision=1e-11)</td></tr>
<tr class="separator:ae3802301a4e7c389095313a77861a959"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af464b3279bc3db8c58ca552ddb0e8e79"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox</a> (const double &amp;a, const double &amp;b, const double precision=1e-11)</td></tr>
<tr class="separator:af464b3279bc3db8c58ca552ddb0e8e79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a470b9e69978e49f27b85b48077bd7c72"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a470b9e69978e49f27b85b48077bd7c72">IsApprox_pos</a> (const double &amp;a, const double &amp;b, const double precision=1e-11)</td></tr>
<tr class="separator:a470b9e69978e49f27b85b48077bd7c72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95b1c21368d148cb45ac6f604984c357"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a95b1c21368d148cb45ac6f604984c357">CanBeSquared</a> (const double &amp;)</td></tr>
<tr class="separator:a95b1c21368d148cb45ac6f604984c357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e68658ca81568e214ebedb8f6c4bd10"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1e68658ca81568e214ebedb8f6c4bd10">SafeOpen</a> (std::ifstream &amp;fs, const char *filename)</td></tr>
<tr class="separator:a1e68658ca81568e214ebedb8f6c4bd10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d523299532d6b282919923e731771ee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0d523299532d6b282919923e731771ee">SafeOpen</a> (std::ofstream &amp;fs, const char *filename)</td></tr>
<tr class="separator:a0d523299532d6b282919923e731771ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b397e6876fbb7f13d0e4a3cac7edfdc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b397e6876fbb7f13d0e4a3cac7edfdc">SmartsLexReplace</a> (std::string &amp;, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;)</td></tr>
<tr class="separator:a6b397e6876fbb7f13d0e4a3cac7edfdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7a0297c3c2a3fa58bbd5e321b900ddec"><td class="memItemLeft" align="right" valign="top">std::vector&lt; std::string &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__plugins.shtml#ga7a0297c3c2a3fa58bbd5e321b900ddec">EnableStaticPlugins</a> ()</td></tr>
<tr class="separator:ga7a0297c3c2a3fa58bbd5e321b900ddec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9307ec0c55a4d2b7ee933b53a3a84ce5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">CompileMoleculeQuery</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())</td></tr>
<tr class="separator:ga9307ec0c55a4d2b7ee933b53a3a84ce5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga87fabf6ed3625406fe5d117b134b5f16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__substructure.shtml#ga87fabf6ed3625406fe5d117b134b5f16">CompileSmilesQuery</a> (const std::string &amp;smiles, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask=<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>())</td></tr>
<tr class="separator:ga87fabf6ed3625406fe5d117b134b5f16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28466e08c61853737ac9bdeaeee495cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a28466e08c61853737ac9bdeaeee495cc">DoubleMultiply</a> (unsigned int, unsigned int, <a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *)</td></tr>
<tr class="separator:a28466e08c61853737ac9bdeaeee495cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fe18b3a86010f2fbbeeda7a6ed635a4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7fe18b3a86010f2fbbeeda7a6ed635a4">DoubleAdd</a> (<a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *, unsigned int)</td></tr>
<tr class="separator:a7fe18b3a86010f2fbbeeda7a6ed635a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa995f2456608bb27a86fef9460f9e8e0"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa995f2456608bb27a86fef9460f9e8e0">DoubleModulus</a> (<a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *, unsigned int)</td></tr>
<tr class="separator:aa995f2456608bb27a86fef9460f9e8e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ae850aac19b7a1ff3c02b6f3c17d36f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8ae850aac19b7a1ff3c02b6f3c17d36f">CompareRingSize</a> (const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *, const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *)</td></tr>
<tr class="separator:a8ae850aac19b7a1ff3c02b6f3c17d36f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b1ba3c73d4038fd69729fbeb588008a"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8b1ba3c73d4038fd69729fbeb588008a">Swab</a> (int)</td></tr>
<tr class="separator:a8b1ba3c73d4038fd69729fbeb588008a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66cac3c1ccf32d07a8cc8d85edf5bbe7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a66cac3c1ccf32d07a8cc8d85edf5bbe7">EnumerateTautomers</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1TautomerFunctor.shtml">TautomerFunctor</a> &amp;functor)</td></tr>
<tr class="separator:a66cac3c1ccf32d07a8cc8d85edf5bbe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73d8ad4bc6df60db6c34726a8d443dab"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a73d8ad4bc6df60db6c34726a8d443dab">CanonicalTautomer</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol)</td></tr>
<tr class="separator:a73d8ad4bc6df60db6c34726a8d443dab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4adf0db17b2feeedf0ada8d21956ac0d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4adf0db17b2feeedf0ada8d21956ac0d">tokenize</a> (std::vector&lt; std::string &gt; &amp;, const char *buf, const char *delimstr=&quot; \\)</td></tr>
<tr class="separator:a4adf0db17b2feeedf0ada8d21956ac0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd3e2d93a87b06f18c02e1441c3bd1c2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afd3e2d93a87b06f18c02e1441c3bd1c2">tokenize</a> (std::vector&lt; std::string &gt; &amp;, std::string &amp;, const char *delimstr=&quot; \\, int limit=-1)</td></tr>
<tr class="separator:afd3e2d93a87b06f18c02e1441c3bd1c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8d9d7dd615b5fa7b533c075fe744d8f"><td class="memItemLeft" align="right" valign="top">std::string &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae8d9d7dd615b5fa7b533c075fe744d8f">Trim</a> (std::string &amp;txt)</td></tr>
<tr class="separator:ae8d9d7dd615b5fa7b533c075fe744d8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6af450f7e3ad5ffd27fb56461dcd177"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac6af450f7e3ad5ffd27fb56461dcd177"><td class="memTemplItemLeft" align="right" valign="top">std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac6af450f7e3ad5ffd27fb56461dcd177">toString</a> (T val)</td></tr>
<tr class="separator:ac6af450f7e3ad5ffd27fb56461dcd177"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9858bede3a0f272573c0173a947bea18"><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9858bede3a0f272573c0173a947bea18">ignore</a> (std::istream &amp;ifs, const std::string &amp;txt)</td></tr>
<tr class="separator:a9858bede3a0f272573c0173a947bea18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add34ce6b9be332e5d87fd5087d4dc38d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#add34ce6b9be332e5d87fd5087d4dc38d">OpenDatafile</a> (std::ifstream &amp;fs, const std::string &amp;filename, const std::string &amp;envvar=&quot;BABEL_DATADIR&quot;)</td></tr>
<tr class="separator:add34ce6b9be332e5d87fd5087d4dc38d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1a9769dcdfc9bb77a3747a3c89c3d03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af1a9769dcdfc9bb77a3747a3c89c3d03">center_coords</a> (double *, int)</td></tr>
<tr class="separator:af1a9769dcdfc9bb77a3747a3c89c3d03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70c653ee69fdbd27f77d430e4aed3cad"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a70c653ee69fdbd27f77d430e4aed3cad">operator&lt;&lt;</a> (std::ostream &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>
<tr class="separator:a70c653ee69fdbd27f77d430e4aed3cad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc7b25b0ba45ce8f90a2519c03322e4a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adc7b25b0ba45ce8f90a2519c03322e4a">operator+</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr class="separator:adc7b25b0ba45ce8f90a2519c03322e4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2e0e5d4e59766809b5b61ab9b513a2e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa2e0e5d4e59766809b5b61ab9b513a2e">operator-</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr class="separator:aa2e0e5d4e59766809b5b61ab9b513a2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bcf1e708be0fbc503f83952c3a99cd4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8bcf1e708be0fbc503f83952c3a99cd4">operator-</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:a8bcf1e708be0fbc503f83952c3a99cd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56b20579149ab8b5807475d4302c33a2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a56b20579149ab8b5807475d4302c33a2">operator*</a> (const double &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:a56b20579149ab8b5807475d4302c33a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5dcc9191fa15d332a546a975cb72952"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac5dcc9191fa15d332a546a975cb72952">operator*</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, const double &amp;c)</td></tr>
<tr class="separator:ac5dcc9191fa15d332a546a975cb72952"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af855844c28abaaafbf21c5835a8e81d4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">operator/</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, const double &amp;c)</td></tr>
<tr class="separator:af855844c28abaaafbf21c5835a8e81d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ed22257c15dc44557c1c275c99d127d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2ed22257c15dc44557c1c275c99d127d">operator*</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:a2ed22257c15dc44557c1c275c99d127d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32a70eb5e04f4e10a386089723f05b2a"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr class="separator:a32a70eb5e04f4e10a386089723f05b2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68dc2c35a1e58febaa9e13cd82e3a50f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a68dc2c35a1e58febaa9e13cd82e3a50f">cross</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>
<tr class="separator:a68dc2c35a1e58febaa9e13cd82e3a50f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00e2879019f2fb0fc689a7e5cb5d2008"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">vectorAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v1, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v2)</td></tr>
<tr class="separator:a00e2879019f2fb0fc689a7e5cb5d2008"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d62b3487ca8969bdfbd7c434da564e"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;d)</td></tr>
<tr class="separator:a62d62b3487ca8969bdfbd7c434da564e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fa4ebe11664cfe4759ea7ccaa3abbb9"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">Point2PlaneSigned</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> d)</td></tr>
<tr class="separator:a1fa4ebe11664cfe4759ea7ccaa3abbb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0e0c09ef7c92973447c46d3ad3f3f8d"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad0e0c09ef7c92973447c46d3ad3f3f8d">Point2Plane</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> d)</td></tr>
<tr class="separator:ad0e0c09ef7c92973447c46d3ad3f3f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29227290e6e6931c009942836a21e5df"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> c, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> d)</td></tr>
<tr class="separator:a29227290e6e6931c009942836a21e5df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32827b2955824019ff9a7e0a4ebfcd64"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">Point2Line</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;a, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;b, const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;c)</td></tr>
<tr class="separator:a32827b2955824019ff9a7e0a4ebfcd64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47ebe26957d5b56a72772cfd24a29db1"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a47ebe26957d5b56a72772cfd24a29db1">IsSulfoneOxygen</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atm)</td></tr>
<tr class="separator:a47ebe26957d5b56a72772cfd24a29db1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56bd19e6ce3d11cd0ccdc0420e91ada3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a56bd19e6ce3d11cd0ccdc0420e91ada3">ApplyRotMatToBond</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a1, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a2)</td></tr>
<tr class="separator:a56bd19e6ce3d11cd0ccdc0420e91ada3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48ed8b37310a8d7153a64309f09901a0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a48ed8b37310a8d7153a64309f09901a0">operator|</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr class="separator:a48ed8b37310a8d7153a64309f09901a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac62bb11738b0a28ee90eb260813e33f3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac62bb11738b0a28ee90eb260813e33f3">operator &amp;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr class="separator:ac62bb11738b0a28ee90eb260813e33f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2cf1233a6c6ce53b79f94b7a60d2d2a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa2cf1233a6c6ce53b79f94b7a60d2d2a">operator^</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr class="separator:aa2cf1233a6c6ce53b79f94b7a60d2d2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a682eec6ce003f48a6098d6700e3cedba"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a682eec6ce003f48a6098d6700e3cedba">operator-</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr class="separator:a682eec6ce003f48a6098d6700e3cedba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac001b331f648fbbd8590576f59d4d2ab"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac001b331f648fbbd8590576f59d4d2ab">operator==</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr class="separator:ac001b331f648fbbd8590576f59d4d2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ba5fcca1ecb1241049411be7017186d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3ba5fcca1ecb1241049411be7017186d">operator&lt;</a> (const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv1, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv2)</td></tr>
<tr class="separator:a3ba5fcca1ecb1241049411be7017186d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54358a339fc06df028bb5fbe403b0032"><td class="memItemLeft" align="right" valign="top">std::istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a54358a339fc06df028bb5fbe403b0032">operator&gt;&gt;</a> (std::istream &amp;is, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr class="separator:a54358a339fc06df028bb5fbe403b0032"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42db9af61dccd8f586f358058b78d1cc"><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a42db9af61dccd8f586f358058b78d1cc">operator&lt;&lt;</a> (std::ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr class="separator:a42db9af61dccd8f586f358058b78d1cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69c4665c3756720ac6f0d62b2488fdd6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a69c4665c3756720ac6f0d62b2488fdd6">GetCorrectedBondVector</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom1, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom2, int bondOrder=1)</td></tr>
<tr class="separator:a69c4665c3756720ac6f0d62b2488fdd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac166197716f00da13cdac1c0cee85975"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac166197716f00da13cdac1c0cee85975">CompareBondPairSecond</a> (const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, unsigned int &gt; &amp;a, const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr class="separator:ac166197716f00da13cdac1c0cee85975"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a033f4bd8d32f76ae6b7151e1c89bae60"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a033f4bd8d32f76ae6b7151e1c89bae60">addNbrs</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;fragment, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, const std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;metalloceneBonds)</td></tr>
<tr class="separator:a033f4bd8d32f76ae6b7151e1c89bae60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49cdac533695572555a6f9dcad81de46"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a49cdac533695572555a6f9dcad81de46">getFragment</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, const std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;metalloceneBonds=std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt;())</td></tr>
<tr class="separator:a49cdac533695572555a6f9dcad81de46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e3ffef22e9d0e3a960e1ddc3c7a3af0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0e3ffef22e9d0e3a960e1ddc3c7a3af0">getFragment</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *skip, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask)</td></tr>
<tr class="separator:a0e3ffef22e9d0e3a960e1ddc3c7a3af0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add2cdb4d7ec3918bac8fa18eb32d4d4c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#add2cdb4d7ec3918bac8fa18eb32d4d4c">isFerroceneBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)</td></tr>
<tr class="separator:add2cdb4d7ec3918bac8fa18eb32d4d4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a731a8591521359140c8777a1c65a1157"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">findMetalloceneBonds</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;bonds, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symmetry_classes)</td></tr>
<tr class="separator:a731a8591521359140c8777a1c65a1157"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a818fd93f0aa1e1f5b3c63bbbc8013cca"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a818fd93f0aa1e1f5b3c63bbbc8013cca">AllocateByteCode</a> (int type)</td></tr>
<tr class="separator:a818fd93f0aa1e1f5b3c63bbbc8013cca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc9426f6c6d58198a97d8c726660559d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acc9426f6c6d58198a97d8c726660559d">DeleteByteCode</a> (<a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> *node)</td></tr>
<tr class="separator:acc9426f6c6d58198a97d8c726660559d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59c2e046bb935ac3eba0d3b003d10176"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a59c2e046bb935ac3eba0d3b003d10176">FatalMemoryError</a> (void)</td></tr>
<tr class="separator:a59c2e046bb935ac3eba0d3b003d10176"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1748035db13037545433f80148a7c928"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes</a> (<a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> **node, int resid, int curr, int prev, int bond)</td></tr>
<tr class="separator:a1748035db13037545433f80148a7c928"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a212d025edfbee4c41902aff17a33243f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a212d025edfbee4c41902aff17a33243f">sortpred_b</a> (const OBDiversePoses::PosePair &amp;a, const OBDiversePoses::PosePair &amp;b)</td></tr>
<tr class="separator:a212d025edfbee4c41902aff17a33243f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5e97bc8a80ef2bf7fe9aae240ec1e62"><td class="memItemLeft" align="right" valign="top">vector&lt; <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa5e97bc8a80ef2bf7fe9aae240ec1e62">GetHeavyAtomCoords</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const vector&lt; <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &gt; &amp;all_coords)</td></tr>
<tr class="separator:aa5e97bc8a80ef2bf7fe9aae240ec1e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa641f7ef2f87464db0231f320116ecb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">UpdateConformersFromTree</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, vector&lt; double &gt; &amp;energies, OBDiversePoses *divposes, bool verbose)</td></tr>
<tr class="separator:afa641f7ef2f87464db0231f320116ecb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22642156c54d298d699ea3946f633d1b"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a22642156c54d298d699ea3946f633d1b">UnitNameToConversionFactor</a> (const char *unit)</td></tr>
<tr class="separator:a22642156c54d298d699ea3946f633d1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ea11acf2b1952b517470849055dd9d9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1ea11acf2b1952b517470849055dd9d9">Toupper</a> (string &amp;s)</td></tr>
<tr class="separator:a1ea11acf2b1952b517470849055dd9d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1853c7aae336e34aaf9e3bf5098f6998"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1853c7aae336e34aaf9e3bf5098f6998">Tolower</a> (string &amp;s)</td></tr>
<tr class="separator:a1853c7aae336e34aaf9e3bf5098f6998"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a399f52de3bc4ed70a70547a39416dff4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a399f52de3bc4ed70a70547a39416dff4">Reweight</a> (std::vector&lt; std::vector&lt; double &gt; &gt; &amp;rotorWeights, std::vector&lt; int &gt; rotorKey, double bonus)</td></tr>
<tr class="separator:a399f52de3bc4ed70a70547a39416dff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a177d720c46ef179ee1dacd9cdd56ffa3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a177d720c46ef179ee1dacd9cdd56ffa3">areDuplicateAtoms</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> v1, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> v2)</td></tr>
<tr class="separator:a177d720c46ef179ee1dacd9cdd56ffa3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e0ffb12b2bd66fb29e225633036fab6"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3e0ffb12b2bd66fb29e225633036fab6">OBUNITCELL_CALL_CONST_OVERLOAD</a> (double, GetA)</td></tr>
<tr class="separator:a3e0ffb12b2bd66fb29e225633036fab6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a817ef4308c19c0ce429c92a41ee8b3f5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a817ef4308c19c0ce429c92a41ee8b3f5">OBUNITCELL_CALL_CONST_OVERLOAD</a> (double, GetB)</td></tr>
<tr class="separator:a817ef4308c19c0ce429c92a41ee8b3f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60d81bf7a916284b8c7fd2a67ee850d7"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a60d81bf7a916284b8c7fd2a67ee850d7">OBUNITCELL_CALL_CONST_OVERLOAD</a> (double, GetC)</td></tr>
<tr class="separator:a60d81bf7a916284b8c7fd2a67ee850d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f24f3a1af67da58c8aaf681c90abd01"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3f24f3a1af67da58c8aaf681c90abd01">OBUNITCELL_CALL_CONST_OVERLOAD</a> (double, GetAlpha)</td></tr>
<tr class="separator:a3f24f3a1af67da58c8aaf681c90abd01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1492c80bbaaddbb42085770c1527e72"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac1492c80bbaaddbb42085770c1527e72">OBUNITCELL_CALL_CONST_OVERLOAD</a> (double, GetBeta)</td></tr>
<tr class="separator:ac1492c80bbaaddbb42085770c1527e72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaba113a00c37287e53236dcaed28e16a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aaba113a00c37287e53236dcaed28e16a">OBUNITCELL_CALL_CONST_OVERLOAD</a> (double, GetGamma)</td></tr>
<tr class="separator:aaba113a00c37287e53236dcaed28e16a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd0a754dd4af0b424f18df4f4520bda4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abd0a754dd4af0b424f18df4f4520bda4">OBUNITCELL_CALL_CONST_OVERLOAD</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>, GetOffset)</td></tr>
<tr class="separator:abd0a754dd4af0b424f18df4f4520bda4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a022d07fdc4281f840f2c7ce583d7149b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a022d07fdc4281f840f2c7ce583d7149b">OBUNITCELL_CALL_CONST_OVERLOAD_ARG</a> (<a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78">OBUnitCell::LatticeType</a>, GetLatticeType, int)</td></tr>
<tr class="separator:a022d07fdc4281f840f2c7ce583d7149b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5762eb28d05d4c66bc880ee8e0db56e9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5762eb28d05d4c66bc880ee8e0db56e9">OBUNITCELL_CALL_CONST_OVERLOAD</a> (<a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78">OBUnitCell::LatticeType</a>, GetLatticeType)</td></tr>
<tr class="separator:a5762eb28d05d4c66bc880ee8e0db56e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb694e18907ee10ce8d9451f353c4a7e"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aeb694e18907ee10ce8d9451f353c4a7e">OBUNITCELL_CALL_CONST_OVERLOAD</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &gt;, GetCellVectors)</td></tr>
<tr class="separator:aeb694e18907ee10ce8d9451f353c4a7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ac28dce785c6f1d5ca55628925cceb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab0ac28dce785c6f1d5ca55628925cceb">OBUNITCELL_CALL_CONST_OVERLOAD</a> (<a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>, GetCellMatrix)</td></tr>
<tr class="separator:ab0ac28dce785c6f1d5ca55628925cceb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7682c6f2a31c8f3aa9a09a101698bb7a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7682c6f2a31c8f3aa9a09a101698bb7a">OBUNITCELL_CALL_CONST_OVERLOAD</a> (<a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>, GetOrthoMatrix)</td></tr>
<tr class="separator:a7682c6f2a31c8f3aa9a09a101698bb7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0af5475cf216b787571d889ec9461236"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0af5475cf216b787571d889ec9461236">OBUNITCELL_CALL_CONST_OVERLOAD</a> (<a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>, GetOrientationMatrix)</td></tr>
<tr class="separator:a0af5475cf216b787571d889ec9461236"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6d9564285db2e961f44282f68a349d5"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af6d9564285db2e961f44282f68a349d5">OBUNITCELL_CALL_CONST_OVERLOAD</a> (<a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>, GetFractionalMatrix)</td></tr>
<tr class="separator:af6d9564285db2e961f44282f68a349d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59a9da045bebe87cc7a16e2c6bb3c9f2"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a59a9da045bebe87cc7a16e2c6bb3c9f2">OBUNITCELL_CALL_CONST_OVERLOAD_ARG</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>, FractionalToCartesian, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>)</td></tr>
<tr class="separator:a59a9da045bebe87cc7a16e2c6bb3c9f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a905ff622a833189eb877b84aa265e89a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a905ff622a833189eb877b84aa265e89a">OBUNITCELL_CALL_CONST_OVERLOAD_ARG</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>, CartesianToFractional, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>)</td></tr>
<tr class="separator:a905ff622a833189eb877b84aa265e89a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc52fe3561f13298c9cc84527503f1e4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adc52fe3561f13298c9cc84527503f1e4">OBUNITCELL_CALL_CONST_OVERLOAD_ARG</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>, WrapCartesianCoordinate, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>)</td></tr>
<tr class="separator:adc52fe3561f13298c9cc84527503f1e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56ff40d099bb97a1c8380d44070f98ed"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a56ff40d099bb97a1c8380d44070f98ed">OBUNITCELL_CALL_CONST_OVERLOAD_ARG</a> (<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>, WrapFractionalCoordinate, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>)</td></tr>
<tr class="separator:a56ff40d099bb97a1c8380d44070f98ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67b7361f4de465bdb719703ea985c418"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a67b7361f4de465bdb719703ea985c418">OBUNITCELL_CALL_CONST_OVERLOAD_ARG</a> (int, GetSpaceGroupNumber, std::string)</td></tr>
<tr class="separator:a67b7361f4de465bdb719703ea985c418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa974382e1db04d5e18935663e17d65eb"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa974382e1db04d5e18935663e17d65eb">OBUNITCELL_CALL_CONST_OVERLOAD</a> (double, GetCellVolume)</td></tr>
<tr class="separator:aa974382e1db04d5e18935663e17d65eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0876587a9edcb8d17a70923e424e3169"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0876587a9edcb8d17a70923e424e3169">CompareUnsigned</a> (const unsigned int &amp;a, const unsigned int &amp;b)</td></tr>
<tr class="separator:a0876587a9edcb8d17a70923e424e3169"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669ac61cfe4be78e8624b31b39179a9c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a669ac61cfe4be78e8624b31b39179a9c">ComparePairFirst</a> (const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr class="separator:a669ac61cfe4be78e8624b31b39179a9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76bfba8476b7512138a477265edc4476"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">ComparePairSecond</a> (const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr class="separator:a76bfba8476b7512138a477265edc4476"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfcd0e581453354d7c779541ec58c491"><td class="memItemLeft" align="right" valign="top">ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adfcd0e581453354d7c779541ec58c491">operator&lt;&lt;</a> (ostream &amp;os, const <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;fg)</td></tr>
<tr class="separator:adfcd0e581453354d7c779541ec58c491"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc71eb19ad3b4c729264738f6d69d1d3"><td class="memItemLeft" align="right" valign="top">istream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adc71eb19ad3b4c729264738f6d69d1d3">operator&gt;&gt;</a> (istream &amp;is, <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;fg)</td></tr>
<tr class="separator:adc71eb19ad3b4c729264738f6d69d1d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c3704ad0910c8279aa1e1e79c300369"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5c3704ad0910c8279aa1e1e79c300369"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5c3704ad0910c8279aa1e1e79c300369">print_vector</a> (const std::string &amp;label, const std::vector&lt; T &gt; &amp;v)</td></tr>
<tr class="separator:a5c3704ad0910c8279aa1e1e79c300369"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfb2d29563ee1a81f2e70a51d55c83cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abfb2d29563ee1a81f2e70a51d55c83cf">CompileAutomorphismQuery</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, const std::vector&lt; unsigned int &gt; &amp;symClasses)</td></tr>
<tr class="separator:abfb2d29563ee1a81f2e70a51d55c83cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6239f809ba8a88712a94f2a6bb90a485"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6239f809ba8a88712a94f2a6bb90a485">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;maps, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, std::size_t maxMemory)</td></tr>
<tr class="separator:a6239f809ba8a88712a94f2a6bb90a485"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e9dbdc3dacbdf4b8ac6e48baba7bc35"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4e9dbdc3dacbdf4b8ac6e48baba7bc35">FindAutomorphisms</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;maps, const std::vector&lt; unsigned int &gt; &amp;symClasses, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;mask, std::size_t maxMemory)</td></tr>
<tr class="separator:a4e9dbdc3dacbdf4b8ac6e48baba7bc35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31ce8b089ca36508940585406a2f93f1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a31ce8b089ca36508940585406a2f93f1">expand_cycle</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;cvisit, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;potAromBonds, int rootIdx, Timeout &amp;timeout, int prevAtomIdx, int depth)</td></tr>
<tr class="separator:a31ce8b089ca36508940585406a2f93f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62de79552e98ffdb88a9b8509a705158"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">expandKekulize</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, Timeout &amp;timeout)</td></tr>
<tr class="separator:a62de79552e98ffdb88a9b8509a705158"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac918a56b1ce85885d791b5981d2102cd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac918a56b1ce85885d791b5981d2102cd">expand_kekulize_lssr</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;lssr, std::vector&lt; bool &gt; &amp;lssrAssigned, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;bondsThisRing)</td></tr>
<tr class="separator:ac918a56b1ce85885d791b5981d2102cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f3cd1f7ef8ed1bdf6bcab1673675622"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8f3cd1f7ef8ed1bdf6bcab1673675622">count_assigned_bonds</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;bondsThisRing, std::vector&lt; int &gt; &amp;bondState)</td></tr>
<tr class="separator:a8f3cd1f7ef8ed1bdf6bcab1673675622"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b44d43b56950aff23fbca88664ad996"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7b44d43b56950aff23fbca88664ad996">isPotentialAromaticAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr class="separator:a7b44d43b56950aff23fbca88664ad996"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e62ffcac6073c5fb792d2f5bc62c522"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">potentialAromaticBonds</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bonds)</td></tr>
<tr class="separator:a7e62ffcac6073c5fb792d2f5bc62c522"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5f2eb9394954bc877f2638eb208ac5a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af5f2eb9394954bc877f2638eb208ac5a">get_bonds_of_ring</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *ring, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;ring_bonds)</td></tr>
<tr class="separator:af5f2eb9394954bc877f2638eb208ac5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67f559671aa9d68ce3888baab8f7fc1a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a67f559671aa9d68ce3888baab8f7fc1a">has_leftover_electrons</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; int &gt; &amp;atomState)</td></tr>
<tr class="separator:a67f559671aa9d68ce3888baab8f7fc1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07faa5acbed4a3cbbfd0d711321c0439"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a07faa5acbed4a3cbbfd0d711321c0439">has_leftover_electrons</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)</td></tr>
<tr class="separator:a07faa5acbed4a3cbbfd0d711321c0439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4c78efdf4d582451d8d0c323d98f205"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">intToStr</a> (int k)</td></tr>
<tr class="separator:ae4c78efdf4d582451d8d0c323d98f205"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eeac49565ab1fdcb863f31f41ec2f5f"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5eeac49565ab1fdcb863f31f41ec2f5f">xDistPoint</a> (double x1, double y1, double x2, double y2, double x0, double y0)</td></tr>
<tr class="separator:a5eeac49565ab1fdcb863f31f41ec2f5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb3b0f424f25beb57a312c1a679f3b0c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acb3b0f424f25beb57a312c1a679f3b0c">overlapped</a> (double x1A, double y1A, double x2A, double y2A, double x1B, double y1B, double x2B, double y2B, double delta)</td></tr>
<tr class="separator:acb3b0f424f25beb57a312c1a679f3b0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1da27ac0556550ed29812976e41e97b9"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1da27ac0556550ed29812976e41e97b9">sproduct</a> (TSimpleMolecule &amp;sm, int br, int i1, int i2)</td></tr>
<tr class="separator:a1da27ac0556550ed29812976e41e97b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c4949b74e6c96a325273701c53a599e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7c4949b74e6c96a325273701c53a599e">compareAtoms</a> (int a1, int a2, const std::vector&lt; std::vector&lt; int &gt; *&gt; aeqList)</td></tr>
<tr class="separator:a7c4949b74e6c96a325273701c53a599e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c632244490414023578336c8528c613"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1c632244490414023578336c8528c613">incrementValues</a> (std::vector&lt; int &gt; &amp;currentValues, const std::vector&lt; int &gt; maxValues)</td></tr>
<tr class="separator:a1c632244490414023578336c8528c613"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eda090453a9a538b9295e4fd2ba4366"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2eda090453a9a538b9295e4fd2ba4366">CompareRotor</a> (const pair&lt; int, int &gt; &amp;a, const pair&lt; int, int &gt; &amp;b)</td></tr>
<tr class="separator:a2eda090453a9a538b9295e4fd2ba4366"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95f6327fcb8303f8d4fbb309a20e3f2b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a95f6327fcb8303f8d4fbb309a20e3f2b">deleteIntElement</a> (std::vector&lt; int &gt; *source, int index)</td></tr>
<tr class="separator:a95f6327fcb8303f8d4fbb309a20e3f2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24ad6fc920fa2699d472547ec4d1721a"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a24ad6fc920fa2699d472547ec4d1721a">findAlternateSinglets</a> (const std::vector&lt; int &gt;iA1, const std::vector&lt; int &gt;iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; <a class="el" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a>, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds)</td></tr>
<tr class="separator:a24ad6fc920fa2699d472547ec4d1721a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78600823bb7358bc592f05fa5039936d"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a78600823bb7358bc592f05fa5039936d">makeAssignment</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; <a class="el" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a>, const std::vector&lt; int &gt; bondAssignment, const std::vector&lt; int &gt; specialFlag, std::vector&lt; int &gt; &amp;bondOrder, int nAtoms, int nBonds, int &amp;nAss)</td></tr>
<tr class="separator:a78600823bb7358bc592f05fa5039936d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf79bb3ded26c6df1bcb8008c76afac6"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aaf79bb3ded26c6df1bcb8008c76afac6">analyzeOK</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; <a class="el" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a>, const std::vector&lt; int &gt; <a class="el" href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">maxValency</a>, const std::vector&lt; int &gt; bondOrder, const std::vector&lt; int &gt; atomCheckFlag, int nAtoms, int nBonds, int &amp;nGtMax, int &amp;nNEH, int &amp;nOddEven, bool testExceedHydrogen, bool oddEvenCheck)</td></tr>
<tr class="separator:aaf79bb3ded26c6df1bcb8008c76afac6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b40d2265cd8cf97dc199e8059d13ff0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b40d2265cd8cf97dc199e8059d13ff0">incrementAssignment</a> (std::vector&lt; int &gt; &amp;bondAssignment, int nAss)</td></tr>
<tr class="separator:a6b40d2265cd8cf97dc199e8059d13ff0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef260e06b0c46b10fe3be453e1362ee5"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder</a> (const std::vector&lt; int &gt; iA1, const std::vector&lt; int &gt; iA2, const std::vector&lt; int &gt; nH, const std::vector&lt; int &gt; <a class="el" href="namespaceOpenBabel.shtml#aa51b217d32346d4f341a227be63de160">maxValency</a>, std::vector&lt; int &gt; &amp;bondOrder, std::vector&lt; int &gt; &amp;<a class="el" href="namespaceOpenBabel.shtml#a47053116206f7c8cf7b278aec7e35cb1">hydrogenValency</a>, int nAtoms, int nBonds, bool oddEvenViolate)</td></tr>
<tr class="separator:aef260e06b0c46b10fe3be453e1362ee5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a656a12d74df6452be30fd76d3860bca6"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *pmol, const std::vector&lt; int &gt; nH, std::vector&lt; int &gt; &amp;bondOrders)</td></tr>
<tr class="separator:a656a12d74df6452be30fd76d3860bca6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8184977f057db3afea953ff0d97355d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab8184977f057db3afea953ff0d97355d">ptInRect</a> (const Rect r, const Point p)</td></tr>
<tr class="separator:ab8184977f057db3afea953ff0d97355d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3acf0818f209ed2426163c90b6d1440"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af3acf0818f209ed2426163c90b6d1440">compareStringsNumbers</a> (string s1, string s2)</td></tr>
<tr class="separator:af3acf0818f209ed2426163c90b6d1440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c4710d7911172f59b1f9caf9192d2d6"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0c4710d7911172f59b1f9caf9192d2d6">getAtomSymbol</a> (TSimpleMolecule &amp;sm, int atAtom, int atEx, int priority, string ndData)</td></tr>
<tr class="separator:a0c4710d7911172f59b1f9caf9192d2d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49950c5bac5703c9a3c7efea3d4a41f4"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a49950c5bac5703c9a3c7efea3d4a41f4">getAtomSymbol</a> (TSimpleMolecule &amp;sm, int atAtom)</td></tr>
<tr class="separator:a49950c5bac5703c9a3c7efea3d4a41f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5a5e94e5040b9aa439f4f658f0741d4"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa5a5e94e5040b9aa439f4f658f0741d4">indexOf</a> (const string instring, const string substring, int fromPos=0)</td></tr>
<tr class="separator:aa5a5e94e5040b9aa439f4f658f0741d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2c0520f21b12e9bfae93e4e425e26c9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac2c0520f21b12e9bfae93e4e425e26c9">removeZeroeth</a> (std::string instring)</td></tr>
<tr class="separator:ac2c0520f21b12e9bfae93e4e425e26c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79d8fe626950346aaaeabec7cfdce123"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a79d8fe626950346aaaeabec7cfdce123">analizeParity</a> (string data)</td></tr>
<tr class="separator:a79d8fe626950346aaaeabec7cfdce123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6b2a0b35248f073b86a96fbef99f461"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac6b2a0b35248f073b86a96fbef99f461">analizeParityBond</a> (string data)</td></tr>
<tr class="separator:ac6b2a0b35248f073b86a96fbef99f461"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a53b6e688d17496385f69834ed1014dc8"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a53b6e688d17496385f69834ed1014dc8">changeParity</a> (std::string data)</td></tr>
<tr class="separator:a53b6e688d17496385f69834ed1014dc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2ed9f300b95cff9ffc0fbc34cacc578"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af2ed9f300b95cff9ffc0fbc34cacc578">changeParityBond</a> (std::string data)</td></tr>
<tr class="separator:af2ed9f300b95cff9ffc0fbc34cacc578"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee1209411864c8c11729145e25e4bd2c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aee1209411864c8c11729145e25e4bd2c">bondEquivalent</a> (int bn1, int bn2, const std::vector&lt; int &gt; eqList, TSimpleMolecule &amp;sm)</td></tr>
<tr class="separator:aee1209411864c8c11729145e25e4bd2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae55766527e16c454a28332c2b9f51bab"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae55766527e16c454a28332c2b9f51bab">addZeroeth</a> (std::string instring, std::string stringAdd)</td></tr>
<tr class="separator:ae55766527e16c454a28332c2b9f51bab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8499ac47df50a86298d88a5079a544f6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8499ac47df50a86298d88a5079a544f6">setUpDownBonds</a> (int atomNo, int parity, TSimpleMolecule &amp;sm, std::vector&lt; int &gt; &amp;iA1, std::vector&lt; int &gt; &amp;iA2, std::vector&lt; int &gt; &amp;stereoBonds)</td></tr>
<tr class="separator:a8499ac47df50a86298d88a5079a544f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74797fbdbf190ac9522db1f2d582581b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a74797fbdbf190ac9522db1f2d582581b">SortVVInt</a> (const vector&lt; int &gt; &amp;a, const vector&lt; int &gt; &amp;b)</td></tr>
<tr class="separator:a74797fbdbf190ac9522db1f2d582581b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4083bb9898b1beff0c7e0970b9f64324"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4083bb9898b1beff0c7e0970b9f64324">SortAtomZ</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;b)</td></tr>
<tr class="separator:a4083bb9898b1beff0c7e0970b9f64324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4da122a7830becd4fa38b8792671cdd"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4da122a7830becd4fa38b8792671cdd">OBComparePairSecond</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr class="separator:af4da122a7830becd4fa38b8792671cdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83d991b1e233b11b794e4ab3f87b52cc"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a83d991b1e233b11b794e4ab3f87b52cc">OBComparePairFirst</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;a, const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;b)</td></tr>
<tr class="separator:a83d991b1e233b11b794e4ab3f87b52cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe5da6d31a3fcc23a2efd77085c8c2d4"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abe5da6d31a3fcc23a2efd77085c8c2d4">ClassCount</a> (vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp, unsigned int &amp;count)</td></tr>
<tr class="separator:abe5da6d31a3fcc23a2efd77085c8c2d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f302cc167630d63e3ca5a4c4d86e41b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8f302cc167630d63e3ca5a4c4d86e41b">CreateNewClassVector</a> (vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp1, vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;vp2)</td></tr>
<tr class="separator:a8f302cc167630d63e3ca5a4c4d86e41b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e9abbda50786ef068ca7b99768ba85"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a70e9abbda50786ef068ca7b99768ba85">IsSuppressibleHydrogen</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBAtomClassData.shtml">OBAtomClassData</a> *pac)</td></tr>
<tr class="separator:a70e9abbda50786ef068ca7b99768ba85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e455dc2d94f2394a21dd76db3af8325"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8e455dc2d94f2394a21dd76db3af8325">ValenceSum</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr class="separator:a8e455dc2d94f2394a21dd76db3af8325"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d72e30a8da1c39c9906a27ef62dd5f6"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8d72e30a8da1c39c9906a27ef62dd5f6">KekulePropagate</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, vector&lt; int &gt; &amp;visit, vector&lt; int &gt; &amp;ival, int depth)</td></tr>
<tr class="separator:a8d72e30a8da1c39c9906a27ef62dd5f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad87b019400c810f14603c6532435030b"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad87b019400c810f14603c6532435030b">GetCurrentValence</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr class="separator:ad87b019400c810f14603c6532435030b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51fe0e9eb03d3a861ca5d5c794acf011"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a51fe0e9eb03d3a861ca5d5c794acf011">ExpandKekule</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;va, vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt;::iterator i, vector&lt; int &gt; &amp;maxv, bool secondpass)</td></tr>
<tr class="separator:a51fe0e9eb03d3a861ca5d5c794acf011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13eb26f56a8a475622fba5fc01d4d50e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">CorrectBadResonanceForm</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:a13eb26f56a8a475622fba5fc01d4d50e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5531433a3edb03cf74aecd1ffadfe3a7"><td class="memItemLeft" align="right" valign="top">const void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5531433a3edb03cf74aecd1ffadfe3a7">DeleteStereoOnAtom</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> atomId)</td></tr>
<tr class="separator:a5531433a3edb03cf74aecd1ffadfe3a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7654363e339f0fe07323c9f7e542d4db"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7654363e339f0fe07323c9f7e542d4db">WriteTitles</a> (ostream &amp;ofs, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:a7654363e339f0fe07323c9f7e542d4db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabfd0c1c9630002b16c782ad7d39790f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aabfd0c1c9630002b16c782ad7d39790f">center_coords</a> (double *c, unsigned int size)</td></tr>
<tr class="separator:aabfd0c1c9630002b16c782ad7d39790f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a037d5f246395ec725489c655344a958a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a037d5f246395ec725489c655344a958a">rotate_coords</a> (double *c, double m[3][3], unsigned int size)</td></tr>
<tr class="separator:a037d5f246395ec725489c655344a958a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95b4ba35439691534ac9c74c47a4b688"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a95b4ba35439691534ac9c74c47a4b688">SetRotorToAngle</a> (double *c, vector&lt; int &gt; &amp;tor, double ang, vector&lt; int &gt; &amp;atoms)</td></tr>
<tr class="separator:a95b4ba35439691534ac9c74c47a4b688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a034c6dd9973dc10ecb7cab1e58a683fa"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a034c6dd9973dc10ecb7cab1e58a683fa">SafeOpen</a> (std::ifstream &amp;fs, const string &amp;filename)</td></tr>
<tr class="separator:a034c6dd9973dc10ecb7cab1e58a683fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9bfc815426ab3c657b97c198aee9f3e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab9bfc815426ab3c657b97c198aee9f3e">SafeOpen</a> (std::ofstream &amp;fs, const string &amp;filename)</td></tr>
<tr class="separator:ab9bfc815426ab3c657b97c198aee9f3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e30f35d0b3984ff969fed0eadc3a848"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2e30f35d0b3984ff969fed0eadc3a848">InvertCase</a> (std::string &amp;s, unsigned int start)</td></tr>
<tr class="separator:a2e30f35d0b3984ff969fed0eadc3a848"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a867d77834ebf14f88224f0dd7e7e0e61"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a867d77834ebf14f88224f0dd7e7e0e61">SolveLinear</a> (double A, double B)</td></tr>
<tr class="separator:a867d77834ebf14f88224f0dd7e7e0e61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad37b2e597a6a0115fa09fc4903665c9d"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad37b2e597a6a0115fa09fc4903665c9d">SolveQuadratic</a> (double A, double B, double C)</td></tr>
<tr class="separator:ad37b2e597a6a0115fa09fc4903665c9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a637e2cd6fd74982c574e513d729b29bc"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a637e2cd6fd74982c574e513d729b29bc">CubeRoot</a> (double X)</td></tr>
<tr class="separator:a637e2cd6fd74982c574e513d729b29bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0ca115b10493da91f7a1c65f5b44ef6"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af0ca115b10493da91f7a1c65f5b44ef6">SolveCubic</a> (double A, double B, double C, double D)</td></tr>
<tr class="separator:af0ca115b10493da91f7a1c65f5b44ef6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7ec675d10f9071757b87d4952938b65"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa7ec675d10f9071757b87d4952938b65">get_roots_3_3</a> (double mat[3][3], double roots[3])</td></tr>
<tr class="separator:aa7ec675d10f9071757b87d4952938b65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b5986b1238c63b45e7fb0fdfdfc4ed0"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7b5986b1238c63b45e7fb0fdfdfc4ed0">GetVectorBinding</a> ()</td></tr>
<tr class="separator:a7b5986b1238c63b45e7fb0fdfdfc4ed0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ef07c8230811964a209e423abea11d2"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5ef07c8230811964a209e423abea11d2">CreateAtom</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *, int, int vb=0)</td></tr>
<tr class="separator:a5ef07c8230811964a209e423abea11d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb8652b972f454e6ab6a58c7ffa46380"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afb8652b972f454e6ab6a58c7ffa46380">FatalAllocationError</a> (const char *ptr)</td></tr>
<tr class="separator:afb8652b972f454e6ab6a58c7ffa46380"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adda2fb3f1a00bdee06b36a3a56ecab0a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adda2fb3f1a00bdee06b36a3a56ecab0a">FreePattern</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *)</td></tr>
<tr class="separator:adda2fb3f1a00bdee06b36a3a56ecab0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1fea358f643e1a4c2969fe9fc367372b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *)</td></tr>
<tr class="separator:a1fea358f643e1a4c2969fe9fc367372b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac86a92f114ff5ab6ee7357352682922c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac86a92f114ff5ab6ee7357352682922c">CopyAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:ac86a92f114ff5ab6ee7357352682922c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae445247649429e110f031d235bc4d465"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae445247649429e110f031d235bc4d465">FreeAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:ae445247649429e110f031d235bc4d465"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a060f018c46b11c9bd5f6c00b6d1bc16e"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a060f018c46b11c9bd5f6c00b6d1bc16e">BuildAtomPred</a> (int type)</td></tr>
<tr class="separator:a060f018c46b11c9bd5f6c00b6d1bc16e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05c3c5437bf042e2b7212eafc929de87"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a05c3c5437bf042e2b7212eafc929de87">BuildAtomLeaf</a> (int type, int val)</td></tr>
<tr class="separator:a05c3c5437bf042e2b7212eafc929de87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03cacdaa8b1851aa9f927a8108b9e3ea"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a03cacdaa8b1851aa9f927a8108b9e3ea">BuildAtomNot</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:a03cacdaa8b1851aa9f927a8108b9e3ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61fd91da70225bf05011639396d23b10"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a61fd91da70225bf05011639396d23b10">BuildAtomBin</a> (int op, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *rgt)</td></tr>
<tr class="separator:a61fd91da70225bf05011639396d23b10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c7a4877081dd4f7ab5966e1cb506895"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2c7a4877081dd4f7ab5966e1cb506895">BuildAtomRecurs</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>
<tr class="separator:a2c7a4877081dd4f7ab5966e1cb506895"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d8b74f86bd19e5c64c5cfafbc0f5fc8"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7d8b74f86bd19e5c64c5cfafbc0f5fc8">GenerateElement</a> (int elem)</td></tr>
<tr class="separator:a7d8b74f86bd19e5c64c5cfafbc0f5fc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf5c0e4e485dfa0a5b9854063d0e75be"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adf5c0e4e485dfa0a5b9854063d0e75be">GenerateAromElem</a> (int elem, int flag)</td></tr>
<tr class="separator:adf5c0e4e485dfa0a5b9854063d0e75be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d298e86b8ff500e158a8410aa5aa732"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8d298e86b8ff500e158a8410aa5aa732">IsInvalidAtom</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:a8d298e86b8ff500e158a8410aa5aa732"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a308583e0ca7df091c7a7e3b9fb321805"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a308583e0ca7df091c7a7e3b9fb321805">CopyBondExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr class="separator:a308583e0ca7df091c7a7e3b9fb321805"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62e1c3bdf62c95fbff1b64cb4996eccb"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a62e1c3bdf62c95fbff1b64cb4996eccb">EquivalentBondExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr1, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr2)</td></tr>
<tr class="separator:a62e1c3bdf62c95fbff1b64cb4996eccb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec5ad77869a83b4b1f65bcfcb065d98f"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aec5ad77869a83b4b1f65bcfcb065d98f">FreeBondExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr class="separator:aec5ad77869a83b4b1f65bcfcb065d98f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbddc5597f298d166500382c78381fc6"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abbddc5597f298d166500382c78381fc6">BuildBondLeaf</a> (int type)</td></tr>
<tr class="separator:abbddc5597f298d166500382c78381fc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a558423c98a7710dccb8d9234a8c0d2cc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a558423c98a7710dccb8d9234a8c0d2cc">BuildBondNot</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr class="separator:a558423c98a7710dccb8d9234a8c0d2cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fc2b0b41adf46651940ca2c9410ed0d"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6fc2b0b41adf46651940ca2c9410ed0d">BuildBondBin</a> (int op, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *lft, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *rgt)</td></tr>
<tr class="separator:a6fc2b0b41adf46651940ca2c9410ed0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1d85b6d3bd9953ffd9a3ffc5545bcfc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad1d85b6d3bd9953ffd9a3ffc5545bcfc">GenerateDefaultBond</a> (void)</td></tr>
<tr class="separator:ad1d85b6d3bd9953ffd9a3ffc5545bcfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17874fdfb56af286f64cbf9471772daa"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a17874fdfb56af286f64cbf9471772daa">AllocPattern</a> (void)</td></tr>
<tr class="separator:a17874fdfb56af286f64cbf9471772daa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dc584d0582e8f76b7c9873dc1ccf569"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0dc584d0582e8f76b7c9873dc1ccf569">CreateBond</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat, <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr, int src, int dst)</td></tr>
<tr class="separator:a0dc584d0582e8f76b7c9873dc1ccf569"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac16aac0b5b4c8698863437383b747a5c"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac16aac0b5b4c8698863437383b747a5c">MarkGrowBonds</a> (<a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *pat)</td></tr>
<tr class="separator:ac16aac0b5b4c8698863437383b747a5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a308bf98f43b9e6d709f17b2e83617d6f"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a308bf98f43b9e6d709f17b2e83617d6f">GetChiralFlag</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:a308bf98f43b9e6d709f17b2e83617d6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc058b406ead774fe4ab5ea82d24959f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adc058b406ead774fe4ab5ea82d24959f">NotAtomExpr</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:adc058b406ead774fe4ab5ea82d24959f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc7a90098a2f71e1480986f513426244"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acc7a90098a2f71e1480986f513426244">GetExprOrder</a> (<a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *expr)</td></tr>
<tr class="separator:acc7a90098a2f71e1480986f513426244"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72ea8a883185944d7c9cf78d11a4cac3"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a72ea8a883185944d7c9cf78d11a4cac3">GetExprCharge</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:a72ea8a883185944d7c9cf78d11a4cac3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed6b0490eea71c0269f0e4b9c8bbb419"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aed6b0490eea71c0269f0e4b9c8bbb419">GetExprAtomicNum</a> (<a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *expr)</td></tr>
<tr class="separator:aed6b0490eea71c0269f0e4b9c8bbb419"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1be5369686428b6311fc8f79baf855c5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1be5369686428b6311fc8f79baf855c5">SmartsLexReplace</a> (std::string &amp;s, std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;vlex)</td></tr>
<tr class="separator:a1be5369686428b6311fc8f79baf855c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acf0cdead441d34bce09b5dffbd031e94"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acf0cdead441d34bce09b5dffbd031e94">isqrt</a> (unsigned int val)</td></tr>
<tr class="separator:acf0cdead441d34bce09b5dffbd031e94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4d8217756622db102e25941df848d37"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4d8217756622db102e25941df848d37">IsOddPrime</a> (unsigned int x)</td></tr>
<tr class="separator:af4d8217756622db102e25941df848d37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83b9098df014b7fce40c3d29eb240240"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a83b9098df014b7fce40c3d29eb240240">RelativelyPrime</a> (unsigned int x, unsigned int y)</td></tr>
<tr class="separator:a83b9098df014b7fce40c3d29eb240240"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c9b5a925bb477e9cf899d8705defc60"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9c9b5a925bb477e9cf899d8705defc60">LeadingZeros</a> (unsigned int x)</td></tr>
<tr class="separator:a9c9b5a925bb477e9cf899d8705defc60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab39d4f554084f831800c2f18b5b0f017"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab39d4f554084f831800c2f18b5b0f017">DeterminePotency</a> (unsigned int m, unsigned int a)</td></tr>
<tr class="separator:ab39d4f554084f831800c2f18b5b0f017"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e5d2c394de2985154659ef73adddea6"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5e5d2c394de2985154659ef73adddea6">DetermineFactors</a> (unsigned int x, unsigned int *factors)</td></tr>
<tr class="separator:a5e5d2c394de2985154659ef73adddea6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a368951c5db9d79bad24d0632dbaf23d4"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a368951c5db9d79bad24d0632dbaf23d4">DetermineIncrement</a> (unsigned int m)</td></tr>
<tr class="separator:a368951c5db9d79bad24d0632dbaf23d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3a7dadaa9b14b3d1a4a521f632a2477"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence</a> (unsigned int m, unsigned int *pm, unsigned int *pa, unsigned int *pc)</td></tr>
<tr class="separator:ad3a7dadaa9b14b3d1a4a521f632a2477"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfc4a863d0839be0e62e9db9d585fd7e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence</a> (unsigned int p, unsigned int m, unsigned int a, unsigned int c)</td></tr>
<tr class="separator:adfc4a863d0839be0e62e9db9d585fd7e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a896fe2a9e9925cda30253ea47ab123c6"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber</a> (const char *atomid)</td></tr>
<tr class="separator:a896fe2a9e9925cda30253ea47ab123c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a822c0b4a40ee24e37bc3064b4e403458"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a822c0b4a40ee24e37bc3064b4e403458">GetResidueNumber</a> (const char *res)</td></tr>
<tr class="separator:a822c0b4a40ee24e37bc3064b4e403458"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91a8965770cf999c120602edb0c09bcd"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a91a8965770cf999c120602edb0c09bcd">SetResidueKeys</a> (const char *residue, unsigned int &amp;reskey, unsigned int &amp;aakey)</td></tr>
<tr class="separator:a91a8965770cf999c120602edb0c09bcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a387eb9209ded6f58de6c672c06121ec8"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">DetermineFRJ</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr class="separator:a387eb9209ded6f58de6c672c06121ec8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3354aff787347f50d69b3f75a2ab4912"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3354aff787347f50d69b3f75a2ab4912">BuildOBRTreeVector</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> *, vector&lt; <a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> *&gt; &amp;, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>
<tr class="separator:a3354aff787347f50d69b3f75a2ab4912"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd603c36f7650b398cddf72b1b863b1f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; unsigned int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acd603c36f7650b398cddf72b1b863b1f">atomRingToBondRing</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; int &gt; &amp;atoms)</td></tr>
<tr class="separator:acd603c36f7650b398cddf72b1b863b1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa416d75b34de1f74f1f0c145cabf7998"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa416d75b34de1f74f1f0c145cabf7998">visitRing</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *ring, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&gt; &amp;rlist, std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&gt; &amp;rignored)</td></tr>
<tr class="separator:aa416d75b34de1f74f1f0c145cabf7998"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac194707d84ac9327fe56e70b3cd1b0ee"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac194707d84ac9327fe56e70b3cd1b0ee">FindRingAtomsAndBonds2</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:ac194707d84ac9327fe56e70b3cd1b0ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a242fc84ac802af94d65d8807a5638e2f"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a242fc84ac802af94d65d8807a5638e2f">FindRings</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, int *avisit, unsigned char *bvisit, unsigned int &amp;frj, int depth)</td></tr>
<tr class="separator:a242fc84ac802af94d65d8807a5638e2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f0ec6e80141edbb924cfc4839117c94"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9f0ec6e80141edbb924cfc4839117c94">rint</a> (double x)</td></tr>
<tr class="separator:a9f0ec6e80141edbb924cfc4839117c94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d3039fda855c4c8c37c8345f0b51a64"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3d3039fda855c4c8c37c8345f0b51a64">SetRotorToAngle</a> (double *c, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> **ref, double ang, vector&lt; int &gt; atoms)</td></tr>
<tr class="separator:a3d3039fda855c4c8c37c8345f0b51a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69a83bcbc3a172e306c4556518aa0999"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a69a83bcbc3a172e306c4556518aa0999">PackCoordinate</a> (double c[3], double max[3])</td></tr>
<tr class="separator:a69a83bcbc3a172e306c4556518aa0999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3180afc2c45b337a776dcc164e99e89a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3180afc2c45b337a776dcc164e99e89a">UnpackCoordinate</a> (double c[3], double max[3], int tmp)</td></tr>
<tr class="separator:a3180afc2c45b337a776dcc164e99e89a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a534fe2a629963b79ffbd499f461ca5df"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">GetDFFVector</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;, vector&lt; int &gt; &amp;, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;)</td></tr>
<tr class="separator:a534fe2a629963b79ffbd499f461ca5df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfad2bce1feae52028bcf69d6b5de37a"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adfad2bce1feae52028bcf69d6b5de37a">CompareRotor</a> (const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;, const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;)</td></tr>
<tr class="separator:adfad2bce1feae52028bcf69d6b5de37a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1efa641b2fa046a6c00f729818933d6"><td class="memItemLeft" align="right" valign="top">char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab1efa641b2fa046a6c00f729818933d6">trim_spaces</a> (char *string)</td></tr>
<tr class="separator:ab1efa641b2fa046a6c00f729818933d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c95d6afb719f05c8b3942c74e6a5447"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7c95d6afb719f05c8b3942c74e6a5447">eval_horn_NR_corrxn</a> (const vector&lt; double &gt; &amp;c, const double x)</td></tr>
<tr class="separator:a7c95d6afb719f05c8b3942c74e6a5447"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeaeba11a05917b1927374e963d6b3227"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aeaeba11a05917b1927374e963d6b3227">QCProot</a> (const vector&lt; double &gt; &amp;coeff, double guess, const double delta)</td></tr>
<tr class="separator:aeaeba11a05917b1927374e963d6b3227"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a363d76f22dfe31857de03ff4a4caee11"><td class="memItemLeft" align="right" valign="top">vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a363d76f22dfe31857de03ff4a4caee11">CalcQuarticCoeffs</a> (const Eigen::Matrix3d &amp;M)</td></tr>
<tr class="separator:a363d76f22dfe31857de03ff4a4caee11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41d8538809cb689100fa8a0807510128"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a41d8538809cb689100fa8a0807510128">operator*</a> (const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;A, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;B)</td></tr>
<tr class="separator:a41d8538809cb689100fa8a0807510128"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30703c4e70c6142f64ceb67f1888b6e2"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a30703c4e70c6142f64ceb67f1888b6e2">SQUARE</a> (double x)</td></tr>
<tr class="separator:a30703c4e70c6142f64ceb67f1888b6e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a590374f29c633247d07b75e43ae89f9d"><td class="memItemLeft" align="right" valign="top">ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a590374f29c633247d07b75e43ae89f9d">operator&lt;&lt;</a> (ostream &amp;co, const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;m)</td></tr>
<tr class="separator:a590374f29c633247d07b75e43ae89f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12c13a3449bb5bffa3436d7dda6f217c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a12c13a3449bb5bffa3436d7dda6f217c">RemoveWhiteSpaceUnderscore</a> (const string &amp;in)</td></tr>
<tr class="separator:a12c13a3449bb5bffa3436d7dda6f217c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8081070ab0409c71d9abfe43902881f"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad8081070ab0409c71d9abfe43902881f">VZero</a> (0.0, 0.0, 0.0)</td></tr>
<tr class="separator:ad8081070ab0409c71d9abfe43902881f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71fd9d70c392449514d7a263d94e0ed1"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a71fd9d70c392449514d7a263d94e0ed1">VX</a> (1.0, 0.0, 0.0)</td></tr>
<tr class="separator:a71fd9d70c392449514d7a263d94e0ed1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac43607459a7e61f202515f641ff57508"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac43607459a7e61f202515f641ff57508">VY</a> (0.0, 1.0, 0.0)</td></tr>
<tr class="separator:ac43607459a7e61f202515f641ff57508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe3ca6a519f7aa7bcade3fb6d2b927f6"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#abe3ca6a519f7aa7bcade3fb6d2b927f6">VZ</a> (0.0, 0.0, 1.0)</td></tr>
<tr class="separator:abe3ca6a519f7aa7bcade3fb6d2b927f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfeeb7c49527c6c136a5d659cd6300d8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adfeeb7c49527c6c136a5d659cd6300d8">getdelta</a> (int x, int y, int x2, int y2)</td></tr>
<tr class="separator:adfeeb7c49527c6c136a5d659cd6300d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a979d62c902dc70aaef88fa6eb639a745"><td class="memItemLeft" align="right" valign="top">string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a979d62c902dc70aaef88fa6eb639a745">getsymbols</a> (int x, int y, int x2, int y2)</td></tr>
<tr class="separator:a979d62c902dc70aaef88fa6eb639a745"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfcb21e667eaa6f03208c8ece10eff16"><td class="memItemLeft" align="right" valign="top">static cairo_status_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acfcb21e667eaa6f03208c8ece10eff16">writeFunction</a> (void *closure, const unsigned char *data, unsigned int length)</td></tr>
<tr class="separator:acfcb21e667eaa6f03208c8ece10eff16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a474093accb1df03b02d17bc4b7f00377"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">GetLabelAlignment</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr class="separator:a474093accb1df03b02d17bc4b7f00377"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a394447ad37adaf40565f53d07f5eed17"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a394447ad37adaf40565f53d07f5eed17">GetAtomSymClass</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr class="separator:a394447ad37adaf40565f53d07f5eed17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">String conversion utilities</div></td></tr>
<tr class="memitem:aae157b7c5a3145dff9e938888d41d46f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aae157b7c5a3145dff9e938888d41d46f">ToUpper</a> (std::string &amp;s)</td></tr>
<tr class="separator:aae157b7c5a3145dff9e938888d41d46f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47cc993bd022dfca052b2b18f5cd89ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a47cc993bd022dfca052b2b18f5cd89ea">ToUpper</a> (char *cptr)</td></tr>
<tr class="separator:a47cc993bd022dfca052b2b18f5cd89ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e8df618618aa53bf4cf202b0230c7ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8e8df618618aa53bf4cf202b0230c7ac">ToLower</a> (std::string &amp;s)</td></tr>
<tr class="separator:a8e8df618618aa53bf4cf202b0230c7ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47e5132fa26acd9f575c6c34e6337348"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a47e5132fa26acd9f575c6c34e6337348">ToLower</a> (char *cptr)</td></tr>
<tr class="separator:a47e5132fa26acd9f575c6c34e6337348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae254bae8e13592739edfdf24b917a943"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae254bae8e13592739edfdf24b917a943">InvertCase</a> (std::string &amp;, int)</td></tr>
<tr class="separator:ae254bae8e13592739edfdf24b917a943"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a02a81294407df471b68048bb2bcfd503"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a02a81294407df471b68048bb2bcfd503">InvertCase</a> (char *cptr)</td></tr>
<tr class="separator:a02a81294407df471b68048bb2bcfd503"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7fd604c6cfd7cbb0067721106af8ca9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae7fd604c6cfd7cbb0067721106af8ca9">CleanAtomType</a> (char *)</td></tr>
<tr class="separator:ae7fd604c6cfd7cbb0067721106af8ca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">High level functions</div></td></tr>
<tr class="memitem:gae7aedffc6994cf26d16524389c56bdac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gae7aedffc6994cf26d16524389c56bdac">PerceiveStereo</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, bool force=false)</td></tr>
<tr class="separator:gae7aedffc6994cf26d16524389c56bdac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga305c9600a3a336da16683baa395e20f4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga305c9600a3a336da16683baa395e20f4">StereoFrom2D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OBStereo::BondDirection</a> &gt; *updown=NULL, bool force=false)</td></tr>
<tr class="separator:ga305c9600a3a336da16683baa395e20f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gaebcf38fd76c5d76fffbae808b8571f9b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gaebcf38fd76c5d76fffbae808b8571f9b">StereoFrom3D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, bool force=false)</td></tr>
<tr class="separator:gaebcf38fd76c5d76fffbae808b8571f9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga419e494a34740f1f8003acabfa30a95b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga419e494a34740f1f8003acabfa30a95b">StereoFrom0D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol)</td></tr>
<tr class="separator:ga419e494a34740f1f8003acabfa30a95b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Low level functions</div></td></tr>
<tr class="memitem:ga35e07645a245db366b115f0dc20542fd"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga35e07645a245db366b115f0dc20542fd">TetrahedralFrom3D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr class="separator:ga35e07645a245db366b115f0dc20542fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gab85c5ef4c9416ee7af02b21658fe9de2"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gab85c5ef4c9416ee7af02b21658fe9de2">TetrahedralFrom2D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr class="separator:gab85c5ef4c9416ee7af02b21658fe9de2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac3049b86debe9059b851825b29b1557c"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml">OBTetrahedralStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gac3049b86debe9059b851825b29b1557c">TetrahedralFrom0D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr class="separator:gac3049b86debe9059b851825b29b1557c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga7e1ba3a4ac33b0c6404b0d960cc53d00"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga7e1ba3a4ac33b0c6404b0d960cc53d00">CisTransFrom3D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr class="separator:ga7e1ba3a4ac33b0c6404b0d960cc53d00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga98528c3002ed718695ccfaf031ca3f04"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga98528c3002ed718695ccfaf031ca3f04">CisTransFrom2D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, const std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OBStereo::BondDirection</a> &gt; *updown=NULL, bool addToMol=true)</td></tr>
<tr class="separator:ga98528c3002ed718695ccfaf031ca3f04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga182a53150e1793ac1ec14958afb05f17"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga182a53150e1793ac1ec14958afb05f17">TetStereoToWedgeHash</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, enum <a class="el" href="structOpenBabel_1_1OBStereo.shtml#a90087c9021331c97c28e9a8329f41e97">OBStereo::BondDirection</a> &gt; &amp;updown, std::map&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> &gt; &amp;from)</td></tr>
<tr class="separator:ga182a53150e1793ac1ec14958afb05f17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga63e739a42d88ac64ed77c07d73866a45"><td class="memItemLeft" align="right" valign="top">std::set&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga63e739a42d88ac64ed77c07d73866a45">GetUnspecifiedCisTrans</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:ga63e739a42d88ac64ed77c07d73866a45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga9b44683d071146220a97390283944f70"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga9b44683d071146220a97390283944f70">StereoRefToImplicit</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> atomId)</td></tr>
<tr class="separator:ga9b44683d071146220a97390283944f70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga770c2caccc494438333bfd8a66078a77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga770c2caccc494438333bfd8a66078a77">ImplicitRefToStereo</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> centerId, <a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a> newId)</td></tr>
<tr class="separator:ga770c2caccc494438333bfd8a66078a77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:gac74fff254a639ede4d92a59fa44318a6"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml">OBCisTransStereo</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gac74fff254a639ede4d92a59fa44318a6">CisTransFrom0D</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const <a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a> &amp;stereoUnits, bool addToMol=true)</td></tr>
<tr class="separator:gac74fff254a639ede4d92a59fa44318a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Stereogenic unit identification</div></td></tr>
<tr class="memitem:gaebf264394d502844b99b1dbe031ea185"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#gaebf264394d502844b99b1dbe031ea185">FindStereogenicUnits</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses)</td></tr>
<tr class="separator:gaebf264394d502844b99b1dbe031ea185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ga0f62e73467d2059ad28d544633634862"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__stereo.shtml#ga042299211c7a52f5aee1975d32820af7">OBStereoUnitSet</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__stereo.shtml#ga0f62e73467d2059ad28d544633634862">FindStereogenicUnits</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *mol, const std::vector&lt; unsigned int &gt; &amp;symClasses, const <a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;automorphisms)</td></tr>
<tr class="separator:ga0f62e73467d2059ad28d544633634862"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:af962a429bf8fe8b8f222ff1a6018c35e"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af962a429bf8fe8b8f222ff1a6018c35e">AliasDataType</a> = 0x7883</td></tr>
<tr class="separator:af962a429bf8fe8b8f222ff1a6018c35e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a705f8e90fa8ff30ccef095fb0df5a3ee"><td class="memItemLeft" align="right" valign="top">const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a705f8e90fa8ff30ccef095fb0df5a3ee">HARTEE_TO_KCALPERMOL</a> = 627.509469</td></tr>
<tr class="separator:a705f8e90fa8ff30ccef095fb0df5a3ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eee26925572209557d8176a44019c08"><td class="memItemLeft" align="right" valign="top">const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2eee26925572209557d8176a44019c08">KJPERMOL_TO_KCALPERMOL</a> = 1.0/4.184</td></tr>
<tr class="separator:a2eee26925572209557d8176a44019c08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6f1f2a4bf3acd168b5b6b8907615141f"><td class="memItemLeft" align="right" valign="top">const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6f1f2a4bf3acd168b5b6b8907615141f">RYDBERG_TO_KCALPERMOL</a> = 313.755026</td></tr>
<tr class="separator:a6f1f2a4bf3acd168b5b6b8907615141f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f34cdc6856f8dc82e8b9007c9633e39"><td class="memItemLeft" align="right" valign="top">const double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3f34cdc6856f8dc82e8b9007c9633e39">ELECTRONVOLT_TO_KCALPERMOL</a> = 23.060538</td></tr>
<tr class="separator:a3f34cdc6856f8dc82e8b9007c9633e39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94007d911a76e1404494fd9b1785f22b"><td class="memItemLeft" align="right" valign="top">const unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a94007d911a76e1404494fd9b1785f22b">RateData</a> = 55555</td></tr>
<tr class="separator:a94007d911a76e1404494fd9b1785f22b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c2b0b854dea9451bf30f7b37353c877"><td class="memItemLeft" align="right" valign="top">const unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4c2b0b854dea9451bf30f7b37353c877">ThermoData</a> = 55556</td></tr>
<tr class="separator:a4c2b0b854dea9451bf30f7b37353c877"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af9a30f985504c4a70fd08aa72c0cd16a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBLocale.shtml">OBLocale</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af9a30f985504c4a70fd08aa72c0cd16a">obLocale</a></td></tr>
<tr class="separator:af9a30f985504c4a70fd08aa72c0cd16a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82ccfbdf4943a4e74a708edafcced9f6"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a82ccfbdf4943a4e74a708edafcced9f6">MAXBONDS</a> =300</td></tr>
<tr class="separator:a82ccfbdf4943a4e74a708edafcced9f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22febe826ea2f93f69725fbef532c921"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a22febe826ea2f93f69725fbef532c921">MAXFRAGS</a> =200</td></tr>
<tr class="separator:a22febe826ea2f93f69725fbef532c921"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab91841d785674a38b34fcf2fd9685142"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab91841d785674a38b34fcf2fd9685142">MAXCHARS</a> =1000</td></tr>
<tr class="separator:ab91841d785674a38b34fcf2fd9685142"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad087045047b2155479ef662be1be3abc"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">MAX_DEPTH</a> =10</td></tr>
<tr class="separator:ad087045047b2155479ef662be1be3abc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1eec14ce20cfaf366e19721f1f27090"><td class="memItemLeft" align="right" valign="top">static const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ad1eec14ce20cfaf366e19721f1f27090">NELEMMAX</a> =120</td></tr>
<tr class="separator:ad1eec14ce20cfaf366e19721f1f27090"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e53ca6bf87ac2f6447c9ef2332c9418"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1e53ca6bf87ac2f6447c9ef2332c9418">etab</a></td></tr>
<tr class="separator:a1e53ca6bf87ac2f6447c9ef2332c9418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8d4d5690031703bcccb95ddbe7ebf0a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab8d4d5690031703bcccb95ddbe7ebf0a">ttab</a></td></tr>
<tr class="separator:ab8d4d5690031703bcccb95ddbe7ebf0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35082995377e56142ee5a9fd351c7a70"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a35082995377e56142ee5a9fd351c7a70">isotab</a></td></tr>
<tr class="separator:a35082995377e56142ee5a9fd351c7a70"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36c0ee580e088fa888f7d96c16e969bd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a36c0ee580e088fa888f7d96c16e969bd">aromtyper</a></td></tr>
<tr class="separator:a36c0ee580e088fa888f7d96c16e969bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a717e026b570e71d0e648d851d34b6482"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a717e026b570e71d0e648d851d34b6482">atomtyper</a></td></tr>
<tr class="separator:a717e026b570e71d0e648d851d34b6482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab81925dbd111f3bf1733a4cbba547131"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab81925dbd111f3bf1733a4cbba547131">chainsparser</a></td></tr>
<tr class="separator:ab81925dbd111f3bf1733a4cbba547131"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a394eef44b3dd6a9174067715712c2d16"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a394eef44b3dd6a9174067715712c2d16">obErrorLog</a></td></tr>
<tr class="separator:a394eef44b3dd6a9174067715712c2d16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30154f62f3bd1a1b8613a080444e69d7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a30154f62f3bd1a1b8613a080444e69d7">resdat</a></td></tr>
<tr class="separator:a30154f62f3bd1a1b8613a080444e69d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99dab86ea7c23d635f350a07644c16a6"><td class="memItemLeft" align="right" valign="top">static const unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a99dab86ea7c23d635f350a07644c16a6">NoId</a> = <a class="el" href="structOpenBabel_1_1detail_1_1max__value.shtml">detail::max_value</a>&lt;unsigned long&gt;::result</td></tr>
<tr class="separator:a99dab86ea7c23d635f350a07644c16a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c64f54dc7b18535a4e9cc581199e26a"><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1c64f54dc7b18535a4e9cc581199e26a">Residue</a> [<a class="el" href="residue_8h.shtml#a45404c3c762f1e48cf9294137747f1cd">MAXRES</a>][4]</td></tr>
<tr class="separator:a1c64f54dc7b18535a4e9cc581199e26a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada1d79ef0dec356ea0ae9c1d4e654ca2"><td class="memItemLeft" align="right" valign="top">char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ada1d79ef0dec356ea0ae9c1d4e654ca2">ElemDesc</a> [<a class="el" href="residue_8h.shtml#aa6e701e58282da3200ddee70740f8514">MAXELEM</a>][4]</td></tr>
<tr class="separator:ada1d79ef0dec356ea0ae9c1d4e654ca2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4a6dc069703276b9476ce6b7c5f018e"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4a6dc069703276b9476ce6b7c5f018e">ResNo</a> = <a class="el" href="residue_8h.shtml#ad165362f7dc704f2cce3cd6042b1bf8f">MINRES</a></td></tr>
<tr class="separator:af4a6dc069703276b9476ce6b7c5f018e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a508adcc5794ff87b21a2e5fc0d752b17"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a508adcc5794ff87b21a2e5fc0d752b17">ElemNo</a> = <a class="el" href="residue_8h.shtml#abd6045b55ead8f29d9593e79e6b20575">MINELEM</a></td></tr>
<tr class="separator:a508adcc5794ff87b21a2e5fc0d752b17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace51dfd98be07acf3a9c75c21e8d8af2"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ace51dfd98be07acf3a9c75c21e8d8af2">VZero</a></td></tr>
<tr class="separator:ace51dfd98be07acf3a9c75c21e8d8af2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ca3b632d31093a7110635452bccc7bd"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6ca3b632d31093a7110635452bccc7bd">VX</a></td></tr>
<tr class="separator:a6ca3b632d31093a7110635452bccc7bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d3d483edcdb477b3d15f19a001845ee"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2d3d483edcdb477b3d15f19a001845ee">VY</a></td></tr>
<tr class="separator:a2d3d483edcdb477b3d15f19a001845ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08ec791bf0217b5df66e5879a9f9c95a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a08ec791bf0217b5df66e5879a9f9c95a">VZ</a></td></tr>
<tr class="separator:a08ec791bf0217b5df66e5879a9f9c95a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4a64fa5669b273a31330641abe62978"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4a64fa5669b273a31330641abe62978">phmodel</a></td></tr>
<tr class="separator:af4a64fa5669b273a31330641abe62978"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5cbbbb696c845c426871bc19a4a01d5"><td class="memItemLeft" align="right" valign="top">static unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa5cbbbb696c845c426871bc19a4a01d5">bitsoff</a> [<a class="el" href="bitvec_8h.shtml#a9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>]</td></tr>
<tr class="separator:aa5cbbbb696c845c426871bc19a4a01d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37764b678471578b5f9441bd6f130fd8"><td class="memItemLeft" align="right" valign="top">const unsigned&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a37764b678471578b5f9441bd6f130fd8">nibble_bit_count</a> [0x10]</td></tr>
<tr class="separator:a37764b678471578b5f9441bd6f130fd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba95148bad1cac8e3abb51a485c17cac"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aba95148bad1cac8e3abb51a485c17cac">bondtyper</a></td></tr>
<tr class="separator:aba95148bad1cac8e3abb51a485c17cac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26e55b55a5d9997fa7e9326cd603fcdd"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a26e55b55a5d9997fa7e9326cd603fcdd">Peptide</a> [<a class="el" href="chains_8cpp.shtml#af1b2c4af4f9a6909c7a63cc9cc0e86ad">MAXPEPTIDE</a>]</td></tr>
<tr class="separator:a26e55b55a5d9997fa7e9326cd603fcdd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4cf89b53bf070dafd1717b69e89d8a0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab4cf89b53bf070dafd1717b69e89d8a0">Nucleotide</a> [<a class="el" href="chains_8cpp.shtml#a25866c9e7f565e2d902304f087338475">MAXNUCLEIC</a>]</td></tr>
<tr class="separator:ab4cf89b53bf070dafd1717b69e89d8a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b064978f82414d1a9805ac383a5cac5"><td class="memItemLeft" align="right" valign="top">static char&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a7b064978f82414d1a9805ac383a5cac5">ChainsAtomName</a> [<a class="el" href="chains_8cpp.shtml#a0fc07ba5f4a8d786b24fb28c7c5c62b2">ATOMMAX</a>][4]</td></tr>
<tr class="separator:a7b064978f82414d1a9805ac383a5cac5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f1fa68f20787eefe51bc205d70bf141"><td class="memItemLeft" align="right" valign="top">static ResidType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0f1fa68f20787eefe51bc205d70bf141">AminoAcids</a> [<a class="el" href="chains_8cpp.shtml#a681d502467126bdc1b5673ecea585d25">AMINOMAX</a>]</td></tr>
<tr class="separator:a0f1fa68f20787eefe51bc205d70bf141"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2326ccdc5fd0c0b5cfd5842cf4c7da03"><td class="memItemLeft" align="right" valign="top">static ResidType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2326ccdc5fd0c0b5cfd5842cf4c7da03">Nucleotides</a> [<a class="el" href="chains_8cpp.shtml#a62f84f11159f8899196affa2f08cc6fa">NUCLEOMAX</a>]</td></tr>
<tr class="separator:a2326ccdc5fd0c0b5cfd5842cf4c7da03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d27c5a78720907303f7345d7f972f36"><td class="memItemLeft" align="right" valign="top">static MonoAtomType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6d27c5a78720907303f7345d7f972f36">MonoAtom</a> [<a class="el" href="chains_8h.shtml#a0a30b6310d4dca99e49673f6e530bdc4">MaxMonoAtom</a>]</td></tr>
<tr class="separator:a6d27c5a78720907303f7345d7f972f36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a424ffb435ce72308ed456dd1c8e5de60"><td class="memItemLeft" align="right" valign="top">static MonoBondType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a424ffb435ce72308ed456dd1c8e5de60">MonoBond</a> [<a class="el" href="chains_8h.shtml#ad6c9530ebbe94406872e1a4eb18b3b7c">MaxMonoBond</a>]</td></tr>
<tr class="separator:a424ffb435ce72308ed456dd1c8e5de60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f891e27abe7998822f22e513182317a"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a4f891e27abe7998822f22e513182317a">MonoAtomCount</a></td></tr>
<tr class="separator:a4f891e27abe7998822f22e513182317a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe6df7aef6454d16dfbde0b74a516b63"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#afe6df7aef6454d16dfbde0b74a516b63">MonoBondCount</a></td></tr>
<tr class="separator:afe6df7aef6454d16dfbde0b74a516b63"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e0089655dc8a4d83d40dcbe519ca9bb"><td class="memItemLeft" align="right" valign="top">static StackType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a9e0089655dc8a4d83d40dcbe519ca9bb">Stack</a> [<a class="el" href="chains_8cpp.shtml#a21d9543c516fffee84a7963224271f95">STACKSIZE</a>]</td></tr>
<tr class="separator:a9e0089655dc8a4d83d40dcbe519ca9bb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e019437eb125244e080ac8bee696b05"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5e019437eb125244e080ac8bee696b05">StackPtr</a></td></tr>
<tr class="separator:a5e019437eb125244e080ac8bee696b05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08aed91cf3c0528c11e2c383078b9e52"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a08aed91cf3c0528c11e2c383078b9e52">AtomIndex</a></td></tr>
<tr class="separator:a08aed91cf3c0528c11e2c383078b9e52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8cd0fea55be4772aece582108b664c9"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab8cd0fea55be4772aece582108b664c9">BondIndex</a></td></tr>
<tr class="separator:ab8cd0fea55be4772aece582108b664c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4e7dde6c2732deca11bff4c63c46372"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4e7dde6c2732deca11bff4c63c46372">StrictFlag</a> = false</td></tr>
<tr class="separator:af4e7dde6c2732deca11bff4c63c46372"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8759fc55507d155f4eb9fa303cfecc59"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8759fc55507d155f4eb9fa303cfecc59">red</a> = &quot;\033[1;31m&quot;</td></tr>
<tr class="separator:a8759fc55507d155f4eb9fa303cfecc59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac12598cc2108fbc1e3ba8d1c3c92bb12"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac12598cc2108fbc1e3ba8d1c3c92bb12">green</a> = &quot;\033[1;32m&quot;</td></tr>
<tr class="separator:ac12598cc2108fbc1e3ba8d1c3c92bb12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acee835767e8d4be32f5ad94a2e90a45f"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acee835767e8d4be32f5ad94a2e90a45f">yellow</a> = &quot;\033[1;33m&quot;</td></tr>
<tr class="separator:acee835767e8d4be32f5ad94a2e90a45f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19b2b376a1bda5b375eca394cff7f129"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a19b2b376a1bda5b375eca394cff7f129">blue</a> = &quot;\033[1;34m&quot;</td></tr>
<tr class="separator:a19b2b376a1bda5b375eca394cff7f129"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae70ea9d1800f7ec86a2db16c71c42e21"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae70ea9d1800f7ec86a2db16c71c42e21">normal</a> = &quot;\033[0m&quot;</td></tr>
<tr class="separator:ae70ea9d1800f7ec86a2db16c71c42e21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a007ca25767fb63a9b52010d40c8888df"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a007ca25767fb63a9b52010d40c8888df">hVal</a> [<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td></tr>
<tr class="separator:a007ca25767fb63a9b52010d40c8888df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eb8f9135e86a8fd55d2293c4fe7b811"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6eb8f9135e86a8fd55d2293c4fe7b811">maxVal</a> [<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td></tr>
<tr class="separator:a6eb8f9135e86a8fd55d2293c4fe7b811"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d7409371f9cf6d7f50a3fda440d871a"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0d7409371f9cf6d7f50a3fda440d871a">chargeVal</a> [<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td></tr>
<tr class="separator:a0d7409371f9cf6d7f50a3fda440d871a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a010272f11ab71479f636c0327b5843a8"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a010272f11ab71479f636c0327b5843a8">aSymb</a> [<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td></tr>
<tr class="separator:a010272f11ab71479f636c0327b5843a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b7de377338f7ac7700315efbba80ae2"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1b7de377338f7ac7700315efbba80ae2">exactAtom</a> [<a class="el" href="mcdlutil_8cpp.shtml#a7ffe7fc7e736af081960c465f69ef483">NEXACTATOMS</a>] ={6,14,5,50,82,8,16,34,52,7,15,33,51,9,17,35,53,32,13,26,80}</td></tr>
<tr class="separator:a1b7de377338f7ac7700315efbba80ae2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e4dd9241c1923f5a16e445d29e040e2"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6e4dd9241c1923f5a16e445d29e040e2">alkaly</a> [<a class="el" href="mcdlutil_8cpp.shtml#a48e4435fb9f690b15622b29bc8dedd0c">NALKALYATOMS</a>] ={3,11,19,37,55}</td></tr>
<tr class="separator:a6e4dd9241c1923f5a16e445d29e040e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67d14372d5486c87fba4d1347e98677c"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a67d14372d5486c87fba4d1347e98677c">alkalyEarth</a> [<a class="el" href="mcdlutil_8cpp.shtml#a872205065d27bc64f10fb497c818c8a7">NALKALYEARTHATOMS</a>] ={4,12,20,38,56}</td></tr>
<tr class="separator:a67d14372d5486c87fba4d1347e98677c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37351982a79ec5e7505f20f8d706dd0f"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a37351982a79ec5e7505f20f8d706dd0f">trivalent</a> [<a class="el" href="mcdlutil_8cpp.shtml#a58a7e37667a2f3a678d1e59b2a2111f9">NTRIVALENTATOMS</a>] ={21,31,39,49,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,81,89,90,91,92,93,94,95,96,97,98,99}</td></tr>
<tr class="separator:a37351982a79ec5e7505f20f8d706dd0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c1f49db7daefd6995a8bd194e3ac0ef"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a2c1f49db7daefd6995a8bd194e3ac0ef">titan</a> [<a class="el" href="mcdlutil_8cpp.shtml#a5508a6cb46c0b6cc2ea64303849fd4a5">NTITANATOMS</a>] ={22,40,72}</td></tr>
<tr class="separator:a2c1f49db7daefd6995a8bd194e3ac0ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5ecc60b7d1b91afa310c0c6379b909c"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac5ecc60b7d1b91afa310c0c6379b909c">vanadium</a> [<a class="el" href="mcdlutil_8cpp.shtml#a82fbde161179ca7f0617c5fefd2a071c">NVANADIUMATOMS</a>] ={23,41,73}</td></tr>
<tr class="separator:ac5ecc60b7d1b91afa310c0c6379b909c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18359deca081005601d5e234fee87a5f"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a18359deca081005601d5e234fee87a5f">cromium</a> [<a class="el" href="mcdlutil_8cpp.shtml#aa67c30859a368ea1defae5565b50f3e0">NCHROMIUMATOMS</a>] ={24,42,74}</td></tr>
<tr class="separator:a18359deca081005601d5e234fee87a5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b27e665d816bd4edca018692a03ee1e"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a6b27e665d816bd4edca018692a03ee1e">manganeze</a> [<a class="el" href="mcdlutil_8cpp.shtml#a501e6d1bd9f7873d1bb72f2a71cc15ce">NMANGANESEATOMS</a>] ={25,43,75}</td></tr>
<tr class="separator:a6b27e665d816bd4edca018692a03ee1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e38b8674bb78cdd93818c4f569d3317"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1e38b8674bb78cdd93818c4f569d3317">likeFe</a> [<a class="el" href="mcdlutil_8cpp.shtml#a36acc5511debbea03e32f1ae03a17b48">NLIKEFEATOMS</a>] ={27,28}</td></tr>
<tr class="separator:a1e38b8674bb78cdd93818c4f569d3317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab280567064a5940906303e0f95b673d3"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ab280567064a5940906303e0f95b673d3">platinum</a> [<a class="el" href="mcdlutil_8cpp.shtml#ac786f1cc241f058986478cfb37f50b57">NPLATINUMATOMS</a>] ={44,45,46,76,77,78}</td></tr>
<tr class="separator:ab280567064a5940906303e0f95b673d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af395a23311a093c6c9ba174c91bb00fe"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af395a23311a093c6c9ba174c91bb00fe">copper</a> [<a class="el" href="mcdlutil_8cpp.shtml#a451ca54d622a1cc0d32fdc103ff77338">NCOPPERATOMS</a>] ={29,47,79}</td></tr>
<tr class="separator:af395a23311a093c6c9ba174c91bb00fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a790d50110edd641cf164ef702acd67c2"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a790d50110edd641cf164ef702acd67c2">zink</a> [<a class="el" href="mcdlutil_8cpp.shtml#ac8284cff038b3455ed115bcf74bb0122">NZINKATOMS</a>] ={30,48}</td></tr>
<tr class="separator:a790d50110edd641cf164ef702acd67c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32e0599f9cf6f751a89279c86f703e47"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a32e0599f9cf6f751a89279c86f703e47">possibleAromatic</a> [<a class="el" href="mcdlutil_8cpp.shtml#af66f1fab611680bd48537fb317d9c225">NAROMMAX</a>] = {7,8,15,16,33,34,51,52,<a class="el" href="mcdlutil_8cpp.shtml#aee2b0b6b8f5adcce54aacc558c652e31">HETERO_ATOM</a>}</td></tr>
<tr class="separator:a32e0599f9cf6f751a89279c86f703e47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a174dbce034c042d7961ad4b02dd4f344"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a174dbce034c042d7961ad4b02dd4f344">metals</a> [<a class="el" href="mcdlutil_8cpp.shtml#ad07d3b873121463218a991d53512e49b">NMETALS</a>]</td></tr>
<tr class="separator:a174dbce034c042d7961ad4b02dd4f344"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6724f0a1ae8f22fa59505cb00498565"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aa6724f0a1ae8f22fa59505cb00498565">lightMetals</a> [<a class="el" href="mcdlutil_8cpp.shtml#a557a6e4a20d0daa8b65d48d2ef425c78">NLIGHT_METALS</a>]</td></tr>
<tr class="separator:aa6724f0a1ae8f22fa59505cb00498565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dddb327de910ca9d524dc76a68090a3"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a1dddb327de910ca9d524dc76a68090a3">heavyMetals</a> [<a class="el" href="mcdlutil_8cpp.shtml#a655e49a57b3dae59dbe998a069ff04a3">NHEAVY_METALS</a>]</td></tr>
<tr class="separator:a1dddb327de910ca9d524dc76a68090a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb826f58b78c49d8732fb29a0b325f9e"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#acb826f58b78c49d8732fb29a0b325f9e">halogens</a> [<a class="el" href="mcdlutil_8cpp.shtml#a02988c313a14255f7b3de2da2829297d">NHALOGENS</a>] = {9,17,35,53,85}</td></tr>
<tr class="separator:acb826f58b78c49d8732fb29a0b325f9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec7f886140fb13e79a6823f3bf78b5cf"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#aec7f886140fb13e79a6823f3bf78b5cf">hetero</a> [<a class="el" href="mcdlutil_8cpp.shtml#aa2ef2f0ee4eac39c772a2a7c1206a48a">NHETERO</a>] = {7,8,14,15,16,33,34,51,52,84}</td></tr>
<tr class="separator:aec7f886140fb13e79a6823f3bf78b5cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1e24d8c0684f30e0835a9ca5cf6d1b9"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ac1e24d8c0684f30e0835a9ca5cf6d1b9">strData</a> [<a class="el" href="mcdlutil_8cpp.shtml#aa063d5a8bb171f7d93a12d6b76170b52">NDATABASE_MOLECULES</a>]</td></tr>
<tr class="separator:ac1e24d8c0684f30e0835a9ca5cf6d1b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4e78cb542837e6c77dcd5da5765833f"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#af4e78cb542837e6c77dcd5da5765833f">bondValence</a> [<a class="el" href="mcdlutil_8cpp.shtml#ac4b0fa8174febff48a34ee9992350051">NBONDTYPES</a>] = {1,2,3,1,1,0,0,0,1,1,1}</td></tr>
<tr class="separator:af4e78cb542837e6c77dcd5da5765833f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fc4e404ce6dc298048b5bdf5deb3124"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a8fc4e404ce6dc298048b5bdf5deb3124">fsastart</a> =&quot;{SA:&quot;</td></tr>
<tr class="separator:a8fc4e404ce6dc298048b5bdf5deb3124"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d29a62c474c707d84973a8ecb1f62a3"><td class="memItemLeft" align="right" valign="top">const string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a5d29a62c474c707d84973a8ecb1f62a3">fsbstart</a> =&quot;{SB:&quot;</td></tr>
<tr class="separator:a5d29a62c474c707d84973a8ecb1f62a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0afcf921bfdabceef6c6cf00836ae203"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0afcf921bfdabceef6c6cf00836ae203">SwabInt</a> = (<a class="el" href="namespaceOpenBabel.shtml#a0cc646b14fcc04a16103f6bd73382d17">STPTR</a>[0]!=0)</td></tr>
<tr class="separator:a0afcf921bfdabceef6c6cf00836ae203"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19c1a2a80cf2af5131ca597d0ce38192"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a19c1a2a80cf2af5131ca597d0ce38192">Roots</a> [4]</td></tr>
<tr class="separator:a19c1a2a80cf2af5131ca597d0ce38192"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a899603d242263c2425f7d5be47f341"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0a899603d242263c2425f7d5be47f341">SmartsImplicitRef</a> = -9999</td></tr>
<tr class="separator:a0a899603d242263c2425f7d5be47f341"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a856b116adc145026ec1c182e9145c818"><td class="memItemLeft" align="right" valign="top">POINT_GROUP&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a856b116adc145026ec1c182e9145c818">PointGroups</a> []</td></tr>
<tr class="separator:a856b116adc145026ec1c182e9145c818"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adddfd42867b5aaa0caaa3a793a8f69e2"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#adddfd42867b5aaa0caaa3a793a8f69e2">primes</a> [<a class="el" href="rand_8cpp.shtml#ae6ffcd9369ff18ef49289892395d0558">MAXPRIMES</a>]</td></tr>
<tr class="separator:adddfd42867b5aaa0caaa3a793a8f69e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5fd3b39a867e164de9f433a78d9d09f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBRingTyper.shtml">OBRingTyper</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae5fd3b39a867e164de9f433a78d9d09f">ringtyper</a></td></tr>
<tr class="separator:ae5fd3b39a867e164de9f433a78d9d09f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3c640db1cce9cd703ef7c5429de5453"><td class="memItemLeft" align="right" valign="top">static int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#ae3c640db1cce9cd703ef7c5429de5453">SINT</a> = 0x00000001</td></tr>
<tr class="separator:ae3c640db1cce9cd703ef7c5429de5453"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cc646b14fcc04a16103f6bd73382d17"><td class="memItemLeft" align="right" valign="top">static unsigned char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a0cc646b14fcc04a16103f6bd73382d17">STPTR</a> = (unsigned char*)&amp;<a class="el" href="namespaceOpenBabel.shtml#ae3c640db1cce9cd703ef7c5429de5453">SINT</a></td></tr>
<tr class="separator:a0cc646b14fcc04a16103f6bd73382d17"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3463c4c11680aefbcce3a25305211efa"><td class="memItemLeft" align="right" valign="top">static SpaceGroups&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceOpenBabel.shtml#a3463c4c11680aefbcce3a25305211efa">_SpaceGroups</a></td></tr>
<tr class="separator:a3463c4c11680aefbcce3a25305211efa"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Global namespace for all Open Babel code. </p>
</div><h2 class="groupheader">Typedef Documentation</h2>
<a id="ac0863bf2485bd66ba3afa6e50ddc20f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac0863bf2485bd66ba3afa6e50ddc20f6">&sect;&nbsp;</a></span>OBNodeBase</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> <a class="el" href="namespaceOpenBabel.shtml#ac0863bf2485bd66ba3afa6e50ddc20f6">OBNodeBase</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OBNodeBase is declared for backwards-compatibility with 2.0 and earlier code. </p>

</div>
</div>
<a id="a54495d3eb8f9749d0237e6bda59e0abe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54495d3eb8f9749d0237e6bda59e0abe">&sect;&nbsp;</a></span>OBBondIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A standard iterator over a vector of bonds. </p>

</div>
</div>
<a id="aed11ccd81d7abaccbdf10486a5ae0402"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed11ccd81d7abaccbdf10486a5ae0402">&sect;&nbsp;</a></span>OBAtomIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A standard iterator over a vector of atoms. </p>

</div>
</div>
<a id="ad5ca88aa35c43da1b791c7703ec8978d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5ca88aa35c43da1b791c7703ec8978d">&sect;&nbsp;</a></span>OBDataIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A standard iterator over vectors of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. ">OBGenericData</a> (e.g., inherited from <a class="el" href="classOpenBabel_1_1OBBase.shtml" title="Base Class. ">OBBase</a>) </p>

</div>
</div>
<a id="ad30fc0fda0a0c8a6f7d22b8202af0dce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad30fc0fda0a0c8a6f7d22b8202af0dce">&sect;&nbsp;</a></span>OBEdgeBase</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> <a class="el" href="namespaceOpenBabel.shtml#ad30fc0fda0a0c8a6f7d22b8202af0dce">OBEdgeBase</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>OBEdgeBase is declared for backwards-compatibility with 2.0 and earlier code. </p>

</div>
</div>
<a id="a8eff09d0456c2308e2afb34e824d9c33"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8eff09d0456c2308e2afb34e824d9c33">&sect;&nbsp;</a></span>Template</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct OpenBabel::Template Template</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Structure template for atomic patterns in residues for <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol. ">OBChainsParser</a>. </p>

</div>
</div>
<a id="a087fe4bdc2d57b56addb4b9fd7fc0415"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a087fe4bdc2d57b56addb4b9fd7fc0415">&sect;&nbsp;</a></span>RotorKey</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;int&gt; <a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ad5ae0fb6c3d3406efb549fbc9f8c26f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5ae0fb6c3d3406efb549fbc9f8c26f0">&sect;&nbsp;</a></span>RotorKeys</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="namespaceOpenBabel.shtml#a087fe4bdc2d57b56addb4b9fd7fc0415">RotorKey</a>&gt; <a class="el" href="namespaceOpenBabel.shtml#ad5ae0fb6c3d3406efb549fbc9f8c26f0">RotorKeys</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9e6627493ac696e72867261d976dcde7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e6627493ac696e72867261d976dcde7">&sect;&nbsp;</a></span>mapRotorEnergy</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::map&lt;std::vector&lt;int&gt;,double&gt; <a class="el" href="namespaceOpenBabel.shtml#a9e6627493ac696e72867261d976dcde7">mapRotorEnergy</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0bdf8334aad62a6bb7ad50f58060c9b6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bdf8334aad62a6bb7ad50f58060c9b6">&sect;&nbsp;</a></span>OBPairInteger</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt;int&gt; <a class="el" href="namespaceOpenBabel.shtml#a0bdf8334aad62a6bb7ad50f58060c9b6">OBPairInteger</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Store arbitrary key/value integer data like <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships. ">OBPairData</a>. </p>

</div>
</div>
<a id="a5ba6d4475315df1100427dc98074c087"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ba6d4475315df1100427dc98074c087">&sect;&nbsp;</a></span>OBPairFloatingPoint</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt;double&gt; <a class="el" href="namespaceOpenBabel.shtml#a5ba6d4475315df1100427dc98074c087">OBPairFloatingPoint</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Store arbitrary key/value floating point data like <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships. ">OBPairData</a>. </p>

</div>
</div>
<a id="a292afe6930530f12172ef452712fc5e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a292afe6930530f12172ef452712fc5e3">&sect;&nbsp;</a></span>OBPairBool</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="classOpenBabel_1_1OBPairTemplate.shtml">OBPairTemplate</a>&lt;bool&gt; <a class="el" href="namespaceOpenBabel.shtml#a292afe6930530f12172ef452712fc5e3">OBPairBool</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Store arbitrary key/value boolean data like <a class="el" href="classOpenBabel_1_1OBPairData.shtml" title="Used to store arbitrary text attribute/value relationships. ">OBPairData</a>. </p>

</div>
</div>
<a id="a06c88120c4ba657484c76994abad6ff9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06c88120c4ba657484c76994abad6ff9">&sect;&nbsp;</a></span>OBFreeGridPointIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="classOpenBabel_1_1OBFreeGridPoint.shtml">OBFreeGridPoint</a>*&gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#a06c88120c4ba657484c76994abad6ff9">OBFreeGridPointIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A standard iterator over a vector of FreeGridPoints. </p>

</div>
</div>
<a id="a8f32238b69be1e83980d0ff3a90b206f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f32238b69be1e83980d0ff3a90b206f">&sect;&nbsp;</a></span>Formatpos</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="group__plugins.shtml#ga8fac85f5497f873a2dd8734b47f0bdc0">OBPlugin::PluginIterator</a> <a class="el" href="namespaceOpenBabel.shtml#a8f32238b69be1e83980d0ff3a90b206f">Formatpos</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8df92ddf377e8839e49c4c1d4a617f1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8df92ddf377e8839e49c4c1d4a617f1e">&sect;&nbsp;</a></span>AtomExpr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union <a class="el" href="unionOpenBabel_1_1__AtomExpr.shtml">OpenBabel::_AtomExpr</a>  <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac7bd9a9f7066eb36f2cfa568d180cb80"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac7bd9a9f7066eb36f2cfa568d180cb80">&sect;&nbsp;</a></span>BondExpr</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union <a class="el" href="unionOpenBabel_1_1__BondExpr.shtml">OpenBabel::_BondExpr</a>  <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa52bc907b6b29c913a85671c48ff8ad7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa52bc907b6b29c913a85671c48ff8ad7">&sect;&nbsp;</a></span>OBResidueIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*&gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A standard iterator over a vector of residues. </p>

</div>
</div>
<a id="a434f394d0613a8ef6c119670ff49710f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a434f394d0613a8ef6c119670ff49710f">&sect;&nbsp;</a></span>OBRotorIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::vector&lt;<a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a>*&gt;::iterator <a class="el" href="namespaceOpenBabel.shtml#a434f394d0613a8ef6c119670ff49710f">OBRotorIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>A standard iterator over a vector of rotors. </p>

</div>
</div>
<a id="a7ae0ba0c317c360c22eaa4b481e2dc87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7ae0ba0c317c360c22eaa4b481e2dc87">&sect;&nbsp;</a></span>transform3dIterator</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef std::list&lt;<a class="el" href="classOpenBabel_1_1transform3d.shtml">transform3d</a>*&gt;::const_iterator <a class="el" href="namespaceOpenBabel.shtml#a7ae0ba0c317c360c22eaa4b481e2dc87">transform3dIterator</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abcd91e4b018d533740f00f35ae44e4f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcd91e4b018d533740f00f35ae44e4f3">&sect;&nbsp;</a></span>ByteCode</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef union OpenBabel::_ByteCode  <a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Chemical graph matching virtual machine. </p>

</div>
</div>
<a id="a84aaa93d3e94f64164e85131f205e919"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a84aaa93d3e94f64164e85131f205e919">&sect;&nbsp;</a></span>adjustedlist</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef struct OpenBabel::adjustedlist  adjustedlist</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0d21f9052f92a540c18774a49739b025"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d21f9052f92a540c18774a49739b025">&sect;&nbsp;</a></span>neighbourlist</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="namespaceOpenBabel.shtml#a84aaa93d3e94f64164e85131f205e919">adjustedlist</a> <a class="el" href="namespaceOpenBabel.shtml#a0d21f9052f92a540c18774a49739b025">neighbourlist</a></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a87d90c5296e904e126b8520e1daacc14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87d90c5296e904e126b8520e1daacc14">&sect;&nbsp;</a></span>DataOrigin</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a87d90c5296e904e126b8520e1daacc14a08e68258d108979edaae8bed94e25048"></a>any&#160;</td><td class="fielddoc"><p>Undefined or unspecified (default) </p>
</td></tr>
<tr><td class="fieldname"><a id="a87d90c5296e904e126b8520e1daacc14a887e83e320499ec89236722bbdf56f50"></a>fileformatInput&#160;</td><td class="fielddoc"><p>Read from an input file. </p>
</td></tr>
<tr><td class="fieldname"><a id="a87d90c5296e904e126b8520e1daacc14a928a3db32b4975c3d42d0ca5d8d9f44d"></a>userInput&#160;</td><td class="fielddoc"><p>Added by the user. </p>
</td></tr>
<tr><td class="fieldname"><a id="a87d90c5296e904e126b8520e1daacc14ab1c8706dce6832c9ce173260ba2bf392"></a>perceived&#160;</td><td class="fielddoc"><p>Perceived by Open Babel library methods. </p>
</td></tr>
<tr><td class="fieldname"><a id="a87d90c5296e904e126b8520e1daacc14a6aef01ed9b1c198e6944f87e370f00b2"></a>external&#160;</td><td class="fielddoc"><p>Added by an external program. </p>
</td></tr>
<tr><td class="fieldname"><a id="a87d90c5296e904e126b8520e1daacc14a140dc6ce49ef5aee319af1854c3dad23"></a>local&#160;</td><td class="fielddoc"><p>Not for routine external use (e.g. in sdf or cml properties) </p>
</td></tr>
</table>

</div>
</div>
<a id="aa88341c74a59194a8884e929f97b87b8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa88341c74a59194a8884e929f97b87b8">&sect;&nbsp;</a></span>atomreftype</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545"></a>output&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528"></a>input&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="aa88341c74a59194a8884e929f97b87b8a103458136e7028a1a9b7349e64967810"></a>calcvolume&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="ad5725304290545e0b3b549501893ce2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5725304290545e0b3b549501893ce2f">&sect;&nbsp;</a></span>score_t</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#ad5725304290545e0b3b549501893ce2f">score_t</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ad5725304290545e0b3b549501893ce2fa18f893264a00711081b62de694f99db4"></a>Undefined&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ad5725304290545e0b3b549501893ce2fa39cfa0b4108a78db97edfb547ad3af91"></a>PLP&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ad5725304290545e0b3b549501893ce2fae5edd6b49548b767c8b120ad2640b28c"></a>ChemScore&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="ac39166fa6f7c8df04002d2a94043d74c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac39166fa6f7c8df04002d2a94043d74c">&sect;&nbsp;</a></span>HydrogenType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74c">HydrogenType</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ac39166fa6f7c8df04002d2a94043d74cabe1ce09c84714b0a9be0755e9c79c024"></a>AllHydrogen&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ac39166fa6f7c8df04002d2a94043d74caa3d3ec6d4feccb909e375261fc5e747a"></a>PolarHydrogen&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="ac39166fa6f7c8df04002d2a94043d74caf4f0a00a8690e1ea23a90fac8d818e47"></a>NonPolarHydrogen&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="acf195409ac7024002db5c178f20862d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf195409ac7024002db5c178f20862d9">&sect;&nbsp;</a></span>obMessageLevel</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#acf195409ac7024002db5c178f20862d9">obMessageLevel</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Levels of error and audit messages to allow filtering. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="acf195409ac7024002db5c178f20862d9afbf66ee4ae8ad04bc5003a16aa9b2b77"></a>obError&#160;</td><td class="fielddoc"><p>for critical errors (e.g., cannot read a file) </p>
</td></tr>
<tr><td class="fieldname"><a id="acf195409ac7024002db5c178f20862d9a600e966aac7d34fec05f2067eb6b989b"></a>obWarning&#160;</td><td class="fielddoc"><p>for non-critical problems (e.g., molecule appears empty) </p>
</td></tr>
<tr><td class="fieldname"><a id="acf195409ac7024002db5c178f20862d9a8239e6e8daa5c812be192e6447979814"></a>obInfo&#160;</td><td class="fielddoc"><p>for informative messages (e.g., file is a non-standard format) </p>
</td></tr>
<tr><td class="fieldname"><a id="acf195409ac7024002db5c178f20862d9afca370a4ce993c0a266c7d120c3a6310"></a>obAuditMsg&#160;</td><td class="fielddoc"><p>for messages auditing methods which destroy or perceive molecular data (e.g., kekulization, atom typing, etc.) </p>
</td></tr>
<tr><td class="fieldname"><a id="acf195409ac7024002db5c178f20862d9afd56eb19b254da4133c9c28f7cccf5ce"></a>obDebug&#160;</td><td class="fielddoc"><p>for messages only useful for debugging purposes </p>
</td></tr>
</table>

</div>
</div>
<a id="a91e6912277f7537a670952698f7b2d82"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91e6912277f7537a670952698f7b2d82">&sect;&nbsp;</a></span>errorQualifier</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceOpenBabel.shtml#a91e6912277f7537a670952698f7b2d82">errorQualifier</a></td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a91e6912277f7537a670952698f7b2d82a94bec3e41bc9810307020aaae030baa5"></a>always&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a91e6912277f7537a670952698f7b2d82ae7f48063a6bfea08184eda6c5eba743b"></a>onceOnly&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="a80155586fa275b28773c9b203f52caba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a80155586fa275b28773c9b203f52caba">&sect;&nbsp;</a></span>anonymous enum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a80155586fa275b28773c9b203f52cabaa9ec83f377b3c4e2b987789c1f273a8a3"></a>SPACE_GROUP_ID&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a80155586fa275b28773c9b203f52cabaa732f4d3d79b99f8b9364cfc16e8003e6"></a>SPACE_GROUP_HALL&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a80155586fa275b28773c9b203f52cabaac6dbb396b7703e533fee3676da46fec7"></a>SPACE_GROUP_HM&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a80155586fa275b28773c9b203f52cabaa6150efae0567911e2f8c49bacdce6ffa"></a>SPACE_GROUP_TRANSFORM&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<a id="a6b7b47dd702d9e331586d485013fd1ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b7b47dd702d9e331586d485013fd1ea">&sect;&nbsp;</a></span>anonymous enum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">anonymous enum</td>
        </tr>
      </table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a6b7b47dd702d9e331586d485013fd1eaa9d4d8b0b72fc2659da772d761a3c5ecb"></a>Left&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6b7b47dd702d9e331586d485013fd1eaad48f7af8c070184f3774c8e85854eb66"></a>Right&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6b7b47dd702d9e331586d485013fd1eaa57a7edcbc04d6175683383cad5c3e0a2"></a>Up&#160;</td><td class="fielddoc"></td></tr>
<tr><td class="fieldname"><a id="a6b7b47dd702d9e331586d485013fd1eaabcf8c79e9a5f5f9d606fb35645a0fb27"></a>Down&#160;</td><td class="fielddoc"></td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a456fbf388c19a1a63a95fe60d28dd869"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a456fbf388c19a1a63a95fe60d28dd869">&sect;&nbsp;</a></span>OBReleaseVersion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OBReleaseVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the version of the Open Babel library for feature-detection (e.g. "2.3.1") </dd></dl>

</div>
</div>
<a id="aeb3b137500bda8573ee1aa5757011a66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb3b137500bda8573ee1aa5757011a66">&sect;&nbsp;</a></span>Tanimoto()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Tanimoto </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The Tanimoto coefficient, which may be regarded as the proportion of the "on-bits" which are shared. </p>
<p>The Tanimoto coefficient may be regarded as the proportion of the "on-bits" which are shared. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>the first bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>the second bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the ratio of shared bits to bits which either vector has set. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a4ffe45da1e2dd403bf6b51364717d2a6">OBFingerprint::DescribeBits()</a>, <a class="el" href="classOpenBabel_1_1FastSearch.shtml#aff36c0fb2899c7d30277788ddc536340">FastSearch::FindSimilar()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="a62d602f9ffb93ae1f37c2d3bbf010d77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62d602f9ffb93ae1f37c2d3bbf010d77">&sect;&nbsp;</a></span>CanonicalLabels()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CanonicalLabels </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symmetry_classes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>canonical_labels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em> = <code><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>maxSeconds</em> = <code>5</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>onlyOne</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Calculate the canonical labels for the molecule. Stereochemistry is included in the algorithm and the canonical labels. The result will be stored in <code>canonical_labels</code>.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">mol</td><td>The molecule. </td></tr>
    <tr><td class="paramname">symmetry_classes</td><td>The symmetry_classes for the molecule. These can be obtained using the <a class="el" href="classOpenBabel_1_1OBGraphSym.shtml" title="Handle and perceive graph symmtery for canonical numbering . ">OBGraphSym</a> class. </td></tr>
    <tr><td class="paramname">canonical_labels</td><td>Reference to the object to store the results in. </td></tr>
    <tr><td class="paramname">mask</td><td>The fragment to label. When the bit for an atom is set, it is included in the fragment. If no bits are set, all atoms will be included. Atoms are indexed from 1 (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a44b77545e83209582e42f375c8f40474">OBAtom::GetIdx()</a>). </td></tr>
    <tr><td class="paramname">maxSeconds</td><td>Timeout in seconds. </td></tr>
    <tr><td class="paramname">onlyOne</td><td>If true, the first found labels are returned. These are canonical labels without considering stereochemistry and other attributes not included in the symmetry classes.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The canonical labels for the molecule in <code>canonical_labels</code>.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="canonical_code_algorithm.shtml">Canonical Coding Algorithm</a> </dd></dl>
<dl class="section since"><dt>Since</dt><dd>2.3 </dd></dl>

<p>Referenced by <a class="el" href="graphsym_8cpp.shtml#a74f115409a34be67333b0bc9aa3075a0">print_sym_classes()</a>.</p>

</div>
</div>
<a id="af4c135379236431c7436651de978ef32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4c135379236431c7436651de978ef32">&sect;&nbsp;</a></span>GraphPotentials()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GraphPotentials </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>pot</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the Graph Potentials of a molecule. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000026">Deprecated:</a></b></dt><dd></dd></dl>
<p>based on V.E. and Rozenblit, A.B. Golender <em>Logical and Combinatorial Algorithms for Drug Design</em>. <br />
For an example see: Walters, W. P., Yalkowsky, S. H., <em>JCICS</em>, 1996, 36(5), 1015-1017. <a href="http://dx.doi.org/10.1021/ci950278o">DOI: 10.1021/ci950278o</a> </p>

</div>
</div>
<a id="a49d9094d3843107b37a072e7e4597fc3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49d9094d3843107b37a072e7e4597fc3">&sect;&nbsp;</a></span>construct_g_matrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void construct_g_matrix </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000027">Deprecated:</a></b></dt><dd></dd></dl>
<p>Construct the matrix G, which puts each atoms valence+1 on the diagonal and and -1 on the off diagonal if two atoms are connected. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a id="ae050b0cbe133308c07688d2438155504"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae050b0cbe133308c07688d2438155504">&sect;&nbsp;</a></span>construct_c_matrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void construct_c_matrix </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000028">Deprecated:</a></b></dt><dd></dd></dl>
<p>Construct the matrix C, which is simply a column vector consisting of the valence for each atom </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a id="ac8f591b34d70fd0063b836ddf6d8cdbc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8f591b34d70fd0063b836ddf6d8cdbc">&sect;&nbsp;</a></span>CalcSignedVolume()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcSignedVolume </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ReZeroZ</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000029">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>
<p>Calculate the signed volume for an atom. If the atom has a valence of 3 the coordinates of an attached hydrogen are calculated Puts attached Hydrogen last at the moment, like mol V3000 format. If ReZero=false (the default is true) always make pseudo z coords and leave them in mol </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">GetChirality()</a>.</p>

</div>
</div>
<a id="a07c3e3dff340f78121cc2c15da53cdb2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07c3e3dff340f78121cc2c15da53cdb2">&sect;&nbsp;</a></span>signed_volume()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double signed_volume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate a signed volume given a set of 4 coordinates. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000030">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>.</p>

</div>
</div>
<a id="ad7009a91e72c28783be5346611efde3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad7009a91e72c28783be5346611efde3e">&sect;&nbsp;</a></span>GetChirality()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetChirality </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>chirality</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000031">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

</div>
</div>
<a id="a7483e613b770424c7f1ff797900b9987"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7483e613b770424c7f1ff797900b9987">&sect;&nbsp;</a></span>GetParity4Ref()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetParity4Ref </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt;&#160;</td>
          <td class="paramname"><em>pref</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000032">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">CorrectChirality()</a>.</p>

</div>
</div>
<a id="abefbf418290927a56b3d124d3cc646d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abefbf418290927a56b3d124d3cc646d7">&sect;&nbsp;</a></span>CorrectChirality()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CorrectChirality </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a>&#160;</td>
          <td class="paramname"><em>i</em> = <code><a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8a37943061a284187ff6e555ac7093f528">input</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8">atomreftype</a>&#160;</td>
          <td class="paramname"><em>o</em> = <code><a class="el" href="namespaceOpenBabel.shtml#aa88341c74a59194a8884e929f97b87b8ae6eb596f7e638118128651043ff38545">output</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000033">Deprecated:</a></b></dt><dd>Use new <a class="el" href="group__stereo.shtml">Stereochemistry</a> classes. </dd></dl>

</div>
</div>
<a id="a632be87a51811b515f7e9a5fc18e4476"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a632be87a51811b515f7e9a5fc18e4476">&sect;&nbsp;</a></span>extract_thermochemistry()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool extract_thermochemistry </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OpenBabel::OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bVerbose</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>Nsymm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Nrotbonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>dbdt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>temperature</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>DeltaHf0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>DeltaHfT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>DeltaGfT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>DeltaSfT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>S0T</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>CVT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>CPT</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>Scomponents</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convenience function to extract thermochemistry from a molecule structure. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">mol</td><td>The molecule structure </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bVerbose</td><td>If true will print information </td></tr>
    <tr><td class="paramdir">[in,out]</td><td class="paramname">Nsymm</td><td>If not zero and differing from the rotational symmetry in the input molecule, corrections to the entropy and free energy will be applied. If zero will hold the symmetry number from the input molecule on return. </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">temperature</td><td>The temperature </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">DeltaHf0</td><td>Enthalpy of formation at T = 0 </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">DeltaHfT</td><td>Enthalpy of formation at T </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">DeltaGfT</td><td>Gibbs energy of formation at T </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">DeltaSfT</td><td>Entropy of formation at T </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">S0T</td><td>Standard entropy at T </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">CVT</td><td>Heat capacity at T and constant Volume </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">Scomponents</td><td>Translational, Rotational and Vibrational components of S0 </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if all values were found, false otherwise. </dd></dl>

</div>
</div>
<a id="aabfb2457435c6dd85d16016101b3e4d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabfb2457435c6dd85d16016101b3e4d7">&sect;&nbsp;</a></span>DoComparison()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::DoComparison </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>ch2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>val</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>filterval</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a5a775da37f5ce464013813ec66b3a349">OBDescriptor::Compare()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a00c8a88c0a36c9a1167b119214e015e6">OBDescriptor::CompareStringWithFilter()</a>.</p>

</div>
</div>
<a id="ab5741f7ec581130f899f17f4d9477aea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5741f7ec581130f899f17f4d9477aea">&sect;&nbsp;</a></span>print_matrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab323a3745c477d9eb4c796786db39075"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab323a3745c477d9eb4c796786db39075">&sect;&nbsp;</a></span>print_matrix_f()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac09eff5e59b6a7dd424dc71f4a37e464"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac09eff5e59b6a7dd424dc71f4a37e464">&sect;&nbsp;</a></span>print_matrix_ff()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void print_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3b2b9be34ace132aa9506d9ee043824f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3b2b9be34ace132aa9506d9ee043824f">&sect;&nbsp;</a></span>mult_matrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a id="a067494738d0f55b9df745866cdc3fe56"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a067494738d0f55b9df745866cdc3fe56">&sect;&nbsp;</a></span>mult_matrix_f()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a37830c949ab96aad9b5041a82895ba8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37830c949ab96aad9b5041a82895ba8e">&sect;&nbsp;</a></span>mult_matrix_ff()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool mult_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6e5ee2fd1515457cb4a6e9394a5a14ff"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e5ee2fd1515457cb4a6e9394a5a14ff">&sect;&nbsp;</a></span>invert_matrix()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>det</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">GraphPotentials()</a>.</p>

</div>
</div>
<a id="afb96cdaafd5073c2e806d36ec4e7eef4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb96cdaafd5073c2e806d36ec4e7eef4">&sect;&nbsp;</a></span>invert_matrix_f()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>det</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afa4aad5bde182eebe57cedcf1727b2fc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa4aad5bde182eebe57cedcf1727b2fc">&sect;&nbsp;</a></span>invert_matrix_ff()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool invert_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>det</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8580b3fa2a0435b2d073c22097d1d35e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8580b3fa2a0435b2d073c22097d1d35e">&sect;&nbsp;</a></span>convert_matrix_f() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab06c9b9e02affa91406755a0b9fb28e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab06c9b9e02affa91406755a0b9fb28e1">&sect;&nbsp;</a></span>convert_matrix_ff() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6b2a8069e01dd4287fb85f90a991972c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b2a8069e01dd4287fb85f90a991972c">&sect;&nbsp;</a></span>convert_matrix_f() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a050184ff6264447d6923e1be4df061b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a050184ff6264447d6923e1be4df061b3">&sect;&nbsp;</a></span>convert_matrix_ff() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8a3508df81e444f875d5f493a1bcbe28"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a3508df81e444f875d5f493a1bcbe28">&sect;&nbsp;</a></span>convert_matrix_ff_f()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_ff_f </td>
          <td>(</td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acbf2348ce7eae39aca355a630f06484c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acbf2348ce7eae39aca355a630f06484c">&sect;&nbsp;</a></span>convert_matrix_f_ff()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool convert_matrix_f_ff </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double **&#160;</td>
          <td class="paramname"><em>dst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cols</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a47053116206f7c8cf7b278aec7e35cb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47053116206f7c8cf7b278aec7e35cb1">&sect;&nbsp;</a></span>hydrogenValency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int hydrogenValency </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>na</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a id="aa51b217d32346d4f341a227be63de160"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa51b217d32346d4f341a227be63de160">&sect;&nbsp;</a></span>maxValency()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int maxValency </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>na</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a id="ad2919564689dee084f06b0eb433779cb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2919564689dee084f06b0eb433779cb">&sect;&nbsp;</a></span>alternate() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::alternate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>nH</em>[], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bondOrders</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a207029ffc607d34863546dddbe014d6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a207029ffc607d34863546dddbe014d6b">&sect;&nbsp;</a></span>alternate() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int alternate </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPosition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aCharge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aRad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nHydr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrders</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aec2830d51995ac9802efa4aad43121ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec2830d51995ac9802efa4aad43121ca">&sect;&nbsp;</a></span>generateDiagram() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void generateDiagram </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a id="a827934a434ef208e2644aecb679ec930"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a827934a434ef208e2644aecb679ec930">&sect;&nbsp;</a></span>generateDiagram() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void generateDiagram </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a742566d425db558fa968c725f8a708cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a742566d425db558fa968c725f8a708cc">&sect;&nbsp;</a></span>generateDiagram() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void generateDiagram </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a60aab5dcc934001076e5079960cb9be4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60aab5dcc934001076e5079960cb9be4">&sect;&nbsp;</a></span>fragmentSearch() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fragmentSearch </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>structure</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate()</a>.</p>

</div>
</div>
<a id="aa0561905f67fffeb3fae74b786fab642"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa0561905f67fffeb3fae74b786fab642">&sect;&nbsp;</a></span>fragmentSearch() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool fragmentSearch </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPositionQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1Query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2Query</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondTypesQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPositionStructure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1Structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2Structure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondTypesStructure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtomsQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBondsQuery</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtomsStructure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBondsStructure</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a16e9982dc3b96f14397fe55ede7b8f1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16e9982dc3b96f14397fe55ede7b8f1f">&sect;&nbsp;</a></span>equivalenceList() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void equivalenceList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Equivalence list generation. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a7c4949b74e6c96a325273701c53a599e">compareAtoms()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">intToStr()</a>.</p>

</div>
</div>
<a id="a6e78d25ada5c11fba4e216e1d782e5b7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e78d25ada5c11fba4e216e1d782e5b7">&sect;&nbsp;</a></span>equivalenceList() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void equivalenceList </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aPosition</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aCharge</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aRad</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondTypes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>eqList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adaa889d3747ea9e2ba1a83207556dce3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adaa889d3747ea9e2ba1a83207556dce3">&sect;&nbsp;</a></span>addFragment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void addFragment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>molecule</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>fragment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>molAN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fragAN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>molBN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fragBN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>isAddition</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate()</a>.</p>

</div>
</div>
<a id="abce282c45ee77ea965aaacd47b4e8d72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abce282c45ee77ea965aaacd47b4e8d72">&sect;&nbsp;</a></span>createStereoLists()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void createStereoLists </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a29e765f8943f7aa7b50aca9380196e96"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29e765f8943f7aa7b50aca9380196e96">&sect;&nbsp;</a></span>getAtomMCDL()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string getAtomMCDL </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ntatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>ix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aNumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>atomStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acd680ed8783717254f074205cd6b24a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd680ed8783717254f074205cd6b24a4">&sect;&nbsp;</a></span>getBondMCDL()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string getBondMCDL </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nbStore</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ntatoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>ix</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>aNumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bonds</em>[MAXBONDS][4], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondStereoList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>eqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3c50491b940d1a3d368bf7eba3bebfa1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c50491b940d1a3d368bf7eba3bebfa1">&sect;&nbsp;</a></span>implementAtomStereo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void implementAtomStereo </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>stereoBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; double &gt;&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>acount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bcount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>astereo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a417a2925a2ec60c86ff3edc04ce4142c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a417a2925a2ec60c86ff3edc04ce4142c">&sect;&nbsp;</a></span>implementBondStereo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void implementBondStereo </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>rx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>ry</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>acount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bcount</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>bstereo</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a23997cd29f45df86f90e4f7de02baccd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a23997cd29f45df86f90e4f7de02baccd">&sect;&nbsp;</a></span>groupRedraw()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int groupRedraw </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bondN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomN</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>atomNInGroup</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a82011594cefb0a924a4cc938800de614"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82011594cefb0a924a4cc938800de614">&sect;&nbsp;</a></span>canonizeMCDL()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int canonizeMCDL </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>atomBlock</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>structureList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6a41a690c691e47bc63facef0e2e449d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a41a690c691e47bc63facef0e2e449d">&sect;&nbsp;</a></span>parseFormula()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool parseFormula </td>
          <td>(</td>
          <td class="paramtype">const std::string&#160;</td>
          <td class="paramname"><em>formulaString</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>enumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>valency</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaa14c59df78025ce6e8dfd3f27feb106"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaa14c59df78025ce6e8dfd3f27feb106">&sect;&nbsp;</a></span>prepareTest()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void prepareTest </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a32ba50e0b43cb1dfdf1978d1e72099c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32ba50e0b43cb1dfdf1978d1e72099c5">&sect;&nbsp;</a></span>ThrowError() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deprecated: use the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a> class instead </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000092">Deprecated:</a></b></dt><dd>Throw an error through the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OpenBabel::OBMessageHandler</a> class </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">OBMol::NextInternalCoord()</a>.</p>

</div>
</div>
<a id="ac9aac27fe3b12d7201f8eb7cb95a3c57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac9aac27fe3b12d7201f8eb7cb95a3c57">&sect;&nbsp;</a></span>ThrowError() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ThrowError </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>str</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deprecated: use the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a> class instead </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000093">Deprecated:</a></b></dt><dd>Throw an error through the <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OpenBabel::OBMessageHandler</a> class </dd></dl>

</div>
</div>
<a id="aac15077eefb9e377d3c400f1f2273826"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac15077eefb9e377d3c400f1f2273826">&sect;&nbsp;</a></span>CartesianToInternal()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::CartesianToInternal </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert Cartesian XYZ to a set of <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates. ">OBInternalCoord</a> coordinates. </p>
<p>Use the supplied <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> and its Cartesian coordinates to generate a set of internal (z-matrix) coordinates as supplied in the vector&lt;OBInternalCoord*&gt; argument. Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#cartesianCoordinatesIntoZmatrixCoordinates">blue-obelisk:cartesianCoordinatesIntoZmatrixCoordinates</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af5afa8a0742e0238f3fd92ada82f079d">OBMol::GetInternalCoord()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">OBMol::NextInternalCoord()</a>.</p>

</div>
</div>
<a id="a3be6b6496e799b9308b6c1beb927c265"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3be6b6496e799b9308b6c1beb927c265">&sect;&nbsp;</a></span>InternalToCartesian()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::InternalToCartesian </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>vic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert set of <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml" title="Used to transform from z-matrix to cartesian coordinates. ">OBInternalCoord</a> coordinates into Cartesian XYZ. </p>
<p>Transform the supplied vector&lt;OBInternalCoord*&gt; into cartesian and update the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> accordingly. The size of supplied internal coordinate vector has to be the same as the number of atoms in molecule (+ NULL in the beginning). Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#zmatrixCoordinatesIntoCartesianCoordinates">blue-obelisk:zmatrixCoordinatesIntoCartesianCoordinates</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">OBMol::NextInternalCoord()</a>.</p>

</div>
</div>
<a id="ac1c62bdae6cf7a9195c470e7d0e29883"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1c62bdae6cf7a9195c470e7d0e29883">&sect;&nbsp;</a></span>NewExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string NewExtension </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>ext</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Utility function: replace the last extension in string &amp;src with new extension char *ext. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">OBMol::NextInternalCoord()</a>.</p>

</div>
</div>
<a id="a8aa7959b427e1c630f14732c2ad642c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8aa7959b427e1c630f14732c2ad642c8">&sect;&nbsp;</a></span>get_rmat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void get_rmat </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>rvec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7e02cd2874a2a4826c8587da507f62ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e02cd2874a2a4826c8587da507f62ef">&sect;&nbsp;</a></span>ob_make_rmat()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ob_make_rmat </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>mat</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>rmat</em>[9]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa7ec675d10f9071757b87d4952938b65">get_roots_3_3()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a751725f02bf62696515d79608198cd59">OBMol::ToInertialFrame()</a>.</p>

</div>
</div>
<a id="a594933a93529376dbae80405cf23afa8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a594933a93529376dbae80405cf23afa8">&sect;&nbsp;</a></span>qtrfit()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void qtrfit </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>u</em>[3][3]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2c5374c2c0b42dee2fd36cd475a3cb1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c5374c2c0b42dee2fd36cd475a3cb1c">&sect;&nbsp;</a></span>superimpose()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double superimpose </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a60625165cc16932d1c2f34976dbc54dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60625165cc16932d1c2f34976dbc54dd">&sect;&nbsp;</a></span>rotate_coords() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::rotate_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>m</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="a25d610b9255993505f2dbdd9690d068f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a25d610b9255993505f2dbdd9690d068f">&sect;&nbsp;</a></span>calc_rms()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double calc_rms </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>N</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the RMS deviation between the first N coordinates of *r and *f. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="aae157b7c5a3145dff9e938888d41d46f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae157b7c5a3145dff9e938888d41d46f">&sect;&nbsp;</a></span>ToUpper() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToUpper </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shift the supplied string to uppercase. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="a47cc993bd022dfca052b2b18f5cd89ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47cc993bd022dfca052b2b18f5cd89ea">&sect;&nbsp;</a></span>ToUpper() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToUpper </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>cptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shift the supplied char* to uppercase. </p>

</div>
</div>
<a id="a8e8df618618aa53bf4cf202b0230c7ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e8df618618aa53bf4cf202b0230c7ac">&sect;&nbsp;</a></span>ToLower() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToLower </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shift the supplied string to lowercase. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="a47e5132fa26acd9f575c6c34e6337348"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47e5132fa26acd9f575c6c34e6337348">&sect;&nbsp;</a></span>ToLower() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToLower </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>cptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shift the supplied char* to lowercase. </p>

</div>
</div>
<a id="ae254bae8e13592739edfdf24b917a943"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae254bae8e13592739edfdf24b917a943">&sect;&nbsp;</a></span>InvertCase() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::InvertCase </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="a02a81294407df471b68048bb2bcfd503"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a02a81294407df471b68048bb2bcfd503">&sect;&nbsp;</a></span>InvertCase() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void InvertCase </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>cptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shift the supplied char*: lowercase to upper, and upper to lower. </p>

</div>
</div>
<a id="ae7fd604c6cfd7cbb0067721106af8ca9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7fd604c6cfd7cbb0067721106af8ca9">&sect;&nbsp;</a></span>CleanAtomType()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CleanAtomType </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>"Clean" the supplied atom type </p>
<p>"Clean" the supplied atom type, shifting the first character to uppercase, the second character (if it's a letter) to lowercase, and terminating with a NULL to strip off any trailing characters </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="a4216f2e0672bf6a9ee72d3029838a213"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4216f2e0672bf6a9ee72d3029838a213">&sect;&nbsp;</a></span>OBCompareInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OBCompareInt </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Comparison &ndash; returns true if first parameter less than second </p><dl class="section return"><dt>Returns</dt><dd>True if <code>a</code> &lt; <code>b</code>, False otherwise. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="abb48ec7a1b3301248a1147cf2dbbe600"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abb48ec7a1b3301248a1147cf2dbbe600">&sect;&nbsp;</a></span>OBCompareUnsigned()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OBCompareUnsigned </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Comparison &ndash; returns true if first parameter less than second </p><dl class="section return"><dt>Returns</dt><dd>True if <code>a</code> &lt; <code>b</code>, False otherwise. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8f302cc167630d63e3ca5a4c4d86e41b">CreateNewClassVector()</a>, and <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="a362770307f86a3b9acd494d9ccbbcf51"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a362770307f86a3b9acd494d9ccbbcf51">&sect;&nbsp;</a></span>IsNear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNear </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>epsilon</em> = <code>2e-6</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison for doubles: returns fabs(a - b) &lt; epsilon. </p>
<p>"Safe" comparison for floats/doubles: returns fabs(a - b) &lt; epsilon This function really doesn't make any sense w.r.t. floating-point representation, so you should never use it. It is provided only for backwards compatibility. </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000063">Deprecated:</a></b></dt><dd>Use <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox()</a> instead </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml#af648d58ec31e39dff6af003f8e6b5ca4">OBConformerSearch::Search()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ab2cea937bb0224112a6f79758a099932">OBForceField::SteepestDescentTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a837dd6b4440b4fe77f23976bbdaa64a3">OBForceField::ValidateSteepestDescent()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a308e084198342c54de6f1fb695f23a6d">OBForceField::WeightedRotorSearch()</a>.</p>

</div>
</div>
<a id="a29e51098e105d63b04b5517299d1b772"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29e51098e105d63b04b5517299d1b772">&sect;&nbsp;</a></span>IsNearZero()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNearZero </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>epsilon</em> = <code>2e-6</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison for doubles: returns fabs(a) &lt; epsilon. </p>
<p>"Safe" comparison for floats/doubles: true if a is less than epsilon This function really doesn't make any sense w.r.t. floating-point representation, so you should never use it. It is provided only for backwards compatibility. </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000064">Deprecated:</a></b></dt><dd></dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6d6d9bdda3f480d358c14b2010034d41">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">OBMol::Has2D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">OBMol::Has3D()</a>, <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a735079ca73080f12512074483776d7ef">OBForceField::Newton2NumLineSearch()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a66aab9d4399b8502d330872181f51429">OBForceField::VectorAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#af031c62775e4d3374c0504d7af515ee0">OBForceField::VectorOOP()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5a156d1eea0507509cbb7f245999a31b">OBForceField::VectorTorsion()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a id="a227ab5b29e8122dd6d8ac76d2b58778a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a227ab5b29e8122dd6d8ac76d2b58778a">&sect;&nbsp;</a></span>IsNan()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsNan </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Comparison for nan (not a number) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a00c8a88c0a36c9a1167b119214e015e6">OBDescriptor::CompareStringWithFilter()</a>, and <a class="el" href="classOpenBabel_1_1OBSqrtTbl.shtml#a01dd1b037ecbe7bd8d23b50689fa6b50">OBSqrtTbl::Init()</a>.</p>

</div>
</div>
<a id="ae3802301a4e7c389095313a77861a959"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3802301a4e7c389095313a77861a959">&sect;&nbsp;</a></span>IsNegligible()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::IsNegligible </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>precision</em> = <code>1e-11</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>true if <em>a</em> is much smaller than <em>b</em>. More precisely: <div class="fragment"><div class="line"><span class="keywordflow">return</span>( fabs(a) &lt;= precision * fabs(b) );</div></div><!-- fragment --> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#a7da2d388ded31320b18e7bb51fa4cf76">vector3::createOrthoVector()</a>, and <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a7738d934d2d55c2cd52e21a8f695e4cf">matrix3x3::isDiagonal()</a>.</p>

</div>
</div>
<a id="af464b3279bc3db8c58ca552ddb0e8e79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af464b3279bc3db8c58ca552ddb0e8e79">&sect;&nbsp;</a></span>IsApprox()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::IsApprox </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>precision</em> = <code>1e-11</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Safe comparison for floats/doubles: true if fabs(a - b) &lt;= precision * std::min( fabs(a), fabs(b) ) The parameter precision plays the role of 10^-N where N is the number of significant digits to consider. This is the correct way to replace operator== for doubles. For new code, use this function instead of the old <a class="el" href="namespaceOpenBabel.shtml#a362770307f86a3b9acd494d9ccbbcf51" title="Comparison for doubles: returns fabs(a - b) &lt; epsilon. ">IsNear()</a> function.</p>
<dl class="section note"><dt>Note</dt><dd>To check if x is zero, use <div class="fragment"><div class="line"><a class="code" href="namespaceOpenBabel.shtml#ae3802301a4e7c389095313a77861a959">IsNegligible</a>( x, 1.0)</div></div><!-- fragment --> instead of <div class="fragment"><div class="line"><a class="code" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox</a>( x, 0.0 )</div></div><!-- fragment --> </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a4e1c320f73909c95b6b0b68b726b8a78">OBUnitCell::GetLatticeType()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#ac7f567b85d822b28a4578e974758b2ce">matrix3x3::isSymmetric()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#afdd6a101107d0d44f6a53dcb4479f43f">matrix3x3::isUnitMatrix()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ab7c3fdae52a4c4bc27354cb2411028e4">vector3::operator!=()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="a470b9e69978e49f27b85b48077bd7c72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a470b9e69978e49f27b85b48077bd7c72">&sect;&nbsp;</a></span>IsApprox_pos()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::IsApprox_pos </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>precision</em> = <code>1e-11</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Same as <a class="el" href="namespaceOpenBabel.shtml#af464b3279bc3db8c58ca552ddb0e8e79">IsApprox()</a>, but only for positive numbers. Faster. </p>

</div>
</div>
<a id="a95b1c21368d148cb45ac6f604984c357"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95b1c21368d148cb45ac6f604984c357">&sect;&nbsp;</a></span>CanBeSquared()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CanBeSquared </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tests whether its argument can be squared without triggering an overflow or underflow. </p>
<p>Tests whether its argument can be squared without triggering an overflow or underflow. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#a5b2fe218819d898082c29c21cf962572">vector3::CanBeNormalized()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a470b9e69978e49f27b85b48077bd7c72">IsApprox_pos()</a>.</p>

</div>
</div>
<a id="a1e68658ca81568e214ebedb8f6c4bd10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e68658ca81568e214ebedb8f6c4bd10">&sect;&nbsp;</a></span>SafeOpen() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Safely open the supplied filename and return an ifstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a> error log if it fails. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a470b9e69978e49f27b85b48077bd7c72">IsApprox_pos()</a>.</p>

</div>
</div>
<a id="a0d523299532d6b282919923e731771ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d523299532d6b282919923e731771ee">&sect;&nbsp;</a></span>SafeOpen() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ofstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Safely open the supplied filename and return an ofstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a> error log if it fails. </p>

</div>
</div>
<a id="a6b397e6876fbb7f13d0e4a3cac7edfdc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b397e6876fbb7f13d0e4a3cac7edfdc">&sect;&nbsp;</a></span>SmartsLexReplace() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SmartsLexReplace </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a28466e08c61853737ac9bdeaeee495cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a28466e08c61853737ac9bdeaeee495cc">&sect;&nbsp;</a></span>DoubleMultiply()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DoubleMultiply </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ab39d4f554084f831800c2f18b5b0f017">DeterminePotency()</a>, <a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence()</a>, <a class="el" href="classOpenBabel_1_1OBRandom.shtml#ae07ab97904e47280d8dfa4164ffe6bc3">OBRandom::NextFloat()</a>, and <a class="el" href="classOpenBabel_1_1OBRandom.shtml#a0fffdba613d757a821b059d7d4a26b74">OBRandom::NextInt()</a>.</p>

</div>
</div>
<a id="a7fe18b3a86010f2fbbeeda7a6ed635a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fe18b3a86010f2fbbeeda7a6ed635a4">&sect;&nbsp;</a></span>DoubleAdd()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DoubleAdd </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence()</a>, <a class="el" href="classOpenBabel_1_1OBRandom.shtml#ae07ab97904e47280d8dfa4164ffe6bc3">OBRandom::NextFloat()</a>, and <a class="el" href="classOpenBabel_1_1OBRandom.shtml#a0fffdba613d757a821b059d7d4a26b74">OBRandom::NextInt()</a>.</p>

</div>
</div>
<a id="aa995f2456608bb27a86fef9460f9e8e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa995f2456608bb27a86fef9460f9e8e0">&sect;&nbsp;</a></span>DoubleModulus()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int DoubleModulus </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1DoubleType.shtml">DoubleType</a> *&#160;</td>
          <td class="paramname"><em>n</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ab39d4f554084f831800c2f18b5b0f017">DeterminePotency()</a>, <a class="el" href="namespaceOpenBabel.shtml#adfc4a863d0839be0e62e9db9d585fd7e">GenerateSequence()</a>, <a class="el" href="classOpenBabel_1_1OBRandom.shtml#ae07ab97904e47280d8dfa4164ffe6bc3">OBRandom::NextFloat()</a>, and <a class="el" href="classOpenBabel_1_1OBRandom.shtml#a0fffdba613d757a821b059d7d4a26b74">OBRandom::NextInt()</a>.</p>

</div>
</div>
<a id="a8ae850aac19b7a1ff3c02b6f3c17d36f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8ae850aac19b7a1ff3c02b6f3c17d36f">&sect;&nbsp;</a></span>CompareRingSize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareRingSize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Comparison function for rings, used by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503" title="Sort ring sizes from smallest to largest. ">OBRingSearch::SortRings()</a> </p><dl class="section return"><dt>Returns</dt><dd>true if a.size() &gt; b.size() </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRing.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBRing::GetParent()</a>, and <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#acd7836d1e4e1ab6fbd3faa49403e5503">OBRingSearch::SortRings()</a>.</p>

</div>
</div>
<a id="a8b1ba3c73d4038fd69729fbeb588008a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b1ba3c73d4038fd69729fbeb588008a">&sect;&nbsp;</a></span>Swab()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Swab </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Swap Byte instruction (i.e., handle transfers between endian forms) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a2f0695eb7d6ff6321032d88655ae8d25">OBRotamerList::NumAtoms()</a>.</p>

</div>
</div>
<a id="a66cac3c1ccf32d07a8cc8d85edf5bbe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a66cac3c1ccf32d07a8cc8d85edf5bbe7">&sect;&nbsp;</a></span>EnumerateTautomers()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void EnumerateTautomers </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1TautomerFunctor.shtml">TautomerFunctor</a> &amp;&#160;</td>
          <td class="paramname"><em>functor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Enumerate all tautomers for <code>mol</code>. Every time a tautomer is discovered, the <code>functor</code> will be invoked with the bonds changed to the tautomer. When the enumeration is complete, the bonds will be changed back to the original bond orders.</p>
<p>The algorithm is based on <a href="http://www.daylight.com/meetings/emug99/Delany/taut_html/index.htm">http://www.daylight.com/meetings/emug99/Delany/taut_html/index.htm</a></p>
<dl class="section warning"><dt>Warning</dt><dd>This function makes hydrogens implicit. </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1TautomerFunctor.shtml">TautomerFunctor</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1TautomerFunctor.shtml#aca481671b6beb08ef44090c2706a9fee">TautomerFunctor::~TautomerFunctor()</a>.</p>

</div>
</div>
<a id="a73d8ad4bc6df60db6c34726a8d443dab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a73d8ad4bc6df60db6c34726a8d443dab">&sect;&nbsp;</a></span>CanonicalTautomer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CanonicalTautomer </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compuate the canonical tautomer for <code>mol</code>. The canonical tautomer is the first found tautomer in the enumeration algorithm and is a mathematically unique tautomer (i.e. the algorithm does not guarantee that this is the dominant tautomer). The bonds in <code>mol</code> will be changed to the canonical tautomer.</p>
<dl class="section warning"><dt>Warning</dt><dd>This function makes hydrogens implicit. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1TautomerFunctor.shtml#aca481671b6beb08ef44090c2706a9fee">TautomerFunctor::~TautomerFunctor()</a>.</p>

</div>
</div>
<a id="a4adf0db17b2feeedf0ada8d21956ac0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4adf0db17b2feeedf0ada8d21956ac0d">&sect;&nbsp;</a></span>tokenize() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tokenize </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>vcr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>buf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>delimstr</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Break a string (supplied as the second argument) into tokens, returned in the first argument. Tokens are determined by the delimiters supplied (defaults to whitespace (i.e., spaces, tabs, newlines) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1patty.shtml#a55dcef5a39d6765d545e79cff377d332">patty::assign_rules()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">OBDescriptor::DeleteProperties()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classDLHandler.shtml#afbc430181268f2ea18cf3f5a9a6198ab">DLHandler::findFiles()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBBondTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAtomTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAromaticTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ae59fef8af62e52629bf2576e34a26801">OBRotorRules::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBRingTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBIsotopeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAtomicHeatOfFormationTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBAtomicHeatOfFormationTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBTypeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#ae59fef8af62e52629bf2576e34a26801">OBResidueData::ParseLine()</a>, and <a class="el" href="classOpenBabel_1_1patty.shtml#ad52e9084efab7e27fbe7fe394612ca57">patty::read_rules()</a>.</p>

</div>
</div>
<a id="afd3e2d93a87b06f18c02e1441c3bd1c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd3e2d93a87b06f18c02e1441c3bd1c2">&sect;&nbsp;</a></span>tokenize() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool tokenize </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>vcr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>delimstr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>limit</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Break a string (supplied as the second argument) into tokens, returned in the first argument. Tokens are determined by the delimiters supplied (defaults to whitespace (i.e., spaces, tabs, newlines) Only breaks at most 'limit' tokens and the last item in the vector may include un-parsed tokens. </p>

</div>
</div>
<a id="ae8d9d7dd615b5fa7b533c075fe744d8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8d9d7dd615b5fa7b533c075fe744d8f">&sect;&nbsp;</a></span>Trim()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string &amp; Trim </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove leading and trailing whitespace from a string (docs in <a class="el" href="tokenst_8cpp.shtml" title="Tokenize a string. ">tokenst.cpp</a>) </p>
<p>Removes white space from front and back of string. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">OBMol::GetSpacedFormula()</a>, <a class="el" href="classOpenBabel_1_1OBCommentData.shtml#a71ec30c014852fe90aed06daa76e378b">OBCommentData::SetData()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3b729dc90c4c5e21684e3a60653af">OBMol::SetTitle()</a>.</p>

</div>
</div>
<a id="ac6af450f7e3ad5ffd27fb56461dcd177"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6af450f7e3ad5ffd27fb56461dcd177">&sect;&nbsp;</a></span>toString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::toString </td>
          <td>(</td>
          <td class="paramtype">T&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a9858bede3a0f272573c0173a947bea18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9858bede3a0f272573c0173a947bea18">&sect;&nbsp;</a></span>ignore()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::istream &amp; ignore </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>ifs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>txt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Read and discard all characters from input stream up to, and including, a string. </p>
<p>Read and discard all characters from input stream upto the occurence of a string </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ifs</td><td>The input file stream. </td></tr>
    <tr><td class="paramname">txt</td><td>(which is also discarded), or the end of the stream. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the stream. </dd></dl>

<p>Referenced by <a class="el" href="structOpenBabel_1_1DeleteObject.shtml#a4c8e80136c01c79e006ea8f7c5e6b45e">DeleteObject::operator()()</a>.</p>

</div>
</div>
<a id="add34ce6b9be332e5d87fd5087d4dc38d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add34ce6b9be332e5d87fd5087d4dc38d">&sect;&nbsp;</a></span>OpenDatafile()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenDatafile </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>ifs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>envvar</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Opens a datafile in a directory where <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> expects to find it. </p>
<p>Opens the filestream with the first file called <code>filename</code> found by looking successively in the following directories:</p><ul>
<li>the current directory</li>
<li>in a subdirectory (of the directory below) with the version of <a class="el" href="namespaceOpenBabel.shtml" title="Global namespace for all Open Babel code. ">OpenBabel</a> as its name</li>
<li>the parent directory specified by the environment variable named <code>envvar</code> or "BABEL_DATADIR" if <code>envvar</code> is not specified, or the compiled-in macro BABEL_DATADIR if the environment variable is not set</li>
</ul>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ifs</td><td>Stream to load </td></tr>
    <tr><td class="paramname">filename</td><td>Name of the data file to load </td></tr>
    <tr><td class="paramname">envvar</td><td>Name of the environment variable</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>the name of the file that was opened. This includes the path unless it is in current directory </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OBGlobalDataBase::Init()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="structOpenBabel_1_1DeleteObject.shtml#a4c8e80136c01c79e006ea8f7c5e6b45e">DeleteObject::operator()()</a>, and <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>.</p>

</div>
</div>
<a id="af1a9769dcdfc9bb77a3747a3c89c3d03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1a9769dcdfc9bb77a3747a3c89c3d03">&sect;&nbsp;</a></span>center_coords() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::center_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a56c27ea39208380495f812df6b865289">matrix3x3::operator/=()</a>.</p>

</div>
</div>
<a id="a70c653ee69fdbd27f77d430e4aed3cad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70c653ee69fdbd27f77d430e4aed3cad">&sect;&nbsp;</a></span>operator<<() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream &amp; operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prints a representation of the vector as a row vector of the form "&lt;0.1,1,2&gt;". </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a2a6903cb1be80ac1055925f1074b75a7">OBFloatGrid::Center()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#ae15b186e4ec6527dbba56dbabba7b06b">vector3::distSq()</a>, <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#ae94bb7fc8559e36bb7c94f49b9d84098">OBSquarePlanarStereo::operator!=()</a>, <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml#aa48f241f6724f758e54bdba9be9f7813">OBTetrahedralStereo::operator!=()</a>, <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml#a075ebfe41e254a03674a315e5ed29664">OBCisTransStereo::operator!=()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a56c27ea39208380495f812df6b865289">matrix3x3::operator/=()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="adc7b25b0ba45ce8f90a2519c03322e4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc7b25b0ba45ce8f90a2519c03322e4a">&sect;&nbsp;</a></span>operator+()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector addition. </p>

</div>
</div>
<a id="aa2e0e5d4e59766809b5b61ab9b513a2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2e0e5d4e59766809b5b61ab9b513a2e">&sect;&nbsp;</a></span>operator-() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Vector subtraction. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="a8bcf1e708be0fbc503f83952c3a99cd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8bcf1e708be0fbc503f83952c3a99cd4">&sect;&nbsp;</a></span>operator-() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unary minus. </p>

</div>
</div>
<a id="a56b20579149ab8b5807475d4302c33a2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56b20579149ab8b5807475d4302c33a2">&sect;&nbsp;</a></span>operator*() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator* </td>
          <td>(</td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiplication with a scalar. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af855844c28abaaafbf21c5835a8e81d4">operator/()</a>, <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#a56c27ea39208380495f812df6b865289">matrix3x3::operator/=()</a>, and <a class="el" href="classOpenBabel_1_1transform3d.shtml#a4748a71890565072e61ed711ad218a38">transform3d::transform3d()</a>.</p>

</div>
</div>
<a id="ac5dcc9191fa15d332a546a975cb72952"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5dcc9191fa15d332a546a975cb72952">&sect;&nbsp;</a></span>operator*() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Multiplication with a scalar. </p>

</div>
</div>
<a id="af855844c28abaaafbf21c5835a8e81d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af855844c28abaaafbf21c5835a8e81d4">&sect;&nbsp;</a></span>operator/()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Division by a scalar. </p>

</div>
</div>
<a id="a2ed22257c15dc44557c1c275c99d127d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ed22257c15dc44557c1c275c99d127d">&sect;&nbsp;</a></span>operator*() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Multiplication of matrix and vector. </p>
<p>Matrix-vector multiplication.</p>
<p>Calculates the product m*v of the matrix m and the column vector represented by v </p>

</div>
</div>
<a id="a32a70eb5e04f4e10a386089723f05b2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32a70eb5e04f4e10a386089723f05b2a">&sect;&nbsp;</a></span>dot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::dot </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dot product of two vectors. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aef9f033a26aaedb027c2a99de04a9646">OBForceField::ConjugateGradientsTakeNSteps()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">Point2PlaneSigned()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a91538863099a02a981364ad66f47f4e8">OBForceField::ValidateConjugateGradients()</a>, <a class="el" href="namespaceOpenBabel.shtml#a00e2879019f2fb0fc689a7e5cb5d2008">vectorAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a id="a68dc2c35a1e58febaa9e13cd82e3a50f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a68dc2c35a1e58febaa9e13cd82e3a50f">&sect;&nbsp;</a></span>cross()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> cross </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cross product of two vectors. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">OBMol::Align()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d62b3487ca8969bdfbd7c434da564e">CalcTorsionAngle()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">InternalToCartesian()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32827b2955824019ff9a7e0a4ebfcd64">Point2Line()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fa4ebe11664cfe4759ea7ccaa3abbb9">Point2PlaneSigned()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a id="a00e2879019f2fb0fc689a7e5cb5d2008"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00e2879019f2fb0fc689a7e5cb5d2008">&sect;&nbsp;</a></span>vectorAngle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double vectorAngle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the angle between vectors (in degrees) </p>
<p>This method calculates the angle between two vectors</p>
<dl class="section warning"><dt>Warning</dt><dd>If length() of any of the two vectors is == 0.0, this method will divide by zero. If the product of the length() of the two vectors is very close to 0.0, but not == 0.0, this method may behave in unexpected ways and return almost random results; details may depend on your particular floating point implementation. The use of this method is therefore highly discouraged, unless you are certain that the length()es are in a reasonable range, away from 0.0 (Stefan Kebekus)</dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000098">Deprecated:</a></b></dt><dd>This method will probably replaced by a safer algorithm in the future.</dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000020">Todo:</a></b></dt><dd>Replace this method with a more fool-proof version.</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>the angle in degrees (0-360) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">OBMol::Align()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae9468871377da00c7b949b20d6d17f3d">OBAtom::AverageBondAngle()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aaeabaff376398e216c49714233a8a2e3">OBUnitCell::GetAlpha()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6d6d9bdda3f480d358c14b2010034d41">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a3d0e243a601d66ba5c1c95762eea45d0">OBUnitCell::GetBeta()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#a16ebee183db5b1e08f722602c07b7a44">OBUnitCell::GetGamma()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#aa087a37fcd1c8b08d5d58277caefbc9a">OBUnitCell::SetData()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a83db73f33e51b011f21358bd5a0463ff">OBAtom::SmallestBondAngle()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a id="a62d62b3487ca8969bdfbd7c434da564e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62d62b3487ca8969bdfbd7c434da564e">&sect;&nbsp;</a></span>CalcTorsionAngle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcTorsionAngle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the torsion angle between vectors (in degrees) </p>
<p>This function calculates the torsion angle of three vectors, represented by four points A&ndash;B&ndash;C&ndash;D, i.e. B and C are vertexes, but none of A&ndash;B, B&ndash;C, and C&ndash;D are colinear. A "torsion angle" is the amount of "twist" or torsion needed around the B&ndash;C axis to bring A&ndash;B into the same plane as B&ndash;C&ndash;D. The torsion is measured by "looking down" the vector B&ndash;C so that B is superimposed on C, then noting how far you'd have to rotate A&ndash;B to superimpose A over D. Angles are + in theanticlockwise direction. The operation is symmetrical in that if you reverse the image (look from C to B and rotate D over A), you get the same answer. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a731bb8e81cfd2699e1bfeb0c24fc7d2b">OBRotamerList::AddRotamer()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">CartesianToInternal()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a401a725a0efbc20c49783f176d78e6a7">OBMol::GetTorsion()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#aed0dfa6939f68b337f13fbcf4e0f3da7">OBBond::IsDoubleBondGeometry()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a501e76993e9deb8ec8ab24c464d4ed3c">OBMol::SetTorsion()</a>.</p>

</div>
</div>
<a id="a1fa4ebe11664cfe4759ea7ccaa3abbb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fa4ebe11664cfe4759ea7ccaa3abbb9">&sect;&nbsp;</a></span>Point2PlaneSigned()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2PlaneSigned </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the signed distance of point a to the plane determined by b,c,d. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ad0e0c09ef7c92973447c46d3ad3f3f8d">Point2Plane()</a>.</p>

</div>
</div>
<a id="ad0e0c09ef7c92973447c46d3ad3f3f8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad0e0c09ef7c92973447c46d3ad3f3f8d">&sect;&nbsp;</a></span>Point2Plane()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2Plane </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the distance of point a to the plane determined by b,c,d. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>.</p>

</div>
</div>
<a id="a29227290e6e6931c009942836a21e5df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a29227290e6e6931c009942836a21e5df">&sect;&nbsp;</a></span>Point2PlaneAngle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2PlaneAngle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the angle between point a and the plane determined by b,c,d. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>.</p>

</div>
</div>
<a id="a32827b2955824019ff9a7e0a4ebfcd64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32827b2955824019ff9a7e0a4ebfcd64">&sect;&nbsp;</a></span>Point2Line()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double Point2Line </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculate the distance of a point a to a line determined by b and c. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>.</p>

</div>
</div>
<a id="a47ebe26957d5b56a72772cfd24a29db1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47ebe26957d5b56a72772cfd24a29db1">&sect;&nbsp;</a></span>IsSulfoneOxygen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::IsSulfoneOxygen </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atm</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a63e02252214e540d56815820715f1ae3">OBAtom::IsHbondAcceptor()</a>.</p>

</div>
</div>
<a id="a56bd19e6ce3d11cd0ccdc0420e91ada3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56bd19e6ce3d11cd0ccdc0420e91ada3">&sect;&nbsp;</a></span>ApplyRotMatToBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::ApplyRotMatToBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="a48ed8b37310a8d7153a64309f09901a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48ed8b37310a8d7153a64309f09901a0">&sect;&nbsp;</a></span>operator|()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator| </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return a bit vector of the results of Or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A bit vector </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="ac62bb11738b0a28ee90eb260813e33f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac62bb11738b0a28ee90eb260813e33f3">&sect;&nbsp;</a></span>operator &()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator&amp; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return a bit vector of the results of And-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A bit vector </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="aa2cf1233a6c6ce53b79f94b7a60d2d2a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa2cf1233a6c6ce53b79f94b7a60d2d2a">&sect;&nbsp;</a></span>operator^()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator^ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return a bit vector of the results of Exclusive-or-ing each bit in <code>bv1</code> with the corresponding bit in <code>bv2</code> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A bit vector </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="a682eec6ce003f48a6098d6700e3cedba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a682eec6ce003f48a6098d6700e3cedba">&sect;&nbsp;</a></span>operator-() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return a bit vector of the results of clearing each bit in <code>bv1</code> which is set in <code>bv2</code> </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A bit vector </dd></dl>

</div>
</div>
<a id="ac001b331f648fbbd8590576f59d4d2ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac001b331f648fbbd8590576f59d4d2ab">&sect;&nbsp;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return true if <code>bv1</code> and <code>bv2</code> are equivalent Not that they may be of different size, and still equivalent provided that the extra bits are all zero. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if equal, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBSquarePlanarStereo_1_1Config.shtml#a3932e85a5b2cc866ab349584485a5b1c">OBSquarePlanarStereo::Config::Config()</a>, <a class="el" href="structOpenBabel_1_1OBTetrahedralStereo_1_1Config.shtml#a1410755ad2d5b4c0f3a6b9f0c9f04789">OBTetrahedralStereo::Config::Config()</a>, <a class="el" href="structOpenBabel_1_1OBCisTransStereo_1_1Config.shtml#acf25320b7c10321198305519ad78680c">OBCisTransStereo::Config::Config()</a>, <a class="el" href="classOpenBabel_1_1OBError.shtml#a0fd1cf5f58142cbb0244af63fb1efb47">OBError::GetLevel()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#af4b39937a5abae6000d09c5517ecfc7b">SpaceGroup::GetOriginAlternative()</a>, <a class="el" href="classOpenBabel_1_1OBSquarePlanarStereo.shtml#a498fb01456d4134b9730009c7af11da6">OBSquarePlanarStereo::GetType()</a>, <a class="el" href="classOpenBabel_1_1OBTetrahedralStereo.shtml#a498fb01456d4134b9730009c7af11da6">OBTetrahedralStereo::GetType()</a>, <a class="el" href="classOpenBabel_1_1OBCisTransStereo.shtml#a498fb01456d4134b9730009c7af11da6">OBCisTransStereo::GetType()</a>, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>, <a class="el" href="classOpenBabel_1_1vector3.shtml#a2134ad02d68f29e9c7cd87e4cd4c75b8">vector3::z()</a>, and <a class="el" href="classOpenBabel_1_1OBAngle.shtml#a35e160e815b78f064cd07164bf5aebb2">OBAngle::~OBAngle()</a>.</p>

</div>
</div>
<a id="a3ba5fcca1ecb1241049411be7017186d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3ba5fcca1ecb1241049411be7017186d">&sect;&nbsp;</a></span>operator<()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::operator&lt; </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Return true if <code>bv1</code> i less than <code>bv2</code> Lexicographical order, with bit vectors written LSB first. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">bv1</td><td>A bit vector </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv2</td><td>Another bit vector </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>true if equal, false otherwise </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">findMetalloceneBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="a54358a339fc06df028bb5fbe403b0032"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54358a339fc06df028bb5fbe403b0032">&sect;&nbsp;</a></span>operator>>() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::istream&amp; OpenBabel::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sets bits on, listed as a string of character-represented integers in a stream Only reads one line of input The format is "[ n0 n1 n2 n3 ... ]". The square brackets are optional. The whitespace can be SPACE or HTAB For example "[ 1 5 6 9 ]" </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">is</td><td>The input stream </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">bv</td><td>The bit vector to contain the result </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml#a2a6903cb1be80ac1055925f1074b75a7">OBFloatGrid::Center()</a>, and <a class="el" href="classOpenBabel_1_1OBBitVec.shtml#a38128ecf826666f61c341cb0a17acb3d">OBBitVec::operator[]()</a>.</p>

</div>
</div>
<a id="a42db9af61dccd8f586f358058b78d1cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a42db9af61dccd8f586f358058b78d1cc">&sect;&nbsp;</a></span>operator<<() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; OpenBabel::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Output this bit vector to a stream The format is "[ n0 n1 n2 n3 ... ]". The whitespace is SPACE For example "[ 1 5 6 9 ]" </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">os</td><td>The output stream </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">bv</td><td>The bit vector to be output </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a69c4665c3756720ac6f0d62b2488fdd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69c4665c3756720ac6f0d62b2488fdd6">&sect;&nbsp;</a></span>GetCorrectedBondVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::GetCorrectedBondVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bondOrder</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af123db2b6c32f7d210f4455e7fb8cccc">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a id="ac166197716f00da13cdac1c0cee85975"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac166197716f00da13cdac1c0cee85975">&sect;&nbsp;</a></span>CompareBondPairSecond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::CompareBondPairSecond </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">findMetalloceneBonds()</a>.</p>

</div>
</div>
<a id="a033f4bd8d32f76ae6b7151e1c89bae60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a033f4bd8d32f76ae6b7151e1c89bae60">&sect;&nbsp;</a></span>addNbrs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::addNbrs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>fragment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>metalloceneBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Helper function for getFragment below. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a49cdac533695572555a6f9dcad81de46">getFragment()</a>.</p>

</div>
</div>
<a id="a49cdac533695572555a6f9dcad81de46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49cdac533695572555a6f9dcad81de46">&sect;&nbsp;</a></span>getFragment() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> getFragment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>metalloceneBonds</em> = <code>std::vector&lt;&#160;<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>&#160;*&gt;()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create an <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits. ">OBBitVec</a> objects with bets set for the fragment consisting of all atoms for which there is a path to atom without going through skip. These fragment bitvecs are indexed by atom idx (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a44b77545e83209582e42f375c8f40474">OBAtom::GetIdx()</a>). </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a4e9dbdc3dacbdf4b8ac6e48baba7bc35">FindAutomorphisms()</a>.</p>

</div>
</div>
<a id="a0e3ffef22e9d0e3a960e1ddc3c7a3af0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0e3ffef22e9d0e3a960e1ddc3c7a3af0">&sect;&nbsp;</a></span>getFragment() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> OpenBabel::getFragment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>skip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">findMetalloceneBonds()</a>.</p>

</div>
</div>
<a id="add2cdb4d7ec3918bac8fa18eb32d4d4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add2cdb4d7ec3918bac8fa18eb32d4d4c">&sect;&nbsp;</a></span>isFerroceneBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool isFerroceneBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#abfb2d29563ee1a81f2e70a51d55c83cf">CompileAutomorphismQuery()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">findMetalloceneBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBIsomorphismMapper.shtml#a89cf32c6e6d4f6fce6a61a3e70cd2a39">OBIsomorphismMapper::GetInstance()</a>.</p>

</div>
</div>
<a id="a731a8591521359140c8777a1c65a1157"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a731a8591521359140c8777a1c65a1157">&sect;&nbsp;</a></span>findMetalloceneBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::findMetalloceneBonds </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>bonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symmetry_classes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">CanonicalLabels()</a>.</p>

</div>
</div>
<a id="a818fd93f0aa1e1f5b3c63bbbc8013cca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a818fd93f0aa1e1f5b3c63bbbc8013cca">&sect;&nbsp;</a></span>AllocateByteCode()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a>* OpenBabel::AllocateByteCode </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a id="acc9426f6c6d58198a97d8c726660559d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc9426f6c6d58198a97d8c726660559d">&sect;&nbsp;</a></span>DeleteByteCode()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::DeleteByteCode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> *&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Free a ByteCode and all corresponding data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="a59c2e046bb935ac3eba0d3b003d10176"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59c2e046bb935ac3eba0d3b003d10176">&sect;&nbsp;</a></span>FatalMemoryError()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FatalMemoryError </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a id="a1748035db13037545433f80148a7c928"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1748035db13037545433f80148a7c928">&sect;&nbsp;</a></span>GenerateByteCodes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::GenerateByteCodes </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#abcd91e4b018d533740f00f35ae44e4f3">ByteCode</a> **&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>resid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>curr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prev</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bond</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>.</p>

</div>
</div>
<a id="a212d025edfbee4c41902aff17a33243f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a212d025edfbee4c41902aff17a33243f">&sect;&nbsp;</a></span>sortpred_b()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::sortpred_b </td>
          <td>(</td>
          <td class="paramtype">const OBDiversePoses::PosePair &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const OBDiversePoses::PosePair &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">UpdateConformersFromTree()</a>.</p>

</div>
</div>
<a id="aa5e97bc8a80ef2bf7fe9aae240ec1e62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5e97bc8a80ef2bf7fe9aae240ec1e62">&sect;&nbsp;</a></span>GetHeavyAtomCoords()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;<a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&gt; OpenBabel::GetHeavyAtomCoords </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>all_coords</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="afa641f7ef2f87464db0231f320116ecb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa641f7ef2f87464db0231f320116ecb">&sect;&nbsp;</a></span>UpdateConformersFromTree()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::UpdateConformersFromTree </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>energies</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">OBDiversePoses *&#160;</td>
          <td class="paramname"><em>divposes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>verbose</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a22642156c54d298d699ea3946f633d1b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22642156c54d298d699ea3946f633d1b">&sect;&nbsp;</a></span>UnitNameToConversionFactor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double OpenBabel::UnitNameToConversionFactor </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>unit</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomicHeatOfFormationTable.shtml#a53f926159c30482cfd02719cffc57b3d">OBAtomicHeatOfFormationTable::GetHeatOfFormation()</a>.</p>

</div>
</div>
<a id="a1ea11acf2b1952b517470849055dd9d9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ea11acf2b1952b517470849055dd9d9">&sect;&nbsp;</a></span>Toupper()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Toupper </td>
          <td>(</td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1853c7aae336e34aaf9e3bf5098f6998"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1853c7aae336e34aaf9e3bf5098f6998">&sect;&nbsp;</a></span>Tolower()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Tolower </td>
          <td>(</td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a399f52de3bc4ed70a70547a39416dff4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a399f52de3bc4ed70a70547a39416dff4">&sect;&nbsp;</a></span>Reweight()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::Reweight </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>rotorWeights</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>rotorKey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>bonus</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a308e084198342c54de6f1fb695f23a6d">OBForceField::WeightedRotorSearch()</a>.</p>

</div>
</div>
<a id="a177d720c46ef179ee1dacd9cdd56ffa3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a177d720c46ef179ee1dacd9cdd56ffa3">&sect;&nbsp;</a></span>areDuplicateAtoms()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::areDuplicateAtoms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>v1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname"><em>v2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3e0ffb12b2bd66fb29e225633036fab6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3e0ffb12b2bd66fb29e225633036fab6">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[1/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetA&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a817ef4308c19c0ce429c92a41ee8b3f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a817ef4308c19c0ce429c92a41ee8b3f5">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[2/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetB&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a60d81bf7a916284b8c7fd2a67ee850d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60d81bf7a916284b8c7fd2a67ee850d7">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[3/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetC&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3f24f3a1af67da58c8aaf681c90abd01"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f24f3a1af67da58c8aaf681c90abd01">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[4/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetAlpha&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac1492c80bbaaddbb42085770c1527e72"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1492c80bbaaddbb42085770c1527e72">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[5/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetBeta&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aaba113a00c37287e53236dcaed28e16a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaba113a00c37287e53236dcaed28e16a">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[6/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetGamma&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abd0a754dd4af0b424f18df4f4520bda4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd0a754dd4af0b424f18df4f4520bda4">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[7/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetOffset&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a022d07fdc4281f840f2c7ce583d7149b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a022d07fdc4281f840f2c7ce583d7149b">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD_ARG() <span class="overload">[1/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD_ARG </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78">OBUnitCell::LatticeType</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetLatticeType&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5762eb28d05d4c66bc880ee8e0db56e9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5762eb28d05d4c66bc880ee8e0db56e9">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[8/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#ae2ee58ec34164a3ea47d51ab6ffc5c78">OBUnitCell::LatticeType</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetLatticeType&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aeb694e18907ee10ce8d9451f353c4a7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb694e18907ee10ce8d9451f353c4a7e">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[9/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &gt;&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetCellVectors&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab0ac28dce785c6f1d5ca55628925cceb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0ac28dce785c6f1d5ca55628925cceb">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[10/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetCellMatrix&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a7682c6f2a31c8f3aa9a09a101698bb7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7682c6f2a31c8f3aa9a09a101698bb7a">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[11/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetOrthoMatrix&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0af5475cf216b787571d889ec9461236"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0af5475cf216b787571d889ec9461236">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[12/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetOrientationMatrix&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af6d9564285db2e961f44282f68a349d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af6d9564285db2e961f44282f68a349d5">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[13/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetFractionalMatrix&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a59a9da045bebe87cc7a16e2c6bb3c9f2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a59a9da045bebe87cc7a16e2c6bb3c9f2">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD_ARG() <span class="overload">[2/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD_ARG </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FractionalToCartesian&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a905ff622a833189eb877b84aa265e89a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a905ff622a833189eb877b84aa265e89a">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD_ARG() <span class="overload">[3/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD_ARG </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CartesianToFractional&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adc52fe3561f13298c9cc84527503f1e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc52fe3561f13298c9cc84527503f1e4">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD_ARG() <span class="overload">[4/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD_ARG </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">WrapCartesianCoordinate&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a56ff40d099bb97a1c8380d44070f98ed"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a56ff40d099bb97a1c8380d44070f98ed">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD_ARG() <span class="overload">[5/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD_ARG </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">WrapFractionalCoordinate&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a67b7361f4de465bdb719703ea985c418"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67b7361f4de465bdb719703ea985c418">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD_ARG() <span class="overload">[6/6]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD_ARG </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetSpaceGroupNumber&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa974382e1db04d5e18935663e17d65eb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa974382e1db04d5e18935663e17d65eb">&sect;&nbsp;</a></span>OBUNITCELL_CALL_CONST_OVERLOAD() <span class="overload">[14/14]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">OpenBabel::OBUNITCELL_CALL_CONST_OVERLOAD </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">GetCellVolume&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a0876587a9edcb8d17a70923e424e3169"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0876587a9edcb8d17a70923e424e3169">&sect;&nbsp;</a></span>CompareUnsigned()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::CompareUnsigned </td>
          <td>(</td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned int &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Functions for use by the sort() method of a vector. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">ComparePairSecond()</a>.</p>

</div>
</div>
<a id="a669ac61cfe4be78e8624b31b39179a9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a669ac61cfe4be78e8624b31b39179a9c">&sect;&nbsp;</a></span>ComparePairFirst()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ComparePairFirst </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a76bfba8476b7512138a477265edc4476"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76bfba8476b7512138a477265edc4476">&sect;&nbsp;</a></span>ComparePairSecond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ComparePairSecond </td>
          <td>(</td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="adfcd0e581453354d7c779541ec58c491"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfcd0e581453354d7c779541ec58c491">&sect;&nbsp;</a></span>operator<<() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;&#160;</td>
          <td class="paramname"><em>fg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="adc71eb19ad3b4c729264738f6d69d1d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc71eb19ad3b4c729264738f6d69d1d3">&sect;&nbsp;</a></span>operator>>() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">istream&amp; OpenBabel::operator&gt;&gt; </td>
          <td>(</td>
          <td class="paramtype">std::istream &amp;&#160;</td>
          <td class="paramname"><em>is</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBFloatGrid.shtml">OBFloatGrid</a> &amp;&#160;</td>
          <td class="paramname"><em>fg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a5c3704ad0910c8279aa1e1e79c300369"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c3704ad0910c8279aa1e1e79c300369">&sect;&nbsp;</a></span>print_vector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::print_vector </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>label</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="abfb2d29563ee1a81f2e70a51d55c83cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abfb2d29563ee1a81f2e70a51d55c83cf">&sect;&nbsp;</a></span>CompileAutomorphismQuery()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBQuery.shtml">OBQuery</a>* OpenBabel::CompileAutomorphismQuery </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symClasses</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">FindAutomorphisms()</a>.</p>

</div>
</div>
<a id="a6239f809ba8a88712a94f2a6bb90a485"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6239f809ba8a88712a94f2a6bb90a485">&sect;&nbsp;</a></span>FindAutomorphisms() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::FindAutomorphisms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;&#160;</td>
          <td class="paramname"><em>maps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>maxMemory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4e9dbdc3dacbdf4b8ac6e48baba7bc35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e9dbdc3dacbdf4b8ac6e48baba7bc35">&sect;&nbsp;</a></span>FindAutomorphisms() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::FindAutomorphisms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__substructure.shtml#ga6179e6c11d4f797e8d0ef6ac5c9f25a8">Automorphisms</a> &amp;&#160;</td>
          <td class="paramname"><em>maps</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>symClasses</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>mask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::size_t&#160;</td>
          <td class="paramname"><em>maxMemory</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a31ce8b089ca36508940585406a2f93f1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31ce8b089ca36508940585406a2f93f1">&sect;&nbsp;</a></span>expand_cycle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int expand_cycle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>avisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>cvisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>potAromBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>rootIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Timeout &amp;&#160;</td>
          <td class="paramname"><em>timeout</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prevAtomIdx</em> = <code>-1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth</em> = <code><a class="el" href="namespaceOpenBabel.shtml#ad087045047b2155479ef662be1be3abc">MAX_DEPTH</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Recursively find the aromatic atoms with an aromatic bond to the current atom. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="a62de79552e98ffdb88a9b8509a705158"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62de79552e98ffdb88a9b8509a705158">&sect;&nbsp;</a></span>expandKekulize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool expandKekulize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bond_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Timeout &amp;&#160;</td>
          <td class="paramname"><em>timeout</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6be250d574bdbcae500c9207cb0f2400">OBMol::expand_kekulize()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="ac918a56b1ce85885d791b5981d2102cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac918a56b1ce85885d791b5981d2102cd">&sect;&nbsp;</a></span>expand_kekulize_lssr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::expand_kekulize_lssr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>lssr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; bool &gt; &amp;&#160;</td>
          <td class="paramname"><em>lssrAssigned</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondsThisRing</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>NEW ANALYSIS methods: rely on LSSR methods to only target one ring. Works much faster on fullerens, graphene, etc. </p>
<p>Recursive function to find a sensible kekule assignment of single and double bonds for an aromatic ring system. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>.</p>

</div>
</div>
<a id="a8f3cd1f7ef8ed1bdf6bcab1673675622"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f3cd1f7ef8ed1bdf6bcab1673675622">&sect;&nbsp;</a></span>count_assigned_bonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::count_assigned_bonds </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>bondsThisRing</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac918a56b1ce85885d791b5981d2102cd">expand_kekulize_lssr()</a>.</p>

</div>
</div>
<a id="a7b44d43b56950aff23fbca88664ad996"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b44d43b56950aff23fbca88664ad996">&sect;&nbsp;</a></span>isPotentialAromaticAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::isPotentialAromaticAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">potentialAromaticBonds()</a>.</p>

</div>
</div>
<a id="a7e62ffcac6073c5fb792d2f5bc62c522"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e62ffcac6073c5fb792d2f5bc62c522">&sect;&nbsp;</a></span>potentialAromaticBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::potentialAromaticBonds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>atom is temp crash prevention </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="af5f2eb9394954bc877f2638eb208ac5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5f2eb9394954bc877f2638eb208ac5a">&sect;&nbsp;</a></span>get_bonds_of_ring()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::get_bonds_of_ring </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&#160;</td>
          <td class="paramname"><em>ring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>ring_bonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a vector of the bonds in a ring, in circular order around the ring,. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac918a56b1ce85885d791b5981d2102cd">expand_kekulize_lssr()</a>.</p>

</div>
</div>
<a id="a67f559671aa9d68ce3888baab8f7fc1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67f559671aa9d68ce3888baab8f7fc1a">&sect;&nbsp;</a></span>has_leftover_electrons() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::has_leftover_electrons </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a07faa5acbed4a3cbbfd0d711321c0439"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a07faa5acbed4a3cbbfd0d711321c0439">&sect;&nbsp;</a></span>has_leftover_electrons() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::has_leftover_electrons </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac918a56b1ce85885d791b5981d2102cd">expand_kekulize_lssr()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">expandKekulize()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa8300dbbf33e0da417f98d846442e6b1">OBMol::has_no_leftover_electrons()</a>.</p>

</div>
</div>
<a id="ae4c78efdf4d582451d8d0c323d98f205"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4c78efdf4d582451d8d0c323d98f205">&sect;&nbsp;</a></span>intToStr()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string OpenBabel::intToStr </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>k</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ab8184977f057db3afea953ff0d97355d">ptInRect()</a>.</p>

</div>
</div>
<a id="a5eeac49565ab1fdcb863f31f41ec2f5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5eeac49565ab1fdcb863f31f41ec2f5f">&sect;&nbsp;</a></span>xDistPoint()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::xDistPoint </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acb3b0f424f25beb57a312c1a679f3b0c">overlapped()</a>.</p>

</div>
</div>
<a id="acb3b0f424f25beb57a312c1a679f3b0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb3b0f424f25beb57a312c1a679f3b0c">&sect;&nbsp;</a></span>overlapped()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::overlapped </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x1B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y1B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x2B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>y2B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1da27ac0556550ed29812976e41e97b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1da27ac0556550ed29812976e41e97b9">&sect;&nbsp;</a></span>sproduct()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::sproduct </td>
          <td>(</td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>br</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a id="a7c4949b74e6c96a325273701c53a599e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c4949b74e6c96a325273701c53a599e">&sect;&nbsp;</a></span>compareAtoms()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::compareAtoms </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; std::vector&lt; int &gt; *&gt;&#160;</td>
          <td class="paramname"><em>aeqList</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1c632244490414023578336c8528c613"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c632244490414023578336c8528c613">&sect;&nbsp;</a></span>incrementValues()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::incrementValues </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>currentValues</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>maxValues</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2eda090453a9a538b9295e4fd2ba4366"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eda090453a9a538b9295e4fd2ba4366">&sect;&nbsp;</a></span>CompareRotor() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::CompareRotor </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; int, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; int, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a95f6327fcb8303f8d4fbb309a20e3f2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95f6327fcb8303f8d4fbb309a20e3f2b">&sect;&nbsp;</a></span>deleteIntElement()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::deleteIntElement </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; *&#160;</td>
          <td class="paramname"><em>source</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>index</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate()</a>.</p>

</div>
</div>
<a id="a24ad6fc920fa2699d472547ec4d1721a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24ad6fc920fa2699d472547ec4d1721a">&sect;&nbsp;</a></span>findAlternateSinglets()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::findAlternateSinglets </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a78600823bb7358bc592f05fa5039936d">makeAssignment()</a>.</p>

</div>
</div>
<a id="a78600823bb7358bc592f05fa5039936d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a78600823bb7358bc592f05fa5039936d">&sect;&nbsp;</a></span>makeAssignment()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::makeAssignment </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondAssignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>specialFlag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nAss</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>.</p>

</div>
</div>
<a id="aaf79bb3ded26c6df1bcb8008c76afac6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf79bb3ded26c6df1bcb8008c76afac6">&sect;&nbsp;</a></span>analyzeOK()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::analyzeOK </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>maxValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>atomCheckFlag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nGtMax</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nNEH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int &amp;&#160;</td>
          <td class="paramname"><em>nOddEven</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>testExceedHydrogen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>oddEvenCheck</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>.</p>

</div>
</div>
<a id="a6b40d2265cd8cf97dc199e8059d13ff0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b40d2265cd8cf97dc199e8059d13ff0">&sect;&nbsp;</a></span>incrementAssignment()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::incrementAssignment </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondAssignment</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAss</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aef260e06b0c46b10fe3be453e1362ee5">determineBondsOrder()</a>.</p>

</div>
</div>
<a id="aef260e06b0c46b10fe3be453e1362ee5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef260e06b0c46b10fe3be453e1362ee5">&sect;&nbsp;</a></span>determineBondsOrder()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::determineBondsOrder </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>maxValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>hydrogenValency</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nAtoms</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nBonds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>oddEvenViolate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a id="a656a12d74df6452be30fd76d3860bca6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a656a12d74df6452be30fd76d3860bca6">&sect;&nbsp;</a></span>alternate() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::alternate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>pmol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>nH</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondOrders</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab8184977f057db3afea953ff0d97355d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8184977f057db3afea953ff0d97355d">&sect;&nbsp;</a></span>ptInRect()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ptInRect </td>
          <td>(</td>
          <td class="paramtype">const Rect&#160;</td>
          <td class="paramname"><em>r</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Point&#160;</td>
          <td class="paramname"><em>p</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af3acf0818f209ed2426163c90b6d1440"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3acf0818f209ed2426163c90b6d1440">&sect;&nbsp;</a></span>compareStringsNumbers()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::compareStringsNumbers </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>s1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>s2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a79d8fe626950346aaaeabec7cfdce123">analizeParity()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac6b2a0b35248f073b86a96fbef99f461">analizeParityBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo()</a>.</p>

</div>
</div>
<a id="a0c4710d7911172f59b1f9caf9192d2d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c4710d7911172f59b1f9caf9192d2d6">&sect;&nbsp;</a></span>getAtomSymbol() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::getAtomSymbol </td>
          <td>(</td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atAtom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atEx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>priority</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>ndData</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>nepravil'no </p>

</div>
</div>
<a id="a49950c5bac5703c9a3c7efea3d4a41f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49950c5bac5703c9a3c7efea3d4a41f4">&sect;&nbsp;</a></span>getAtomSymbol() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::getAtomSymbol </td>
          <td>(</td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atAtom</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a id="aa5a5e94e5040b9aa439f4f658f0741d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5a5e94e5040b9aa439f4f658f0741d4">&sect;&nbsp;</a></span>indexOf()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::indexOf </td>
          <td>(</td>
          <td class="paramtype">const string&#160;</td>
          <td class="paramname"><em>instring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string&#160;</td>
          <td class="paramname"><em>substring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fromPos</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ae55766527e16c454a28332c2b9f51bab">addZeroeth()</a>, <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>, <a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo()</a>, <a class="el" href="namespaceOpenBabel.shtml#a6a41a690c691e47bc63facef0e2e449d">parseFormula()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ac2c0520f21b12e9bfae93e4e425e26c9">removeZeroeth()</a>.</p>

</div>
</div>
<a id="ac2c0520f21b12e9bfae93e4e425e26c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2c0520f21b12e9bfae93e4e425e26c9">&sect;&nbsp;</a></span>removeZeroeth()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::removeZeroeth </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>instring</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a id="a79d8fe626950346aaaeabec7cfdce123"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79d8fe626950346aaaeabec7cfdce123">&sect;&nbsp;</a></span>analizeParity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::analizeParity </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>.</p>

</div>
</div>
<a id="ac6b2a0b35248f073b86a96fbef99f461"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6b2a0b35248f073b86a96fbef99f461">&sect;&nbsp;</a></span>analizeParityBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::analizeParityBond </td>
          <td>(</td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a id="a53b6e688d17496385f69834ed1014dc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a53b6e688d17496385f69834ed1014dc8">&sect;&nbsp;</a></span>changeParity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::changeParity </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>.</p>

</div>
</div>
<a id="af2ed9f300b95cff9ffc0fbc34cacc578"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2ed9f300b95cff9ffc0fbc34cacc578">&sect;&nbsp;</a></span>changeParityBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::changeParityBond </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a id="aee1209411864c8c11729145e25e4bd2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee1209411864c8c11729145e25e4bd2c">&sect;&nbsp;</a></span>bondEquivalent()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::bondEquivalent </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bn1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bn2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>eqList</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">intToStr()</a>.</p>

</div>
</div>
<a id="ae55766527e16c454a28332c2b9f51bab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae55766527e16c454a28332c2b9f51bab">&sect;&nbsp;</a></span>addZeroeth()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::addZeroeth </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>instring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>stringAdd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a417a2925a2ec60c86ff3edc04ce4142c">implementBondStereo()</a>.</p>

</div>
</div>
<a id="a8499ac47df50a86298d88a5079a544f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8499ac47df50a86298d88a5079a544f6">&sect;&nbsp;</a></span>setUpDownBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::setUpDownBonds </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>atomNo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>parity</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">TSimpleMolecule &amp;&#160;</td>
          <td class="paramname"><em>sm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>iA2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>stereoBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>!! By unknown reason inversion of configuration took place. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a3c50491b940d1a3d368bf7eba3bebfa1">implementAtomStereo()</a>.</p>

</div>
</div>
<a id="a74797fbdbf190ac9522db1f2d582581b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74797fbdbf190ac9522db1f2d582581b">&sect;&nbsp;</a></span>SortVVInt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SortVVInt </td>
          <td>(</td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">OBMol::ContigFragList()</a>.</p>

</div>
</div>
<a id="a4083bb9898b1beff0c7e0970b9f64324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4083bb9898b1beff0c7e0970b9f64324">&sect;&nbsp;</a></span>SortAtomZ()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool SortAtomZ </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="af4da122a7830becd4fa38b8792671cdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4da122a7830becd4fa38b8792671cdd">&sect;&nbsp;</a></span>OBComparePairSecond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::OBComparePairSecond </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#abe5da6d31a3fcc23a2efd77085c8c2d4">ClassCount()</a>.</p>

</div>
</div>
<a id="a83d991b1e233b11b794e4ab3f87b52cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83d991b1e233b11b794e4ab3f87b52cc">&sect;&nbsp;</a></span>OBComparePairFirst()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::OBComparePairFirst </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8f302cc167630d63e3ca5a4c4d86e41b">CreateNewClassVector()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">OBMol::GetGIDVector()</a>.</p>

</div>
</div>
<a id="abe5da6d31a3fcc23a2efd77085c8c2d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe5da6d31a3fcc23a2efd77085c8c2d4">&sect;&nbsp;</a></span>ClassCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::ClassCount </td>
          <td>(</td>
          <td class="paramtype">vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vp</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>count</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>counts the number of unique symmetry classes in a list </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">OBMol::GetGIDVector()</a>.</p>

</div>
</div>
<a id="a8f302cc167630d63e3ca5a4c4d86e41b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8f302cc167630d63e3ca5a4c4d86e41b">&sect;&nbsp;</a></span>CreateNewClassVector()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::CreateNewClassVector </td>
          <td>(</td>
          <td class="paramtype">vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vp1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; pair&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, unsigned int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vp2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>creates a new vector of symmetry classes base on an existing vector helper routine to GetGIDVector </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">ComparePairSecond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">OBMol::GetGIDVector()</a>, and <a class="el" href="graphsym_8cpp.shtml#a74f115409a34be67333b0bc9aa3075a0">print_sym_classes()</a>.</p>

</div>
</div>
<a id="a70e9abbda50786ef068ca7b99768ba85"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a70e9abbda50786ef068ca7b99768ba85">&sect;&nbsp;</a></span>IsSuppressibleHydrogen()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::IsSuppressibleHydrogen </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtomClassData.shtml">OBAtomClassData</a> *&#160;</td>
          <td class="paramname"><em>pac</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4e2ddc39752d20fabcda1afc1cc4e8e4">OBMol::DeleteHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a2993ead33ec2a4b15dd536d798ff844d">OBMol::DeleteNonPolarHydrogens()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a43904e621e60855bc1818b56a7bd4b93">OBMol::DeletePolarHydrogens()</a>.</p>

</div>
</div>
<a id="a8e455dc2d94f2394a21dd76db3af8325"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e455dc2d94f2394a21dd76db3af8325">&sect;&nbsp;</a></span>ValenceSum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::ValenceSum </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8d72e30a8da1c39c9906a27ef62dd5f6">KekulePropagate()</a>.</p>

</div>
</div>
<a id="a8d72e30a8da1c39c9906a27ef62dd5f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d72e30a8da1c39c9906a27ef62dd5f6">&sect;&nbsp;</a></span>KekulePropagate()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::KekulePropagate </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>visit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>ival</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad87b019400c810f14603c6532435030b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad87b019400c810f14603c6532435030b">&sect;&nbsp;</a></span>GetCurrentValence()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::GetCurrentValence </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a51fe0e9eb03d3a861ca5d5c794acf011">ExpandKekule()</a>.</p>

</div>
</div>
<a id="a51fe0e9eb03d3a861ca5d5c794acf011"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a51fe0e9eb03d3a861ca5d5c794acf011">&sect;&nbsp;</a></span>ExpandKekule()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::ExpandKekule </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>va</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt;::iterator&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>maxv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>secondpass</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="a13eb26f56a8a475622fba5fc01d4d50e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a13eb26f56a8a475622fba5fc01d4d50e">&sect;&nbsp;</a></span>CorrectBadResonanceForm()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::CorrectBadResonanceForm </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">OBMol::PerceiveKekuleBonds()</a>.</p>

</div>
</div>
<a id="a5531433a3edb03cf74aecd1ffadfe3a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5531433a3edb03cf74aecd1ffadfe3a7">&sect;&nbsp;</a></span>DeleteStereoOnAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const void OpenBabel::DeleteStereoOnAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1OBStereo.shtml#aff913cc7d694153b33e2b3ac168a6350">OBStereo::Ref</a>&#160;</td>
          <td class="paramname"><em>atomId</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a688b0d2367ab8e683821e6cff705d5f4">OBMol::DeleteAtom()</a>.</p>

</div>
</div>
<a id="a7654363e339f0fe07323c9f7e542d4db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7654363e339f0fe07323c9f7e542d4db">&sect;&nbsp;</a></span>WriteTitles()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::WriteTitles </td>
          <td>(</td>
          <td class="paramtype">ostream &amp;&#160;</td>
          <td class="paramname"><em>ofs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aabfd0c1c9630002b16c782ad7d39790f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aabfd0c1c9630002b16c782ad7d39790f">&sect;&nbsp;</a></span>center_coords() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::center_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the geometric centroid to an array of coordinates in double* format and center the coordinates to the origin. Operates on the first "size" coordinates in the array. </dd></dl>

</div>
</div>
<a id="a037d5f246395ec725489c655344a958a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a037d5f246395ec725489c655344a958a">&sect;&nbsp;</a></span>rotate_coords() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::rotate_coords </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>m</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>size</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Rotates the coordinate set *c by the transformation matrix m[3][3] Operates on the first "size" coordinates in the array. </p>

</div>
</div>
<a id="a95b4ba35439691534ac9c74c47a4b688"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95b4ba35439691534ac9c74c47a4b688">&sect;&nbsp;</a></span>SetRotorToAngle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SetRotorToAngle </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>tor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>ang</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atoms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Rotate the coordinates of 'atoms' such that tor == ang - atoms in 'tor' should be ordered such that the 3rd atom is the pivot around which atoms rotate </p>

</div>
</div>
<a id="a034c6dd9973dc10ecb7cab1e58a683fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a034c6dd9973dc10ecb7cab1e58a683fa">&sect;&nbsp;</a></span>SafeOpen() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ifstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Safely open the supplied filename and return an ifstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a> error log if it fails. </p>

</div>
</div>
<a id="ab9bfc815426ab3c657b97c198aee9f3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9bfc815426ab3c657b97c198aee9f3e">&sect;&nbsp;</a></span>SafeOpen() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool OpenBabel::SafeOpen </td>
          <td>(</td>
          <td class="paramtype">std::ofstream &amp;&#160;</td>
          <td class="paramname"><em>fs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Safely open the supplied filename and return an ofstream, throwing an error to the default <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a> error log if it fails. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a034c6dd9973dc10ecb7cab1e58a683fa">SafeOpen()</a>.</p>

</div>
</div>
<a id="a2e30f35d0b3984ff969fed0eadc3a848"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2e30f35d0b3984ff969fed0eadc3a848">&sect;&nbsp;</a></span>InvertCase() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::InvertCase </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>start</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Shift the supplied string: lowercase to upper, and upper to lower </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>- The string to switch case </td></tr>
    <tr><td class="paramname">start</td><td>- The position to start inverting case </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a867d77834ebf14f88224f0dd7e7e0e61"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a867d77834ebf14f88224f0dd7e7e0e61">&sect;&nbsp;</a></span>SolveLinear()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::SolveLinear </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>B</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad37b2e597a6a0115fa09fc4903665c9d">SolveQuadratic()</a>.</p>

</div>
</div>
<a id="ad37b2e597a6a0115fa09fc4903665c9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad37b2e597a6a0115fa09fc4903665c9d">&sect;&nbsp;</a></span>SolveQuadratic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::SolveQuadratic </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>C</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af0ca115b10493da91f7a1c65f5b44ef6">SolveCubic()</a>.</p>

</div>
</div>
<a id="a637e2cd6fd74982c574e513d729b29bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a637e2cd6fd74982c574e513d729b29bc">&sect;&nbsp;</a></span>CubeRoot()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::CubeRoot </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>X</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af0ca115b10493da91f7a1c65f5b44ef6">SolveCubic()</a>.</p>

</div>
</div>
<a id="af0ca115b10493da91f7a1c65f5b44ef6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0ca115b10493da91f7a1c65f5b44ef6">&sect;&nbsp;</a></span>SolveCubic()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::SolveCubic </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>B</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>C</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>D</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa7ec675d10f9071757b87d4952938b65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa7ec675d10f9071757b87d4952938b65">&sect;&nbsp;</a></span>get_roots_3_3()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::get_roots_3_3 </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>mat</em>[3][3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>roots</em>[3]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a8aa7959b427e1c630f14732c2ad642c8">get_rmat()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a2c5374c2c0b42dee2fd36cd475a3cb1c">superimpose()</a>.</p>

</div>
</div>
<a id="a7b5986b1238c63b45e7fb0fdfdfc4ed0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b5986b1238c63b45e7fb0fdfdfc4ed0">&sect;&nbsp;</a></span>GetVectorBinding()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetVectorBinding </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a id="a5ef07c8230811964a209e423abea11d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ef07c8230811964a209e423abea11d2">&sect;&nbsp;</a></span>CreateAtom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int CreateAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>part</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>vb</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad08c2c13224b533dfbc799371d937317">OBMol::AddAtom()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad2762de927ca28384c48bf618603aab2">OBMol::NewAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">OBMol::ReserveAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a id="afb8652b972f454e6ab6a58c7ffa46380"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb8652b972f454e6ab6a58c7ffa46380">&sect;&nbsp;</a></span>FatalAllocationError()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FatalAllocationError </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>ptr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a17874fdfb56af286f64cbf9471772daa">AllocPattern()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5ef07c8230811964a209e423abea11d2">CreateAtom()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a0dc584d0582e8f76b7c9873dc1ccf569">CreateBond()</a>.</p>

</div>
</div>
<a id="adda2fb3f1a00bdee06b36a3a56ecab0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adda2fb3f1a00bdee06b36a3a56ecab0a">&sect;&nbsp;</a></span>FreePattern()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void FreePattern </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#afb8652b972f454e6ab6a58c7ffa46380">FatalAllocationError()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae445247649429e110f031d235bc4d465">FreeAtomExpr()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a41f4684ab61bddd674bda41fff7bac07">OBSmartsPattern::SMARTSError()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a45c009ff3b4002e84b8f6cc4adbc1a49">OBSmartsPattern::~OBSmartsPattern()</a>.</p>

</div>
</div>
<a id="a1fea358f643e1a4c2969fe9fc367372b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1fea358f643e1a4c2969fe9fc367372b">&sect;&nbsp;</a></span>CopyPattern()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> * CopyPattern </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac86a92f114ff5ab6ee7357352682922c">CopyAtomExpr()</a>, and <a class="el" href="namespaceOpenBabel.shtml#afb8652b972f454e6ab6a58c7ffa46380">FatalAllocationError()</a>.</p>

</div>
</div>
<a id="ac86a92f114ff5ab6ee7357352682922c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac86a92f114ff5ab6ee7357352682922c">&sect;&nbsp;</a></span>CopyAtomExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::CopyAtomExpr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>.</p>

</div>
</div>
<a id="ae445247649429e110f031d235bc4d465"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae445247649429e110f031d235bc4d465">&sect;&nbsp;</a></span>FreeAtomExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FreeAtomExpr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adda2fb3f1a00bdee06b36a3a56ecab0a">FreePattern()</a>, <a class="el" href="namespaceOpenBabel.shtml#adc058b406ead774fe4ab5ea82d24959f">NotAtomExpr()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">OBSmartsPattern::ParseAtomExpr()</a>.</p>

</div>
</div>
<a id="a060f018c46b11c9bd5f6c00b6d1bc16e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a060f018c46b11c9bd5f6c00b6d1bc16e">&sect;&nbsp;</a></span>BuildAtomPred()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomPred </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">OBSmartsPattern::ParseSimpleAtomPrimitive()</a>.</p>

</div>
</div>
<a id="a05c3c5437bf042e2b7212eafc929de87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a05c3c5437bf042e2b7212eafc929de87">&sect;&nbsp;</a></span>BuildAtomLeaf()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomLeaf </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>val</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adf5c0e4e485dfa0a5b9854063d0e75be">GenerateAromElem()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7d8b74f86bd19e5c64c5cfafbc0f5fc8">GenerateElement()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>.</p>

</div>
</div>
<a id="a03cacdaa8b1851aa9f927a8108b9e3ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a03cacdaa8b1851aa9f927a8108b9e3ea">&sect;&nbsp;</a></span>BuildAtomNot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomNot </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adc058b406ead774fe4ab5ea82d24959f">NotAtomExpr()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">OBSmartsPattern::ParseAtomExpr()</a>.</p>

</div>
</div>
<a id="a61fd91da70225bf05011639396d23b10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61fd91da70225bf05011639396d23b10">&sect;&nbsp;</a></span>BuildAtomBin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomBin </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a231ab7f84bd99606983b4edee4523324">OBSmartsPattern::ParseAtomExpr()</a>.</p>

</div>
</div>
<a id="a2c7a4877081dd4f7ab5966e1cb506895"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c7a4877081dd4f7ab5966e1cb506895">&sect;&nbsp;</a></span>BuildAtomRecurs()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::BuildAtomRecurs </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>.</p>

</div>
</div>
<a id="a7d8b74f86bd19e5c64c5cfafbc0f5fc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d8b74f86bd19e5c64c5cfafbc0f5fc8">&sect;&nbsp;</a></span>GenerateElement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::GenerateElement </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>elem</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">OBSmartsPattern::ParseSimpleAtomPrimitive()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a id="adf5c0e4e485dfa0a5b9854063d0e75be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adf5c0e4e485dfa0a5b9854063d0e75be">&sect;&nbsp;</a></span>GenerateAromElem()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::GenerateAromElem </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>elem</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a37c206172f1bf481c71af0985189e3fb">OBSmartsPattern::ParseComplexAtomPrimitive()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a47075ee8f542860bdbe57689bf785a4c">OBSmartsPattern::ParseSimpleAtomPrimitive()</a>.</p>

</div>
</div>
<a id="a8d298e86b8ff500e158a8410aa5aa732"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8d298e86b8ff500e158a8410aa5aa732">&sect;&nbsp;</a></span>IsInvalidAtom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsInvalidAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a308583e0ca7df091c7a7e3b9fb321805"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a308583e0ca7df091c7a7e3b9fb321805">&sect;&nbsp;</a></span>CopyBondExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::CopyBondExpr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>.</p>

</div>
</div>
<a id="a62e1c3bdf62c95fbff1b64cb4996eccb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62e1c3bdf62c95fbff1b64cb4996eccb">&sect;&nbsp;</a></span>EquivalentBondExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool OpenBabel::EquivalentBondExpr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check if two BondExpr objects are the same. This is used for ring closures to identify invalid SMARTS like:</p>
<p>C-1CCCCC#1 C=1CCCCC:1</p>
<p>However, the SMARTS below are valid and the bond expression next to the the second closure digit is used.</p>
<p>C1CCCCC#1 C1CCCCC=1 </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a id="aec5ad77869a83b4b1f65bcfcb065d98f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec5ad77869a83b4b1f65bcfcb065d98f">&sect;&nbsp;</a></span>FreeBondExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::FreeBondExpr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adda2fb3f1a00bdee06b36a3a56ecab0a">FreePattern()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">OBSmartsPattern::ParseBondExpr()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#aa944f62d90a19082249f5231412c6bb6">OBSmartsPattern::ParseSMARTSError()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">OBSmartsPattern::ParseSMARTSPart()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a id="abbddc5597f298d166500382c78381fc6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbddc5597f298d166500382c78381fc6">&sect;&nbsp;</a></span>BuildBondLeaf()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::BuildBondLeaf </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad1d85b6d3bd9953ffd9a3ffc5545bcfc">GenerateDefaultBond()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ad911e5f6baeec860288054e600b0d8e7">OBSmartsPattern::ParseBondPrimitive()</a>.</p>

</div>
</div>
<a id="a558423c98a7710dccb8d9234a8c0d2cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a558423c98a7710dccb8d9234a8c0d2cc">&sect;&nbsp;</a></span>BuildBondNot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::BuildBondNot </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">OBSmartsPattern::ParseBondExpr()</a>.</p>

</div>
</div>
<a id="a6fc2b0b41adf46651940ca2c9410ed0d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fc2b0b41adf46651940ca2c9410ed0d">&sect;&nbsp;</a></span>BuildBondBin()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::BuildBondBin </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>op</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>lft</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>rgt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6f7fd25ffc9470ac5e86db033562b63c">OBSmartsPattern::ParseBondExpr()</a>.</p>

</div>
</div>
<a id="ad1d85b6d3bd9953ffd9a3ffc5545bcfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1d85b6d3bd9953ffd9a3ffc5545bcfc">&sect;&nbsp;</a></span>GenerateDefaultBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a>* OpenBabel::GenerateDefaultBond </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a id="a17874fdfb56af286f64cbf9471772daa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17874fdfb56af286f64cbf9471772daa">&sect;&nbsp;</a></span>AllocPattern()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a>* OpenBabel::AllocPattern </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ae13bae2e9cf131660d957622c18280b8">OBSmartsPattern::ParseSMARTSPattern()</a>.</p>

</div>
</div>
<a id="a0dc584d0582e8f76b7c9873dc1ccf569"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0dc584d0582e8f76b7c9873dc1ccf569">&sect;&nbsp;</a></span>CreateBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::CreateBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>src</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>dst</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1fea358f643e1a4c2969fe9fc367372b">CopyPattern()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">OBMol::NewBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">OBMol::ReserveAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac5ed3fa8cd8081a98063409742f5326e">OBSmartsPattern::SMARTSParser()</a>.</p>

</div>
</div>
<a id="ac16aac0b5b4c8698863437383b747a5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac16aac0b5b4c8698863437383b747a5c">&sect;&nbsp;</a></span>MarkGrowBonds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::MarkGrowBonds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structOpenBabel_1_1Pattern.shtml">Pattern</a> *&#160;</td>
          <td class="paramname"><em>pat</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">OBSmartsPattern::ParseSMARTSPart()</a>.</p>

</div>
</div>
<a id="a308bf98f43b9e6d709f17b2e83617d6f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a308bf98f43b9e6d709f17b2e83617d6f">&sect;&nbsp;</a></span>GetChiralFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetChiralFlag </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a4b00a4b53fa768081ef929d86a26992b">OBSmartsPattern::ParseSMARTSPart()</a>.</p>

</div>
</div>
<a id="adc058b406ead774fe4ab5ea82d24959f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc058b406ead774fe4ab5ea82d24959f">&sect;&nbsp;</a></span>NotAtomExpr()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a>* OpenBabel::NotAtomExpr </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="acc7a90098a2f71e1480986f513426244"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acc7a90098a2f71e1480986f513426244">&sect;&nbsp;</a></span>GetExprOrder()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetExprOrder </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac7bd9a9f7066eb36f2cfa568d180cb80">BondExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a6b86ace2bf7866c375372ff338fe0889">OBSmartsPattern::GetBond()</a>.</p>

</div>
</div>
<a id="a72ea8a883185944d7c9cf78d11a4cac3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a72ea8a883185944d7c9cf78d11a4cac3">&sect;&nbsp;</a></span>GetExprCharge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetExprCharge </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#af2676c751682747829be9ccc966bda59">OBSmartsPattern::GetCharge()</a>.</p>

</div>
</div>
<a id="aed6b0490eea71c0269f0e4b9c8bbb419"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed6b0490eea71c0269f0e4b9c8bbb419">&sect;&nbsp;</a></span>GetExprAtomicNum()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::GetExprAtomicNum </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a8df92ddf377e8839e49c4c1d4a617f1e">AtomExpr</a> *&#160;</td>
          <td class="paramname"><em>expr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#ac924c0155e56518eeca1d013126eb51a">OBSmartsPattern::GetAtomicNum()</a>.</p>

</div>
</div>
<a id="a1be5369686428b6311fc8f79baf855c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1be5369686428b6311fc8f79baf855c5">&sect;&nbsp;</a></span>SmartsLexReplace() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::SmartsLexReplace </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::pair&lt; std::string, std::string &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vlex</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="acf0cdead441d34bce09b5dffbd031e94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acf0cdead441d34bce09b5dffbd031e94">&sect;&nbsp;</a></span>isqrt()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::isqrt </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#af4d8217756622db102e25941df848d37">IsOddPrime()</a>.</p>

</div>
</div>
<a id="af4d8217756622db102e25941df848d37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4d8217756622db102e25941df848d37">&sect;&nbsp;</a></span>IsOddPrime()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::IsOddPrime </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a5e5d2c394de2985154659ef73adddea6">DetermineFactors()</a>.</p>

</div>
</div>
<a id="a83b9098df014b7fce40c3d29eb240240"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a83b9098df014b7fce40c3d29eb240240">&sect;&nbsp;</a></span>RelativelyPrime()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::RelativelyPrime </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>y</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a368951c5db9d79bad24d0632dbaf23d4">DetermineIncrement()</a>.</p>

</div>
</div>
<a id="a9c9b5a925bb477e9cf899d8705defc60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c9b5a925bb477e9cf899d8705defc60">&sect;&nbsp;</a></span>LeadingZeros()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::LeadingZeros </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa995f2456608bb27a86fef9460f9e8e0">DoubleModulus()</a>.</p>

</div>
</div>
<a id="ab39d4f554084f831800c2f18b5b0f017"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab39d4f554084f831800c2f18b5b0f017">&sect;&nbsp;</a></span>DeterminePotency()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::DeterminePotency </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>a</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence()</a>.</p>

</div>
</div>
<a id="a5e5d2c394de2985154659ef73adddea6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e5d2c394de2985154659ef73adddea6">&sect;&nbsp;</a></span>DetermineFactors()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::DetermineFactors </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>factors</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence()</a>.</p>

</div>
</div>
<a id="a368951c5db9d79bad24d0632dbaf23d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a368951c5db9d79bad24d0632dbaf23d4">&sect;&nbsp;</a></span>DetermineIncrement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::DetermineIncrement </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ad3a7dadaa9b14b3d1a4a521f632a2477">DetermineSequence()</a>.</p>

</div>
</div>
<a id="ad3a7dadaa9b14b3d1a4a521f632a2477"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3a7dadaa9b14b3d1a4a521f632a2477">&sect;&nbsp;</a></span>DetermineSequence()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::DetermineSequence </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>pm</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>pa</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int *&#160;</td>
          <td class="paramname"><em>pc</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRandom.shtml#aad105f775b284c16fdd4c649e227335f">OBRandom::OBRandom()</a>.</p>

</div>
</div>
<a id="adfc4a863d0839be0e62e9db9d585fd7e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfc4a863d0839be0e62e9db9d585fd7e">&sect;&nbsp;</a></span>GenerateSequence()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::GenerateSequence </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a896fe2a9e9925cda30253ea47ab123c6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a896fe2a9e9925cda30253ea47ab123c6">&sect;&nbsp;</a></span>GetAtomIDNumber()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::GetAtomIDNumber </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>atomid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a03e155dc76ccf2017adead3ce70b55e1">OBResidue::GetAtomProperty()</a>.</p>

</div>
</div>
<a id="a822c0b4a40ee24e37bc3064b4e403458"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a822c0b4a40ee24e37bc3064b4e403458">&sect;&nbsp;</a></span>GetResidueNumber()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int OpenBabel::GetResidueNumber </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>res</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a91a8965770cf999c120602edb0c09bcd">SetResidueKeys()</a>.</p>

</div>
</div>
<a id="a91a8965770cf999c120602edb0c09bcd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a91a8965770cf999c120602edb0c09bcd">&sect;&nbsp;</a></span>SetResidueKeys()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void OpenBabel::SetResidueKeys </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>residue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>reskey</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>aakey</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidue.shtml#a7cf274421c8b6705d6470aa7e57b41ab">OBResidue::SetName()</a>.</p>

</div>
</div>
<a id="a387eb9209ded6f58de6c672c06121ec8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a387eb9209ded6f58de6c672c06121ec8">&sect;&nbsp;</a></span>DetermineFRJ()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int DetermineFRJ </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>.</p>

</div>
</div>
<a id="a3354aff787347f50d69b3f75a2ab4912"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3354aff787347f50d69b3f75a2ab4912">&sect;&nbsp;</a></span>BuildOBRTreeVector()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void BuildOBRTreeVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> *&#160;</td>
          <td class="paramname"><em>prv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; <a class="el" href="classOpenBabel_1_1OBRTree.shtml">OBRTree</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>vt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>.</p>

</div>
</div>
<a id="acd603c36f7650b398cddf72b1b863b1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acd603c36f7650b398cddf72b1b863b1f">&sect;&nbsp;</a></span>atomRingToBondRing()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;unsigned int&gt; OpenBabel::atomRingToBondRing </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atoms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aa416d75b34de1f74f1f0c145cabf7998">visitRing()</a>.</p>

</div>
</div>
<a id="aa416d75b34de1f74f1f0c145cabf7998"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa416d75b34de1f74f1f0c145cabf7998">&sect;&nbsp;</a></span>visitRing()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::visitRing </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> *&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&#160;</td>
          <td class="paramname"><em>ring</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>rlist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>rignored</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>This function finds the LSSR containing all relevant cycles. A cycle is relevant if it belongs to at least one minimum cycle basis. Another description is more useful though:</p>
<p>A cycle (C) is relevant if:</p><ul>
<li>no smaller cycles C_i, ..., C_k exist such that C = C_1 + ... + C_k</li>
<li>both bonds &amp; atoms are checked</li>
</ul>
<p>This is based on lemma 1 from:</p>
<p>P. Vismara, Union of all the minimum cycle bases of a graph, The electronic journal of combinatorics, Vol. 4, 1997 <a href="http://www.emis.de/journals/EJC/Volume_4/PostScriptfiles/v4i1r9.ps">http://www.emis.de/journals/EJC/Volume_4/PostScriptfiles/v4i1r9.ps</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#a5e60e6aac8c448ba3216236693e6f28a">OBRingSearch::RemoveRedundant()</a>.</p>

</div>
</div>
<a id="ac194707d84ac9327fe56e70b3cd1b0ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac194707d84ac9327fe56e70b3cd1b0ee">&sect;&nbsp;</a></span>FindRingAtomsAndBonds2()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static unsigned int FindRingAtomsAndBonds2 </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae58b3f3da59d333ffa0d5b0f005f3526">OBMol::FindRingAtomsAndBonds()</a>.</p>

</div>
</div>
<a id="a242fc84ac802af94d65d8807a5638e2f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a242fc84ac802af94d65d8807a5638e2f">&sect;&nbsp;</a></span>FindRings()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static int OpenBabel::FindRings </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int *&#160;</td>
          <td class="paramname"><em>avisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char *&#160;</td>
          <td class="paramname"><em>bvisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int &amp;&#160;</td>
          <td class="paramname"><em>frj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>depth</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac194707d84ac9327fe56e70b3cd1b0ee">FindRingAtomsAndBonds2()</a>.</p>

</div>
</div>
<a id="a9f0ec6e80141edbb924cfc4839117c94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f0ec6e80141edbb924cfc4839117c94">&sect;&nbsp;</a></span>rint()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double OpenBabel::rint </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a731bb8e81cfd2699e1bfeb0c24fc7d2b">OBRotamerList::AddRotamer()</a>.</p>

</div>
</div>
<a id="a3d3039fda855c4c8c37c8345f0b51a64"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3d3039fda855c4c8c37c8345f0b51a64">&sect;&nbsp;</a></span>SetRotorToAngle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRotorToAngle </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> **&#160;</td>
          <td class="paramname"><em>ref</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>ang</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>atoms</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Rotate the coordinates of 'atoms' such that tor == ang. Atoms in 'tor' should be ordered such that the 3rd atom is the pivot around which atoms rotate (ang is in degrees) </p><dl class="todo"><dt><b><a class="el" href="todo.shtml#_todo000017">Todo:</a></b></dt><dd>This code is identical to <a class="el" href="classOpenBabel_1_1OBMol.shtml#a501e76993e9deb8ec8ab24c464d4ed3c">OBMol::SetTorsion()</a> and should be combined </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a3f0fbaf701b38d36aaa0a225de04841d">OBRotamerList::CreateConformerList()</a>, <a class="el" href="namespaceOpenBabel.shtml#a9f0ec6e80141edbb924cfc4839117c94">rint()</a>, and <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a769b901b37f0d05c32169473653d639a">OBRotamerList::SetCurrentCoordinates()</a>.</p>

</div>
</div>
<a id="a69a83bcbc3a172e306c4556518aa0999"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a69a83bcbc3a172e306c4556518aa0999">&sect;&nbsp;</a></span>PackCoordinate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::PackCoordinate </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max</em>[3]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a3180afc2c45b337a776dcc164e99e89a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3180afc2c45b337a776dcc164e99e89a">&sect;&nbsp;</a></span>UnpackCoordinate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void OpenBabel::UnpackCoordinate </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>max</em>[3], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>tmp</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a534fe2a629963b79ffbd499f461ca5df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a534fe2a629963b79ffbd499f461ca5df">&sect;&nbsp;</a></span>GetDFFVector()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool GetDFFVector </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>dffv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#af216aef19cf7a82fb1e57504b39f9329">OBRotorList::SetRotAtomsByFix()</a>.</p>

</div>
</div>
<a id="adfad2bce1feae52028bcf69d6b5de37a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfad2bce1feae52028bcf69d6b5de37a">&sect;&nbsp;</a></span>CompareRotor() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool CompareRotor </td>
          <td>(</td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const pair&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, int &gt; &amp;&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>.</p>

</div>
</div>
<a id="ab1efa641b2fa046a6c00f729818933d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab1efa641b2fa046a6c00f729818933d6">&sect;&nbsp;</a></span>trim_spaces()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* OpenBabel::trim_spaces </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>string</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Trim any trailing spaces at the end of the supplied string. </p>

</div>
</div>
<a id="a7c95d6afb719f05c8b3942c74e6a5447"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c95d6afb719f05c8b3942c74e6a5447">&sect;&nbsp;</a></span>eval_horn_NR_corrxn()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double OpenBabel::eval_horn_NR_corrxn </td>
          <td>(</td>
          <td class="paramtype">const vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>x</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#aeaeba11a05917b1927374e963d6b3227">QCProot()</a>.</p>

</div>
</div>
<a id="aeaeba11a05917b1927374e963d6b3227"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeaeba11a05917b1927374e963d6b3227">&sect;&nbsp;</a></span>QCProot()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double OpenBabel::QCProot </td>
          <td>(</td>
          <td class="paramtype">const vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>coeff</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>guess</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>delta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a363d76f22dfe31857de03ff4a4caee11">CalcQuarticCoeffs()</a>.</p>

</div>
</div>
<a id="a363d76f22dfe31857de03ff4a4caee11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a363d76f22dfe31857de03ff4a4caee11">&sect;&nbsp;</a></span>CalcQuarticCoeffs()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;double&gt; OpenBabel::CalcQuarticCoeffs </td>
          <td>(</td>
          <td class="paramtype">const Eigen::Matrix3d &amp;&#160;</td>
          <td class="paramname"><em>M</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a41d8538809cb689100fa8a0807510128"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41d8538809cb689100fa8a0807510128">&sect;&nbsp;</a></span>operator*() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> OpenBabel::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&#160;</td>
          <td class="paramname"><em>A</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&#160;</td>
          <td class="paramname"><em>B</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a30703c4e70c6142f64ceb67f1888b6e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30703c4e70c6142f64ceb67f1888b6e2">&sect;&nbsp;</a></span>SQUARE()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static double OpenBabel::SQUARE </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, and <a class="el" href="classOpenBabel_1_1matrix3x3.shtml#aeae6ec0ae0d036137c03275be0010878">matrix3x3::FillOrth()</a>.</p>

</div>
</div>
<a id="a590374f29c633247d07b75e43ae89f9d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a590374f29c633247d07b75e43ae89f9d">&sect;&nbsp;</a></span>operator<<() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">ostream&amp; OpenBabel::operator&lt;&lt; </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>co</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1matrix3x3.shtml">matrix3x3</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Print a text representation of the matrix in the standardized form: [ a, b, c ] <br />
 [ d, e, f ] <br />
 [ g, h, i ] <br />
 where the letters represent the appropriate entries in the matrix. Uses the standard output format for the individual entries, separated by ", " for each column, and [ ] indicating each row. </p>

</div>
</div>
<a id="a12c13a3449bb5bffa3436d7dda6f217c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12c13a3449bb5bffa3436d7dda6f217c">&sect;&nbsp;</a></span>RemoveWhiteSpaceUnderscore()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string OpenBabel::RemoveWhiteSpaceUnderscore </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>in</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Function to remove whitespaces from a string, returning a new string </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#ac6957eacc9ea85e6e67a9d964c6d4ced">SpaceGroup::AddTransform()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#adc5179fa55c4d176d458cadb7ffd2afe">SpaceGroup::Find()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a95a213aecae334a88a385c647318361e">SpaceGroup::GetSpaceGroup()</a>, and <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#a3053a7c0ada34598119f6768fdad5138">SpaceGroup::RegisterSpaceGroup()</a>.</p>

</div>
</div>
<a id="ad8081070ab0409c71d9abfe43902881f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad8081070ab0409c71d9abfe43902881f">&sect;&nbsp;</a></span>VZero()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::VZero </td>
          <td>(</td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#a7da2d388ded31320b18e7bb51fa4cf76">vector3::createOrthoVector()</a>.</p>

</div>
</div>
<a id="a71fd9d70c392449514d7a263d94e0ed1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a71fd9d70c392449514d7a263d94e0ed1">&sect;&nbsp;</a></span>VX()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::VX </td>
          <td>(</td>
          <td class="paramtype">1.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#a7da2d388ded31320b18e7bb51fa4cf76">vector3::createOrthoVector()</a>.</p>

</div>
</div>
<a id="ac43607459a7e61f202515f641ff57508"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac43607459a7e61f202515f641ff57508">&sect;&nbsp;</a></span>VY()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::VY </td>
          <td>(</td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">1.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#a7da2d388ded31320b18e7bb51fa4cf76">vector3::createOrthoVector()</a>.</p>

</div>
</div>
<a id="abe3ca6a519f7aa7bcade3fb6d2b927f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe3ca6a519f7aa7bcade3fb6d2b927f6">&sect;&nbsp;</a></span>VZ()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> OpenBabel::VZ </td>
          <td>(</td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">0.&#160;</td>
          <td class="paramname"><em>0</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">1.&#160;</td>
          <td class="paramname"><em>0</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1vector3.shtml#a7da2d388ded31320b18e7bb51fa4cf76">vector3::createOrthoVector()</a>.</p>

</div>
</div>
<a id="adfeeb7c49527c6c136a5d659cd6300d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfeeb7c49527c6c136a5d659cd6300d8">&sect;&nbsp;</a></span>getdelta()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::getdelta </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a3bd8fc9449e58c9db0b6a7ab2621cc9d">ASCIIPainter::Bresenham()</a>.</p>

</div>
</div>
<a id="a979d62c902dc70aaef88fa6eb639a745"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a979d62c902dc70aaef88fa6eb639a745">&sect;&nbsp;</a></span>getsymbols()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string OpenBabel::getsymbols </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>x2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>y2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1ASCIIPainter.shtml#a3bd8fc9449e58c9db0b6a7ab2621cc9d">ASCIIPainter::Bresenham()</a>.</p>

</div>
</div>
<a id="acfcb21e667eaa6f03208c8ece10eff16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfcb21e667eaa6f03208c8ece10eff16">&sect;&nbsp;</a></span>writeFunction()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static cairo_status_t OpenBabel::writeFunction </td>
          <td>(</td>
          <td class="paramtype">void *&#160;</td>
          <td class="paramname"><em>closure</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const unsigned char *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>length</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1CairoPainter.shtml#ae90d9b13aea6fcde0d52b74064cd5158">CairoPainter::WriteImage()</a>.</p>

</div>
</div>
<a id="a474093accb1df03b02d17bc4b7f00377"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a474093accb1df03b02d17bc4b7f00377">&sect;&nbsp;</a></span>GetLabelAlignment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int OpenBabel::GetLabelAlignment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>.</p>

</div>
</div>
<a id="a394447ad37adaf40565f53d07f5eed17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a394447ad37adaf40565f53d07f5eed17">&sect;&nbsp;</a></span>GetAtomSymClass()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int OpenBabel::GetAtomSymClass </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a id="af962a429bf8fe8b8f222ff1a6018c35e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af962a429bf8fe8b8f222ff1a6018c35e">&sect;&nbsp;</a></span>AliasDataType</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned int AliasDataType = 0x7883</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">AliasData::RevertToAliasForm()</a>.</p>

</div>
</div>
<a id="a705f8e90fa8ff30ccef095fb0df5a3ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a705f8e90fa8ff30ccef095fb0df5a3ee">&sect;&nbsp;</a></span>HARTEE_TO_KCALPERMOL</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double HARTEE_TO_KCALPERMOL = 627.509469</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a22642156c54d298d699ea3946f633d1b">UnitNameToConversionFactor()</a>.</p>

</div>
</div>
<a id="a2eee26925572209557d8176a44019c08"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2eee26925572209557d8176a44019c08">&sect;&nbsp;</a></span>KJPERMOL_TO_KCALPERMOL</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double KJPERMOL_TO_KCALPERMOL = 1.0/4.184</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a22642156c54d298d699ea3946f633d1b">UnitNameToConversionFactor()</a>.</p>

</div>
</div>
<a id="a6f1f2a4bf3acd168b5b6b8907615141f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6f1f2a4bf3acd168b5b6b8907615141f">&sect;&nbsp;</a></span>RYDBERG_TO_KCALPERMOL</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double RYDBERG_TO_KCALPERMOL = 313.755026</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a22642156c54d298d699ea3946f633d1b">UnitNameToConversionFactor()</a>.</p>

</div>
</div>
<a id="a3f34cdc6856f8dc82e8b9007c9633e39"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f34cdc6856f8dc82e8b9007c9633e39">&sect;&nbsp;</a></span>ELECTRONVOLT_TO_KCALPERMOL</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const double ELECTRONVOLT_TO_KCALPERMOL = 23.060538</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a22642156c54d298d699ea3946f633d1b">UnitNameToConversionFactor()</a>.</p>

</div>
</div>
<a id="a94007d911a76e1404494fd9b1785f22b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94007d911a76e1404494fd9b1785f22b">&sect;&nbsp;</a></span>RateData</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned RateData = 55555</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a4c2b0b854dea9451bf30f7b37353c877"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c2b0b854dea9451bf30f7b37353c877">&sect;&nbsp;</a></span>ThermoData</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned ThermoData = 55556</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBNasaThermoData.shtml#a8391a502a623c62101d104739f96ed01">OBNasaThermoData::OBNasaThermoData()</a>.</p>

</div>
</div>
<a id="af9a30f985504c4a70fd08aa72c0cd16a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af9a30f985504c4a70fd08aa72c0cd16a">&sect;&nbsp;</a></span>obLocale</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBLocale.shtml">OBLocale</a> obLocale</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBLocale.shtml" title="Handle the locale for numeric data parsing. ">OBLocale</a> for setting and restoring locale information. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OBGlobalDataBase::Init()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a1204f9b613067a04ebfe881a58775918">OBConversion::Read()</a>, and <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a3d46d682999a7772db31a835fa4a8091">OBConversion::Write()</a>.</p>

</div>
</div>
<a id="a82ccfbdf4943a4e74a708edafcced9f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a82ccfbdf4943a4e74a708edafcced9f6">&sect;&nbsp;</a></span>MAXBONDS</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int MAXBONDS =300</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a22febe826ea2f93f69725fbef532c921"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22febe826ea2f93f69725fbef532c921">&sect;&nbsp;</a></span>MAXFRAGS</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int MAXFRAGS =200</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab91841d785674a38b34fcf2fd9685142"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab91841d785674a38b34fcf2fd9685142">&sect;&nbsp;</a></span>MAXCHARS</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int MAXCHARS =1000</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad087045047b2155479ef662be1be3abc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad087045047b2155479ef662be1be3abc">&sect;&nbsp;</a></span>MAX_DEPTH</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int MAX_DEPTH =10</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad1eec14ce20cfaf366e19721f1f27090"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad1eec14ce20cfaf366e19721f1f27090">&sect;&nbsp;</a></span>NELEMMAX</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const int NELEMMAX =120</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e53ca6bf87ac2f6447c9ef2332c9418"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e53ca6bf87ac2f6447c9ef2332c9418">&sect;&nbsp;</a></span>etab</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBElementTable.shtml">OBElementTable</a> etab</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBElementTable.shtml" title="Periodic Table of the Elements. ">OBElementTable</a> for element properties. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1befb9ee43954207d09e3229e4b5753b">OBMol::AddHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7acd1c4965f682ab6f25f7cfa30f34dd">OBMol::AddNewHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a2c881c14b105f45a8d7f555aedc12964">OBAtom::GetAtomicMass()</a>, <a class="el" href="namespaceOpenBabel.shtml#a69c4665c3756720ac6f0d62b2488fdd6">GetCorrectedBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a4cb9ded766d46989223816771b033155">OBBond::GetEquibLength()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a77cd52b60b431c19aa7debcd0d92e07d">OBMol::GetMolWt()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">OBMol::GetSpacedFormula()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="classOpenBabel_1_1OBStericConformerFilter.shtml#aa37ca1a89ffb71694922e4b90b012ab2">OBStericConformerFilter::IsGood()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="ab8d4d5690031703bcccb95ddbe7ebf0a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8d4d5690031703bcccb95ddbe7ebf0a">&sect;&nbsp;</a></span>ttab</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBTypeTable.shtml">OBTypeTable</a> ttab</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Global <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml" title="Atom Type Translation Table. ">OBTypeTable</a> for translating between different atom types (e.g., Sybyl &lt;-&gt; MM2) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBAtom::GetType()</a>, and <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>.</p>

</div>
</div>
<a id="a35082995377e56142ee5a9fd351c7a70"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35082995377e56142ee5a9fd351c7a70">&sect;&nbsp;</a></span>isotab</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml">OBIsotopeTable</a> isotab</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml" title="Table of atomic isotope masses. ">OBIsotopeTable</a> for isotope properties. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a2c881c14b105f45a8d7f555aedc12964">OBAtom::GetAtomicMass()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ab36dd05b9bb678077bbfd52a952ca72a">OBAtom::GetExactMass()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7cac960f30506aa53d083983845032df">OBMol::GetExactMass()</a>.</p>

</div>
</div>
<a id="a36c0ee580e088fa888f7d96c16e969bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a36c0ee580e088fa888f7d96c16e969bd">&sect;&nbsp;</a></span>aromtyper</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml">OBAromaticTyper</a> aromtyper</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds. ">OBAromaticTyper</a> for detecting aromatic atoms and bonds. </p>

</div>
</div>
<a id="a717e026b570e71d0e648d851d34b6482"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a717e026b570e71d0e648d851d34b6482">&sect;&nbsp;</a></span>atomtyper</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml">OBAtomTyper</a> atomtyper</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Global <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a> for marking internal valence, hybridization, and atom types (for internal and external use) </p>

</div>
</div>
<a id="ab81925dbd111f3bf1733a4cbba547131"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab81925dbd111f3bf1733a4cbba547131">&sect;&nbsp;</a></span>chainsparser</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBChainsParser.shtml">OBChainsParser</a> chainsparser</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol. ">OBChainsParser</a> for detecting macromolecular chains and residues. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#afac526c6de01759b568caddae4c4f2c3">OBAtom::GetResidue()</a>.</p>

</div>
</div>
<a id="a394eef44b3dd6a9174067715712c2d16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a394eef44b3dd6a9174067715712c2d16">&sect;&nbsp;</a></span>obErrorLog</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml">OBMessageHandler</a> obErrorLog</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBMessageHandler.shtml" title="Handle error messages, warnings, debugging information and the like. ">OBMessageHandler</a> error handler. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1FastSearchIndexer.shtml#ad4714872089241b8d1b5bb6b714b5e5c">FastSearchIndexer::Add()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#aca994f4a7f7e175991a4f0c3c99f99d6">OBChiralData::AddAtomRef()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a342df96ba3cd8751e19758939dbef2f5">OBConversion::AddChemObject()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7acd1c4965f682ab6f25f7cfa30f34dd">OBMol::AddNewHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a2230dfc67c9b617df81f950e382844cc">OBDescriptor::AddProperties()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a946a73d3de978fd930793711f23e00b3">OBAlign::Align()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">OBMol::Align()</a>, <a class="el" href="namespaceOpenBabel.shtml#a818fd93f0aa1e1f5b3c63bbbc8013cca">AllocateByteCode()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">alternate()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#aef2ec72bd2c0b6c3846d20c1ba1fce3f">patty::assign_types()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad85ec95d1f909843737b67d70638f3c9">OBMol::AssignSpinMultiplicity()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62429f9b662a5d62b500ec2fedf7f67c">OBMol::AssignTotalChargeToAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a39b6cebdf53672368cfa3edd8bc7740d">OBConversion::CheckForUnintendedBatch()</a>, <a class="el" href="structOpenBabel_1_1FptIndex.shtml#a682b05eef24f11179405526ff6f81095">FptIndex::CheckFP()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b">OBMol::Clear()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a5a775da37f5ce464013813ec66b3a349">OBDescriptor::Compare()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a95c512f009bf277d9d6299d9f5d0c13d">OBConversion::Convert()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669">OBMol::CorrectForPH()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a0d49a0baf30d9e34b8b32f9d61e3043b">OBMoleculeFormat::DeleteDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4e2ddc39752d20fabcda1afc1cc4e8e4">OBMol::DeleteHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a2993ead33ec2a4b15dd536d798ff844d">OBMol::DeleteNonPolarHydrogens()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a43904e621e60855bc1818b56a7bd4b93">OBMol::DeletePolarHydrogens()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5531433a3edb03cf74aecd1ffadfe3a7">DeleteStereoOnAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">OBMol::EndModify()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="namespaceOpenBabel.shtml#a31ce8b089ca36508940585406a2f93f1">expand_cycle()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">expandKekulize()</a>, <a class="el" href="namespaceOpenBabel.shtml#afb8652b972f454e6ab6a58c7ffa46380">FatalAllocationError()</a>, <a class="el" href="namespaceOpenBabel.shtml#a59c2e046bb935ac3eba0d3b003d10176">FatalMemoryError()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, <a class="el" href="classOpenBabel_1_1SpaceGroup.shtml#adc5179fa55c4d176d458cadb7ffd2afe">SpaceGroup::Find()</a>, <a class="el" href="classOpenBabel_1_1FastSearch.shtml#a575cc7caa2b2a42bec8b47e7c0206a80">FastSearch::Find()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">OBMol::FindLSSR()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">findMetalloceneBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae58b3f3da59d333ffa0d5b0f005f3526">OBMol::FindRingAtomsAndBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">OBMol::FindSSSR()</a>, <a class="el" href="classOpenBabel_1_1OBFingerprint.shtml#a9bbe06daca0e9e000492cc6a89d7dabd">OBFingerprint::Fold()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a9d12b0f7f38951d2d1065fc7ddae4229">OBConversion::FullConvert()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a6a9ca08185bebf3307c4a1acd31e58c3">OBAlign::GetAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5595d8755d9ec6f539143f7d059124d0">OBMol::GetAtom()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a7b8c81d814bfa2d10503f54555d7a79c">OBChiralData::GetAtom4Refs()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a21478d000fc5211caff7a7b1ffb3fbeb">OBMol::GetAtomById()</a>, <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#a4f3c95b233fb0842946292b984acf1a3">OBElementTable::GetAtomicNum()</a>, <a class="el" href="namespaceOpenBabel.shtml#a896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a107ae45be73b2ef79045015f04cd73b1">OBChiralData::GetAtomRef()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04806f750ec871778f68d6c2cff331a">OBMol::GetBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af28457ecdb11ba34d05bb6b02124c0e0">OBMol::GetBondById()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">OBMol::GetFormula()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a9d1adeb0f4720b6af7f0fc5569a8bb3e">OBDescriptor::GetIdentifier()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8e992bd318407a72c7e745653716ae2c">OBMol::GetResidue()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a060c746a125272a535ec8f6b59f5338a">OBAlign::GetRMSD()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a53e6707da019dfa88df1e8c1aeeb6f67">OBAlign::GetRotMatrix()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#a364829e3db2b779bacef6c11ed43cbc1">OBChiralData::GetSize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab78d46b60f04702fa6f450ef6f8dae62">OBMol::GetTotalCharge()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa431b859ed26f5a45e6ddc3448da1d1f">OBMol::GetTotalSpinMultiplicity()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="classOpenBabel_1_1OBGlobalDataBase.shtml#a1e3b6d38df0786ccf7f938d60e386aae">OBGlobalDataBase::Init()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">OBMol::Kekulize()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#afe0a7e760f4908db34dfb69dc65d3bba">OBBuilder::LoadFragments()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">OBMol::NewPerceiveKekuleBonds()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#aea0a1d956ad2f87302924423930c793b">OBConversion::NumInputObjects()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a23aaa3e3be1f55323cd956b53f6b0417">OBConversion::OpenAndSetFormat()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a7424c6fe9292f59087d23e7748ac237e">OBConversion::OpenInAndOutFiles()</a>, <a class="el" href="classDLHandler.shtml#aace44b593957d50c6396a1e23d67189d">DLHandler::openLib()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#aabcab4054392d585a1e3b2d108aead54">OBMoleculeFormat::OutputDeferredMols()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBBondTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAtomTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBAromaticTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ae59fef8af62e52629bf2576e34a26801">OBRotorRules::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ae59fef8af62e52629bf2576e34a26801">OBRingTyper::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae59fef8af62e52629bf2576e34a26801">OBPhModel::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBIsotopeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBIsotopeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBTypeTable::ParseLine()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#ad52e9084efab7e27fbe7fe394612ca57">patty::read_rules()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a76d7d1bf8e0c05c19d5b5e991fd0ba2f">OBConversion::ReadFile()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#ac41e9b3233ce576c2e4c5b242767eaec">OBDescriptor::ReadStringFromFilter()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#a6a45eddab233711eb4e432ed5657358f">OBConversion::RegisterOptionParam()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="namespaceOpenBabel.shtml#a1e68658ca81568e214ebedb8f6c4bd10">SafeOpen()</a>, <a class="el" href="classOpenBabel_1_1OBChiralData.shtml#ab2d7445256c698000dd2beab47a784e0">OBChiralData::SetAtom4Refs()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#a9b40b242258cc488f341d06412a1fb89">OBTypeTable::SetFromType()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a49b0e7a728429a4482c47127538f0fa6">OBMol::SetInternalCoord()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a501e76993e9deb8ec8ab24c464d4ed3c">OBMol::SetTorsion()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#aeb07d37f2d18888127964d11e28c1c12">OBTypeTable::SetToType()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a6acf77e0a6d65df4fe6d4d79831ed9d0">OBRotorList::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#a41f4684ab61bddd674bda41fff7bac07">OBSmartsPattern::SMARTSError()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">OBMol::start_kekulize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a89743304090380b06c920530f919a2fe">OBMol::StripSalts()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac9aac27fe3b12d7201f8eb7cb95a3c57">ThrowError()</a>, <a class="el" href="classOpenBabel_1_1OBTetraNonPlanarStereo.shtml#ac6f1bf41e38b3e8b182fa57269046070">OBTetraNonPlanarStereo::ToConfig()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a751725f02bf62696515d79608198cd59">OBMol::ToInertialFrame()</a>, <a class="el" href="classOpenBabel_1_1OBTypeTable.shtml#a613e0ea0da4b4b0d26ea29439e3554a8">OBTypeTable::Translate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#af574984ee6ea81537b5af994f7f590df">patty::type_to_int()</a>, <a class="el" href="namespaceOpenBabel.shtml#a22642156c54d298d699ea3946f633d1b">UnitNameToConversionFactor()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a3748ab33ffd81acda5060963bdae971a">OBAlign::UpdateCoords()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBConversion.shtml#ad17f0a96643dec6840eda76c07a54698">OBConversion::WriteFile()</a>, and <a class="el" href="classOpenBabel_1_1FastSearchIndexer.shtml#a4ad5fb826838fc07d9bee2c09b5ef039">FastSearchIndexer::~FastSearchIndexer()</a>.</p>

</div>
</div>
<a id="a30154f62f3bd1a1b8613a080444e69d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a30154f62f3bd1a1b8613a080444e69d7">&sect;&nbsp;</a></span>resdat</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidueData.shtml">OBResidueData</a> resdat</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBResidueData.shtml" title="Table of common biomolecule residues (for PDB or other files). ">OBResidueData</a> biomolecule residue database. </p>

</div>
</div>
<a id="a99dab86ea7c23d635f350a07644c16a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a99dab86ea7c23d635f350a07644c16a6">&sect;&nbsp;</a></span>NoId</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned long NoId = <a class="el" href="structOpenBabel_1_1detail_1_1max__value.shtml">detail::max_value</a>&lt;unsigned long&gt;::result</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad08c2c13224b533dfbc799371d937317">OBMol::AddAtom()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad12fd937da5f4b0c4562888252fe214b">OBAtom::Clear()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a id="a1c64f54dc7b18535a4e9cc581199e26a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c64f54dc7b18535a4e9cc581199e26a">&sect;&nbsp;</a></span>Residue</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char Residue</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ada1d79ef0dec356ea0ae9c1d4e654ca2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ada1d79ef0dec356ea0ae9c1d4e654ca2">&sect;&nbsp;</a></span>ElemDesc</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char ElemDesc</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af4a6dc069703276b9476ce6b7c5f018e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4a6dc069703276b9476ce6b7c5f018e">&sect;&nbsp;</a></span>ResNo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int ResNo = <a class="el" href="residue_8h.shtml#ad165362f7dc704f2cce3cd6042b1bf8f">MINRES</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a822c0b4a40ee24e37bc3064b4e403458">GetResidueNumber()</a>.</p>

</div>
</div>
<a id="a508adcc5794ff87b21a2e5fc0d752b17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a508adcc5794ff87b21a2e5fc0d752b17">&sect;&nbsp;</a></span>ElemNo</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int ElemNo = <a class="el" href="residue_8h.shtml#abd6045b55ead8f29d9593e79e6b20575">MINELEM</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a896fe2a9e9925cda30253ea47ab123c6">GetAtomIDNumber()</a>.</p>

</div>
</div>
<a id="ace51dfd98be07acf3a9c75c21e8d8af2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace51dfd98be07acf3a9c75c21e8d8af2">&sect;&nbsp;</a></span>VZero</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> VZero(0.0, 0.0, 0.0)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The zero vector: &lt;0.0, 0.0, 0.0&gt; </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml#a1563b71f50c0192978cecaed6fc11fcb">OBScoreGrid::Center()</a>, <a class="el" href="namespaceOpenBabel.shtml#aabfd0c1c9630002b16c782ad7d39790f">center_coords()</a>, <a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml#af6996bda138d1b637cf36db2fab269d8">OBScoreGrid::CenterMol()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#a9b1ae06b444f49a68b2e2c8ac9a0c534">OBChargeModel::GetDipoleMoment()</a>, <a class="el" href="classOpenBabel_1_1OBFFConstraint.shtml#aa72374f7ad0c140529a3b010e7daf8af">OBFFConstraint::GetGradient()</a>, <a class="el" href="namespaceOpenBabel.shtml#a474093accb1df03b02d17bc4b7f00377">GetLabelAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">OBMol::HasNonZeroCoords()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a5f08066361ace92acfa362df93fafd76">OBForceField::LineSearch()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#afe981b8f96a737d0228fbf62c4c94417">OBForceField::VectorAngleDerivative()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4b7e7649d0928a2cb6a2123e3e4dec6f">OBForceField::VectorOOPDerivative()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a4d4709cf0de47e7c6f44da4e21f20c9f">OBForceField::VectorTorsionDerivative()</a>.</p>

</div>
</div>
<a id="a6ca3b632d31093a7110635452bccc7bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ca3b632d31093a7110635452bccc7bd">&sect;&nbsp;</a></span>VX</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> VX(1.0, 0.0, 0.0)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The x unit vector: &lt;1.0, 0.0, 0.0&gt; </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>.</p>

</div>
</div>
<a id="a2d3d483edcdb477b3d15f19a001845ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2d3d483edcdb477b3d15f19a001845ee">&sect;&nbsp;</a></span>VY</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> VY(0.0, 1.0, 0.0)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The y unit vector: &lt;0.0, 1.0, 0.0&gt; </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">InternalToCartesian()</a>.</p>

</div>
</div>
<a id="a08ec791bf0217b5df66e5879a9f9c95a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08ec791bf0217b5df66e5879a9f9c95a">&sect;&nbsp;</a></span>VZ</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> VZ(0.0, 0.0, 1.0)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The z unit vector: &lt;0.0, 0.0, 1.0&gt; </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a32a70eb5e04f4e10a386089723f05b2a">dot()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ad0cefa50ad126c06c03bad33175ce2b4">OBBuilder::GetNewBondVector()</a>.</p>

</div>
</div>
<a id="af4a64fa5669b273a31330641abe62978"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4a64fa5669b273a31330641abe62978">&sect;&nbsp;</a></span>phmodel</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBPhModel.shtml">OBPhModel</a> phmodel</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aa5cbbbb696c845c426871bc19a4a01d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa5cbbbb696c845c426871bc19a4a01d5">&sect;&nbsp;</a></span>bitsoff</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int bitsoff[<a class="el" href="bitvec_8h.shtml#a9fe4f0c47a767fe2d6e2c365059a5a65">SETWORD</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div><div class="line">    {</div><div class="line">      0xFFFFFFFF,0xFFFFFFFE,0xFFFFFFFC,0xFFFFFFF8,0xFFFFFFF0,0xFFFFFFE0,0xFFFFFFC0,</div><div class="line">      0xFFFFFF80,0xFFFFFF00,0xFFFFFE00,0xFFFFFC00,0xFFFFF800,0xFFFFF000,0xFFFFE000,</div><div class="line">      0xFFFFC000,0xFFFF8000,0xFFFF0000,0xFFFE0000,0xFFFC0000,0xFFF80000,0xFFF00000,</div><div class="line">      0xFFE00000,0xFFC00000,0xFF800000,0xFF000000,0xFE000000,0xFC000000,0xF8000000,</div><div class="line">      0xF0000000,0xE0000000,0xC0000000,0x80000000</div><div class="line">    }</div></div><!-- fragment -->
</div>
</div>
<a id="a37764b678471578b5f9441bd6f130fd8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37764b678471578b5f9441bd6f130fd8">&sect;&nbsp;</a></span>nibble_bit_count</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned nibble_bit_count[0x10]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">=</div><div class="line">    {</div><div class="line">      0, </div><div class="line">      1, </div><div class="line">      1, </div><div class="line">      2, </div><div class="line">      1, </div><div class="line">      2, </div><div class="line">      2, </div><div class="line">      3, </div><div class="line">      1, </div><div class="line">      2, </div><div class="line">      2, </div><div class="line">      3, </div><div class="line">      2, </div><div class="line">      3, </div><div class="line">      3, </div><div class="line">      4  </div><div class="line">    }</div></div><!-- fragment -->
</div>
</div>
<a id="aba95148bad1cac8e3abb51a485c17cac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba95148bad1cac8e3abb51a485c17cac">&sect;&nbsp;</a></span>bondtyper</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBondTyper.shtml">OBBondTyper</a> bondtyper</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Global <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml" title="Assigns bond types for file formats without bond information. ">OBBondTyper</a> for perception of bond order assignment. </p>

</div>
</div>
<a id="a26e55b55a5d9997fa7e9326cd603fcdd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a26e55b55a5d9997fa7e9326cd603fcdd">&sect;&nbsp;</a></span>Peptide</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a> Peptide[<a class="el" href="chains_8cpp.shtml#af1b2c4af4f9a6909c7a63cc9cc0e86ad">MAXPEPTIDE</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">        {  0x0001, 7, 2, 0x0030, 0x0100,      0, 0 }, </div><div class="line">        {  0x0002, 7, 1, 0x0030,      0,      0, 0 }, </div><div class="line">        {  0x0004, 7, 3, 0x0030, 0x0100,     -6, 0 }, </div><div class="line">        {  0x0008, 7, 2, 0x0030,     -6,      0, 0 }, </div><div class="line">        {  0x0010, 6, 3, 0x000F, 0x0700,     -6, 0 }, </div><div class="line">        {  0x0020, 6, 2, 0x0003, 0x0700,      0, 0 }, </div><div class="line">        {  0x0100, 6, 3, 0x0030, 0x1000, 0x0005, 0 }, </div><div class="line">        {  0x0200, 6, 2, 0x0030, 0x1000,      0, 0 }, </div><div class="line">        {  0x0400, 6, 3, 0x0030, 0x1000, 0x2000, 0 }, </div><div class="line">        {  0x1000, 8, 1, 0x0700,      0,      0, 0 }, </div><div class="line">        {  0x2000, 8, 1, 0x0400,      0,      0, 0 }  </div><div class="line">  }</div></div><!-- fragment --><p>Generic template for peptide residue backbone. <br />
col 1: bitmask <br />
col 2: element number <br />
col 3: neighbour count <br />
col 4-7: 1-4 bitmasks for neighbour atoms (-6 means carbon) </p>

</div>
</div>
<a id="ab4cf89b53bf070dafd1717b69e89d8a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab4cf89b53bf070dafd1717b69e89d8a0">&sect;&nbsp;</a></span>Nucleotide</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a8eff09d0456c2308e2afb34e824d9c33">Template</a> Nucleotide[<a class="el" href="chains_8cpp.shtml#a25866c9e7f565e2d902304f087338475">MAXNUCLEIC</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">        {  0x0001, 15, 4, 0x0004, 0x0004, 0x0008, 0x0200 },</div><div class="line">        {  0x0002, 15, 3, 0x0004, 0x0004, 0x0008,      0 },</div><div class="line">        {  0x0004,  8, 1, 0x0003,      0,      0,      0 },</div><div class="line">        {  0x0008,  8, 2, 0x0020, 0x0003,      0,      0 },</div><div class="line">        {  0x0010,  8, 1, 0x0020,      0,      0,      0 },</div><div class="line">        {  0x0020,  6, 2, 0x0018, 0x0040,      0,      0 },</div><div class="line">        {  0x0040,  6, 3, 0x0020, 0x0080, 0x0100,      0 },</div><div class="line">        {  0x0080,  8, 2, 0x0040, 0x4000,      0,      0 },</div><div class="line">        {  0x0100,  6, 3, 0x0040, 0x0600, 0x1800,      0 },</div><div class="line">        {  0x0200,  8, 2, 0x0100, 0x0001,      0,      0 },</div><div class="line">        {  0x0400,  8, 1, 0x0100,      0,      0,      0 },</div><div class="line">        {  0x0800,  6, 3, 0x0100, 0x4000, 0x2000,      0 },</div><div class="line">        {  0x1000,  6, 2, 0x0100, 0x4000,      0,      0 },</div><div class="line">        {  0x2000,  8, 1, 0x0800,      0,      0,      0 },</div><div class="line">        {  0x4000,  6, 3, 0x0080, 0x1800,     -7,      0 }</div><div class="line">  }</div></div><!-- fragment -->
<p>Generic template for peptide nucleotide backbone. </p>

</div>
</div>
<a id="a7b064978f82414d1a9805ac383a5cac5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b064978f82414d1a9805ac383a5cac5">&sect;&nbsp;</a></span>ChainsAtomName</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">char ChainsAtomName[<a class="el" href="chains_8cpp.shtml#a0fc07ba5f4a8d786b24fb28c7c5c62b2">ATOMMAX</a>][4]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>PDB atom types (i.e., columns 13-16 of a PDB file) index numbers from this array are used in the pseudo-SMILES format for side-chains in the AminoAcids[] &amp; Nucleotides[] global arrays below </p>

</div>
</div>
<a id="a0f1fa68f20787eefe51bc205d70bf141"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f1fa68f20787eefe51bc205d70bf141">&sect;&nbsp;</a></span>AminoAcids</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ResidType AminoAcids[<a class="el" href="chains_8cpp.shtml#a681d502467126bdc1b5673ecea585d25">AMINOMAX</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    { <span class="stringliteral">&quot;ILE&quot;</span>, <span class="stringliteral">&quot;1-4(-9-14)-10&quot;</span>                        },</div><div class="line">    { <span class="stringliteral">&quot;VAL&quot;</span>, <span class="stringliteral">&quot;1-4(-9)-10&quot;</span>                           },</div><div class="line">    { <span class="stringliteral">&quot;ALA&quot;</span>, <span class="stringliteral">&quot;1-4&quot;</span>                                  },</div><div class="line">    { <span class="stringliteral">&quot;ASN&quot;</span>, <span class="stringliteral">&quot;1-4-7(=15)-19&quot;</span>                        },</div><div class="line">    { <span class="stringliteral">&quot;ASP&quot;</span>, <span class="stringliteral">&quot;1-4-7(=15)-18&quot;</span>                        },</div><div class="line">    { <span class="stringliteral">&quot;ARG&quot;</span>, <span class="stringliteral">&quot;1-4-7-11-21-29(=34)-35&quot;</span>               },</div><div class="line">    { <span class="stringliteral">&quot;CYS&quot;</span>, <span class="stringliteral">&quot;1-4-5&quot;</span>                                },</div><div class="line">    { <span class="stringliteral">&quot;GLN&quot;</span>, <span class="stringliteral">&quot;1-4-7-11(=23)-27&quot;</span>                     },</div><div class="line">    { <span class="stringliteral">&quot;GLU&quot;</span>, <span class="stringliteral">&quot;1-4-7-11(=23)-26&quot;</span>                     },</div><div class="line">    { <span class="stringliteral">&quot;GLY&quot;</span>, <span class="stringliteral">&quot;1&quot;</span>                                    },</div><div class="line">    { <span class="stringliteral">&quot;HIS&quot;</span>, <span class="stringliteral">&quot;1-4-7^16~22^27^17~7&quot;</span>                  },</div><div class="line">    { <span class="stringliteral">&quot;HYP&quot;</span>, <span class="stringliteral">&quot;1-4-7(-12)-11-0&quot;</span>                      },</div><div class="line">    { <span class="stringliteral">&quot;LEU&quot;</span>, <span class="stringliteral">&quot;1-4-7(-14)-17&quot;</span>                        },</div><div class="line">    { <span class="stringliteral">&quot;LYS&quot;</span>, <span class="stringliteral">&quot;1-4-7-11-20-30&quot;</span>                       },</div><div class="line">    { <span class="stringliteral">&quot;MET&quot;</span>, <span class="stringliteral">&quot;1-4-7-13-20&quot;</span>                          },</div><div class="line">    { <span class="stringliteral">&quot;PHE&quot;</span>, <span class="stringliteral">&quot;1-4-7~14^22~29^25~17^7&quot;</span>               },</div><div class="line">    { <span class="stringliteral">&quot;PRO&quot;</span>, <span class="stringliteral">&quot;1-4-7-11-0&quot;</span>                           },</div><div class="line">    { <span class="stringliteral">&quot;SER&quot;</span>, <span class="stringliteral">&quot;1-4-6&quot;</span>                                },</div><div class="line">    { <span class="stringliteral">&quot;THR&quot;</span>, <span class="stringliteral">&quot;1-4(-8)-10&quot;</span>                           },</div><div class="line">    { <span class="stringliteral">&quot;TRP&quot;</span>, <span class="stringliteral">&quot;1-4-7~14^24^25~17(^7)^28~32^36~31^25&quot;</span> },</div><div class="line">    { <span class="stringliteral">&quot;TYR&quot;</span>, <span class="stringliteral">&quot;1-4-7~14^22~29(-33)^25~17^7&quot;</span>          }</div><div class="line">  }</div></div><!-- fragment --><p>Side chains for recognized amino acids using a pseudo-SMARTS syntax for branching and bonds. Numbers indicate atom types defined by <a class="el" href="namespaceOpenBabel.shtml#a7b064978f82414d1a9805ac383a5cac5">OpenBabel::ChainsAtomName</a> global array above. </p>

</div>
</div>
<a id="a2326ccdc5fd0c0b5cfd5842cf4c7da03"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2326ccdc5fd0c0b5cfd5842cf4c7da03">&sect;&nbsp;</a></span>Nucleotides</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ResidType Nucleotides[<a class="el" href="chains_8cpp.shtml#a62f84f11159f8899196affa2f08cc6fa">NUCLEOMAX</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    { <span class="stringliteral">&quot;  A&quot;</span>, <span class="stringliteral">&quot;49-50-51-52-53-54(-56)-57-58-61-62(-53)-50&quot;</span>      },</div><div class="line">    { <span class="stringliteral">&quot;  C&quot;</span>, <span class="stringliteral">&quot;49-57-58(-59)-61-62(-64)-65-67-57&quot;</span>               },</div><div class="line">    { <span class="stringliteral">&quot;  G&quot;</span>, <span class="stringliteral">&quot;49-50-51-52-53-54(-55)-57-58(-60)-61-62(-53)-50&quot;</span> },</div><div class="line">    { <span class="stringliteral">&quot;  T&quot;</span>, <span class="stringliteral">&quot;49-57-58(-59)-61-62(-63)-65(-66)-67-57&quot;</span>          },</div><div class="line">    { <span class="stringliteral">&quot;  U&quot;</span>, <span class="stringliteral">&quot;49-57-58(-59)-61-62(-63)-65-67-57&quot;</span>               },</div><div class="line">    { <span class="stringliteral">&quot;  I&quot;</span>, <span class="stringliteral">&quot;49-50-51-52-53-54(-55)-57-58-61-62(-53)-50&quot;</span>      }</div><div class="line">  }</div></div><!-- fragment --><p>Side chains for recognized nucleotides using a pseudo-SMARTS syntax for branching and bonds. Numbers indicate atom types defined by <a class="el" href="namespaceOpenBabel.shtml#a7b064978f82414d1a9805ac383a5cac5">OpenBabel::ChainsAtomName</a> global array above. </p>

</div>
</div>
<a id="a6d27c5a78720907303f7345d7f972f36"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6d27c5a78720907303f7345d7f972f36">&sect;&nbsp;</a></span>MonoAtom</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">MonoAtomType MonoAtom[<a class="el" href="chains_8h.shtml#a0a30b6310d4dca99e49673f6e530bdc4">MaxMonoAtom</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a424ffb435ce72308ed456dd1c8e5de60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a424ffb435ce72308ed456dd1c8e5de60">&sect;&nbsp;</a></span>MonoBond</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">MonoBondType MonoBond[<a class="el" href="chains_8h.shtml#ad6c9530ebbe94406872e1a4eb18b3b7c">MaxMonoBond</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a4f891e27abe7998822f22e513182317a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4f891e27abe7998822f22e513182317a">&sect;&nbsp;</a></span>MonoAtomCount</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int MonoAtomCount</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>.</p>

</div>
</div>
<a id="afe6df7aef6454d16dfbde0b74a516b63"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afe6df7aef6454d16dfbde0b74a516b63">&sect;&nbsp;</a></span>MonoBondCount</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int MonoBondCount</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>.</p>

</div>
</div>
<a id="a9e0089655dc8a4d83d40dcbe519ca9bb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e0089655dc8a4d83d40dcbe519ca9bb">&sect;&nbsp;</a></span>Stack</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">StackType Stack[<a class="el" href="chains_8cpp.shtml#a21d9543c516fffee84a7963224271f95">STACKSIZE</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a5e019437eb125244e080ac8bee696b05"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5e019437eb125244e080ac8bee696b05">&sect;&nbsp;</a></span>StackPtr</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int StackPtr</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>.</p>

</div>
</div>
<a id="a08aed91cf3c0528c11e2c383078b9e52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08aed91cf3c0528c11e2c383078b9e52">&sect;&nbsp;</a></span>AtomIndex</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int AtomIndex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a id="ab8cd0fea55be4772aece582108b664c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8cd0fea55be4772aece582108b664c9">&sect;&nbsp;</a></span>BondIndex</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int BondIndex</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a1748035db13037545433f80148a7c928">GenerateByteCodes()</a>.</p>

</div>
</div>
<a id="af4e7dde6c2732deca11bff4c63c46372"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4e7dde6c2732deca11bff4c63c46372">&sect;&nbsp;</a></span>StrictFlag</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool StrictFlag = false</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a8759fc55507d155f4eb9fa303cfecc59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8759fc55507d155f4eb9fa303cfecc59">&sect;&nbsp;</a></span>red</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* red = &quot;\033[1;31m&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBColor.shtml#a0ae044600ef7d2fcc73be09906dc6ca3">OBColor::operator!=()</a>, <a class="el" href="structOpenBabel_1_1OBColor.shtml#a8a0ad775abeeb69d52498f9e767ecea3">OBColor::operator&lt;()</a>, and <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBElementTable::ParseLine()</a>.</p>

</div>
</div>
<a id="ac12598cc2108fbc1e3ba8d1c3c92bb12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac12598cc2108fbc1e3ba8d1c3c92bb12">&sect;&nbsp;</a></span>green</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* green = &quot;\033[1;32m&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBColor.shtml#a0ae044600ef7d2fcc73be09906dc6ca3">OBColor::operator!=()</a>, <a class="el" href="structOpenBabel_1_1OBColor.shtml#a8a0ad775abeeb69d52498f9e767ecea3">OBColor::operator&lt;()</a>, and <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBElementTable::ParseLine()</a>.</p>

</div>
</div>
<a id="acee835767e8d4be32f5ad94a2e90a45f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acee835767e8d4be32f5ad94a2e90a45f">&sect;&nbsp;</a></span>yellow</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* yellow = &quot;\033[1;33m&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a19b2b376a1bda5b375eca394cff7f129"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19b2b376a1bda5b375eca394cff7f129">&sect;&nbsp;</a></span>blue</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* blue = &quot;\033[1;34m&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="structOpenBabel_1_1OBColor.shtml#a0ae044600ef7d2fcc73be09906dc6ca3">OBColor::operator!=()</a>, <a class="el" href="structOpenBabel_1_1OBColor.shtml#a8a0ad775abeeb69d52498f9e767ecea3">OBColor::operator&lt;()</a>, and <a class="el" href="classOpenBabel_1_1OBElementTable.shtml#ae59fef8af62e52629bf2576e34a26801">OBElementTable::ParseLine()</a>.</p>

</div>
</div>
<a id="ae70ea9d1800f7ec86a2db16c71c42e21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae70ea9d1800f7ec86a2db16c71c42e21">&sect;&nbsp;</a></span>normal</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* normal = &quot;\033[0m&quot;</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29227290e6e6931c009942836a21e5df">Point2PlaneAngle()</a>.</p>

</div>
</div>
<a id="a007ca25767fb63a9b52010d40c8888df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a007ca25767fb63a9b52010d40c8888df">&sect;&nbsp;</a></span>hVal</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int hVal[<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    0,1,0,0,0,3,4,3,2,1,</div><div class="line">    0,0,0,3,4,3,2,1,0,0,</div><div class="line">    0,0,0,0,0,0,0,0,0,0,</div><div class="line">    0,0,4,3,2,1,0,0,0,0,</div><div class="line">    0,0,0,0,0,0,0,0,0,0,</div><div class="line">    2,3,2,1,0,0,0,0,0,0,</div><div class="line">    0,0,0,0,0,0,0,0,0,0,</div><div class="line">    0,0,0,0,0,0,0,0,0,0,</div><div class="line">    0,0,2,0,2,1,0,1,2,0,</div><div class="line">    0,0,0,0,0,0,0,0,0,0,</div><div class="line">    0,0,0,0,1,0,0,0,0,0,</div><div class="line">    0,0,0,0,0,0,0,0,0,0,0}</div></div><!-- fragment -->
<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a id="a6eb8f9135e86a8fd55d2293c4fe7b811"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6eb8f9135e86a8fd55d2293c4fe7b811">&sect;&nbsp;</a></span>maxVal</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int maxVal[<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    0,1,0,1,2,4,4,5,3,1,</div><div class="line">    0,1,2,4,4,6,6,7,0,1,</div><div class="line">    2,3,4,5,6,7,6,4,4,2,</div><div class="line">    2,3,4,5,6,7,8,1,2,3,</div><div class="line">    4,5,6,7,8,6,6,2,2,3,</div><div class="line">    4,5,6,7,8,1,2,3,4,4,</div><div class="line">    3,3,3,3,3,4,3,3,3,3,</div><div class="line">    3,3,4,5,6,7,8,6,6,3,</div><div class="line">    2,3,4,5,6,7,8,1,2,3,</div><div class="line">    4,5,6,6,6,6,3,4,3,3,</div><div class="line">    3,3,1,1,1,0,0,0,0,0,</div><div class="line">    0,8,1,8,5,0,0,0,0,0,0}</div></div><!-- fragment -->
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSpectrophore.shtml#a40222dcd3279681bde395d7f661779db">OBSpectrophore::_luDecompose()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a207029ffc607d34863546dddbe014d6b">alternate()</a>.</p>

</div>
</div>
<a id="a0d7409371f9cf6d7f50a3fda440d871a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d7409371f9cf6d7f50a3fda440d871a">&sect;&nbsp;</a></span>chargeVal</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int chargeVal[<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {  </div><div class="line">    0,-1,-1,-1,-1,-1,-1, 1, 1, 1,-1, </div><div class="line">    -1,-1,-1,-1, 1, 1, 1,-1,-1,-1, </div><div class="line">    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, </div><div class="line">    -1,-1, 1, 1, 1,-1,-1,-1,-1,-1, </div><div class="line">    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, </div><div class="line">    1, 1, 1,-1,-1,-1,-1,-1,-1,-1, </div><div class="line">    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, </div><div class="line">    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, </div><div class="line">    -1,-1, 1, 1, 1,-1,-1,-1,-1,-1, </div><div class="line">    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, </div><div class="line">    -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</div><div class="line">    -1,-1,-1,-1,-1,-1,-1,-1,-1}</div></div><!-- fragment -->
</div>
</div>
<a id="a010272f11ab71479f636c0327b5843a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a010272f11ab71479f636c0327b5843a8">&sect;&nbsp;</a></span>aSymb</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string aSymb[<a class="el" href="mcdlutil_8h.shtml#a02160f654223d43c521ab445b7eb7b2a">NELEMMCDL</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {<span class="stringliteral">&quot;0&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;H&quot;</span> ,<span class="stringliteral">&quot;He&quot;</span>,<span class="stringliteral">&quot;Li&quot;</span>,<span class="stringliteral">&quot;Be&quot;</span>,<span class="stringliteral">&quot;B&quot;</span> ,<span class="stringliteral">&quot;C&quot;</span> ,<span class="stringliteral">&quot;N&quot;</span> ,<span class="stringliteral">&quot;O&quot;</span> ,<span class="stringliteral">&quot;F&quot;</span> ,<span class="stringliteral">&quot;Ne&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Na&quot;</span>,<span class="stringliteral">&quot;Mg&quot;</span>,<span class="stringliteral">&quot;Al&quot;</span>,<span class="stringliteral">&quot;Si&quot;</span>,<span class="stringliteral">&quot;P&quot;</span> ,<span class="stringliteral">&quot;S&quot;</span> ,<span class="stringliteral">&quot;Cl&quot;</span>,<span class="stringliteral">&quot;Ar&quot;</span>,<span class="stringliteral">&quot;K&quot;</span> ,<span class="stringliteral">&quot;Ca&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Sc&quot;</span>,<span class="stringliteral">&quot;Ti&quot;</span>,<span class="stringliteral">&quot;V&quot;</span> ,<span class="stringliteral">&quot;Cr&quot;</span>,<span class="stringliteral">&quot;Mn&quot;</span>,<span class="stringliteral">&quot;Fe&quot;</span>,<span class="stringliteral">&quot;Co&quot;</span>,<span class="stringliteral">&quot;Ni&quot;</span>,<span class="stringliteral">&quot;Cu&quot;</span>,<span class="stringliteral">&quot;Zn&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Ga&quot;</span>,<span class="stringliteral">&quot;Ge&quot;</span>,<span class="stringliteral">&quot;As&quot;</span>,<span class="stringliteral">&quot;Se&quot;</span>,<span class="stringliteral">&quot;Br&quot;</span>,<span class="stringliteral">&quot;Kr&quot;</span>,<span class="stringliteral">&quot;Rb&quot;</span>,<span class="stringliteral">&quot;Sr&quot;</span>,<span class="stringliteral">&quot;Y&quot;</span> ,<span class="stringliteral">&quot;Zr&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Nb&quot;</span>,<span class="stringliteral">&quot;Mo&quot;</span>,<span class="stringliteral">&quot;Tc&quot;</span>,<span class="stringliteral">&quot;Ru&quot;</span>,<span class="stringliteral">&quot;Rh&quot;</span>,<span class="stringliteral">&quot;Pd&quot;</span>,<span class="stringliteral">&quot;Ag&quot;</span>,<span class="stringliteral">&quot;Cd&quot;</span>,<span class="stringliteral">&quot;In&quot;</span>,<span class="stringliteral">&quot;Sn&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Sb&quot;</span>,<span class="stringliteral">&quot;Te&quot;</span>,<span class="stringliteral">&quot;I&quot;</span> ,<span class="stringliteral">&quot;Xe&quot;</span>,<span class="stringliteral">&quot;Cs&quot;</span>,<span class="stringliteral">&quot;Ba&quot;</span>,<span class="stringliteral">&quot;La&quot;</span>,<span class="stringliteral">&quot;Ce&quot;</span>,<span class="stringliteral">&quot;Pr&quot;</span>,<span class="stringliteral">&quot;Nd&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Pm&quot;</span>,<span class="stringliteral">&quot;Sm&quot;</span>,<span class="stringliteral">&quot;Eu&quot;</span>,<span class="stringliteral">&quot;Gd&quot;</span>,<span class="stringliteral">&quot;Tb&quot;</span>,<span class="stringliteral">&quot;Dy&quot;</span>,<span class="stringliteral">&quot;Ho&quot;</span>,<span class="stringliteral">&quot;Er&quot;</span>,<span class="stringliteral">&quot;Tm&quot;</span>,<span class="stringliteral">&quot;Yb&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Lu&quot;</span>,<span class="stringliteral">&quot;Hf&quot;</span>,<span class="stringliteral">&quot;Ta&quot;</span>,<span class="stringliteral">&quot;W&quot;</span> ,<span class="stringliteral">&quot;Re&quot;</span>,<span class="stringliteral">&quot;Os&quot;</span>,<span class="stringliteral">&quot;Ir&quot;</span>,<span class="stringliteral">&quot;Pt&quot;</span>,<span class="stringliteral">&quot;Au&quot;</span>,<span class="stringliteral">&quot;Hg&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Tl&quot;</span>,<span class="stringliteral">&quot;Pb&quot;</span>,<span class="stringliteral">&quot;Bi&quot;</span>,<span class="stringliteral">&quot;Po&quot;</span>,<span class="stringliteral">&quot;At&quot;</span>,<span class="stringliteral">&quot;Rn&quot;</span>,<span class="stringliteral">&quot;Fr&quot;</span>,<span class="stringliteral">&quot;Ra&quot;</span>,<span class="stringliteral">&quot;Ac&quot;</span>,<span class="stringliteral">&quot;Th&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Pa&quot;</span>,<span class="stringliteral">&quot;U&quot;</span> ,<span class="stringliteral">&quot;Np&quot;</span>,<span class="stringliteral">&quot;Pu&quot;</span>,<span class="stringliteral">&quot;Am&quot;</span>,<span class="stringliteral">&quot;Cm&quot;</span>,<span class="stringliteral">&quot;Bk&quot;</span>,<span class="stringliteral">&quot;Cf&quot;</span>,<span class="stringliteral">&quot;Es&quot;</span>,<span class="stringliteral">&quot;Fm&quot;</span>,</div><div class="line">                                   <span class="stringliteral">&quot;Md&quot;</span>,<span class="stringliteral">&quot;No&quot;</span>,<span class="stringliteral">&quot;Lr&quot;</span>,<span class="stringliteral">&quot;D&quot;</span> ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;G&quot;</span> ,<span class="stringliteral">&quot;0&quot;</span> ,<span class="stringliteral">&quot;Xx&quot;</span>,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,</div><div class="line">                                   <span class="stringliteral">&quot;M&quot;</span> ,<span class="stringliteral">&quot;X&quot;</span> ,<span class="stringliteral">&quot;A&quot;</span> ,<span class="stringliteral">&quot;Q&quot;</span> ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>  ,<span class="stringliteral">&quot;&quot;</span>}</div></div><!-- fragment -->
</div>
</div>
<a id="a1b7de377338f7ac7700315efbba80ae2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b7de377338f7ac7700315efbba80ae2">&sect;&nbsp;</a></span>exactAtom</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int exactAtom[<a class="el" href="mcdlutil_8cpp.shtml#a7ffe7fc7e736af081960c465f69ef483">NEXACTATOMS</a>] ={6,14,5,50,82,8,16,34,52,7,15,33,51,9,17,35,53,32,13,26,80}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6e4dd9241c1923f5a16e445d29e040e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6e4dd9241c1923f5a16e445d29e040e2">&sect;&nbsp;</a></span>alkaly</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int alkaly[<a class="el" href="mcdlutil_8cpp.shtml#a48e4435fb9f690b15622b29bc8dedd0c">NALKALYATOMS</a>] ={3,11,19,37,55}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a67d14372d5486c87fba4d1347e98677c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67d14372d5486c87fba4d1347e98677c">&sect;&nbsp;</a></span>alkalyEarth</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int alkalyEarth[<a class="el" href="mcdlutil_8cpp.shtml#a872205065d27bc64f10fb497c818c8a7">NALKALYEARTHATOMS</a>] ={4,12,20,38,56}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a37351982a79ec5e7505f20f8d706dd0f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37351982a79ec5e7505f20f8d706dd0f">&sect;&nbsp;</a></span>trivalent</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int trivalent[<a class="el" href="mcdlutil_8cpp.shtml#a58a7e37667a2f3a678d1e59b2a2111f9">NTRIVALENTATOMS</a>] ={21,31,39,49,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,81,89,90,91,92,93,94,95,96,97,98,99}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a2c1f49db7daefd6995a8bd194e3ac0ef"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c1f49db7daefd6995a8bd194e3ac0ef">&sect;&nbsp;</a></span>titan</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int titan[<a class="el" href="mcdlutil_8cpp.shtml#a5508a6cb46c0b6cc2ea64303849fd4a5">NTITANATOMS</a>] ={22,40,72}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac5ecc60b7d1b91afa310c0c6379b909c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5ecc60b7d1b91afa310c0c6379b909c">&sect;&nbsp;</a></span>vanadium</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int vanadium[<a class="el" href="mcdlutil_8cpp.shtml#a82fbde161179ca7f0617c5fefd2a071c">NVANADIUMATOMS</a>] ={23,41,73}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a18359deca081005601d5e234fee87a5f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18359deca081005601d5e234fee87a5f">&sect;&nbsp;</a></span>cromium</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int cromium[<a class="el" href="mcdlutil_8cpp.shtml#aa67c30859a368ea1defae5565b50f3e0">NCHROMIUMATOMS</a>] ={24,42,74}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a6b27e665d816bd4edca018692a03ee1e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b27e665d816bd4edca018692a03ee1e">&sect;&nbsp;</a></span>manganeze</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int manganeze[<a class="el" href="mcdlutil_8cpp.shtml#a501e6d1bd9f7873d1bb72f2a71cc15ce">NMANGANESEATOMS</a>] ={25,43,75}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a1e38b8674bb78cdd93818c4f569d3317"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e38b8674bb78cdd93818c4f569d3317">&sect;&nbsp;</a></span>likeFe</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int likeFe[<a class="el" href="mcdlutil_8cpp.shtml#a36acc5511debbea03e32f1ae03a17b48">NLIKEFEATOMS</a>] ={27,28}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab280567064a5940906303e0f95b673d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab280567064a5940906303e0f95b673d3">&sect;&nbsp;</a></span>platinum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int platinum[<a class="el" href="mcdlutil_8cpp.shtml#ac786f1cc241f058986478cfb37f50b57">NPLATINUMATOMS</a>] ={44,45,46,76,77,78}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af395a23311a093c6c9ba174c91bb00fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af395a23311a093c6c9ba174c91bb00fe">&sect;&nbsp;</a></span>copper</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int copper[<a class="el" href="mcdlutil_8cpp.shtml#a451ca54d622a1cc0d32fdc103ff77338">NCOPPERATOMS</a>] ={29,47,79}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a790d50110edd641cf164ef702acd67c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a790d50110edd641cf164ef702acd67c2">&sect;&nbsp;</a></span>zink</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int zink[<a class="el" href="mcdlutil_8cpp.shtml#ac8284cff038b3455ed115bcf74bb0122">NZINKATOMS</a>] ={30,48}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a32e0599f9cf6f751a89279c86f703e47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32e0599f9cf6f751a89279c86f703e47">&sect;&nbsp;</a></span>possibleAromatic</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int possibleAromatic[<a class="el" href="mcdlutil_8cpp.shtml#af66f1fab611680bd48537fb317d9c225">NAROMMAX</a>] = {7,8,15,16,33,34,51,52,<a class="el" href="mcdlutil_8cpp.shtml#aee2b0b6b8f5adcce54aacc558c652e31">HETERO_ATOM</a>}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a174dbce034c042d7961ad4b02dd4f344"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a174dbce034c042d7961ad4b02dd4f344">&sect;&nbsp;</a></span>metals</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int metals[<a class="el" href="mcdlutil_8cpp.shtml#ad07d3b873121463218a991d53512e49b">NMETALS</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    3,4,11,12,13,19,20,21,22,23,24,25,26,27,28,29,</div><div class="line">    30,31,37,38,39,40,41,42,43,44,45,46,47,48,49,50,55,56,57,58,59,60,61,62,63,</div><div class="line">    64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,</div><div class="line">    92,93,94,95,96,97,98,99,100,101,102,103}</div></div><!-- fragment -->
<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a4c05d5c41594ed1af3afe5af29032968">OBAtom::IsMetal()</a>.</p>

</div>
</div>
<a id="aa6724f0a1ae8f22fa59505cb00498565"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6724f0a1ae8f22fa59505cb00498565">&sect;&nbsp;</a></span>lightMetals</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int lightMetals[<a class="el" href="mcdlutil_8cpp.shtml#a557a6e4a20d0daa8b65d48d2ef425c78">NLIGHT_METALS</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    3,4,11,12,13,19,20,21,22,23,24,25,26,27,28,29,30,31,37,38}</div></div><!-- fragment -->
</div>
</div>
<a id="a1dddb327de910ca9d524dc76a68090a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dddb327de910ca9d524dc76a68090a3">&sect;&nbsp;</a></span>heavyMetals</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int heavyMetals[<a class="el" href="mcdlutil_8cpp.shtml#a655e49a57b3dae59dbe998a069ff04a3">NHEAVY_METALS</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    39,40,41,42,43,44,45,46,47,48,49,50,55,56,57,58,59,60,61,62,63,</div><div class="line">    64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,87,88,89,90,91,</div><div class="line">    92,93,94,95,96,97,98,99,100,101,102,103}</div></div><!-- fragment -->
</div>
</div>
<a id="acb826f58b78c49d8732fb29a0b325f9e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb826f58b78c49d8732fb29a0b325f9e">&sect;&nbsp;</a></span>halogens</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int halogens[<a class="el" href="mcdlutil_8cpp.shtml#a02988c313a14255f7b3de2da2829297d">NHALOGENS</a>] = {9,17,35,53,85}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aec7f886140fb13e79a6823f3bf78b5cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aec7f886140fb13e79a6823f3bf78b5cf">&sect;&nbsp;</a></span>hetero</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int hetero[<a class="el" href="mcdlutil_8cpp.shtml#aa2ef2f0ee4eac39c772a2a7c1206a48a">NHETERO</a>] = {7,8,14,15,16,33,34,51,52,84}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac1e24d8c0684f30e0835a9ca5cf6d1b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac1e24d8c0684f30e0835a9ca5cf6d1b9">&sect;&nbsp;</a></span>strData</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string strData[<a class="el" href="mcdlutil_8cpp.shtml#aa063d5a8bb171f7d93a12d6b76170b52">NDATABASE_MOLECULES</a>]</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af4e78cb542837e6c77dcd5da5765833f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af4e78cb542837e6c77dcd5da5765833f">&sect;&nbsp;</a></span>bondValence</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int bondValence[<a class="el" href="mcdlutil_8cpp.shtml#ac4b0fa8174febff48a34ee9992350051">NBONDTYPES</a>] = {1,2,3,1,1,0,0,0,1,1,1}</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a8fc4e404ce6dc298048b5bdf5deb3124"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8fc4e404ce6dc298048b5bdf5deb3124">&sect;&nbsp;</a></span>fsastart</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string fsastart =&quot;{SA:&quot;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a29e765f8943f7aa7b50aca9380196e96">getAtomMCDL()</a>.</p>

</div>
</div>
<a id="a5d29a62c474c707d84973a8ecb1f62a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5d29a62c474c707d84973a8ecb1f62a3">&sect;&nbsp;</a></span>fsbstart</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const string fsbstart =&quot;{SB:&quot;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#acd680ed8783717254f074205cd6b24a4">getBondMCDL()</a>.</p>

</div>
</div>
<a id="a0afcf921bfdabceef6c6cf00836ae203"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0afcf921bfdabceef6c6cf00836ae203">&sect;&nbsp;</a></span>SwabInt</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const bool SwabInt = (<a class="el" href="namespaceOpenBabel.shtml#a0cc646b14fcc04a16103f6bd73382d17">STPTR</a>[0]!=0)</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a19c1a2a80cf2af5131ca597d0ce38192"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a19c1a2a80cf2af5131ca597d0ce38192">&sect;&nbsp;</a></span>Roots</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double Roots[4]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0a899603d242263c2425f7d5be47f341"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a899603d242263c2425f7d5be47f341">&sect;&nbsp;</a></span>SmartsImplicitRef</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int SmartsImplicitRef = -9999</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a1d4c0074445aa349628c1d417794581b">OBSmartsMatcher::match()</a>.</p>

</div>
</div>
<a id="a856b116adc145026ec1c182e9145c818"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a856b116adc145026ec1c182e9145c818">&sect;&nbsp;</a></span>PointGroups</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">POINT_GROUP PointGroups[]</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPointGroup.shtml#afb447f7038fe69410aa49219be97200c">OBPointGroup::IdentifyPointGroup()</a>, and <a class="el" href="classOpenBabel_1_1OBPointGroup.shtml#a6d4d89f10a50a39daa30ba55c2ceb82e">OBPointGroup::IdentifyPointGroupSymbol()</a>.</p>

</div>
</div>
<a id="adddfd42867b5aaa0caaa3a793a8f69e2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adddfd42867b5aaa0caaa3a793a8f69e2">&sect;&nbsp;</a></span>primes</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int primes[<a class="el" href="rand_8cpp.shtml#ae6ffcd9369ff18ef49289892395d0558">MAXPRIMES</a>]</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">= {</div><div class="line">    1,    2,    3,    5,    7,   11,   13,   17,   19,   23,</div><div class="line">    29,   31,   37,   41,   43,   47,   53,   59,   61,   67,</div><div class="line">    71,   73,   79,   83,   89,   97,  101,  103,  107,  109,</div><div class="line">    113,  127,  131,  137,  139,  149,  151,  157,  163,  167,</div><div class="line">    173,  179,  181,  191,  193,  197,  199,  211,  223,  227,</div><div class="line">    229,  233,  239,  241,  251,  257,  263,  269,  271,  277,</div><div class="line">    281,  283,  293,  307,  311,  313,  317,  331,  337,  347,</div><div class="line">    349,  353,  359,  367,  373,  379,  383,  389,  397,  401,</div><div class="line">    409,  419,  421,  431,  433,  439,  443,  449,  457,  461,</div><div class="line">    463,  467,  479,  487,  491,  499,  503,  509,  521,  523,</div><div class="line">    541,  547,  557,  563,  569,  571,  577,  587,  593,  599,</div><div class="line">    601,  607,  613,  617,  619,  631,  641,  643,  647,  653,</div><div class="line">    659,  661,  673,  677,  683,  691,  701,  709,  719,  727,</div><div class="line">    733,  739,  743,  751,  757,  761,  769,  773,  787,  797,</div><div class="line">    809,  811,  821,  823,  827,  829,  839,  853,  857,  859,</div><div class="line">    863,  877,  881,  883,  887,  907,  911,  919,  929,  937,</div><div class="line">    941,  947,  953,  967,  971,  977,  983,  991,  997, 1009,</div><div class="line">    1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063,</div><div class="line">    1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129,</div><div class="line">    1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217,</div><div class="line">    1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289,</div><div class="line">    1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367,</div><div class="line">    1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447,</div><div class="line">    1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499,</div><div class="line">    1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579,</div><div class="line">    1583, 1597, 1601, 1607, 1609, 1613</div><div class="line">  }</div></div><!-- fragment -->
</div>
</div>
<a id="ae5fd3b39a867e164de9f433a78d9d09f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae5fd3b39a867e164de9f433a78d9d09f">&sect;&nbsp;</a></span>ringtyper</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBRingTyper.shtml">OBRingTyper</a> ringtyper</td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ae3c640db1cce9cd703ef7c5429de5453"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3c640db1cce9cd703ef7c5429de5453">&sect;&nbsp;</a></span>SINT</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int SINT = 0x00000001</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0cc646b14fcc04a16103f6bd73382d17"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0cc646b14fcc04a16103f6bd73382d17">&sect;&nbsp;</a></span>STPTR</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned char* STPTR = (unsigned char*)&amp;<a class="el" href="namespaceOpenBabel.shtml#ae3c640db1cce9cd703ef7c5429de5453">SINT</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a3463c4c11680aefbcce3a25305211efa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3463c4c11680aefbcce3a25305211efa">&sect;&nbsp;</a></span>_SpaceGroups</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">SpaceGroups _SpaceGroups</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:30 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
