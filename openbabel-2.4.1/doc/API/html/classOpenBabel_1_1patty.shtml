<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>patty Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classOpenBabel_1_1patty-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">patty Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="patty_8h_source.shtml">openbabel/patty.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aaaee844f53e42a1ee6223ddb8beb89a0"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#aaaee844f53e42a1ee6223ddb8beb89a0">patty</a> ()</td></tr>
<tr class="separator:aaaee844f53e42a1ee6223ddb8beb89a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a102e2b842e9f4ba368beb179887a9372"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#a102e2b842e9f4ba368beb179887a9372">patty</a> (char *s)</td></tr>
<tr class="separator:a102e2b842e9f4ba368beb179887a9372"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac13d841afa2efae018835cc11f8cdb3a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#ac13d841afa2efae018835cc11f8cdb3a">patty</a> (const std::string &amp;s)</td></tr>
<tr class="separator:ac13d841afa2efae018835cc11f8cdb3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a77bb5fc8ac4b4bf97ebdd3515dc4f3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#a1a77bb5fc8ac4b4bf97ebdd3515dc4f3">~patty</a> ()</td></tr>
<tr class="separator:a1a77bb5fc8ac4b4bf97ebdd3515dc4f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a15f87df6da0fd11ee2dac41405607a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#a6a15f87df6da0fd11ee2dac41405607a">debug_on</a> ()</td></tr>
<tr class="separator:a6a15f87df6da0fd11ee2dac41405607a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a313a1354a1326f8be596ee56189314e6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#a313a1354a1326f8be596ee56189314e6">debug_off</a> ()</td></tr>
<tr class="separator:a313a1354a1326f8be596ee56189314e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad52e9084efab7e27fbe7fe394612ca57"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#ad52e9084efab7e27fbe7fe394612ca57">read_rules</a> (const std::string &amp;infile)</td></tr>
<tr class="separator:ad52e9084efab7e27fbe7fe394612ca57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55dcef5a39d6765d545e79cff377d332"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#a55dcef5a39d6765d545e79cff377d332">assign_rules</a> (std::vector&lt; std::string &gt; &amp;rules)</td></tr>
<tr class="separator:a55dcef5a39d6765d545e79cff377d332"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef2ec72bd2c0b6c3846d20c1ba1fce3f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#aef2ec72bd2c0b6c3846d20c1ba1fce3f">assign_types</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; std::string &gt; &amp;atm_typ)</td></tr>
<tr class="separator:aef2ec72bd2c0b6c3846d20c1ba1fce3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5551b97ffd3df22214ae06ec05e3441"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#ab5551b97ffd3df22214ae06ec05e3441">assign_types</a> (<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol, std::vector&lt; int &gt; &amp;atm_typ)</td></tr>
<tr class="separator:ab5551b97ffd3df22214ae06ec05e3441"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af574984ee6ea81537b5af994f7f590df"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#af574984ee6ea81537b5af994f7f590df">type_to_int</a> (const std::string &amp;type, bool failOnUndefined=false)</td></tr>
<tr class="separator:af574984ee6ea81537b5af994f7f590df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac168d612af3854ad41c27c16252e2592"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1patty.shtml#ac168d612af3854ad41c27c16252e2592">Istype</a> (const std::string &amp;type)</td></tr>
<tr class="separator:ac168d612af3854ad41c27c16252e2592"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Programmable Atom Typer. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000094">Deprecated:</a></b></dt><dd>This code is currently not used by the Open Babel library. Instead, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a> and <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds. ">OBAromaticTyper</a> are used. Unless there is interest in retaining this independent class, it will be removed in the future.</dd></dl>
<p>Patty stands for programmable atom typer. The patty class was kindly donated by W. Patrick Walters. The patty class provides a more flexible means for atom typing than the <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a>. The behavior of patty is similar to the <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a> in that rules apply only to the first atom in the SMARTS pattern. The patty class can read any free format ASCII file which contains SMARTS patterns associated with user defined atom type. The following is an example of a valid patty rule </p><div class="fragment"><div class="line">O=<a class="code" href="namespaceOpenBabel_1_1OBResidueIndex.shtml#a385c44f6fb256e5716a2302a5b940388a739ce3f516592d245d16fd8a3893472c">C</a> hbacceptor</div></div><!-- fragment --><p> The following is a code sample that demonstrates the use of patty class: </p><div class="fragment"><div class="line">OBMol mol;</div><div class="line"></div><div class="line"><span class="keywordtype">string</span> rulefile = <span class="stringliteral">&quot;rules.txt&quot;</span>;</div><div class="line"><a class="code" href="classOpenBabel_1_1patty.shtml#aaaee844f53e42a1ee6223ddb8beb89a0">patty</a> p;</div><div class="line">p.read_rules(p);</div><div class="line">vector&lt;string&gt; type;</div><div class="line">p.assign_types(mol,type);</div><div class="line"><span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1;i &lt;= mol.NumAtoms();++i)</div><div class="line">   cout &lt;&lt; <span class="stringliteral">&quot;atom number &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; was given a type &quot;</span> &lt;&lt; type[i] &lt;&lt; endl;</div></div><!-- fragment --><p> The array indices in the vector&lt;string&gt; into which the result values are placed match the corresponding atom numbers. Since atoms are numbered beginning from one, the first element in the vector&lt;string&gt; is empty, and the values are placed in [1...mol.NumAtoms()]. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="aaaee844f53e42a1ee6223ddb8beb89a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaee844f53e42a1ee6223ddb8beb89a0">&sect;&nbsp;</a></span>patty() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a102e2b842e9f4ba368beb179887a9372"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a102e2b842e9f4ba368beb179887a9372">&sect;&nbsp;</a></span>patty() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a> </td>
          <td>(</td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac13d841afa2efae018835cc11f8cdb3a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac13d841afa2efae018835cc11f8cdb3a">&sect;&nbsp;</a></span>patty() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1patty.shtml">patty</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a1a77bb5fc8ac4b4bf97ebdd3515dc4f3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a77bb5fc8ac4b4bf97ebdd3515dc4f3">&sect;&nbsp;</a></span>~patty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1patty.shtml">patty</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a6a15f87df6da0fd11ee2dac41405607a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a15f87df6da0fd11ee2dac41405607a">&sect;&nbsp;</a></span>debug_on()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void debug_on </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a313a1354a1326f8be596ee56189314e6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a313a1354a1326f8be596ee56189314e6">&sect;&nbsp;</a></span>debug_off()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void debug_off </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad52e9084efab7e27fbe7fe394612ca57"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad52e9084efab7e27fbe7fe394612ca57">&sect;&nbsp;</a></span>read_rules()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void read_rules </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>infile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a55dcef5a39d6765d545e79cff377d332"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55dcef5a39d6765d545e79cff377d332">&sect;&nbsp;</a></span>assign_rules()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void assign_rules </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>rules</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="aef2ec72bd2c0b6c3846d20c1ba1fce3f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aef2ec72bd2c0b6c3846d20c1ba1fce3f">&sect;&nbsp;</a></span>assign_types() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void assign_types </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::string &gt; &amp;&#160;</td>
          <td class="paramname"><em>atm_typ</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab5551b97ffd3df22214ae06ec05e3441"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5551b97ffd3df22214ae06ec05e3441">&sect;&nbsp;</a></span>assign_types() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void assign_types </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atm_typ</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="af574984ee6ea81537b5af994f7f590df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af574984ee6ea81537b5af994f7f590df">&sect;&nbsp;</a></span>type_to_int()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int type_to_int </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>failOnUndefined</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ac168d612af3854ad41c27c16252e2592"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac168d612af3854ad41c27c16252e2592">&sect;&nbsp;</a></span>Istype()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Istype </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>return atom type index, 0 otherwise </p>
<p>return null if the type does not exist, the type position otherwise the first position start at 1 </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="patty_8h_source.shtml">patty.h</a></li>
<li><a class="el" href="patty_8cpp.shtml">patty.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
