<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>fingerprint.h Source File</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.shtml">include</a></li><li class="navelem"><a class="el" href="dir_aabfc5907fabda9e6b87df21134395b8.shtml">openbabel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">fingerprint.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="fingerprint_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**********************************************************************</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">fingerprint.h - Base class for fingerprints and fast searching</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">Copyright (C) 2005 by Chris Morley</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">This file is part of the Open Babel project.</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">For more information, see &lt;http://openbabel.org/&gt;</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">the Free Software Foundation version 2 of the License.</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">GNU General Public License for more details.</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">***********************************************************************/</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#ifndef OB_FINGERPRINT_H</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#define OB_FINGERPRINT_H</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;list&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;map&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;set&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;<a class="code" href="plugin_8h.shtml">openbabel/plugin.h</a>&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#ifndef OBFPRT</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#define OBFPRT</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keyword">class </span>OBBase; <span class="comment">//Forward declaration; used only as pointer.</span></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml">   39</a></span>&#160;<span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a> : <span class="keyword">public</span> <a class="code" href="classOpenBabel_1_1OBPlugin.shtml">OBPlugin</a></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">//see end of cpp file for detailed documentation</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<a class="code" href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a>(<a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>)</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* TypeID()</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        {</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&quot;fingerprints&quot;</span>;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        }</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="comment">//Rest of OBFingerprints declarations</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#a55f9725c7e338f4d4c2d9f7a7c34f0cb">   53</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a55f9725c7e338f4d4c2d9f7a7c34f0cb">~OBFingerprint</a>(){}</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keywordtype">void</span> SetBit(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordtype">bool</span> GetBit(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordtype">void</span> Fold(std::vector&lt;unsigned int&gt;&amp; vec, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nbits);</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> GetFingerprint(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; fp, <span class="keywordtype">int</span> nbits=0)=0;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div><div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#a48c2b72feb2607662249c83e85ce665b">   68</a></span>&#160;  <span class="keyword">enum</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a48c2b72feb2607662249c83e85ce665b">FptFlag</a>{FPT_UNIQUEBITS=1, FPT_NOINFO=2};</div><div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#a94a94537cc5ba96b1876db1b612b91a3">   69</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a94a94537cc5ba96b1876db1b612b91a3">Flags</a>() { <span class="keywordflow">return</span> 0;};</div><div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#a6948a255af347b37b32ba5c55d6368a4">   71</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a6948a255af347b37b32ba5c55d6368a4">SetFlags</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>){}</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div><div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#a4ffe45da1e2dd403bf6b51364717d2a6">   75</a></span>&#160;  <span class="keyword">virtual</span> std::string <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a4ffe45da1e2dd403bf6b51364717d2a6">DescribeBits</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt; <span class="comment">/* fp */</span>,</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                   <span class="keywordtype">bool</span> <span class="comment">/* bSet */</span> =<span class="keyword">true</span>)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  {</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    std::string txt(<span class="stringliteral">&quot;&quot;</span>);</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> txt;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="namespaceOpenBabel.shtml#aeb3b137500bda8573ee1aa5757011a66">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec2);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#ae6df021d906a48593e8f9ed11bd8d128">   86</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">double</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#ae6df021d906a48593e8f9ed11bd8d128">Tanimoto</a>(<span class="keyword">const</span> std::vector&lt;unsigned int&gt;&amp; vec1, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>* p2)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordtype">int</span> andbits=0, orbits=0;</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i;</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">for</span> (i=0;i&lt;vec1.size();++i)</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    {</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      <span class="keywordtype">int</span> andfp = vec1[i] &amp; p2[i];</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <span class="keywordtype">int</span> orfp = vec1[i] | p2[i];</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;      <span class="comment">// Count bits</span></div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;      <span class="comment">/* GCC 3.4 supports a &quot;population count&quot; builtin, which on many targets is</span></div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">         implemented with a single instruction.  There is a fallback definition</span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">         in libgcc in case a target does not have one, which should be just as</span></div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">         good as the static function below.  */</span></div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="preprocessor">#if __GNUC__ &gt; 3 || (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ &gt;= 4)</span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      andbits += __builtin_popcount(andfp);</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      orbits += __builtin_popcount(orfp);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="preprocessor">#else</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      <span class="keywordflow">for</span>(;andfp;andfp=andfp&lt;&lt;1)</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="keywordflow">if</span>(andfp&lt;0) ++andbits;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      <span class="keywordflow">for</span>(;orfp;orfp=orfp&lt;&lt;1)</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span>(orfp&lt;0) ++orbits;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      <span class="keywordflow">return</span>((<span class="keywordtype">double</span>)andbits/(<span class="keywordtype">double</span>)orbits);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  };</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div><div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#ad9ecfee3be06f4c37ef48506100f6f0c">  113</a></span>&#160;  <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#ad9ecfee3be06f4c37ef48506100f6f0c">Getbitsperint</a>(){ <span class="keywordflow">return</span> bitsperint; }</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keyword">struct </span>bit_or</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> operator()(<span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> a, <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> b)</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      <span class="keywordflow">return</span> a | b;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  };</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1OBFingerprint.shtml#a3f95fb7efe843a55b087edd16fbe4012">  129</a></span>&#160;<span class="keyword">static</span> <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml#a3f95fb7efe843a55b087edd16fbe4012">FindFingerprint</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* ID){ <span class="keywordflow">return</span> FindType(ID);}</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bitsperint;<span class="comment">// = 8 * sizeof(unsigned int);</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;};</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">//Fast search routines</span></div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndexHeader.shtml">  138</a></span>&#160;<span class="comment"></span><span class="keyword">struct </span>OBFPRT <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml">FptIndexHeader</a></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div><div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndexHeader.shtml#ace6a28b9a2f58cb13b09af8fb5c739ba">  140</a></span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#ace6a28b9a2f58cb13b09af8fb5c739ba">headerlength</a>;</div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndexHeader.shtml#ad186ad63c9d2b800747b680984bb37eb">  141</a></span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#ad186ad63c9d2b800747b680984bb37eb">nEntries</a>;    </div><div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndexHeader.shtml#af562bd9c6faf08f0dab334b23d5788ee">  142</a></span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml#af562bd9c6faf08f0dab334b23d5788ee">words</a>;                           </div><div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndexHeader.shtml#afa1b09f7991580662a10548fd55700ee">  143</a></span>&#160;  <span class="keywordtype">char</span> fpid[16];            </div><div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndexHeader.shtml#a5c36621530d43d4607e35153277a1058">  144</a></span>&#160;  <span class="keywordtype">char</span> datafilename[256];   </div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;};</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00149"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndex.shtml">  149</a></span>&#160;<span class="keyword">struct </span>OBFPRT <a class="code" href="structOpenBabel_1_1FptIndex.shtml">FptIndex</a></div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div><div class="line"><a name="l00151"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndex.shtml#a6d5979c64e7513c829f24e421d253ae5">  151</a></span>&#160;  <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml">FptIndexHeader</a> <a class="code" href="structOpenBabel_1_1FptIndex.shtml#a6d5979c64e7513c829f24e421d253ae5">header</a>;</div><div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndex.shtml#a1d071a268033064b8771f42e57e20a0d">  152</a></span>&#160;  std::vector&lt;unsigned int&gt; <a class="code" href="structOpenBabel_1_1FptIndex.shtml#a1d071a268033064b8771f42e57e20a0d">fptdata</a>;</div><div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="structOpenBabel_1_1FptIndex.shtml#a744eaebf662c3b17f14de1cf9d628278">  153</a></span>&#160;  std::vector&lt;unsigned int&gt; <a class="code" href="structOpenBabel_1_1FptIndex.shtml#a744eaebf662c3b17f14de1cf9d628278">seekdata</a>;</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keywordtype">bool</span> Read(std::istream* pIndexstream);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordtype">bool</span> ReadIndex(std::istream* pIndexstream);</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordtype">bool</span> ReadHeader(std::istream* pIndexstream);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* CheckFP();</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;};</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1FastSearch.shtml">  164</a></span>&#160;<span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1FastSearch.shtml">FastSearch</a></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">//see end of cpp file for detailed documentation</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  std::string ReadIndexFile(std::string IndexFilename);</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  std::string ReadIndex(std::istream* pIndexstream);</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1FastSearch.shtml#a2d2d75247574ce3d0f7bbc0d4283b3c2">  172</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="classOpenBabel_1_1FastSearch.shtml#a2d2d75247574ce3d0f7bbc0d4283b3c2">~FastSearch</a>(){};</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keywordtype">bool</span>    Find(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; SeekPositions, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MaxCandidates);</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordtype">bool</span>    FindMatch(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::vector&lt;unsigned int&gt;&amp; SeekPositions,</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                            <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> MaxCandidates);</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">double</span> MinTani, <span class="keywordtype">double</span> MaxTani = 1.1 );</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keywordtype">bool</span>    FindSimilar(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::multimap&lt;double, unsigned int&gt;&amp; SeekposMap,</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="keywordtype">int</span> nCandidates=0);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div><div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1FastSearch.shtml#ad587e1f6c70197b13b1a79444811864d">  193</a></span>&#160;  <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* <a class="code" href="classOpenBabel_1_1FastSearch.shtml#ad587e1f6c70197b13b1a79444811864d">GetFingerprint</a>()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _pFP;};</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1FastSearch.shtml#a31ec8caba224655bbe51e618cccc8755">  196</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="structOpenBabel_1_1FptIndexHeader.shtml">FptIndexHeader</a>&amp; <a class="code" href="classOpenBabel_1_1FastSearch.shtml#a31ec8caba224655bbe51e618cccc8755">GetIndexHeader</a>()<span class="keyword"> const</span>{ <span class="keywordflow">return</span> _index.header;};</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <a class="code" href="structOpenBabel_1_1FptIndex.shtml">FptIndex</a>   _index;</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* _pFP;</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;};</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;</div><div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="classOpenBabel_1_1FastSearchIndexer.shtml">  205</a></span>&#160;<span class="keyword">class </span>OBFPRT <a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml">FastSearchIndexer</a></div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div><div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">//see end of cpp file for detailed documentation</span></div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml">FastSearchIndexer</a>(std::string&amp; datafilename, std::ostream* os, std::string&amp; fpid,</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <span class="keywordtype">int</span> FptBits=0, <span class="keywordtype">int</span> nmols=0);</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml">FastSearchIndexer</a>(<a class="code" href="structOpenBabel_1_1FptIndex.shtml">FptIndex</a>* pindex, std::ostream* os, <span class="keywordtype">int</span> nmols=0);</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  ~<a class="code" href="classOpenBabel_1_1FastSearchIndexer.shtml">FastSearchIndexer</a>();</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keywordtype">bool</span> Add(<a class="code" href="classOpenBabel_1_1OBBase.shtml">OBBase</a>* pOb, std::streampos seekpos);</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  std::ostream* _indexstream;</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <a class="code" href="structOpenBabel_1_1FptIndex.shtml">FptIndex</a>*             _pindex;</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <a class="code" href="classOpenBabel_1_1OBFingerprint.shtml">OBFingerprint</a>* _pFP;</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <span class="keywordtype">int</span> _nbits;</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;};</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;} <span class="comment">//namespace OpenBabel</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div><div class="ttc" id="structOpenBabel_1_1FptIndexHeader_shtml"><div class="ttname"><a href="structOpenBabel_1_1FptIndexHeader.shtml">OpenBabel::FptIndexHeader</a></div><div class="ttdoc">Header for fastsearch index file. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:138</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_a55f9725c7e338f4d4c2d9f7a7c34f0cb"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#a55f9725c7e338f4d4c2d9f7a7c34f0cb">OpenBabel::OBFingerprint::~OBFingerprint</a></div><div class="ttdeci">virtual ~OBFingerprint()</div><div class="ttdef"><b>Definition:</b> fingerprint.h:53</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_a4ffe45da1e2dd403bf6b51364717d2a6"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#a4ffe45da1e2dd403bf6b51364717d2a6">OpenBabel::OBFingerprint::DescribeBits</a></div><div class="ttdeci">virtual std::string DescribeBits(const std::vector&lt; unsigned int &gt;, bool=true)</div><div class="ttdef"><b>Definition:</b> fingerprint.h:75</div></div>
<div class="ttc" id="structOpenBabel_1_1FptIndexHeader_shtml_af562bd9c6faf08f0dab334b23d5788ee"><div class="ttname"><a href="structOpenBabel_1_1FptIndexHeader.shtml#af562bd9c6faf08f0dab334b23d5788ee">OpenBabel::FptIndexHeader::words</a></div><div class="ttdeci">unsigned int words</div><div class="ttdoc">number 32bit words per fingerprint </div><div class="ttdef"><b>Definition:</b> fingerprint.h:142</div></div>
<div class="ttc" id="classOpenBabel_1_1OBPlugin_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBPlugin.shtml">OpenBabel::OBPlugin</a></div><div class="ttdoc">Base class for all types of dynamic classes discovered at runtime. </div><div class="ttdef"><b>Definition:</b> plugin.h:52</div></div>
<div class="ttc" id="classOpenBabel_1_1FastSearch_shtml_ad587e1f6c70197b13b1a79444811864d"><div class="ttname"><a href="classOpenBabel_1_1FastSearch.shtml#ad587e1f6c70197b13b1a79444811864d">OpenBabel::FastSearch::GetFingerprint</a></div><div class="ttdeci">OBFingerprint * GetFingerprint() const</div><div class="ttdef"><b>Definition:</b> fingerprint.h:193</div></div>
<div class="ttc" id="classOpenBabel_1_1FastSearch_shtml"><div class="ttname"><a href="classOpenBabel_1_1FastSearch.shtml">OpenBabel::FastSearch</a></div><div class="ttdoc">Class to search fingerprint index files. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:164</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_ae6df021d906a48593e8f9ed11bd8d128"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#ae6df021d906a48593e8f9ed11bd8d128">OpenBabel::OBFingerprint::Tanimoto</a></div><div class="ttdeci">static double Tanimoto(const std::vector&lt; unsigned int &gt; &amp;vec1, const unsigned int *p2)</div><div class="ttdoc">Inline version of Tanimoto() taking a pointer for the second vector. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:86</div></div>
<div class="ttc" id="structOpenBabel_1_1FptIndex_shtml_a744eaebf662c3b17f14de1cf9d628278"><div class="ttname"><a href="structOpenBabel_1_1FptIndex.shtml#a744eaebf662c3b17f14de1cf9d628278">OpenBabel::FptIndex::seekdata</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; seekdata</div><div class="ttdef"><b>Definition:</b> fingerprint.h:153</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_a94a94537cc5ba96b1876db1b612b91a3"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#a94a94537cc5ba96b1876db1b612b91a3">OpenBabel::OBFingerprint::Flags</a></div><div class="ttdeci">virtual unsigned int Flags()</div><div class="ttdef"><b>Definition:</b> fingerprint.h:69</div></div>
<div class="ttc" id="classOpenBabel_1_1FastSearchIndexer_shtml"><div class="ttname"><a href="classOpenBabel_1_1FastSearchIndexer.shtml">OpenBabel::FastSearchIndexer</a></div><div class="ttdoc">Class to prepare fingerprint index files See FastSearch class for details. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:205</div></div>
<div class="ttc" id="structOpenBabel_1_1FptIndex_shtml_a6d5979c64e7513c829f24e421d253ae5"><div class="ttname"><a href="structOpenBabel_1_1FptIndex.shtml#a6d5979c64e7513c829f24e421d253ae5">OpenBabel::FptIndex::header</a></div><div class="ttdeci">FptIndexHeader header</div><div class="ttdef"><b>Definition:</b> fingerprint.h:151</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_ad9ecfee3be06f4c37ef48506100f6f0c"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#ad9ecfee3be06f4c37ef48506100f6f0c">OpenBabel::OBFingerprint::Getbitsperint</a></div><div class="ttdeci">static unsigned int Getbitsperint()</div><div class="ttdef"><b>Definition:</b> fingerprint.h:113</div></div>
<div class="ttc" id="group__plugins_shtml_gadd740e2a386b7db3e1f0e271cbe8a3f1"><div class="ttname"><a href="group__plugins.shtml#gadd740e2a386b7db3e1f0e271cbe8a3f1">MAKE_PLUGIN</a></div><div class="ttdeci">#define MAKE_PLUGIN(BaseClass)</div><div class="ttdef"><b>Definition:</b> plugin.h:195</div></div>
<div class="ttc" id="plugin_8h_shtml"><div class="ttname"><a href="plugin_8h.shtml">plugin.h</a></div><div class="ttdoc">Simplify &amp;#39;plugin&amp;#39; classes to be discovered and/or loaded at runtime. </div></div>
<div class="ttc" id="structOpenBabel_1_1FptIndexHeader_shtml_ad186ad63c9d2b800747b680984bb37eb"><div class="ttname"><a href="structOpenBabel_1_1FptIndexHeader.shtml#ad186ad63c9d2b800747b680984bb37eb">OpenBabel::FptIndexHeader::nEntries</a></div><div class="ttdeci">unsigned int nEntries</div><div class="ttdoc">number of fingerprints </div><div class="ttdef"><b>Definition:</b> fingerprint.h:141</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml_aeb3b137500bda8573ee1aa5757011a66"><div class="ttname"><a href="namespaceOpenBabel.shtml#aeb3b137500bda8573ee1aa5757011a66">OpenBabel::Tanimoto</a></div><div class="ttdeci">double Tanimoto(const OBBitVec &amp;bv1, const OBBitVec &amp;bv2)</div><div class="ttdoc">The Tanimoto coefficient, which may be regarded as the proportion of the &quot;on-bits&quot; which are shared...</div><div class="ttdef"><b>Definition:</b> bitvec.cpp:660</div></div>
<div class="ttc" id="classOpenBabel_1_1FastSearch_shtml_a2d2d75247574ce3d0f7bbc0d4283b3c2"><div class="ttname"><a href="classOpenBabel_1_1FastSearch.shtml#a2d2d75247574ce3d0f7bbc0d4283b3c2">OpenBabel::FastSearch::~FastSearch</a></div><div class="ttdeci">virtual ~FastSearch()</div><div class="ttdef"><b>Definition:</b> fingerprint.h:172</div></div>
<div class="ttc" id="structOpenBabel_1_1FptIndexHeader_shtml_ace6a28b9a2f58cb13b09af8fb5c739ba"><div class="ttname"><a href="structOpenBabel_1_1FptIndexHeader.shtml#ace6a28b9a2f58cb13b09af8fb5c739ba">OpenBabel::FptIndexHeader::headerlength</a></div><div class="ttdeci">unsigned int headerlength</div><div class="ttdoc">offset to data: sizeof(FptIndexHeader) </div><div class="ttdef"><b>Definition:</b> fingerprint.h:140</div></div>
<div class="ttc" id="classOpenBabel_1_1FastSearch_shtml_a31ec8caba224655bbe51e618cccc8755"><div class="ttname"><a href="classOpenBabel_1_1FastSearch.shtml#a31ec8caba224655bbe51e618cccc8755">OpenBabel::FastSearch::GetIndexHeader</a></div><div class="ttdeci">const FptIndexHeader &amp; GetIndexHeader() const</div><div class="ttdef"><b>Definition:</b> fingerprint.h:196</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_a6948a255af347b37b32ba5c55d6368a4"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#a6948a255af347b37b32ba5c55d6368a4">OpenBabel::OBFingerprint::SetFlags</a></div><div class="ttdeci">virtual void SetFlags(unsigned int)</div><div class="ttdef"><b>Definition:</b> fingerprint.h:71</div></div>
<div class="ttc" id="structOpenBabel_1_1FptIndex_shtml"><div class="ttname"><a href="structOpenBabel_1_1FptIndex.shtml">OpenBabel::FptIndex</a></div><div class="ttdoc">Structure of fastsearch index files. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:149</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_a3f95fb7efe843a55b087edd16fbe4012"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#a3f95fb7efe843a55b087edd16fbe4012">OpenBabel::OBFingerprint::FindFingerprint</a></div><div class="ttdeci">static OBFingerprint * FindFingerprint(const char *ID)</div><div class="ttdoc">For backward compatibility; a synonym of OBFingerprint::FindType. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:129</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml">OpenBabel::OBFingerprint</a></div><div class="ttdoc">The base class for fingerprints. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:39</div></div>
<div class="ttc" id="classOpenBabel_1_1OBBase_shtml"><div class="ttname"><a href="classOpenBabel_1_1OBBase.shtml">OpenBabel::OBBase</a></div><div class="ttdoc">Base Class. </div><div class="ttdef"><b>Definition:</b> base.h:240</div></div>
<div class="ttc" id="structOpenBabel_1_1FptIndex_shtml_a1d071a268033064b8771f42e57e20a0d"><div class="ttname"><a href="structOpenBabel_1_1FptIndex.shtml#a1d071a268033064b8771f42e57e20a0d">OpenBabel::FptIndex::fptdata</a></div><div class="ttdeci">std::vector&lt; unsigned int &gt; fptdata</div><div class="ttdef"><b>Definition:</b> fingerprint.h:152</div></div>
<div class="ttc" id="classOpenBabel_1_1OBFingerprint_shtml_a48c2b72feb2607662249c83e85ce665b"><div class="ttname"><a href="classOpenBabel_1_1OBFingerprint.shtml#a48c2b72feb2607662249c83e85ce665b">OpenBabel::OBFingerprint::FptFlag</a></div><div class="ttdeci">FptFlag</div><div class="ttdoc">Optional flags. </div><div class="ttdef"><b>Definition:</b> fingerprint.h:68</div></div>
<div class="ttc" id="namespaceOpenBabel_shtml"><div class="ttname"><a href="namespaceOpenBabel.shtml">OpenBabel</a></div><div class="ttdoc">Global namespace for all Open Babel code. </div><div class="ttdef"><b>Definition:</b> alias.h:22</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:28 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
