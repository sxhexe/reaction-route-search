<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBRotor Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classOpenBabel_1_1OBRotor-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBRotor Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="rotor_8h_source.shtml">openbabel/rotor.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a5b2c2642b2a9bc339c2bd5fdd7112c10"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a5b2c2642b2a9bc339c2bd5fdd7112c10">OBRotor</a> ()</td></tr>
<tr class="separator:a5b2c2642b2a9bc339c2bd5fdd7112c10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a1a300dca75a2089732a7a66f7e1234"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a6a1a300dca75a2089732a7a66f7e1234">~OBRotor</a> ()</td></tr>
<tr class="separator:a6a1a300dca75a2089732a7a66f7e1234"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e776c30d29ce2b4832a9ae3dace64ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a9e776c30d29ce2b4832a9ae3dace64ea">RemoveSymTorsionValues</a> (int)</td></tr>
<tr class="separator:a9e776c30d29ce2b4832a9ae3dace64ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Setup</div></td></tr>
<tr class="memitem:a75c73979e73fb44e48424150fa0208c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a75c73979e73fb44e48424150fa0208c7">SetBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)</td></tr>
<tr class="separator:a75c73979e73fb44e48424150fa0208c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb9d5eae290fae3460fc7e91a943ff15"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#acb9d5eae290fae3460fc7e91a943ff15">SetRings</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *bond)</td></tr>
<tr class="separator:acb9d5eae290fae3460fc7e91a943ff15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab994a975e39f5c62288f4f972b6f90c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#ab994a975e39f5c62288f4f972b6f90c9">SetIdx</a> (int idx)</td></tr>
<tr class="separator:ab994a975e39f5c62288f4f972b6f90c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49bb9b1c86b312984e9e9f28caffe7f7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a49bb9b1c86b312984e9e9f28caffe7f7">SetDihedralAtoms</a> (std::vector&lt; int &gt; &amp;ref)</td></tr>
<tr class="separator:a49bb9b1c86b312984e9e9f28caffe7f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acac104fcce61a5bf289473b60f9826f8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#acac104fcce61a5bf289473b60f9826f8">SetDihedralAtoms</a> (int ref[4])</td></tr>
<tr class="separator:acac104fcce61a5bf289473b60f9826f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04af4e63bd23ee0d160afc55107d1e32"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a04af4e63bd23ee0d160afc55107d1e32">SetRotAtoms</a> (std::vector&lt; int &gt; &amp;atoms)</td></tr>
<tr class="separator:a04af4e63bd23ee0d160afc55107d1e32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d37d5e994df8c97fe401ee821a3cbe7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a0d37d5e994df8c97fe401ee821a3cbe7">SetTorsionValues</a> (std::vector&lt; double &gt; &amp;angles)</td></tr>
<tr class="separator:a0d37d5e994df8c97fe401ee821a3cbe7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab263260a251aaa20610c7ca9dba31491"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#ab263260a251aaa20610c7ca9dba31491">SetFixedBonds</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr class="separator:ab263260a251aaa20610c7ca9dba31491"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Performing rotations</div></td></tr>
<tr class="memitem:a00e2cf7f72570502a2e543e85499b1cc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a00e2cf7f72570502a2e543e85499b1cc">SetToAngle</a> (double *coordinates, double setang)</td></tr>
<tr class="separator:a00e2cf7f72570502a2e543e85499b1cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1e4ad40e6514cc72c9587245989c9bc"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#ae1e4ad40e6514cc72c9587245989c9bc">SetRotor</a> (double *coordinates, int next, int prev=-1)</td></tr>
<tr class="separator:ae1e4ad40e6514cc72c9587245989c9bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affffe6e68eecc96bb8189c8b0f8ffc4a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#affffe6e68eecc96bb8189c8b0f8ffc4a">Set</a> (double *coordinates, double sine, double cosine, double translation, double invmag)</td></tr>
<tr class="separator:affffe6e68eecc96bb8189c8b0f8ffc4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aa59b64a8b8b3a54ec081af5986f8e3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a8aa59b64a8b8b3a54ec081af5986f8e3">Precompute</a> (double *coordinates)</td></tr>
<tr class="separator:a8aa59b64a8b8b3a54ec081af5986f8e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74f31787078ef1b25dfe9b7da2d10c8f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a74f31787078ef1b25dfe9b7da2d10c8f">Set</a> (double *coordinates, int idx)</td></tr>
<tr class="separator:a74f31787078ef1b25dfe9b7da2d10c8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6687a97dd0125ad2356b9ef942f96c7f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a6687a97dd0125ad2356b9ef942f96c7f">Precalc</a> (std::vector&lt; double *&gt; &amp;conformers)</td></tr>
<tr class="separator:a6687a97dd0125ad2356b9ef942f96c7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ade9c212155ac04f25ddf32731657ea"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">Set</a> (double *coordinates, int conformer, int idx)</td></tr>
<tr class="separator:a1ade9c212155ac04f25ddf32731657ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods to retrieve information</div></td></tr>
<tr class="memitem:a1b723190c734e234d87398f8eb245a8e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a1b723190c734e234d87398f8eb245a8e">GetBond</a> ()</td></tr>
<tr class="separator:a1b723190c734e234d87398f8eb245a8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b470b21b5807f0a9162bef72aebfef9"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a7b470b21b5807f0a9162bef72aebfef9">Size</a> ()</td></tr>
<tr class="separator:a7b470b21b5807f0a9162bef72aebfef9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a141f8abda99de827deec22f935dc9e31"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a141f8abda99de827deec22f935dc9e31">GetIdx</a> () const</td></tr>
<tr class="separator:a141f8abda99de827deec22f935dc9e31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44db679688b64e9032ea9bf6def76315"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a44db679688b64e9032ea9bf6def76315">GetDihedralAtoms</a> (int ref[4])</td></tr>
<tr class="separator:a44db679688b64e9032ea9bf6def76315"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75d6cacf7c1783272f74546387716902"><td class="memItemLeft" align="right" valign="top">std::vector&lt; int &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a75d6cacf7c1783272f74546387716902">GetDihedralAtoms</a> ()</td></tr>
<tr class="separator:a75d6cacf7c1783272f74546387716902"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8041f518c97fbbb908c888f1c8309b27"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; int &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a8041f518c97fbbb908c888f1c8309b27">GetRotAtoms</a> () const</td></tr>
<tr class="separator:a8041f518c97fbbb908c888f1c8309b27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0595d2cb4644a0491448a4c001edbb71"><td class="memItemLeft" align="right" valign="top">const std::vector&lt; double &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues</a> () const</td></tr>
<tr class="separator:a0595d2cb4644a0491448a4c001edbb71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade5378a288a25258f4e3cc28a954bc2e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#ade5378a288a25258f4e3cc28a954bc2e">GetFixedBonds</a> ()</td></tr>
<tr class="separator:ade5378a288a25258f4e3cc28a954bc2e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe6d75394c35f0cc1722eefd849cfbd4"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#abe6d75394c35f0cc1722eefd849cfbd4">CalcTorsion</a> (double *coordinates)</td></tr>
<tr class="separator:abe6d75394c35f0cc1722eefd849cfbd4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f707fec840e4ec5dc6d3901e680fe5c"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a1f707fec840e4ec5dc6d3901e680fe5c">CalcBondLength</a> (double *coordinates)</td></tr>
<tr class="separator:a1f707fec840e4ec5dc6d3901e680fe5c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Iterator methods</div></td></tr>
<tr class="memitem:a06d5fdac08688bdff198a92c78bdeb69"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a06d5fdac08688bdff198a92c78bdeb69">BeginTorIncrement</a> ()</td></tr>
<tr class="separator:a06d5fdac08688bdff198a92c78bdeb69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5857c1e09978240624038b2c6352dcc"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#ac5857c1e09978240624038b2c6352dcc">EndTorIncrement</a> ()</td></tr>
<tr class="separator:ac5857c1e09978240624038b2c6352dcc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Deprecated</div></td></tr>
<tr class="memitem:a800aee2a9873012ac7e2a1bcedd5c6ba"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a800aee2a9873012ac7e2a1bcedd5c6ba">SetDelta</a> (double d)</td></tr>
<tr class="separator:a800aee2a9873012ac7e2a1bcedd5c6ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abaa1b786f36fb9bc98b5c46e74425056"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#abaa1b786f36fb9bc98b5c46e74425056">GetDelta</a> ()</td></tr>
<tr class="separator:abaa1b786f36fb9bc98b5c46e74425056"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a937745b1178a21d8b223992d16d7d50a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a937745b1178a21d8b223992d16d7d50a">GetFixedAtoms</a> ()</td></tr>
<tr class="separator:a937745b1178a21d8b223992d16d7d50a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a530a0fd1a1e312d489b367ac73e56bb7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a530a0fd1a1e312d489b367ac73e56bb7">SetFixedAtoms</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr class="separator:a530a0fd1a1e312d489b367ac73e56bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab690ce98b2f06352f9079eeae94da3c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#ab690ce98b2f06352f9079eeae94da3c4">GetEvalAtoms</a> ()</td></tr>
<tr class="separator:ab690ce98b2f06352f9079eeae94da3c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33bdb71641015f05a632ffaf76e7672a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a33bdb71641015f05a632ffaf76e7672a">SetEvalAtoms</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;bv)</td></tr>
<tr class="separator:a33bdb71641015f05a632ffaf76e7672a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa68d318d4f18049ca83fbbe8d1c5fa90"><td class="memItemLeft" align="right" valign="top">void *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#aa68d318d4f18049ca83fbbe8d1c5fa90">GetRotAtoms</a> ()</td></tr>
<tr class="separator:aa68d318d4f18049ca83fbbe8d1c5fa90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8feebfa38afe9888e7a50e421b8f5243"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a8feebfa38afe9888e7a50e421b8f5243">GetResolution</a> ()</td></tr>
<tr class="separator:a8feebfa38afe9888e7a50e421b8f5243"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e82f80e2cd8faf3bce17c464ab1672c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBRotor.shtml#a4e82f80e2cd8faf3bce17c464ab1672c">SetNumCoords</a> (int nc)</td></tr>
<tr class="separator:a4e82f80e2cd8faf3bce17c464ab1672c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A single rotatable <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> as part of rotamer searching. </p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a5b2c2642b2a9bc339c2bd5fdd7112c10"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5b2c2642b2a9bc339c2bd5fdd7112c10">&sect;&nbsp;</a></span>OBRotor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Constructor. </p>

</div>
</div>
<a id="a6a1a300dca75a2089732a7a66f7e1234"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a1a300dca75a2089732a7a66f7e1234">&sect;&nbsp;</a></span>~OBRotor()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBRotor.shtml">OBRotor</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a75c73979e73fb44e48424150fa0208c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75c73979e73fb44e48424150fa0208c7">&sect;&nbsp;</a></span>SetBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> associated with this <a class="el" href="classOpenBabel_1_1OBRotor.shtml" title="A single rotatable OBBond as part of rotamer searching. ">OBRotor</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>.</p>

</div>
</div>
<a id="acb9d5eae290fae3460fc7e91a943ff15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acb9d5eae290fae3460fc7e91a943ff15">&sect;&nbsp;</a></span>SetRings()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRings </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the rings associated with this bond (if it's a ring bond) </p><dl class="section since"><dt>Since</dt><dd>Version 2.4 </dd></dl>

</div>
</div>
<a id="ab994a975e39f5c62288f4f972b6f90c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab994a975e39f5c62288f4f972b6f90c9">&sect;&nbsp;</a></span>SetIdx()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetIdx </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the index for this rotor. Used by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml" title="Given an OBMol, set up a list of possibly rotatable torsions,. ">OBRotorList</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>.</p>

</div>
</div>
<a id="a49bb9b1c86b312984e9e9f28caffe7f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49bb9b1c86b312984e9e9f28caffe7f7">&sect;&nbsp;</a></span>SetDihedralAtoms() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetDihedralAtoms </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>ref</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the dihedral atoms. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ref</td><td>The dihedral atom indexes. These indexes start from 1. </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ac08d1221790bd6f14418e3f77e6e725a">OBRotorList::SetRotAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#af216aef19cf7a82fb1e57504b39f9329">OBRotorList::SetRotAtomsByFix()</a>.</p>

</div>
</div>
<a id="acac104fcce61a5bf289473b60f9826f8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acac104fcce61a5bf289473b60f9826f8">&sect;&nbsp;</a></span>SetDihedralAtoms() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetDihedralAtoms </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ref</em>[4]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the dihedral atoms. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ref</td><td>The dihedral atom indexes. These indexes start from 1. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a04af4e63bd23ee0d160afc55107d1e32"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a04af4e63bd23ee0d160afc55107d1e32">&sect;&nbsp;</a></span>SetRotAtoms()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRotAtoms </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atoms</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the atom indexes that will be displaced when this rotor changes torsion angle. These indexes start from 0 and are multiplied by 3 for easy coordinate access. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ac08d1221790bd6f14418e3f77e6e725a">OBRotorList::SetRotAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#af216aef19cf7a82fb1e57504b39f9329">OBRotorList::SetRotAtomsByFix()</a>.</p>

</div>
</div>
<a id="a0d37d5e994df8c97fe401ee821a3cbe7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0d37d5e994df8c97fe401ee821a3cbe7">&sect;&nbsp;</a></span>SetTorsionValues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetTorsionValues </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>angles</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the possible torsion values or angles. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>.</p>

</div>
</div>
<a id="ab263260a251aaa20610c7ca9dba31491"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab263260a251aaa20610c7ca9dba31491">&sect;&nbsp;</a></span>SetFixedBonds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFixedBonds </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the bonds that will be fixed. </p>

</div>
</div>
<a id="a00e2cf7f72570502a2e543e85499b1cc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00e2cf7f72570502a2e543e85499b1cc">&sect;&nbsp;</a></span>SetToAngle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetToAngle </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>setang</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Rotate the atoms in the specified <code>coordinates</code> to the specified angle. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coordinates</td><td>The coordinates to rotate. </td></tr>
    <tr><td class="paramname">setang</td><td>The new torsion angle in radians. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae1e4ad40e6514cc72c9587245989c9bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1e4ad40e6514cc72c9587245989c9bc">&sect;&nbsp;</a></span>SetRotor()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetRotor </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>next</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prev</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Rotate the atoms in the specified <code>coordinates</code>. This function does not require any precomputation and will compute all needed information when needed. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coordinates</td><td>The coordinates for the molecules as pointer to double. </td></tr>
    <tr><td class="paramname">next</td><td>The index of the new rotor angle. This is an index for the <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues()</a> list. </td></tr>
    <tr><td class="paramname">prev</td><td>If specified, the torsion current torsion angle can be looked up and does not have to be calculated again. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="affffe6e68eecc96bb8189c8b0f8ffc4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#affffe6e68eecc96bb8189c8b0f8ffc4a">&sect;&nbsp;</a></span>Set() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>sine</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>cosine</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>translation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>invmag</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Rotate the specified <code>coordinates</code> by using the specified rotation matrix. </p>

</div>
</div>
<a id="a8aa59b64a8b8b3a54ec081af5986f8e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8aa59b64a8b8b3a54ec081af5986f8e3">&sect;&nbsp;</a></span>Precompute()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Precompute </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Precompute the reference angle and inverse bond length of this rotor for a single conformer. This function should be used in combination with <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a74f31787078ef1b25dfe9b7da2d10c8f">Set(double *coordinates, int idx)</a>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coordinates</td><td>The coordinates to use in the computation.</td></tr>
  </table>
  </dd>
</dl>
<div class="fragment"><div class="line">OBMol mol;</div><div class="line">...</div><div class="line"></div><div class="line">unsigned <span class="keywordtype">int</span> numCoords = mol.NumAtoms() * 3;</div><div class="line"><span class="keywordtype">double</span> *coords = mol.GetCoordinates();</div><div class="line"><a class="code" href="classOpenBabel_1_1OBRotor.shtml#a5b2c2642b2a9bc339c2bd5fdd7112c10">OBRotor</a> rotor;</div><div class="line">rotor.SetBond(mol.GetBond(3));</div><div class="line"></div><div class="line"><span class="comment">// set the possible torsion values</span></div><div class="line">std::vector&lt;double&gt; angles;</div><div class="line">angles.push_back(0.0);</div><div class="line">angles.push_back(3.1415);</div><div class="line">rotor.SetTorsionValues(angles);</div><div class="line"></div><div class="line"><span class="comment">// precompute inverse bond length (i.e. the bond length of bond with index 3</span></div><div class="line"><span class="comment">// using the specified coordinates) and reference angle (i.e. torsion angle</span></div><div class="line"><span class="comment">//in coords)</span></div><div class="line">rotor.Precompute(coords);</div><div class="line"></div><div class="line"><span class="comment">// copy coordinates to coords_1</span></div><div class="line"><span class="keywordtype">double</span> *coords_1 = <span class="keyword">new</span> <span class="keywordtype">double</span>[numCoords];</div><div class="line"><span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numCoords; ++i)</div><div class="line">  coords_1[i] = coords[i];</div><div class="line"><span class="comment">// rotate the atoms in coords_1 to angle with index 0 (i.e. 0.0 degrees)</span></div><div class="line"><span class="comment">// note: on input, the coordinates should be the same as the coordinates used</span></div><div class="line"><span class="comment">//       to precompute the inverse bond length and reference angle (in other</span></div><div class="line"><span class="comment">//       words, the inverse magnitude and reference angle in the specfied</span></div><div class="line"><span class="comment">//       coordinates should be the same as the one used for Precompute)</span></div><div class="line">rotor.Set(coords_1, 0)</div><div class="line"></div><div class="line"><span class="comment">// copy coordinates to coords_2</span></div><div class="line"><span class="keywordtype">double</span> *coords_2 = <span class="keyword">new</span> <span class="keywordtype">double</span>[numCoords];</div><div class="line"><span class="keywordflow">for</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; numCoords; ++i)</div><div class="line">  coords_2[i] = coords[i];</div><div class="line"><span class="comment">// rotate the atoms in coords_2 to angle with index 1 (i.e. 180.0 degrees)</span></div><div class="line">rotor.Set(coords_2, 1)</div><div class="line"></div><div class="line"><span class="keyword">delete</span> coords_1;</div><div class="line"><span class="keyword">delete</span> coords_2;</div></div><!-- fragment --> 
</div>
</div>
<a id="a74f31787078ef1b25dfe9b7da2d10c8f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74f31787078ef1b25dfe9b7da2d10c8f">&sect;&nbsp;</a></span>Set() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Rotate the <code>coordinates</code> to set the torsion angle of this rotor to the angle specified by the index <code>idx</code>. Make sure to call Precompute before calling this function. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coordinates</td><td>The coordinates to rotate. </td></tr>
    <tr><td class="paramname">idx</td><td>The index of the torsion angle in the <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues()</a> list. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6687a97dd0125ad2356b9ef942f96c7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6687a97dd0125ad2356b9ef942f96c7f">&sect;&nbsp;</a></span>Precalc()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Precalc </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double *&gt; &amp;&#160;</td>
          <td class="paramname"><em>conformers</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Precompute the inverse bond lengths, rotation matrices for all specified conformers and all possible torsion values. This method is used in combination with <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a1ade9c212155ac04f25ddf32731657ea">Set(double *coordinates, int conformer, int idx)</a>. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">conformers</td><td>The pointers to the conformer coordinates </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1ade9c212155ac04f25ddf32731657ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ade9c212155ac04f25ddf32731657ea">&sect;&nbsp;</a></span>Set() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Set </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>conformer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Rotate the <code>coordinates</code> to set the torsion to the torsion value with the specified <code>index</code>. The coordinates should be the same as the conformer used for calling Precalc (i.e. conformers[conformer] == coordinates). Make sure to call Precalc before calling this method. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coordinates</td><td>The conformer coordinates. </td></tr>
    <tr><td class="paramname">conformer</td><td>The conformer index in the conformer list given to <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a6687a97dd0125ad2356b9ef942f96c7f">Precalc()</a>. </td></tr>
    <tr><td class="paramname">idx</td><td>The torsion value index in the <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues()</a> list. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1b723190c734e234d87398f8eb245a8e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b723190c734e234d87398f8eb245a8e">&sect;&nbsp;</a></span>GetBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>* GetBond </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> object associated with this <a class="el" href="classOpenBabel_1_1OBRotor.shtml" title="A single rotatable OBBond as part of rotamer searching. ">OBRotor</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>.</p>

</div>
</div>
<a id="a7b470b21b5807f0a9162bef72aebfef9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b470b21b5807f0a9162bef72aebfef9">&sect;&nbsp;</a></span>Size()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t Size </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the number of possible torsion angles for this <a class="el" href="classOpenBabel_1_1OBRotor.shtml" title="A single rotatable OBBond as part of rotamer searching. ">OBRotor</a>. This is the length of the <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues()</a> list. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>, and <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a6acf77e0a6d65df4fe6d4d79831ed9d0">OBRotorList::Setup()</a>.</p>

</div>
</div>
<a id="a141f8abda99de827deec22f935dc9e31"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a141f8abda99de827deec22f935dc9e31">&sect;&nbsp;</a></span>GetIdx()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetIdx </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the index for this rotor (index in an <a class="el" href="classOpenBabel_1_1OBRotorList.shtml" title="Given an OBMol, set up a list of possibly rotatable torsions,. ">OBRotorList</a>). </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>.</p>

</div>
</div>
<a id="a44db679688b64e9032ea9bf6def76315"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a44db679688b64e9032ea9bf6def76315">&sect;&nbsp;</a></span>GetDihedralAtoms() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void GetDihedralAtoms </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ref</em>[4]</td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the dihedral atom indexes. These indexes start from 1. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ac08d1221790bd6f14418e3f77e6e725a">OBRotorList::SetRotAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#af216aef19cf7a82fb1e57504b39f9329">OBRotorList::SetRotAtomsByFix()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>, and <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a6acf77e0a6d65df4fe6d4d79831ed9d0">OBRotorList::Setup()</a>.</p>

</div>
</div>
<a id="a75d6cacf7c1783272f74546387716902"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a75d6cacf7c1783272f74546387716902">&sect;&nbsp;</a></span>GetDihedralAtoms() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;int&gt;&amp; GetDihedralAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the dihedral atom indexes. These indexes start from 1. </p>

</div>
</div>
<a id="a8041f518c97fbbb908c888f1c8309b27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8041f518c97fbbb908c888f1c8309b27">&sect;&nbsp;</a></span>GetRotAtoms() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;int&gt;&amp; GetRotAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the atom indexes that will be displaced when this rotor changes torsion angle. These indexes start from 1. </p>

</div>
</div>
<a id="a0595d2cb4644a0491448a4c001edbb71"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0595d2cb4644a0491448a4c001edbb71">&sect;&nbsp;</a></span>GetTorsionValues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const std::vector&lt;double&gt;&amp; GetTorsionValues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get the possible torsion angles for this <a class="el" href="classOpenBabel_1_1OBRotor.shtml" title="A single rotatable OBBond as part of rotamer searching. ">OBRotor</a>. </p>

</div>
</div>
<a id="ade5378a288a25258f4e3cc28a954bc2e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade5378a288a25258f4e3cc28a954bc2e">&sect;&nbsp;</a></span>GetFixedBonds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&amp; GetFixedBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Get an <a class="el" href="classOpenBabel_1_1OBBitVec.shtml" title="A speed-optimized vector of bits. ">OBBitVec</a> objects with bits set for all bonds that are fixed. Bonds are indexed from 0. </p>

</div>
</div>
<a id="abe6d75394c35f0cc1722eefd849cfbd4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abe6d75394c35f0cc1722eefd849cfbd4">&sect;&nbsp;</a></span>CalcTorsion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcTorsion </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Calculate the torsion for this <a class="el" href="classOpenBabel_1_1OBRotor.shtml" title="A single rotatable OBBond as part of rotamer searching. ">OBRotor</a> using the specified coordinates. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coordinates</td><td>The coordinates (e.g. <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">OBMol::GetCoordinates()</a>). </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The torsion angle in radians. </dd></dl>

</div>
</div>
<a id="a1f707fec840e4ec5dc6d3901e680fe5c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1f707fec840e4ec5dc6d3901e680fe5c">&sect;&nbsp;</a></span>CalcBondLength()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double CalcBondLength </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>coordinates</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Calculate the bond length for this <a class="el" href="classOpenBabel_1_1OBRotor.shtml" title="A single rotatable OBBond as part of rotamer searching. ">OBRotor</a> using the specified coordinates. </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">coordinates</td><td>The coordinates (e.g. <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">OBMol::GetCoordinates()</a>). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a06d5fdac08688bdff198a92c78bdeb69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a06d5fdac08688bdff198a92c78bdeb69">&sect;&nbsp;</a></span>BeginTorIncrement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double&gt;::iterator BeginTorIncrement </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ac5857c1e09978240624038b2c6352dcc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5857c1e09978240624038b2c6352dcc">&sect;&nbsp;</a></span>EndTorIncrement()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double&gt;::iterator EndTorIncrement </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a9e776c30d29ce2b4832a9ae3dace64ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e776c30d29ce2b4832a9ae3dace64ea">&sect;&nbsp;</a></span>RemoveSymTorsionValues()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RemoveSymTorsionValues </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>fold</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Remove all torsions angles between 0 and 360/fold. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a22bfb3d2f1e0787b0c1aabd0f0255226">OBRotorList::RemoveSymVals()</a>.</p>

</div>
</div>
<a id="a800aee2a9873012ac7e2a1bcedd5c6ba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a800aee2a9873012ac7e2a1bcedd5c6ba">&sect;&nbsp;</a></span>SetDelta()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetDelta </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000067">Deprecated:</a></b></dt><dd>Has no effect. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>.</p>

</div>
</div>
<a id="abaa1b786f36fb9bc98b5c46e74425056"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abaa1b786f36fb9bc98b5c46e74425056">&sect;&nbsp;</a></span>GetDelta()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double GetDelta </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000068">Deprecated:</a></b></dt><dd>Has no effect. </dd></dl>

</div>
</div>
<a id="a937745b1178a21d8b223992d16d7d50a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a937745b1178a21d8b223992d16d7d50a">&sect;&nbsp;</a></span>GetFixedAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&amp; GetFixedAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000069">Deprecated:</a></b></dt><dd></dd></dl>

</div>
</div>
<a id="a530a0fd1a1e312d489b367ac73e56bb7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a530a0fd1a1e312d489b367ac73e56bb7">&sect;&nbsp;</a></span>SetFixedAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFixedAtoms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000070">Deprecated:</a></b></dt><dd>See SetFixedBonds </dd></dl>

</div>
</div>
<a id="ab690ce98b2f06352f9079eeae94da3c4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab690ce98b2f06352f9079eeae94da3c4">&sect;&nbsp;</a></span>GetEvalAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a>&amp; GetEvalAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000071">Deprecated:</a></b></dt><dd></dd></dl>

</div>
</div>
<a id="a33bdb71641015f05a632ffaf76e7672a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33bdb71641015f05a632ffaf76e7672a">&sect;&nbsp;</a></span>SetEvalAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetEvalAtoms </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>bv</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000072">Deprecated:</a></b></dt><dd></dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>.</p>

</div>
</div>
<a id="aa68d318d4f18049ca83fbbe8d1c5fa90"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa68d318d4f18049ca83fbbe8d1c5fa90">&sect;&nbsp;</a></span>GetRotAtoms() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void* GetRotAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000073">Deprecated:</a></b></dt><dd></dd></dl>

</div>
</div>
<a id="a8feebfa38afe9888e7a50e421b8f5243"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8feebfa38afe9888e7a50e421b8f5243">&sect;&nbsp;</a></span>GetResolution()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double&gt;&amp; GetResolution </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000074">Deprecated:</a></b></dt><dd>Bad name, see <a class="el" href="classOpenBabel_1_1OBRotor.shtml#a0595d2cb4644a0491448a4c001edbb71">GetTorsionValues()</a> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a61c5a147dfccff2c6c3c3c37dbeda28a">OBForceField::FastRotorSearch()</a>, <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml#a908a9729ddc64dd383f093ab30a0aae3">OBConformerSearch::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a6af0e090e596e74f00ff0f9347d143a7">OBForceField::RandomRotorSearchInitialize()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#abf19a37194fdf234f4fcbe6b8616d2ff">OBForceField::SystematicRotorSearchInitialize()</a>, <a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">OpenBabel::UpdateConformersFromTree()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a308e084198342c54de6f1fb695f23a6d">OBForceField::WeightedRotorSearch()</a>.</p>

</div>
</div>
<a id="a4e82f80e2cd8faf3bce17c464ab1672c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e82f80e2cd8faf3bce17c464ab1672c">&sect;&nbsp;</a></span>SetNumCoords()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetNumCoords </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nc</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000075">Deprecated:</a></b></dt><dd></dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="rotor_8h_source.shtml">rotor.h</a></li>
<li><a class="el" href="rotor_8cpp.shtml">rotor.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
