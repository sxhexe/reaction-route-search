<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head><meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<title>OBMol Class Reference</title>
<link href="/site.css" rel="stylesheet" type="text/css">
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script type="text/javascript" src="search/search.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!--#include file="header.html" -->
<!-- Generated by Doxygen 1.8.12 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceOpenBabel.shtml">OpenBabel</a></li><li class="navelem"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classOpenBabel_1_1OBMol-members.shtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">OBMol Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="mol_8h_source.shtml">openbabel/mol.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for OBMol:</div>
<div class="dyncontent">
 <div class="center">
  <img src="classOpenBabel_1_1OBMol.png" usemap="#OBMol_map" alt=""/>
  <map id="OBMol_map" name="OBMol_map">
<area href="classOpenBabel_1_1OBBase.shtml" title="Base Class. " alt="OBBase" shape="rect" coords="0,0,58,24"/>
</map>
 </div></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ab2f0cea1c162bbe8dd603528a3da5c87"><td class="memTemplParams" colspan="2">template&lt;class T &gt; </td></tr>
<tr class="memitem:ab2f0cea1c162bbe8dd603528a3da5c87"><td class="memTemplItemLeft" align="right" valign="top">T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab2f0cea1c162bbe8dd603528a3da5c87">CastAndClear</a> (bool clear=true)</td></tr>
<tr class="separator:ab2f0cea1c162bbe8dd603528a3da5c87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Initialization and data (re)size methods</div></td></tr>
<tr class="memitem:a937a09d86f3f440467334e546a98d8d4"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4">OBMol</a> ()</td></tr>
<tr class="separator:a937a09d86f3f440467334e546a98d8d4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafa7e4623d4c3c0305b5523ca8a77e14"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;)</td></tr>
<tr class="separator:aafa7e4623d4c3c0305b5523ca8a77e14"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8df0dd71ac1dba7f7876d6671279d087"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">~OBMol</a> ()</td></tr>
<tr class="separator:a8df0dd71ac1dba7f7876d6671279d087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d63c24cbe9dc1f6e82d58da2b67dafa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">operator=</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:a9d63c24cbe9dc1f6e82d58da2b67dafa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3f9d2bbe4ae3f85ddca39be0a8ff4971"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">operator+=</a> (const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;mol)</td></tr>
<tr class="separator:a3f9d2bbe4ae3f85ddca39be0a8ff4971"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a723933398f0402a92916d1cfcb8dadd6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a723933398f0402a92916d1cfcb8dadd6">ReserveAtoms</a> (int natoms)</td></tr>
<tr class="separator:a723933398f0402a92916d1cfcb8dadd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5176ccf4c318a93379716d48ab01e8"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afd5176ccf4c318a93379716d48ab01e8">CreateAtom</a> (void)</td></tr>
<tr class="separator:afd5176ccf4c318a93379716d48ab01e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed69c2ff7d45271240ee8e33f4344d5a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aed69c2ff7d45271240ee8e33f4344d5a">CreateBond</a> (void)</td></tr>
<tr class="separator:aed69c2ff7d45271240ee8e33f4344d5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3803d9a4c2a776560b0c36bc2e788132"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3803d9a4c2a776560b0c36bc2e788132">CreateResidue</a> (void)</td></tr>
<tr class="separator:a3803d9a4c2a776560b0c36bc2e788132"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a3d084b1d94acc59c93b9b05e7d3281"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8a3d084b1d94acc59c93b9b05e7d3281">DestroyAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr class="separator:a8a3d084b1d94acc59c93b9b05e7d3281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a942e828cdc42e0c168f2188a225a7ac3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a942e828cdc42e0c168f2188a225a7ac3">DestroyBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *)</td></tr>
<tr class="separator:a942e828cdc42e0c168f2188a225a7ac3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab224ebc76c4ac8cac7d10df2fae43e79"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab224ebc76c4ac8cac7d10df2fae43e79">DestroyResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *)</td></tr>
<tr class="separator:ab224ebc76c4ac8cac7d10df2fae43e79"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad08c2c13224b533dfbc799371d937317"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad08c2c13224b533dfbc799371d937317">AddAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;atom, bool forceNewId=false)</td></tr>
<tr class="separator:ad08c2c13224b533dfbc799371d937317"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd2ad51974aaf20356fe5a07628205b9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abd2ad51974aaf20356fe5a07628205b9">InsertAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;)</td></tr>
<tr class="separator:abd2ad51974aaf20356fe5a07628205b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62e485fd693d4458ab5c47835afab049"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a62e485fd693d4458ab5c47835afab049">AddBond</a> (int beginIdx, int endIdx, int order, int flags=0, int insertpos=-1)</td></tr>
<tr class="separator:a62e485fd693d4458ab5c47835afab049"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac92c32a100a07407535d5412d1a3b3ae"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">AddBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> &amp;)</td></tr>
<tr class="separator:ac92c32a100a07407535d5412d1a3b3ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad656115fdd6749ef7ad8394ee687f375"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad656115fdd6749ef7ad8394ee687f375">AddResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;)</td></tr>
<tr class="separator:ad656115fdd6749ef7ad8394ee687f375"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae215a7452ce2f50590d64af7a5558f0c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae215a7452ce2f50590d64af7a5558f0c">NewAtom</a> ()</td></tr>
<tr class="separator:ae215a7452ce2f50590d64af7a5558f0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2762de927ca28384c48bf618603aab2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad2762de927ca28384c48bf618603aab2">NewAtom</a> (unsigned long id)</td></tr>
<tr class="separator:ad2762de927ca28384c48bf618603aab2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeefe2b1d5039fdf141187e10cf9c6b9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aeefe2b1d5039fdf141187e10cf9c6b9f">NewBond</a> ()</td></tr>
<tr class="separator:aeefe2b1d5039fdf141187e10cf9c6b9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48c326f3815a423f21bba671970ec511"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a48c326f3815a423f21bba671970ec511">NewBond</a> (unsigned long id)</td></tr>
<tr class="separator:a48c326f3815a423f21bba671970ec511"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7662758d1fe46ab3a3392b1970c6a656"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7662758d1fe46ab3a3392b1970c6a656">NewResidue</a> ()</td></tr>
<tr class="separator:a7662758d1fe46ab3a3392b1970c6a656"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a688b0d2367ab8e683821e6cff705d5f4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a688b0d2367ab8e683821e6cff705d5f4">DeleteAtom</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, bool destroyAtom=true)</td></tr>
<tr class="separator:a688b0d2367ab8e683821e6cff705d5f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2b07c6d4f4dee79c04614cb34d5a9e7"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">DeleteBond</a> (<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *, bool destroyBond=true)</td></tr>
<tr class="separator:ac2b07c6d4f4dee79c04614cb34d5a9e7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a202a80d2d05f526fa5186dfb797558d6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a202a80d2d05f526fa5186dfb797558d6">DeleteResidue</a> (<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *, bool destroyResidue=true)</td></tr>
<tr class="separator:a202a80d2d05f526fa5186dfb797558d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Data retrieval methods</div></td></tr>
<tr class="memitem:aba761a006b56d62912a91e259ce11bb1"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aba761a006b56d62912a91e259ce11bb1">GetFlags</a> ()</td></tr>
<tr class="separator:aba761a006b56d62912a91e259ce11bb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ac1fac8a7d7ad373c39710b62b3e0a7"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a2ac1fac8a7d7ad373c39710b62b3e0a7">GetTitle</a> (bool replaceNewlines=true) const</td></tr>
<tr class="separator:a2ac1fac8a7d7ad373c39710b62b3e0a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f0695eb7d6ff6321032d88655ae8d25"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a2f0695eb7d6ff6321032d88655ae8d25">NumAtoms</a> () const</td></tr>
<tr class="separator:a2f0695eb7d6ff6321032d88655ae8d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7358c2c15c4c0d88ae2489f586bc8e0b"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7358c2c15c4c0d88ae2489f586bc8e0b">NumBonds</a> () const</td></tr>
<tr class="separator:a7358c2c15c4c0d88ae2489f586bc8e0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa92da4c4cfc01b7c0d4385f487b42a4"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afa92da4c4cfc01b7c0d4385f487b42a4">NumHvyAtoms</a> ()</td></tr>
<tr class="separator:afa92da4c4cfc01b7c0d4385f487b42a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af641753d0dbc017405280791048f0d88"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af641753d0dbc017405280791048f0d88">NumResidues</a> () const</td></tr>
<tr class="separator:af641753d0dbc017405280791048f0d88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0079d7acc1b351a0b3811e0fb5451962"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0079d7acc1b351a0b3811e0fb5451962">NumRotors</a> (bool sampleRingBonds=false)</td></tr>
<tr class="separator:a0079d7acc1b351a0b3811e0fb5451962"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5595d8755d9ec6f539143f7d059124d0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a5595d8755d9ec6f539143f7d059124d0">GetAtom</a> (int idx) const</td></tr>
<tr class="separator:a5595d8755d9ec6f539143f7d059124d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21478d000fc5211caff7a7b1ffb3fbeb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a21478d000fc5211caff7a7b1ffb3fbeb">GetAtomById</a> (unsigned long id) const</td></tr>
<tr class="separator:a21478d000fc5211caff7a7b1ffb3fbeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a629237105218b92b89fe880ed1e4f5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9a629237105218b92b89fe880ed1e4f5">GetFirstAtom</a> () const</td></tr>
<tr class="separator:a9a629237105218b92b89fe880ed1e4f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa04806f750ec871778f68d6c2cff331a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04806f750ec871778f68d6c2cff331a">GetBond</a> (int idx) const</td></tr>
<tr class="separator:aa04806f750ec871778f68d6c2cff331a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af28457ecdb11ba34d05bb6b02124c0e0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af28457ecdb11ba34d05bb6b02124c0e0">GetBondById</a> (unsigned long id) const</td></tr>
<tr class="separator:af28457ecdb11ba34d05bb6b02124c0e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfe3189c665e622cbc228188c8e10b93"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3189c665e622cbc228188c8e10b93">GetBond</a> (int a, int b) const</td></tr>
<tr class="separator:acfe3189c665e622cbc228188c8e10b93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d160784c8ea86c2884f88446d9a17b1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7d160784c8ea86c2884f88446d9a17b1">GetBond</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *bgn, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end) const</td></tr>
<tr class="separator:a7d160784c8ea86c2884f88446d9a17b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e992bd318407a72c7e745653716ae2c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8e992bd318407a72c7e745653716ae2c">GetResidue</a> (int idx) const</td></tr>
<tr class="separator:a8e992bd318407a72c7e745653716ae2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5afa8a0742e0238f3fd92ada82f079d"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af5afa8a0742e0238f3fd92ada82f079d">GetInternalCoord</a> ()</td></tr>
<tr class="separator:af5afa8a0742e0238f3fd92ada82f079d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a401a725a0efbc20c49783f176d78e6a7"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a401a725a0efbc20c49783f176d78e6a7">GetTorsion</a> (int, int, int, int)</td></tr>
<tr class="separator:a401a725a0efbc20c49783f176d78e6a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfd902d8de9eeb32ea476fe916a329fd"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adfd902d8de9eeb32ea476fe916a329fd">GetTorsion</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *c, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *d)</td></tr>
<tr class="separator:adfd902d8de9eeb32ea476fe916a329fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1589aac9963e7a8f58bffb24d85b9a16"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1589aac9963e7a8f58bffb24d85b9a16">GetAngle</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *c)</td></tr>
<tr class="separator:a1589aac9963e7a8f58bffb24d85b9a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebb6df8ada02a3046ee20ad777c99ad7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aebb6df8ada02a3046ee20ad777c99ad7">AreInSameRing</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *a, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *b)</td></tr>
<tr class="separator:aebb6df8ada02a3046ee20ad777c99ad7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7adc12bff502264eaebf537a5e28a43c"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7adc12bff502264eaebf537a5e28a43c">GetFormula</a> ()</td></tr>
<tr class="separator:a7adc12bff502264eaebf537a5e28a43c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a997bc4b84a93d285f63efa60cbb8ee8d"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">GetSpacedFormula</a> (int ones=0, const char *sp=&quot; &quot;, bool implicitH=true)</td></tr>
<tr class="separator:a997bc4b84a93d285f63efa60cbb8ee8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4dcfbb9780f44d5fca2effbc30b17ce0"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4dcfbb9780f44d5fca2effbc30b17ce0">GetEnergy</a> () const</td></tr>
<tr class="separator:a4dcfbb9780f44d5fca2effbc30b17ce0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77cd52b60b431c19aa7debcd0d92e07d"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a77cd52b60b431c19aa7debcd0d92e07d">GetMolWt</a> (bool implicitH=true)</td></tr>
<tr class="separator:a77cd52b60b431c19aa7debcd0d92e07d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cac960f30506aa53d083983845032df"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7cac960f30506aa53d083983845032df">GetExactMass</a> (bool implicitH=true)</td></tr>
<tr class="separator:a7cac960f30506aa53d083983845032df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab78d46b60f04702fa6f450ef6f8dae62"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab78d46b60f04702fa6f450ef6f8dae62">GetTotalCharge</a> ()</td></tr>
<tr class="separator:ab78d46b60f04702fa6f450ef6f8dae62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa431b859ed26f5a45e6ddc3448da1d1f"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa431b859ed26f5a45e6ddc3448da1d1f">GetTotalSpinMultiplicity</a> ()</td></tr>
<tr class="separator:aa431b859ed26f5a45e6ddc3448da1d1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad646045c7f735c9ef05ba9e4bb768b7c"><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad646045c7f735c9ef05ba9e4bb768b7c">GetDimension</a> () const</td></tr>
<tr class="separator:ad646045c7f735c9ef05ba9e4bb768b7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad11003513310725bd54265ef5bf004c0"><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">GetCoordinates</a> ()</td></tr>
<tr class="separator:ad11003513310725bd54265ef5bf004c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f6bce457ef6f963b8e4ba7c4be23775"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f6bce457ef6f963b8e4ba7c4be23775">GetSSSR</a> ()</td></tr>
<tr class="separator:a0f6bce457ef6f963b8e4ba7c4be23775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a762b79fd52bbaf0f4444f0308654dab1"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a762b79fd52bbaf0f4444f0308654dab1">GetLSSR</a> ()</td></tr>
<tr class="separator:a762b79fd52bbaf0f4444f0308654dab1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f801729475d1d17415af6376458c81e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9f801729475d1d17415af6376458c81e">AutomaticFormalCharge</a> ()</td></tr>
<tr class="separator:a9f801729475d1d17415af6376458c81e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2ee11d3efe6526c2eb352bb67684e6c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af2ee11d3efe6526c2eb352bb67684e6c">AutomaticPartialCharge</a> ()</td></tr>
<tr class="separator:af2ee11d3efe6526c2eb352bb67684e6c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Data modification methods</div></td></tr>
<tr class="memitem:acfe3b729dc90c4c5e21684e3a60653af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#acfe3b729dc90c4c5e21684e3a60653af">SetTitle</a> (const char *title)</td></tr>
<tr class="separator:acfe3b729dc90c4c5e21684e3a60653af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a667324c365d3b6f20d17221295c3a89e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a667324c365d3b6f20d17221295c3a89e">SetTitle</a> (std::string &amp;title)</td></tr>
<tr class="separator:a667324c365d3b6f20d17221295c3a89e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a4b32a3135f26595bdd260539256c67"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67">SetFormula</a> (std::string molFormula)</td></tr>
<tr class="separator:a0a4b32a3135f26595bdd260539256c67"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab78fa0a100d47ad2beb88c7cabb80e62"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab78fa0a100d47ad2beb88c7cabb80e62">SetEnergy</a> (double energy)</td></tr>
<tr class="separator:ab78fa0a100d47ad2beb88c7cabb80e62"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc2702cffcab0a0d6907958e3327284b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adc2702cffcab0a0d6907958e3327284b">SetDimension</a> (unsigned short int d)</td></tr>
<tr class="separator:adc2702cffcab0a0d6907958e3327284b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58b360590ab212860dc26812ce38057d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a58b360590ab212860dc26812ce38057d">SetTotalCharge</a> (int charge)</td></tr>
<tr class="separator:a58b360590ab212860dc26812ce38057d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a537e4f9fec95b76ae84e5e9c8eb7d192"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a537e4f9fec95b76ae84e5e9c8eb7d192">SetTotalSpinMultiplicity</a> (unsigned int spinMultiplicity)</td></tr>
<tr class="separator:a537e4f9fec95b76ae84e5e9c8eb7d192"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b0e7a728429a4482c47127538f0fa6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a49b0e7a728429a4482c47127538f0fa6">SetInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt; int_coord)</td></tr>
<tr class="separator:a49b0e7a728429a4482c47127538f0fa6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31e0990c833c415708b3fc515dbb35d5"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a31e0990c833c415708b3fc515dbb35d5">SetAutomaticFormalCharge</a> (bool val)</td></tr>
<tr class="separator:a31e0990c833c415708b3fc515dbb35d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8df95db3695e5e7ce263c484ce5533d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa8df95db3695e5e7ce263c484ce5533d">SetAutomaticPartialCharge</a> (bool val)</td></tr>
<tr class="separator:aa8df95db3695e5e7ce263c484ce5533d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecd431b2cfaefa64d54c2dc4088551fb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aecd431b2cfaefa64d54c2dc4088551fb">SetAromaticPerceived</a> ()</td></tr>
<tr class="separator:aecd431b2cfaefa64d54c2dc4088551fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba303a094727738eb901cafbecd7c196"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aba303a094727738eb901cafbecd7c196">SetSSSRPerceived</a> ()</td></tr>
<tr class="separator:aba303a094727738eb901cafbecd7c196"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4641fea7bd6513949147bb7a53b6a7e1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4641fea7bd6513949147bb7a53b6a7e1">SetLSSRPerceived</a> ()</td></tr>
<tr class="separator:a4641fea7bd6513949147bb7a53b6a7e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0656401ba8b19bc9b9f2d3e8e833d3aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0656401ba8b19bc9b9f2d3e8e833d3aa">SetRingAtomsAndBondsPerceived</a> ()</td></tr>
<tr class="separator:a0656401ba8b19bc9b9f2d3e8e833d3aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa809ea95ee07e61c6dc00ae710d8a749"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa809ea95ee07e61c6dc00ae710d8a749">SetAtomTypesPerceived</a> ()</td></tr>
<tr class="separator:aa809ea95ee07e61c6dc00ae710d8a749"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08b5caf5aa6fc21e7b6fcd44e3d32f58"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a08b5caf5aa6fc21e7b6fcd44e3d32f58">SetRingTypesPerceived</a> ()</td></tr>
<tr class="separator:a08b5caf5aa6fc21e7b6fcd44e3d32f58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a537294f8e96a7ec5263a79de7454326e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a537294f8e96a7ec5263a79de7454326e">SetChainsPerceived</a> ()</td></tr>
<tr class="separator:a537294f8e96a7ec5263a79de7454326e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a608e6f965afea1f4f64cb0f499a0cb27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a608e6f965afea1f4f64cb0f499a0cb27">SetChiralityPerceived</a> ()</td></tr>
<tr class="separator:a608e6f965afea1f4f64cb0f499a0cb27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00fd4c76a7513a9c8087d975f5d8a51b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a00fd4c76a7513a9c8087d975f5d8a51b">SetPartialChargesPerceived</a> ()</td></tr>
<tr class="separator:a00fd4c76a7513a9c8087d975f5d8a51b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b93b72694e8a9a970eee7f0b65ecf9a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4b93b72694e8a9a970eee7f0b65ecf9a">SetHybridizationPerceived</a> ()</td></tr>
<tr class="separator:a4b93b72694e8a9a970eee7f0b65ecf9a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ecfb96410199c294c003f975d870832"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9ecfb96410199c294c003f975d870832">SetImplicitValencePerceived</a> ()</td></tr>
<tr class="separator:a9ecfb96410199c294c003f975d870832"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e298bbe286ab2c5a6f3b086a07b1a2b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e298bbe286ab2c5a6f3b086a07b1a2b">SetKekulePerceived</a> ()</td></tr>
<tr class="separator:a1e298bbe286ab2c5a6f3b086a07b1a2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7900736a9f73a041ab8bade19be84cc9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7900736a9f73a041ab8bade19be84cc9">SetClosureBondsPerceived</a> ()</td></tr>
<tr class="separator:a7900736a9f73a041ab8bade19be84cc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47b63124c405f9c2ecdb766c6de9c56e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a47b63124c405f9c2ecdb766c6de9c56e">SetHydrogensAdded</a> ()</td></tr>
<tr class="separator:a47b63124c405f9c2ecdb766c6de9c56e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af56db37c6a9f7049ed16469ab0a270c2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af56db37c6a9f7049ed16469ab0a270c2">SetCorrectedForPH</a> ()</td></tr>
<tr class="separator:af56db37c6a9f7049ed16469ab0a270c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6438e097839dbc98916fb00a3dc67305"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6438e097839dbc98916fb00a3dc67305">SetAromaticCorrected</a> ()</td></tr>
<tr class="separator:a6438e097839dbc98916fb00a3dc67305"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c81eeba803bc59d6c40f97b0e0e17fd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a2c81eeba803bc59d6c40f97b0e0e17fd">SetSpinMultiplicityAssigned</a> ()</td></tr>
<tr class="separator:a2c81eeba803bc59d6c40f97b0e0e17fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0922e1fa0939499c024e1006433adf3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab0922e1fa0939499c024e1006433adf3">SetFlags</a> (int flags)</td></tr>
<tr class="separator:ab0922e1fa0939499c024e1006433adf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88f39becfe74f62c9d0ffedfb4098b77"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a88f39becfe74f62c9d0ffedfb4098b77">UnsetAromaticPerceived</a> ()</td></tr>
<tr class="separator:a88f39becfe74f62c9d0ffedfb4098b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a116f93a9700551794731bf71cd17345a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a116f93a9700551794731bf71cd17345a">UnsetSSSRPerceived</a> ()</td></tr>
<tr class="separator:a116f93a9700551794731bf71cd17345a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa21ddf3d7c7164e6e72d0228d75b974c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa21ddf3d7c7164e6e72d0228d75b974c">UnsetLSSRPerceived</a> ()</td></tr>
<tr class="separator:aa21ddf3d7c7164e6e72d0228d75b974c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d0001f1af294a0d5676a70e12115b43"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7d0001f1af294a0d5676a70e12115b43">UnsetRingTypesPerceived</a> ()</td></tr>
<tr class="separator:a7d0001f1af294a0d5676a70e12115b43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b8a9f6292b91ec5c4022a487e9d6092"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0b8a9f6292b91ec5c4022a487e9d6092">UnsetPartialChargesPerceived</a> ()</td></tr>
<tr class="separator:a0b8a9f6292b91ec5c4022a487e9d6092"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af673e91c4869ca8c1057f006d4f06dae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af673e91c4869ca8c1057f006d4f06dae">UnsetImplicitValencePerceived</a> ()</td></tr>
<tr class="separator:af673e91c4869ca8c1057f006d4f06dae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac6df023071b8d662aa513a00579f076d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac6df023071b8d662aa513a00579f076d">UnsetHydrogensAdded</a> ()</td></tr>
<tr class="separator:ac6df023071b8d662aa513a00579f076d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a401b99defa8a57195dc40a2604cee115"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a401b99defa8a57195dc40a2604cee115">UnsetFlag</a> (int flag)</td></tr>
<tr class="separator:a401b99defa8a57195dc40a2604cee115"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Molecule utilities and perception methods</div></td></tr>
<tr class="memitem:ad4e3eab0d027bd8e503d02e7261ca477"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477">FindSSSR</a> ()</td></tr>
<tr class="separator:ad4e3eab0d027bd8e503d02e7261ca477"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39a5ee36b2320d9191dac24acf90b03e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a39a5ee36b2320d9191dac24acf90b03e">FindLSSR</a> ()</td></tr>
<tr class="separator:a39a5ee36b2320d9191dac24acf90b03e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae58b3f3da59d333ffa0d5b0f005f3526"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae58b3f3da59d333ffa0d5b0f005f3526">FindRingAtomsAndBonds</a> ()</td></tr>
<tr class="separator:ae58b3f3da59d333ffa0d5b0f005f3526"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3368586a5a86bd9684f4b25ac53d2e44"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3368586a5a86bd9684f4b25ac53d2e44">FindChiralCenters</a> ()</td></tr>
<tr class="separator:a3368586a5a86bd9684f4b25ac53d2e44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae12d082d7bc7adb2e9fd621adf27ccb6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae12d082d7bc7adb2e9fd621adf27ccb6">FindChildren</a> (std::vector&lt; int &gt; &amp;children, int bgnIdx, int endIdx)</td></tr>
<tr class="separator:ae12d082d7bc7adb2e9fd621adf27ccb6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab919f74b99e785e8b70b3c8908d50ca"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aab919f74b99e785e8b70b3c8908d50ca">FindChildren</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;children, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *bgn, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *end)</td></tr>
<tr class="separator:aab919f74b99e785e8b70b3c8908d50ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa797df5bf72cb5e220e13171dd9c7d4a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa797df5bf72cb5e220e13171dd9c7d4a">FindLargestFragment</a> (<a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;frag)</td></tr>
<tr class="separator:aa797df5bf72cb5e220e13171dd9c7d4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af74913b3d793c41d1f005afdba11da35"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af74913b3d793c41d1f005afdba11da35">ContigFragList</a> (std::vector&lt; std::vector&lt; int &gt; &gt; &amp;)</td></tr>
<tr class="separator:af74913b3d793c41d1f005afdba11da35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a228de88f48ee3ca6a11554b74d82dedd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a228de88f48ee3ca6a11554b74d82dedd">Align</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;, <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;)</td></tr>
<tr class="separator:a228de88f48ee3ca6a11554b74d82dedd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31d05972f7454e791641c4a7d0071d12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">ConnectTheDots</a> ()</td></tr>
<tr class="separator:a31d05972f7454e791641c4a7d0071d12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac749cfb04173f6f35ef64b1ac1d87178"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">PerceiveBondOrders</a> ()</td></tr>
<tr class="separator:ac749cfb04173f6f35ef64b1ac1d87178"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abee51ea4be988357bb17c4e5fd3d7e12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abee51ea4be988357bb17c4e5fd3d7e12">FindAngles</a> ()</td></tr>
<tr class="separator:abee51ea4be988357bb17c4e5fd3d7e12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ce9b09fb625faffaae648d7beae9598"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1ce9b09fb625faffaae648d7beae9598">FindTorsions</a> ()</td></tr>
<tr class="separator:a1ce9b09fb625faffaae648d7beae9598"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4260148aa21c7ada7d625bc0c6f2f7a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4260148aa21c7ada7d625bc0c6f2f7a">GetGTDVector</a> (std::vector&lt; int &gt; &amp;)</td></tr>
<tr class="separator:ac4260148aa21c7ada7d625bc0c6f2f7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94276831221d5693b3017da7fab3ccc8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a94276831221d5693b3017da7fab3ccc8">GetGIVector</a> (std::vector&lt; unsigned int &gt; &amp;)</td></tr>
<tr class="separator:a94276831221d5693b3017da7fab3ccc8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade880e97f2bdf3c90e91375aec12aaf0"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ade880e97f2bdf3c90e91375aec12aaf0">GetGIDVector</a> (std::vector&lt; unsigned int &gt; &amp;)</td></tr>
<tr class="separator:ade880e97f2bdf3c90e91375aec12aaf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Methods to check for existence of properties</div></td></tr>
<tr class="memitem:afbf33662dacd733285409dfd85696457"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">Has2D</a> (bool Not3D=false)</td></tr>
<tr class="separator:afbf33662dacd733285409dfd85696457"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4aaa8b5151395ad66ecfe896ca8a0114"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">Has3D</a> ()</td></tr>
<tr class="separator:a4aaa8b5151395ad66ecfe896ca8a0114"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdda89a787d7ae0639d5127c2f6a4dfb"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">HasNonZeroCoords</a> ()</td></tr>
<tr class="separator:abdda89a787d7ae0639d5127c2f6a4dfb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a783c51919c69da3287d51f34b2fa53a0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a783c51919c69da3287d51f34b2fa53a0">HasAromaticPerceived</a> ()</td></tr>
<tr class="separator:a783c51919c69da3287d51f34b2fa53a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac2c45d000ac10ad770ec5e5eff97f30"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aac2c45d000ac10ad770ec5e5eff97f30">HasSSSRPerceived</a> ()</td></tr>
<tr class="separator:aac2c45d000ac10ad770ec5e5eff97f30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3771eaf33a336f55348f80ca857a159f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3771eaf33a336f55348f80ca857a159f">HasLSSRPerceived</a> ()</td></tr>
<tr class="separator:a3771eaf33a336f55348f80ca857a159f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0329d4256b426a4967afa867f415d06b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0329d4256b426a4967afa867f415d06b">HasRingAtomsAndBondsPerceived</a> ()</td></tr>
<tr class="separator:a0329d4256b426a4967afa867f415d06b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ba2ebe76f1b15c48a8f1538efc8f9b4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0ba2ebe76f1b15c48a8f1538efc8f9b4">HasAtomTypesPerceived</a> ()</td></tr>
<tr class="separator:a0ba2ebe76f1b15c48a8f1538efc8f9b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfe42a839d62e3d8f31ce3c28dc2e4e0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adfe42a839d62e3d8f31ce3c28dc2e4e0">HasRingTypesPerceived</a> ()</td></tr>
<tr class="separator:adfe42a839d62e3d8f31ce3c28dc2e4e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39df67d7e225b9dd721b9b8c7df809ce"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a39df67d7e225b9dd721b9b8c7df809ce">HasChiralityPerceived</a> ()</td></tr>
<tr class="separator:a39df67d7e225b9dd721b9b8c7df809ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87c2cd2043f749d5433a98df4ad8277d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a87c2cd2043f749d5433a98df4ad8277d">HasPartialChargesPerceived</a> ()</td></tr>
<tr class="separator:a87c2cd2043f749d5433a98df4ad8277d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a908e2d394d3a47cf821014899344ca37"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a908e2d394d3a47cf821014899344ca37">HasHybridizationPerceived</a> ()</td></tr>
<tr class="separator:a908e2d394d3a47cf821014899344ca37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fe699ef7fee62ca46743d6aa78bdea5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7fe699ef7fee62ca46743d6aa78bdea5">HasImplicitValencePerceived</a> ()</td></tr>
<tr class="separator:a7fe699ef7fee62ca46743d6aa78bdea5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafddb1ded7f589afbdd56062368602db"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aafddb1ded7f589afbdd56062368602db">HasKekulePerceived</a> ()</td></tr>
<tr class="separator:aafddb1ded7f589afbdd56062368602db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb25b05d950ca109bf9c6333b906a9ee"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afb25b05d950ca109bf9c6333b906a9ee">HasClosureBondsPerceived</a> ()</td></tr>
<tr class="separator:afb25b05d950ca109bf9c6333b906a9ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac31a6af8f2b96fa35170523b6318c459"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac31a6af8f2b96fa35170523b6318c459">HasChainsPerceived</a> ()</td></tr>
<tr class="separator:ac31a6af8f2b96fa35170523b6318c459"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefc6e71556f0cd4afdd34e4a99d06025"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aefc6e71556f0cd4afdd34e4a99d06025">HasHydrogensAdded</a> ()</td></tr>
<tr class="separator:aefc6e71556f0cd4afdd34e4a99d06025"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab57a4b5dd9752e593e2fdb80f48909d8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab57a4b5dd9752e593e2fdb80f48909d8">HasAromaticCorrected</a> ()</td></tr>
<tr class="separator:ab57a4b5dd9752e593e2fdb80f48909d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc44b8ad27a62b9cfc670d4fd29bb52f"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#afc44b8ad27a62b9cfc670d4fd29bb52f">IsCorrectedForPH</a> ()</td></tr>
<tr class="separator:afc44b8ad27a62b9cfc670d4fd29bb52f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a45f2c821b749250e070c3594289103"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4a45f2c821b749250e070c3594289103">HasSpinMultiplicityAssigned</a> ()</td></tr>
<tr class="separator:a4a45f2c821b749250e070c3594289103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63258442848bd8e29e0d5224e145ad83"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a63258442848bd8e29e0d5224e145ad83">IsChiral</a> ()</td></tr>
<tr class="separator:a63258442848bd8e29e0d5224e145ad83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31d1053aee208079bcc3c5e1884774df"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d1053aee208079bcc3c5e1884774df">Empty</a> ()</td></tr>
<tr class="separator:a31d1053aee208079bcc3c5e1884774df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Multiple conformer member functions</div></td></tr>
<tr class="memitem:a37e5c0caf3b51ae81d8d3abc6ffb1a9c"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a37e5c0caf3b51ae81d8d3abc6ffb1a9c">NumConformers</a> ()</td></tr>
<tr class="separator:a37e5c0caf3b51ae81d8d3abc6ffb1a9c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d0394eb0ad10ca4241da6d6916f0a8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a24d0394eb0ad10ca4241da6d6916f0a8">SetConformers</a> (std::vector&lt; double *&gt; &amp;v)</td></tr>
<tr class="separator:a24d0394eb0ad10ca4241da6d6916f0a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b80e7015d000221e0cc92fd3cf6f9e4"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7b80e7015d000221e0cc92fd3cf6f9e4">AddConformer</a> (double *f)</td></tr>
<tr class="separator:a7b80e7015d000221e0cc92fd3cf6f9e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4c349e7e3920df72134c0c940318997"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae4c349e7e3920df72134c0c940318997">SetConformer</a> (int i)</td></tr>
<tr class="separator:ae4c349e7e3920df72134c0c940318997"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af06dcff6ea883886d4d48bad4cc69156"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af06dcff6ea883886d4d48bad4cc69156">CopyConformer</a> (double *c, int nconf)</td></tr>
<tr class="separator:af06dcff6ea883886d4d48bad4cc69156"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21951fddd6c8a35b21769a1d08718581"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a21951fddd6c8a35b21769a1d08718581">DeleteConformer</a> (int nconf)</td></tr>
<tr class="separator:a21951fddd6c8a35b21769a1d08718581"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeae833c9dcc30e182f18554bd40242d6"><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aeae833c9dcc30e182f18554bd40242d6">GetConformer</a> (int i)</td></tr>
<tr class="separator:aeae833c9dcc30e182f18554bd40242d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22a1e9fe8d4ef1bebf8e9d9aa2cacc12"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">SetEnergies</a> (std::vector&lt; double &gt; &amp;energies)</td></tr>
<tr class="separator:a22a1e9fe8d4ef1bebf8e9d9aa2cacc12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa04bad1a38d0d3bff9930e332f460dc2"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">GetEnergies</a> ()</td></tr>
<tr class="separator:aa04bad1a38d0d3bff9930e332f460dc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ba177c97c9b16781c3e87833359730c"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">GetEnergy</a> (int ci)</td></tr>
<tr class="separator:a5ba177c97c9b16781c3e87833359730c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3726424b4f6e52a0af2b63da9e2e19f7"><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3726424b4f6e52a0af2b63da9e2e19f7">BeginConformer</a> (std::vector&lt; double *&gt;::iterator &amp;i)</td></tr>
<tr class="separator:a3726424b4f6e52a0af2b63da9e2e19f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a684fbfa582ca28f08da6fa19bb6d2596"><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a684fbfa582ca28f08da6fa19bb6d2596">NextConformer</a> (std::vector&lt; double *&gt;::iterator &amp;i)</td></tr>
<tr class="separator:a684fbfa582ca28f08da6fa19bb6d2596"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5246a44bf82aa31c2f428665db94bfb8"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a5246a44bf82aa31c2f428665db94bfb8">GetConformers</a> ()</td></tr>
<tr class="separator:a5246a44bf82aa31c2f428665db94bfb8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Iterator methods</div></td></tr>
<tr class="memitem:ae3b07b388e733d5a0e9ee9654a4411a1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae3b07b388e733d5a0e9ee9654a4411a1">BeginAtoms</a> ()</td></tr>
<tr class="separator:ae3b07b388e733d5a0e9ee9654a4411a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81afb84c73fe3e57e8edd5a472e175f6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a81afb84c73fe3e57e8edd5a472e175f6">EndAtoms</a> ()</td></tr>
<tr class="separator:a81afb84c73fe3e57e8edd5a472e175f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4ea48df79e239b506d3501dd42adde9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac4ea48df79e239b506d3501dd42adde9">BeginBonds</a> ()</td></tr>
<tr class="separator:ac4ea48df79e239b506d3501dd42adde9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87859f951e8ea33345b76d93014486c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a87859f951e8ea33345b76d93014486c9">EndBonds</a> ()</td></tr>
<tr class="separator:a87859f951e8ea33345b76d93014486c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35e5693cfdc3b993440d29540ab0509d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a35e5693cfdc3b993440d29540ab0509d">BeginResidues</a> ()</td></tr>
<tr class="separator:a35e5693cfdc3b993440d29540ab0509d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b81baba8ee7151f0aae8fb01e90358"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a62b81baba8ee7151f0aae8fb01e90358">EndResidues</a> ()</td></tr>
<tr class="separator:a62b81baba8ee7151f0aae8fb01e90358"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abceac189ade32ef3a6c5f3d13fc38db4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abceac189ade32ef3a6c5f3d13fc38db4">BeginAtom</a> (<a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;i)</td></tr>
<tr class="separator:abceac189ade32ef3a6c5f3d13fc38db4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8ca499b39cdd5f4a2fc76e7d50deaa9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac8ca499b39cdd5f4a2fc76e7d50deaa9">NextAtom</a> (<a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;i)</td></tr>
<tr class="separator:ac8ca499b39cdd5f4a2fc76e7d50deaa9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9d21c9b65678905c6d7d461160fcd9f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad9d21c9b65678905c6d7d461160fcd9f">BeginBond</a> (<a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;i)</td></tr>
<tr class="separator:ad9d21c9b65678905c6d7d461160fcd9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a133c681e9534e7255b1fae272c40a511"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a133c681e9534e7255b1fae272c40a511">NextBond</a> (<a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;i)</td></tr>
<tr class="separator:a133c681e9534e7255b1fae272c40a511"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49f6fa37f54e72323ae1b9597fdca02e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a49f6fa37f54e72323ae1b9597fdca02e">BeginResidue</a> (<a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;i)</td></tr>
<tr class="separator:a49f6fa37f54e72323ae1b9597fdca02e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3747253310ab328967a8bcaf32842d3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af3747253310ab328967a8bcaf32842d3">NextResidue</a> (<a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;i)</td></tr>
<tr class="separator:af3747253310ab328967a8bcaf32842d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa335b17e7c11424cf44f3420de73b8cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa335b17e7c11424cf44f3420de73b8cf">BeginInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt;::iterator &amp;i)</td></tr>
<tr class="separator:aa335b17e7c11424cf44f3420de73b8cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63bf8bb4886f7062b3a6b99c77a14d30"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a63bf8bb4886f7062b3a6b99c77a14d30">NextInternalCoord</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt;::iterator &amp;i)</td></tr>
<tr class="separator:a63bf8bb4886f7062b3a6b99c77a14d30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Generic data handling methods (via OBGenericData)</div></td></tr>
<tr class="memitem:a86dd58fc1da5652d70e823fa77cc1637"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a86dd58fc1da5652d70e823fa77cc1637">HasData</a> (const std::string &amp;)</td></tr>
<tr class="separator:a86dd58fc1da5652d70e823fa77cc1637"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01b429ffcaf47cf265acd439ed2faca0"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a01b429ffcaf47cf265acd439ed2faca0">HasData</a> (const char *)</td></tr>
<tr class="separator:a01b429ffcaf47cf265acd439ed2faca0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cb103f12f49d86132ece200000da830"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a6cb103f12f49d86132ece200000da830">HasData</a> (const unsigned int type)</td></tr>
<tr class="separator:a6cb103f12f49d86132ece200000da830"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a797e5b4d20b6233062d2fdba78a08e06"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a797e5b4d20b6233062d2fdba78a08e06">DeleteData</a> (unsigned int type)</td></tr>
<tr class="separator:a797e5b4d20b6233062d2fdba78a08e06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab586df65e3f115b69510820b34098ce9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#ab586df65e3f115b69510820b34098ce9">DeleteData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *)</td></tr>
<tr class="separator:ab586df65e3f115b69510820b34098ce9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a030adad5b052ff3d390f13e1f981201e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a030adad5b052ff3d390f13e1f981201e">DeleteData</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&gt; &amp;)</td></tr>
<tr class="separator:a030adad5b052ff3d390f13e1f981201e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa068a2a7b64d2ee73aedb8c6e3cf0c4c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa068a2a7b64d2ee73aedb8c6e3cf0c4c">DeleteData</a> (const std::string &amp;s)</td></tr>
<tr class="separator:aa068a2a7b64d2ee73aedb8c6e3cf0c4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb6b0ec89bfea783825b3b466e4dbc00"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#adb6b0ec89bfea783825b3b466e4dbc00">SetData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr class="separator:adb6b0ec89bfea783825b3b466e4dbc00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6f692332837387535e337413d0100de"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa6f692332837387535e337413d0100de">CloneData</a> (<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *d)</td></tr>
<tr class="separator:aa6f692332837387535e337413d0100de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2de970fc10391cb7f06c77e3b492f582"><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a2de970fc10391cb7f06c77e3b492f582">DataSize</a> () const</td></tr>
<tr class="separator:a2de970fc10391cb7f06c77e3b492f582"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee672d91b694547fb072fdaa8e03cfe9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aee672d91b694547fb072fdaa8e03cfe9">GetData</a> (const unsigned int type)</td></tr>
<tr class="separator:aee672d91b694547fb072fdaa8e03cfe9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a22f0eade8b5924eec28ad50f0ce2031f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a22f0eade8b5924eec28ad50f0ce2031f">GetData</a> (const std::string &amp;)</td></tr>
<tr class="separator:a22f0eade8b5924eec28ad50f0ce2031f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a483b277678a8ca48998742c80985fd0b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a483b277678a8ca48998742c80985fd0b">GetData</a> (const char *)</td></tr>
<tr class="separator:a483b277678a8ca48998742c80985fd0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90a551ff0a0ed3fa58745dff0ecacdaa"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a90a551ff0a0ed3fa58745dff0ecacdaa">GetData</a> ()</td></tr>
<tr class="separator:a90a551ff0a0ed3fa58745dff0ecacdaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa959146c3f7b458009dc04f61b5a2e7f"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#aa959146c3f7b458009dc04f61b5a2e7f">GetData</a> (<a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a> source)</td></tr>
<tr class="separator:aa959146c3f7b458009dc04f61b5a2e7f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb56decc1b824c9fad980fc22e1d778c"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#afb56decc1b824c9fad980fc22e1d778c">GetAllData</a> (const unsigned int type)</td></tr>
<tr class="separator:afb56decc1b824c9fad980fc22e1d778c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15b47c65393d46fde62d1f0a19bcf9fa"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a15b47c65393d46fde62d1f0a19bcf9fa">BeginData</a> ()</td></tr>
<tr class="separator:a15b47c65393d46fde62d1f0a19bcf9fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a117c836710dd3aaa8748509262a5c280"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#a117c836710dd3aaa8748509262a5c280">EndData</a> ()</td></tr>
<tr class="separator:a117c836710dd3aaa8748509262a5c280"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a3a1dc0419a66d2e7288214342de43b7a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3a1dc0419a66d2e7288214342de43b7a">HasFlag</a> (int flag)</td></tr>
<tr class="separator:a3a1dc0419a66d2e7288214342de43b7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcdab8f96dc4fdc2940749e527087245"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adcdab8f96dc4fdc2940749e527087245">SetFlag</a> (int flag)</td></tr>
<tr class="separator:adcdab8f96dc4fdc2940749e527087245"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Internal Kekulization routines -- see kekulize.cpp and NewPerceiveKekuleBonds()</div></td></tr>
<tr class="memitem:ad69498ec216d37651bbcfd6e76d7c67a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad69498ec216d37651bbcfd6e76d7c67a">start_kekulize</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;cycle, std::vector&lt; int &gt; &amp;electron)</td></tr>
<tr class="separator:ad69498ec216d37651bbcfd6e76d7c67a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6be250d574bdbcae500c9207cb0f2400"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6be250d574bdbcae500c9207cb0f2400">expand_kekulize</a> (int bond_idx, std::vector&lt; int &gt; &amp;atomState, std::vector&lt; int &gt; &amp;bondState)</td></tr>
<tr class="separator:a6be250d574bdbcae500c9207cb0f2400"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8300dbbf33e0da417f98d846442e6b1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa8300dbbf33e0da417f98d846442e6b1">has_no_leftover_electrons</a> (std::vector&lt; int &gt; &amp;atomState)</td></tr>
<tr class="separator:aa8300dbbf33e0da417f98d846442e6b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2e4cda76442b795b7e6f5d74dea0df8"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af2e4cda76442b795b7e6f5d74dea0df8">getorden</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom)</td></tr>
<tr class="separator:af2e4cda76442b795b7e6f5d74dea0df8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1afc15e37f48f63ea001277fef0e289"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#af1afc15e37f48f63ea001277fef0e289">expandcycle</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *atom, <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;avisit, const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;potAromBonds)</td></tr>
<tr class="separator:af1afc15e37f48f63ea001277fef0e289"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:aa4a61b1d913f2bee1e0ed5d9daf26549"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aa4a61b1d913f2bee1e0ed5d9daf26549">_flags</a></td></tr>
<tr class="separator:aa4a61b1d913f2bee1e0ed5d9daf26549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac23878536c8da0ff97c0985627dd5646"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac23878536c8da0ff97c0985627dd5646">_autoPartialCharge</a></td></tr>
<tr class="separator:ac23878536c8da0ff97c0985627dd5646"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1c74119422bd6a52bb7c384b42dca4c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae1c74119422bd6a52bb7c384b42dca4c">_autoFormalCharge</a></td></tr>
<tr class="separator:ae1c74119422bd6a52bb7c384b42dca4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dda4ed41c70aef0a361682dd9b2b0f9"><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1dda4ed41c70aef0a361682dd9b2b0f9">_title</a></td></tr>
<tr class="separator:a1dda4ed41c70aef0a361682dd9b2b0f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3bcdbfad8eedc0452fe543badd080d5"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bcdbfad8eedc0452fe543badd080d5">_vatom</a></td></tr>
<tr class="separator:ad3bcdbfad8eedc0452fe543badd080d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba8a1b036f4544f328db00b0939cbaf0"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aba8a1b036f4544f328db00b0939cbaf0">_atomIds</a></td></tr>
<tr class="separator:aba8a1b036f4544f328db00b0939cbaf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c7208419c7703e947e9a1c365838b98"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3c7208419c7703e947e9a1c365838b98">_vbond</a></td></tr>
<tr class="separator:a3c7208419c7703e947e9a1c365838b98"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad07702b91130d560479a679ae1a536d2"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad07702b91130d560479a679ae1a536d2">_bondIds</a></td></tr>
<tr class="separator:ad07702b91130d560479a679ae1a536d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a601fbf5c8e5b7d92281dbe6a124d7f2c"><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a601fbf5c8e5b7d92281dbe6a124d7f2c">_dimension</a></td></tr>
<tr class="separator:a601fbf5c8e5b7d92281dbe6a124d7f2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaaeee07c1d80b2638b8b9ace0095c9cd"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#aaaeee07c1d80b2638b8b9ace0095c9cd">_totalCharge</a></td></tr>
<tr class="separator:aaaeee07c1d80b2638b8b9ace0095c9cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a92cb97f8aa52f145b2e928cf480a07"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a92cb97f8aa52f145b2e928cf480a07">_totalSpin</a></td></tr>
<tr class="separator:a7a92cb97f8aa52f145b2e928cf480a07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a706bc4f751bf06cf864893451a7d21e4"><td class="memItemLeft" align="right" valign="top">double *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a706bc4f751bf06cf864893451a7d21e4">_c</a></td></tr>
<tr class="separator:a706bc4f751bf06cf864893451a7d21e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6fb1d704dcaeb179720ac771745850b1"><td class="memItemLeft" align="right" valign="top">std::vector&lt; double * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6fb1d704dcaeb179720ac771745850b1">_vconf</a></td></tr>
<tr class="separator:a6fb1d704dcaeb179720ac771745850b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad93165c379393f8eb17506f1f9820a1a"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad93165c379393f8eb17506f1f9820a1a">_energy</a></td></tr>
<tr class="separator:ad93165c379393f8eb17506f1f9820a1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a370c739afb1e8ed20a96680ec9f1b219"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a370c739afb1e8ed20a96680ec9f1b219">_natoms</a></td></tr>
<tr class="separator:a370c739afb1e8ed20a96680ec9f1b219"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35a920486c1a28ca09de0eeb9dbb174c"><td class="memItemLeft" align="right" valign="top">unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a35a920486c1a28ca09de0eeb9dbb174c">_nbonds</a></td></tr>
<tr class="separator:a35a920486c1a28ca09de0eeb9dbb174c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1c29d0efe6187e8726962008c81e956"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae1c29d0efe6187e8726962008c81e956">_residue</a></td></tr>
<tr class="separator:ae1c29d0efe6187e8726962008c81e956"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c2a9726c57abf03a40339776f5d9a0b"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6c2a9726c57abf03a40339776f5d9a0b">_internals</a></td></tr>
<tr class="separator:a6c2a9726c57abf03a40339776f5d9a0b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5db8eb0124fad1bf66ddaf930b4840f0"><td class="memItemLeft" align="right" valign="top">unsigned short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a5db8eb0124fad1bf66ddaf930b4840f0">_mod</a></td></tr>
<tr class="separator:a5db8eb0124fad1bf66ddaf930b4840f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7811cf8aadbf3b3477c560b0ef2f797"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBBase.shtml#af7811cf8aadbf3b3477c560b0ef2f797">_vdata</a></td></tr>
<tr class="separator:af7811cf8aadbf3b3477c560b0ef2f797"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Molecule modification methods</h2></td></tr>
<tr class="memitem:a1b5760b4c75b7631fffb54f84140b3e3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify</a> (void)</td></tr>
<tr class="separator:a1b5760b4c75b7631fffb54f84140b3e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac32ffc23db124156a953e8e5cb923ccd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">EndModify</a> (bool nukePerceivedData=true)</td></tr>
<tr class="separator:ac32ffc23db124156a953e8e5cb923ccd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5103c8b3cbe4f961bd353209bf2860e"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac5103c8b3cbe4f961bd353209bf2860e">GetMod</a> ()</td></tr>
<tr class="separator:ac5103c8b3cbe4f961bd353209bf2860e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc36b31f851665247f3c576cdd7aa0af"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adc36b31f851665247f3c576cdd7aa0af">IncrementMod</a> ()</td></tr>
<tr class="separator:adc36b31f851665247f3c576cdd7aa0af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8efda275b959c94452e1ded1f568c934"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8efda275b959c94452e1ded1f568c934">DecrementMod</a> ()</td></tr>
<tr class="separator:a8efda275b959c94452e1ded1f568c934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b78f4cdf91366de39994ade8edc9775"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">DoTransformations</a> (const std::map&lt; std::string, std::string &gt; *pOptions, <a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *pConv)</td></tr>
<tr class="separator:a6b78f4cdf91366de39994ade8edc9775"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad12fd937da5f4b0c4562888252fe214b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b">Clear</a> ()</td></tr>
<tr class="separator:ad12fd937da5f4b0c4562888252fe214b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a2d560c7f2e4a9fdd1814ed8e09bd02"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">RenumberAtoms</a> (std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;)</td></tr>
<tr class="separator:a0a2d560c7f2e4a9fdd1814ed8e09bd02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a93cc61677782c2b8800a12c6af5675"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">RenumberAtoms</a> (std::vector&lt; int &gt;)</td></tr>
<tr class="separator:a1a93cc61677782c2b8800a12c6af5675"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10c76fe88720e6ca2e17865b847edbf7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">SetCoordinates</a> (double *c)</td></tr>
<tr class="separator:a10c76fe88720e6ca2e17865b847edbf7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a751725f02bf62696515d79608198cd59"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a751725f02bf62696515d79608198cd59">ToInertialFrame</a> (int conf, double *rmat)</td></tr>
<tr class="separator:a751725f02bf62696515d79608198cd59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8122f52665d60a1e5e56578561bd36b3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a8122f52665d60a1e5e56578561bd36b3">ToInertialFrame</a> ()</td></tr>
<tr class="separator:a8122f52665d60a1e5e56578561bd36b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ac0385e87d0a56901913e5f8049e45f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a6ac0385e87d0a56901913e5f8049e45f">Translate</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v)</td></tr>
<tr class="separator:a6ac0385e87d0a56901913e5f8049e45f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adad8d93db1fadf354b6f51687335fcb9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">Translate</a> (const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;v, int conf)</td></tr>
<tr class="separator:adad8d93db1fadf354b6f51687335fcb9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae330819c26c418de3a2c995fd191807b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ae330819c26c418de3a2c995fd191807b">Rotate</a> (const double u[3][3])</td></tr>
<tr class="separator:ae330819c26c418de3a2c995fd191807b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3494940b2239a5f427061d2902573efd"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a3494940b2239a5f427061d2902573efd">Rotate</a> (const double m[9])</td></tr>
<tr class="separator:a3494940b2239a5f427061d2902573efd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a6cf5e812be471e72ecac3ee5d0bc46"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">Rotate</a> (const double m[9], int nconf)</td></tr>
<tr class="separator:a7a6cf5e812be471e72ecac3ee5d0bc46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9f6ba6fae7e12d0f61f5fd8e746aaf3"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3">Center</a> ()</td></tr>
<tr class="separator:ab9f6ba6fae7e12d0f61f5fd8e746aaf3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a457c69b9a377efcbdb9e8be871f17fc2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2">Kekulize</a> ()</td></tr>
<tr class="separator:a457c69b9a377efcbdb9e8be871f17fc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e9f06170626de367fba48ebbacd6f0e"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e9f06170626de367fba48ebbacd6f0e">PerceiveKekuleBonds</a> ()</td></tr>
<tr class="separator:a1e9f06170626de367fba48ebbacd6f0e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab74a82552a9576514b189e2a265d5f5a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab74a82552a9576514b189e2a265d5f5a">NewPerceiveKekuleBonds</a> ()</td></tr>
<tr class="separator:ab74a82552a9576514b189e2a265d5f5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e2ddc39752d20fabcda1afc1cc4e8e4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a4e2ddc39752d20fabcda1afc1cc4e8e4">DeleteHydrogens</a> ()</td></tr>
<tr class="separator:a4e2ddc39752d20fabcda1afc1cc4e8e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace02501ed235e4e6c37dca0585bb46bf"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ace02501ed235e4e6c37dca0585bb46bf">DeleteHydrogens</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr class="separator:ace02501ed235e4e6c37dca0585bb46bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43904e621e60855bc1818b56a7bd4b93"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a43904e621e60855bc1818b56a7bd4b93">DeletePolarHydrogens</a> ()</td></tr>
<tr class="separator:a43904e621e60855bc1818b56a7bd4b93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2993ead33ec2a4b15dd536d798ff844d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a2993ead33ec2a4b15dd536d798ff844d">DeleteNonPolarHydrogens</a> ()</td></tr>
<tr class="separator:a2993ead33ec2a4b15dd536d798ff844d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a925b41d42ddf14c12b675d32bdf5e948"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a925b41d42ddf14c12b675d32bdf5e948">DeleteHydrogen</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr class="separator:a925b41d42ddf14c12b675d32bdf5e948"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3bab31bf64ff6cb18f6ee259b3b8c11"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad3bab31bf64ff6cb18f6ee259b3b8c11">AddHydrogens</a> (bool polaronly=false, bool correctForPH=false, double pH=7.4)</td></tr>
<tr class="separator:ad3bab31bf64ff6cb18f6ee259b3b8c11"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1befb9ee43954207d09e3229e4b5753b"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1befb9ee43954207d09e3229e4b5753b">AddHydrogens</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *)</td></tr>
<tr class="separator:a1befb9ee43954207d09e3229e4b5753b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c3e3f1fa320501c56cb2b7fe4d6be34"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9c3e3f1fa320501c56cb2b7fe4d6be34">AddPolarHydrogens</a> ()</td></tr>
<tr class="separator:a9c3e3f1fa320501c56cb2b7fe4d6be34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37a58fb7e196c942085787cbde86fae8"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a37a58fb7e196c942085787cbde86fae8">AddNonPolarHydrogens</a> ()</td></tr>
<tr class="separator:a37a58fb7e196c942085787cbde86fae8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7acd1c4965f682ab6f25f7cfa30f34dd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7acd1c4965f682ab6f25f7cfa30f34dd">AddNewHydrogens</a> (<a class="el" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74c">HydrogenType</a> whichHydrogen, bool correctForPH=false, double pH=7.4)</td></tr>
<tr class="separator:a7acd1c4965f682ab6f25f7cfa30f34dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89743304090380b06c920530f919a2fe"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a89743304090380b06c920530f919a2fe">StripSalts</a> (int threshold=0)</td></tr>
<tr class="separator:a89743304090380b06c920530f919a2fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e5c6955a32c0ec2317a8de12ab7ba5a"><td class="memItemLeft" align="right" valign="top">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">Separate</a> (int StartIndex=1)</td></tr>
<tr class="separator:a1e5c6955a32c0ec2317a8de12ab7ba5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad711b0ce04370b50be246e7b859d1f99"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">GetNextFragment</a> (<a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a> &amp;iter, <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;newMol)</td></tr>
<tr class="separator:ad711b0ce04370b50be246e7b859d1f99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acba192e5cf0db39c2ed6af7ba05328dc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">ConvertDativeBonds</a> ()</td></tr>
<tr class="separator:acba192e5cf0db39c2ed6af7ba05328dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54b6a6c4fabf98535ff08b25ea9b0bfc"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">MakeDativeBonds</a> ()</td></tr>
<tr class="separator:a54b6a6c4fabf98535ff08b25ea9b0bfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcf2e89fef03dd291e22507c51af8965"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#abcf2e89fef03dd291e22507c51af8965">ConvertZeroBonds</a> ()</td></tr>
<tr class="separator:abcf2e89fef03dd291e22507c51af8965"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7af037d80801b43ae5450bd74004d669"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669">CorrectForPH</a> (double pH=7.4)</td></tr>
<tr class="separator:a7af037d80801b43ae5450bd74004d669"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad85ec95d1f909843737b67d70638f3c9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad85ec95d1f909843737b67d70638f3c9">AssignSpinMultiplicity</a> (bool NoImplicitH=false)</td></tr>
<tr class="separator:ad85ec95d1f909843737b67d70638f3c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62429f9b662a5d62b500ec2fedf7f67c"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a62429f9b662a5d62b500ec2fedf7f67c">AssignTotalChargeToAtoms</a> (int charge)</td></tr>
<tr class="separator:a62429f9b662a5d62b500ec2fedf7f67c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0f0310aa379033994230e29e206106c7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a0f0310aa379033994230e29e206106c7">SetIsPatternStructure</a> ()</td></tr>
<tr class="separator:a0f0310aa379033994230e29e206106c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e896374801d7ea5f8986ecb2b54d65b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">Center</a> (int nconf)</td></tr>
<tr class="separator:a9e896374801d7ea5f8986ecb2b54d65b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a501e76993e9deb8ec8ab24c464d4ed3c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#a501e76993e9deb8ec8ab24c464d4ed3c">SetTorsion</a> (<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *, double ang)</td></tr>
<tr class="separator:a501e76993e9deb8ec8ab24c464d4ed3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab72bba66cc9e40fb3b657a30d87bbe6d"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">ClassDescription</a> ()</td></tr>
<tr class="separator:ab72bba66cc9e40fb3b657a30d87bbe6d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Molecule Class. </p>
<p>The most important class in Open Babel is <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>, or the molecule class. The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> class is designed to store all the basic information associated with a molecule, to make manipulations on the connection table of a molecule facile, and to provide member functions which automatically perceive information about a molecule. A guided tour of the <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> class is a good place to start.</p>
<p>An <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> class can be declared: </p><div class="fragment"><div class="line"><a class="code" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4">OBMol</a> mol;</div></div><!-- fragment --><p>For example: </p><div class="fragment"><div class="line"><span class="preprocessor">#include &lt;iostream.h&gt;</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="obconversion_8h.shtml">openbabel/obconversion.h</a>&gt;</span></div><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">int</span> argc,<span class="keywordtype">char</span> **argv)</div><div class="line">{</div><div class="line">OBConversion conv(&amp;cin,&amp;cout);</div><div class="line"><span class="keywordflow">if</span>(conv.SetInAndOutFormats(<span class="stringliteral">&quot;SDF&quot;</span>,<span class="stringliteral">&quot;MOL2&quot;</span>))</div><div class="line">{</div><div class="line"><a class="code" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4">OBMol</a> mol;</div><div class="line"><span class="keywordflow">if</span>(conv.Read(&amp;mol))</div><div class="line">...manipulate molecule</div><div class="line"></div><div class="line">conv-&gt;Write(&amp;mol);</div><div class="line">}</div><div class="line"><span class="keywordflow">return</span>(1);</div><div class="line">}</div></div><!-- fragment --><p>will read in a molecule in SD file format from stdin (or the C++ equivalent cin) and write a MOL2 format file out to standard out. Additionally, The input and output formats can be altered using the <a class="el" href="classOpenBabel_1_1OBConversion.shtml" title="Class to convert from one format to another. ">OBConversion</a> class</p>
<p>Once a molecule has been read into an <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> (or created via other methods) the atoms and bonds can be accessed by the following methods: </p><div class="fragment"><div class="line">OBAtom *atom;</div><div class="line">atom = mol.GetAtom(5); <span class="comment">//random access of an atom</span></div></div><!-- fragment --><p> or </p><div class="fragment"><div class="line">OBBond *bond;</div><div class="line">bond = mol.GetBond(14); <span class="comment">//random access of a bond</span></div></div><!-- fragment --><p> or </p><div class="fragment"><div class="line"><a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(atom, mol) <span class="comment">// iterator access (see OBMolAtomIter)</span></div></div><!-- fragment --><p> or </p><div class="fragment"><div class="line"><a class="code" href="obiter_8h.shtml#a16c0f68c4f2d476fae98338b31e77e46">FOR_BONDS_OF_MOL</a>(bond, mol) <span class="comment">// iterator access (see OBMolBondIter)</span></div></div><!-- fragment --><p> It is important to note that atom arrays currently begin at 1 and bond arrays begin at 0. Requesting atom 0 (</p><div class="fragment"><div class="line">OBAtom *atom = mol.GetAtom(0); </div></div><!-- fragment --><p> will result in an error, but </p><div class="fragment"><div class="line">OBBond *bond = mol.GetBond(0);</div></div><!-- fragment --><p> is perfectly valid. Note that this is expected to change in the near future to simplify coding and improve efficiency.</p>
<p>The ambiguity of numbering issues and off-by-one errors led to the use of iterators in Open Babel. An iterator is essentially just a pointer, but when used in conjunction with Standard Template Library (STL) vectors it provides an unambiguous way to loop over arrays. OBMols store their atom and bond information in STL vectors. Since vectors are template based, a vector of any user defined type can be declared. OBMols declare vector&lt;OBAtom*&gt; and vector&lt;OBBond*&gt; to store atom and bond information. Iterators are then a natural way to loop over the vectors of atoms and bonds.</p>
<p>A variety of predefined iterators have been created to simplify common looping requests (e.g., looping over all atoms in a molecule, bonds to a given atom, etc.)</p>
<div class="fragment"><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="obiter_8h.shtml">openbabel/obiter.h</a>&gt;</span></div><div class="line">...</div><div class="line">#define <a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(a,m)     for( OBMolAtomIter     a(m); a; ++a )</div><div class="line"><span class="preprocessor">#define FOR_BONDS_OF_MOL(b,m)     for( OBMolBondIter     b(m); b; ++b )</span></div><div class="line"><span class="preprocessor">#define FOR_NBORS_OF_ATOM(a,p)    for( OBAtomAtomIter    a(p); a; ++a )</span></div><div class="line"><span class="preprocessor">#define FOR_BONDS_OF_ATOM(b,p)    for( OBAtomBondIter    b(p); b; ++b )</span></div><div class="line"><span class="preprocessor">#define FOR_RESIDUES_OF_MOL(r,m)  for( OBResidueIter     r(m); r; ++r )</span></div><div class="line"><span class="preprocessor">#define FOR_ATOMS_OF_RESIDUE(a,r) for( OBResidueAtomIter a(r); a; ++a )</span></div><div class="line"><span class="preprocessor">...</span></div></div><!-- fragment --><p>These convenience functions can be used like so: </p><div class="fragment"><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="obiter_8h.shtml">openbabel/obiter.h</a>&gt;</span></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="mol_8h.shtml">openbabel/mol.h</a>&gt;</span></div><div class="line"></div><div class="line"><a class="code" href="classOpenBabel_1_1OBMol.shtml#a937a09d86f3f440467334e546a98d8d4">OBMol</a> mol;</div><div class="line"><span class="keywordtype">double</span> exactMass = 0.0;</div><div class="line"><a class="code" href="obiter_8h.shtml#afb051cb17b46d381998c24fc41db2a79">FOR_ATOMS_OF_MOL</a>(a, mol)</div><div class="line">{</div><div class="line">exactMass +=  a-&gt;GetExactMass();</div><div class="line">}</div></div><!-- fragment --><p>Note that with these convenience macros, the iterator "a" (or whichever name you pick) is declared for you &ndash; you do not need to do it beforehand. </p>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="obconformersearch_default_8cpp-example.shtml#_a0">obconformersearch_default.cpp</a>, <a class="el" href="obconversion_readstring_8cpp-example.shtml#_a2">obconversion_readstring.cpp</a>, and <a class="el" href="obforcefield_energy_8cpp-example.shtml#_a0">obforcefield_energy.cpp</a>.</dd>
</dl></div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a937a09d86f3f440467334e546a98d8d4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a937a09d86f3f440467334e546a98d8d4">&sect;&nbsp;</a></span>OBMol() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Constructor. </p>

</div>
</div>
<a id="aafa7e4623d4c3c0305b5523ca8a77e14"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafa7e4623d4c3c0305b5523ca8a77e14">&sect;&nbsp;</a></span>OBMol() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copy constructor, copies atoms,bonds and <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. ">OBGenericData</a>. </p>

</div>
</div>
<a id="a8df0dd71ac1dba7f7876d6671279d087"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8df0dd71ac1dba7f7876d6671279d087">&sect;&nbsp;</a></span>~OBMol()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">~<a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3a1dc0419a66d2e7288214342de43b7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3a1dc0419a66d2e7288214342de43b7a">&sect;&nbsp;</a></span>HasFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="adcdab8f96dc4fdc2940749e527087245"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adcdab8f96dc4fdc2940749e527087245">&sect;&nbsp;</a></span>SetFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad69498ec216d37651bbcfd6e76d7c67a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad69498ec216d37651bbcfd6e76d7c67a">&sect;&nbsp;</a></span>start_kekulize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void start_kekulize </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>cycle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>electron</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Find a consistent assignment of single/double bonds to a Kekule' ring or a set of fused aromatic rings. </p>
<p>The initial electronic state indicates whether each atom can make a double bond or not. The function works recursively to "walk" around the ring or rings and try all possible arrangements of single and double bonds. </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000087">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a id="a6be250d574bdbcae500c9207cb0f2400"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6be250d574bdbcae500c9207cb0f2400">&sect;&nbsp;</a></span>expand_kekulize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool expand_kekulize </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>bond_idx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>bondState</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Recursively assign single and double bonds according to the electronical state of the atoms. </p>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000088">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a id="aa8300dbbf33e0da417f98d846442e6b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8300dbbf33e0da417f98d846442e6b1">&sect;&nbsp;</a></span>has_no_leftover_electrons()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool has_no_leftover_electrons </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>atomState</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Check for leftover electrons. This is used during <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6be250d574bdbcae500c9207cb0f2400" title="Recursively assign single and double bonds according to the electronical state of the atoms...">expand_kekulize()</a> to make sure all of the 4n+2 electrons that were available for bonding in the aromatic ring system were actually used during the assignment of single and double bonds. </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000089">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a id="af2e4cda76442b795b7e6f5d74dea0df8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2e4cda76442b795b7e6f5d74dea0df8">&sect;&nbsp;</a></span>getorden()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int getorden </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Give the priority to give two electrons instead of 1 </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000090">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a id="af1afc15e37f48f63ea001277fef0e289"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1afc15e37f48f63ea001277fef0e289">&sect;&nbsp;</a></span>expandcycle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool expandcycle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>avisit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>potAromBonds</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Recursively find the aromatic atoms with an aromatic bond to the current atom </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000091">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a id="a9d63c24cbe9dc1f6e82d58da2b67dafa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9d63c24cbe9dc1f6e82d58da2b67dafa">&sect;&nbsp;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp; operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assignment, copies atoms,bonds and <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. ">OBGenericData</a>. </p>

</div>
</div>
<a id="a3f9d2bbe4ae3f85ddca39be0a8ff4971"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3f9d2bbe4ae3f85ddca39be0a8ff4971">&sect;&nbsp;</a></span>operator+=()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp; operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>mol</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies atoms and bonds but not <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. ">OBGenericData</a>. </p>

</div>
</div>
<a id="a723933398f0402a92916d1cfcb8dadd6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a723933398f0402a92916d1cfcb8dadd6">&sect;&nbsp;</a></span>ReserveAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void ReserveAtoms </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>natoms</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Reserve a minimum number of atoms for internal storage This improves performance since the internal atom vector does not grow. </p>

</div>
</div>
<a id="afd5176ccf4c318a93379716d48ab01e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd5176ccf4c318a93379716d48ab01e8">&sect;&nbsp;</a></span>CreateAtom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * CreateAtom </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class. ">OBAtom</a> pointer. Does no bookkeeping </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000058">Deprecated:</a></b></dt><dd>Use NewAtom instead, which ensures internal connections </dd></dl>

</div>
</div>
<a id="aed69c2ff7d45271240ee8e33f4344d5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed69c2ff7d45271240ee8e33f4344d5a">&sect;&nbsp;</a></span>CreateBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * CreateBond </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> pointer. Does no bookkeeping </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000059">Deprecated:</a></b></dt><dd>Use NewBond instead, which ensures internal connections </dd></dl>

</div>
</div>
<a id="a3803d9a4c2a776560b0c36bc2e788132"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3803d9a4c2a776560b0c36bc2e788132">&sect;&nbsp;</a></span>CreateResidue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * CreateResidue </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information. ">OBResidue</a> pointer. Does no bookkeeping </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000060">Deprecated:</a></b></dt><dd>Use NewResidue instead, which ensures internal connections </dd></dl>

</div>
</div>
<a id="a8a3d084b1d94acc59c93b9b05e7d3281"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8a3d084b1d94acc59c93b9b05e7d3281">&sect;&nbsp;</a></span>DestroyAtom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Free an <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class. ">OBAtom</a> pointer if defined. Does no bookkeeping </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a688b0d2367ab8e683821e6cff705d5f4">DeleteAtom</a> which ensures internal connections </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="a942e828cdc42e0c168f2188a225a7ac3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a942e828cdc42e0c168f2188a225a7ac3">&sect;&nbsp;</a></span>DestroyBond()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Free an <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> pointer if defined. Does no bookkeeping </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#ac2b07c6d4f4dee79c04614cb34d5a9e7">DeleteBond</a> which ensures internal connections </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="ab224ebc76c4ac8cac7d10df2fae43e79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab224ebc76c4ac8cac7d10df2fae43e79">&sect;&nbsp;</a></span>DestroyResidue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DestroyResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td>
          <td class="paramname"><em>residue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Free an <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information. ">OBResidue</a> pointer if defined. Does no bookkeeping </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a202a80d2d05f526fa5186dfb797558d6">DeleteResidue</a> which ensures internal connections </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="ad08c2c13224b533dfbc799371d937317"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad08c2c13224b533dfbc799371d937317">&sect;&nbsp;</a></span>AddAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>forceNewId</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add an atom to a molecule. </p>
<p>Add the specified atom to this molecule </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">atom</td><td>the atom to add </td></tr>
    <tr><td class="paramname">forceNewId</td><td>whether to make a new atom Id even if the atom already has one (default is false) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether the method was successful</dd></dl>
<p>Also checks bond_queue for any bonds that should be made to the new atom </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>.</p>

</div>
</div>
<a id="abd2ad51974aaf20356fe5a07628205b9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd2ad51974aaf20356fe5a07628205b9">&sect;&nbsp;</a></span>InsertAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool InsertAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> &amp;&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add a new atom to this molecule (like AddAtom) Calls <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a> before insertion and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac32ffc23db124156a953e8e5cb923ccd">EndModify()</a> after insertion </p>

</div>
</div>
<a id="a62e485fd693d4458ab5c47835afab049"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62e485fd693d4458ab5c47835afab049">&sect;&nbsp;</a></span>AddBond() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddBond </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>beginIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>endIdx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>order</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>insertpos</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add a new bond to the molecule with the specified parameters </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">beginIdx</td><td>the atom index of the "start" atom </td></tr>
    <tr><td class="paramname">endIdx</td><td>the atom index of the "end" atom </td></tr>
    <tr><td class="paramname">order</td><td>the bond order (see <a class="el" href="classOpenBabel_1_1OBBond.shtml#a7d9f4e277b24001cf1d7d9ef072724e6">OBBond::GetBO()</a>) </td></tr>
    <tr><td class="paramname">flags</td><td>any bond flags such as stereochemistry (default = none) </td></tr>
    <tr><td class="paramname">insertpos</td><td>the position index to insert the bond (default = none) </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether the new bond creation was successful </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="ac92c32a100a07407535d5412d1a3b3ae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac92c32a100a07407535d5412d1a3b3ae">&sect;&nbsp;</a></span>AddBond() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> &amp;&#160;</td>
          <td class="paramname"><em>bond</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add the specified residue to this molecule and update connections </p><dl class="section return"><dt>Returns</dt><dd>Whether the method was successful </dd></dl>

</div>
</div>
<a id="ad656115fdd6749ef7ad8394ee687f375"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad656115fdd6749ef7ad8394ee687f375">&sect;&nbsp;</a></span>AddResidue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> &amp;&#160;</td>
          <td class="paramname"><em>residue</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add the specified residue to this molecule and update connections </p><dl class="section return"><dt>Returns</dt><dd>Whether the method was successful </dd></dl>

</div>
</div>
<a id="ae215a7452ce2f50590d64af7a5558f0c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae215a7452ce2f50590d64af7a5558f0c">&sect;&nbsp;</a></span>NewAtom() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NewAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class. ">OBAtom</a> in this molecule and ensure connections (e.g. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBAtom::GetParent()</a>. A new unique id will be assigned to this atom. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#af5cee9c530db13a5ec558a3783893315">OBUnitCell::FillUnitCell()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="ad2762de927ca28384c48bf618603aab2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad2762de927ca28384c48bf618603aab2">&sect;&nbsp;</a></span>NewAtom() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NewAtom </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Instantiate a New Atom and add it to the molecule. </p>
<p>Create a new <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class. ">OBAtom</a> in this molecule and ensure connections. (e.g. <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBAtom::GetParent()</a>. The <code>id</code> will be assigned to this atom.</p>
<p>Checks bond_queue for any bonds that should be made to the new atom and updates atom indexes. </p>

</div>
</div>
<a id="aeefe2b1d5039fdf141187e10cf9c6b9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeefe2b1d5039fdf141187e10cf9c6b9f">&sect;&nbsp;</a></span>NewBond() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * NewBond </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Create a new <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> in this molecule and ensure connections (e.g. <a class="el" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBBond::GetParent()</a>. A new unique id will be assigned to this bond. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>.</p>

</div>
</div>
<a id="a48c326f3815a423f21bba671970ec511"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a48c326f3815a423f21bba671970ec511">&sect;&nbsp;</a></span>NewBond() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * NewBond </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Instantiate a New Bond and add it to the molecule. </p>
<p>Create a new <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> in this molecule and ensure connections (e.g. <a class="el" href="classOpenBabel_1_1OBBond.shtml#ad8480b61159bc6cb861b17341dc2b29a">OBBond::GetParent()</a>. The <code>id</code> will be assigned to this bond.</p>
<dl class="section since"><dt>Since</dt><dd>version 2.1 Sets the proper Bond index and insures this molecule is set as the parent. </dd></dl>

</div>
</div>
<a id="a7662758d1fe46ab3a3392b1970c6a656"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7662758d1fe46ab3a3392b1970c6a656">&sect;&nbsp;</a></span>NewResidue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * NewResidue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a new <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information. ">OBResidue</a> in this molecule and ensure connections. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="a688b0d2367ab8e683821e6cff705d5f4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a688b0d2367ab8e683821e6cff705d5f4">&sect;&nbsp;</a></span>DeleteAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>destroyAtom</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deletes an atom from this molecule and all appropriate bonds. Updates the molecule and atom and bond indexes accordingly. </p><dl class="section warning"><dt>Warning</dt><dd>Does not update any residues which may contain this atom </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Whether deletion was successful </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBUnitCell.shtml#af5cee9c530db13a5ec558a3783893315">OBUnitCell::FillUnitCell()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">OpenBabel::InternalToCartesian()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="ac2b07c6d4f4dee79c04614cb34d5a9e7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac2b07c6d4f4dee79c04614cb34d5a9e7">&sect;&nbsp;</a></span>DeleteBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> *&#160;</td>
          <td class="paramname"><em>bond</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>destroyBond</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deletes an bond from this molecule and updates accordingly </p><dl class="section return"><dt>Returns</dt><dd>Whether deletion was successful </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af123db2b6c32f7d210f4455e7fb8cccc">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>.</p>

</div>
</div>
<a id="a202a80d2d05f526fa5186dfb797558d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a202a80d2d05f526fa5186dfb797558d6">&sect;&nbsp;</a></span>DeleteResidue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> *&#160;</td>
          <td class="paramname"><em>residue</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>destroyResidue</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Deletes a residue from this molecule and updates accordingly. </p><dl class="section return"><dt>Returns</dt><dd>Whether deletion was successful </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="a1b5760b4c75b7631fffb54f84140b3e3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b5760b4c75b7631fffb54f84140b3e3">&sect;&nbsp;</a></span>BeginModify()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void BeginModify </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Call when making many modifications &ndash; clears conformer/rotomer data. The method "turns off" perception routines, improving performance. Changes in molecular structure will be re-considered after modifications. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="ac32ffc23db124156a953e8e5cb923ccd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac32ffc23db124156a953e8e5cb923ccd">&sect;&nbsp;</a></span>EndModify()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void EndModify </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>nukePerceivedData</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Call when done with modificaions &ndash; re-perceive data as needed. This method "turns on" perception routines and re-evaluates molecular structure. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="ac5103c8b3cbe4f961bd353209bf2860e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac5103c8b3cbe4f961bd353209bf2860e">&sect;&nbsp;</a></span>GetMod()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetMod </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>The number of nested <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a> calls. Used internally. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>.</p>

</div>
</div>
<a id="adc36b31f851665247f3c576cdd7aa0af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc36b31f851665247f3c576cdd7aa0af">&sect;&nbsp;</a></span>IncrementMod()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void IncrementMod </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Increase the number of nested BeginModify calls. Dangerous! Instead, properly use BeginModify as needed. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="a8efda275b959c94452e1ded1f568c934"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8efda275b959c94452e1ded1f568c934">&sect;&nbsp;</a></span>DecrementMod()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DecrementMod </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Decrease the number of nested BeginModify calls. Dangerous! Instead, properly use EndModify as needed. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af7a144a4ef755d5cc31e0d2e47a2e84a">OBAtom::SetHybAndGeom()</a>.</p>

</div>
</div>
<a id="aba761a006b56d62912a91e259ce11bb1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba761a006b56d62912a91e259ce11bb1">&sect;&nbsp;</a></span>GetFlags()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int GetFlags </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the entire set of flags. (Internal use, mainly.) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a id="a2ac1fac8a7d7ad373c39710b62b3e0a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2ac1fac8a7d7ad373c39710b62b3e0a7">&sect;&nbsp;</a></span>GetTitle()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * GetTitle </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>replaceNewlines</em> = <code>true</code></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the title of this molecule (often the filename) </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">replaceNewlines</td><td>whether to replace any newline characters with spaces </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#a0a6c35f6a88ad291ed821c856e4d887f">OBBase</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a486c6525ca5f6e49f4c9a3905805b9a9">OBMoleculeFormat::DeferMolOutput()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a7654363e339f0fe07323c9f7e542d4db">OpenBabel::WriteTitles()</a>.</p>

</div>
</div>
<a id="a2f0695eb7d6ff6321032d88655ae8d25"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2f0695eb7d6ff6321032d88655ae8d25">&sect;&nbsp;</a></span>NumAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of atoms (i.e. <a class="el" href="classOpenBabel_1_1OBAtom.shtml" title="Atom class. ">OBAtom</a> children) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingSearch.shtml#aa1396dc4c11207285a8711b28a1292e0">OBRingSearch::AddRingFromClosure()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a946a73d3de978fd930793711f23e00b3">OBAlign::Align()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="classOpenBabel_1_1patty.shtml#aef2ec72bd2c0b6c3846d20c1ba1fce3f">patty::assign_types()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="namespaceOpenBabel.shtml#a76bfba8476b7512138a477265edc4476">OpenBabel::ComparePairSecond()</a>, <a class="el" href="group__substructure.shtml#ga9307ec0c55a4d2b7ee933b53a3a84ce5">OpenBabel::CompileMoleculeQuery()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">OpenBabel::construct_c_matrix()</a>, <a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">OpenBabel::construct_g_matrix()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af06dcff6ea883886d4d48bad4cc69156">OBMol::CopyConformer()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a3f0fbaf701b38d36aaa0a225de04841d">OBRotamerList::CreateConformerList()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aefec0fbdf06bb4199614da22f1a9deee">OBChargeModel::FillChargeVectors()</a>, <a class="el" href="namespaceOpenBabel.shtml#a6239f809ba8a88712a94f2a6bb90a485">OpenBabel::FindAutomorphisms()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac194707d84ac9327fe56e70b3cd1b0ee">OpenBabel::FindRingAtomsAndBonds2()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>, <a class="el" href="namespaceOpenBabel.shtml#a742566d425db558fa968c725f8a708cc">OpenBabel::generateDiagram()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a6a9ca08185bebf3307c4a1acd31e58c3">OBAlign::GetAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">OpenBabel::GetChirality()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa5e97bc8a80ef2bf7fe9aae240ec1e62">OpenBabel::GetHeavyAtomCoords()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad3bbdba4326cf884eeb110b02f7caef7">OBAtom::GetNextAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBSpectrophore.shtml#a868f68596367d3b45f99bbcc06785394">OBSpectrophore::GetSpectrophore()</a>, <a class="el" href="namespaceOpenBabel.shtml#af4c135379236431c7436651de978ef32">OpenBabel::GraphPotentials()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a51618686d8ad1b5f66ff2fc2c607493e">OBAtom::HtoMethyl()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">OpenBabel::InternalToCartesian()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>, <a class="el" href="classOpenBabel_1_1OBStericConformerFilter.shtml#aa37ca1a89ffb71694922e4b90b012ab2">OBStericConformerFilter::IsGood()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#ac46bde575f155b4c67ec277d7659a847">OBMolAtomBFSIter::OBMolAtomBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#a30e32a5f76406721c6e04f431e2d46bc">OBMolAtomDFSIter::OBMolAtomDFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBSSMatch.shtml#ad5689e6c79e3e599e863a2e8020fc58c">OBSSMatch::OBSSMatch()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBRMSDConformerScore.shtml#af1228b5c549dc40002a6c2919b5c9cef">OBRMSDConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml#af1228b5c549dc40002a6c2919b5c9cef">OBEnergyConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBMinimizingEnergyConformerScore.shtml#af1228b5c549dc40002a6c2919b5c9cef">OBMinimizingEnergyConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBMinimizingRMSDConformerScore.shtml#af1228b5c549dc40002a6c2919b5c9cef">OBMinimizingRMSDConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">OBMol::Separate()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a91c3efe37db1542a2f553440143915f9">OBRotamerList::SetBaseCoordinateSets()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac271a3bf117a79400817b696d11ea4a7">OBForceField::SetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06b2f4ac9f082f41da3ae01d4bb3f1cc">OBForceField::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#ac56e2c2ffd9fdf7448b3bda78cdc9549">OBAlign::SetRefMol()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ac08d1221790bd6f14418e3f77e6e725a">OBRotorList::SetRotAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a2a325b0a2af5bbc3511c6f536e686e21">OBAlign::SetTargetMol()</a>, <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a85e63dfcf5b43e5ae867815f0398c87e">OBForceField::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>, <a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">OpenBabel::UpdateConformersFromTree()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a3748ab33ffd81acda5060963bdae971a">OBAlign::UpdateCoords()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa416d75b34de1f74f1f0c145cabf7998">OpenBabel::visitRing()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a9c04a77825af89227b6f83f19909d01d">OBMoleculeFormat::WriteChemObjectImpl()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="a7358c2c15c4c0d88ae2489f586bc8e0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7358c2c15c4c0d88ae2489f586bc8e0b">&sect;&nbsp;</a></span>NumBonds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of bonds (i.e. <a class="el" href="classOpenBabel_1_1OBBond.shtml" title="Bond class. ">OBBond</a> children) </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac194707d84ac9327fe56e70b3cd1b0ee">OpenBabel::FindRingAtomsAndBonds2()</a>, <a class="el" href="namespaceOpenBabel.shtml#af5f2eb9394954bc877f2638eb208ac5a">OpenBabel::get_bonds_of_ring()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#a544b96c830c7d3937db8419bc2752d5c">OBMolBondBFSIter::OBMolBondBFSIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa416d75b34de1f74f1f0c145cabf7998">OpenBabel::visitRing()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="afa92da4c4cfc01b7c0d4385f487b42a4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afa92da4c4cfc01b7c0d4385f487b42a4">&sect;&nbsp;</a></span>NumHvyAtoms()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumHvyAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of non-hydrogen atoms </dd></dl>

</div>
</div>
<a id="af641753d0dbc017405280791048f0d88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af641753d0dbc017405280791048f0d88">&sect;&nbsp;</a></span>NumResidues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumResidues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of residues (i.e. <a class="el" href="classOpenBabel_1_1OBResidue.shtml" title="Residue information. ">OBResidue</a> substituents) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="a0079d7acc1b351a0b3811e0fb5451962"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0079d7acc1b351a0b3811e0fb5451962">&sect;&nbsp;</a></span>NumRotors()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int NumRotors </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>sampleRingBonds</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of rotatable bonds. If sampleRingBonds is true, will include rotors within rings (see <a class="el" href="classOpenBabel_1_1OBBond.shtml#afcf274313e5c401b4d05ff05314c6e37">OBBond::IsRotor()</a> for details) </dd></dl>

</div>
</div>
<a id="a5595d8755d9ec6f539143f7d059124d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5595d8755d9ec6f539143f7d059124d0">&sect;&nbsp;</a></span>GetAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetAtom </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the atom at index <code>idx</code> or NULL if it does not exist. </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Atom indexing will change. Use iterator methods instead.</dd></dl>
<p>Returns a pointer to the atom after a safety check 0 &lt; idx &lt;= NumAtoms </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="namespaceOpenBabel.shtml#a56bd19e6ce3d11cd0ccdc0420e91ada3">OpenBabel::ApplyRotMatToBond()</a>, <a class="el" href="classOpenBabel_1_1OBBondTyper.shtml#aa5af3b65ac3956ea6ee5e16198e5bb7a">OBBondTyper::AssignFunctionalGroupBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae078817f50ab066f54fe58eb3d0dfd63">OBPhModel::AssignSeedPartialCharge()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3354aff787347f50d69b3f75a2ab4912">OpenBabel::BuildOBRTreeVector()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abcf2e89fef03dd291e22507c51af8965">OBMol::ConvertZeroBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a13eb26f56a8a475622fba5fc01d4d50e">OpenBabel::CorrectBadResonanceForm()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="group__substructure.shtml#ga6a2b6b84fc5e4432152e29001877c59b">OpenBabel::FindAutomorphisms()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a2e91c040e3659233748563f119aa77da">OBRing::findCenterAndNormal()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac194707d84ac9327fe56e70b3cd1b0ee">OpenBabel::FindRingAtomsAndBonds2()</a>, <a class="el" href="namespaceOpenBabel.shtml#a742566d425db558fa968c725f8a708cc">OpenBabel::generateDiagram()</a>, <a class="el" href="namespaceOpenBabel.shtml#af5f2eb9394954bc877f2638eb208ac5a">OpenBabel::get_bonds_of_ring()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a6a9ca08185bebf3307c4a1acd31e58c3">OBAlign::GetAlignment()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a02dada3ad01505b2d4ddcbe7b9f006c8">OBAtom::GetAngle()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae93c2ea0464618c797ae509fb3f3f455">OBAtom::GetDistance()</a>, <a class="el" href="namespaceOpenBabel.shtml#aa5e97bc8a80ef2bf7fe9aae240ec1e62">OpenBabel::GetHeavyAtomCoords()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad3bbdba4326cf884eeb110b02f7caef7">OBAtom::GetNextAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a5f3dc6510cef07a2247e495d928afb10">OBRing::GetRootAtom()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="namespaceOpenBabel.shtml#a23997cd29f45df86f90e4f7de02baccd">OpenBabel::groupRedraw()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>, <a class="el" href="classOpenBabel_1_1OBRing.shtml#a1c74fed3a281f591495387ec5fb0a050">OBRing::IsAromatic()</a>, <a class="el" href="classOpenBabel_1_1OBStericConformerFilter.shtml#aa37ca1a89ffb71694922e4b90b012ab2">OBStericConformerFilter::IsGood()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a1d4c0074445aa349628c1d417794581b">OBSmartsMatcher::match()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#abfdefac42d3c895920f1f715f0d710a5">OBAtom::MatchesSMARTS()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml#aaf97dbc49b4f8743f21874c99257de73">OBMolAtomDFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomBFSIter.shtml#aa2197b65eb45814b73aac6f4f061e436">OBMolAtomBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">AliasData::RevertToAliasForm()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a76745541fde561757dce0bc58d60354e">OBRotorList::SetEvalAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#ac56e2c2ffd9fdf7448b3bda78cdc9549">OBAlign::SetRefMol()</a>, <a class="el" href="classOpenBabel_1_1OBAlign.shtml#a2a325b0a2af5bbc3511c6f536e686e21">OBAlign::SetTargetMol()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBFFConstraints.shtml#a3b4049f17c690c761669547608a29448">OBFFConstraints::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>, <a class="el" href="classOpenBabel_1_1OBPointGroup.shtml#adfa92d36cdbb24952729e1446cf3975c">OBPointGroup::Symmetrize()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="a21478d000fc5211caff7a7b1ffb3fbeb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21478d000fc5211caff7a7b1ffb3fbeb">&sect;&nbsp;</a></span>GetAtomById()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetAtomById </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the atom with <code>id</code> or NULL if it does not exist. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3280c4291f365e26ad615eb38c877b25">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>.</p>

</div>
</div>
<a id="a9a629237105218b92b89fe880ed1e4f5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a629237105218b92b89fe880ed1e4f5">&sect;&nbsp;</a></span>GetFirstAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * GetFirstAtom </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first atom in this molecule, or NULL if none exist. </dd></dl>
<dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000061">Deprecated:</a></b></dt><dd>Will be removed in favor of more standard iterator methods </dd></dl>

</div>
</div>
<a id="aa04806f750ec871778f68d6c2cff331a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa04806f750ec871778f68d6c2cff331a">&sect;&nbsp;</a></span>GetBond() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the bond at index <code>idx</code> or NULL if it does not exist. </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Bond indexing may change. Use iterator methods instead.</dd></dl>
<p>Returns a pointer to the bond after a safety check 0 &lt;= idx &lt; NumBonds </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a033f4bd8d32f76ae6b7151e1c89bae60">OpenBabel::addNbrs()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, <a class="el" href="namespaceOpenBabel.shtml#acd603c36f7650b398cddf72b1b863b1f">OpenBabel::atomRingToBondRing()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#af123db2b6c32f7d210f4455e7fb8cccc">OBBuilder::Connect()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3280c4291f365e26ad615eb38c877b25">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62de79552e98ffdb88a9b8509a705158">OpenBabel::expandKekulize()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a638c3bbd2aff3edd2b372fd087ccf99d">OBForceField::IsSetupNeeded()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondBFSIter.shtml#ae46f47b39f927e4c408fc9d4f00e83b3">OBMolBondBFSIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ab97bb4c77a46265bdedaead1a6463ca7">OBBuilder::Swap()</a>.</p>

</div>
</div>
<a id="af28457ecdb11ba34d05bb6b02124c0e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af28457ecdb11ba34d05bb6b02124c0e0">&sect;&nbsp;</a></span>GetBondById()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBondById </td>
          <td>(</td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>id</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the bond with <code>id</code> or NULL if it does not exist. </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a731a8591521359140c8777a1c65a1157">OpenBabel::findMetalloceneBonds()</a>.</p>

</div>
</div>
<a id="acfe3189c665e622cbc228188c8e10b93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfe3189c665e622cbc228188c8e10b93">&sect;&nbsp;</a></span>GetBond() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the bond connecting the atom indexed by <code>a</code> and <code>b</code> or NULL if none exists. </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Atom indexing will change. Use atom objects and iterators instead. </dd></dl>

</div>
</div>
<a id="a7d160784c8ea86c2884f88446d9a17b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d160784c8ea86c2884f88446d9a17b1">&sect;&nbsp;</a></span>GetBond() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * GetBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>bgn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the bond between the atoms <code>bgn</code> and <code>end</code> or NULL if none exists </dd></dl>

</div>
</div>
<a id="a8e992bd318407a72c7e745653716ae2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e992bd318407a72c7e745653716ae2c">&sect;&nbsp;</a></span>GetResidue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a> * GetResidue </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>idx</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the residue indexed by <code>idx</code>, or NULL if none exists </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>Residue indexing may change. Use iterator methods instead. </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>.</p>

</div>
</div>
<a id="af5afa8a0742e0238f3fd92ada82f079d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af5afa8a0742e0238f3fd92ada82f079d">&sect;&nbsp;</a></span>GetInternalCoord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> * &gt; GetInternalCoord </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="a401a725a0efbc20c49783f176d78e6a7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a401a725a0efbc20c49783f176d78e6a7">&sect;&nbsp;</a></span>GetTorsion() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetTorsion </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the dihedral angle (in degrees) between the four atoms supplied a1-a2-a3-a4) WARNING: SetTorsion takes an angle in radians while GetTorsion returns it in degrees </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3280c4291f365e26ad615eb38c877b25">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="classOpenBabel_1_1OBRotorRules.shtml#ab7527366ed1bf39da7123e3ad65d96ad">OBRotorRules::GetRotorIncrements()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, and <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>.</p>

</div>
</div>
<a id="adfd902d8de9eeb32ea476fe916a329fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfd902d8de9eeb32ea476fe916a329fd">&sect;&nbsp;</a></span>GetTorsion() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetTorsion </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>d</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the dihedral angle (in degrees) between the four atoms <code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code>) WARNING: SetTorsion takes an angle in radians while GetTorsion returns it in degrees </dd></dl>

</div>
</div>
<a id="a1589aac9963e7a8f58bffb24d85b9a16"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1589aac9963e7a8f58bffb24d85b9a16">&sect;&nbsp;</a></span>GetAngle()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetAngle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the angle (in degrees) between the three atoms <code>a</code>, <code>b</code> and <code>c</code> (where a-&gt; b (vertex) -&gt; c ) </dd></dl>

</div>
</div>
<a id="aebb6df8ada02a3046ee20ad777c99ad7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebb6df8ada02a3046ee20ad777c99ad7">&sect;&nbsp;</a></span>AreInSameRing()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int AreInSameRing </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the size of the smallest ring if a and b are in the same ring, 0 otherwise </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.4</dd>
<dd>
version 2.4 </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>.</p>

</div>
</div>
<a id="a7adc12bff502264eaebf537a5e28a43c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7adc12bff502264eaebf537a5e28a43c">&sect;&nbsp;</a></span>GetFormula()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetFormula </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the stochoimetric formula (e.g., C4H6O)</dd></dl>
<p>Stochoimetric formula (e.g., C4H6O). This is either set by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a4b32a3135f26595bdd260539256c67" title="Set the stochiometric formula for this molecule. ">OBMol::SetFormula()</a> or generated on-the-fly using the "Hill order" &ndash; i.e., C first if present, then H if present all other elements in alphabetical order. </p>

</div>
</div>
<a id="a997bc4b84a93d285f63efa60cbb8ee8d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a997bc4b84a93d285f63efa60cbb8ee8d">&sect;&nbsp;</a></span>GetSpacedFormula()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">string GetSpacedFormula </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ones</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>sp</em> = <code>&quot;&#160;&quot;</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>implicitH</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the stochoimetric formula in spaced format e.g. C 4 H 6 O 1</dd></dl>
<p>Stochoimetric formula in spaced format e.g. C 4 H 6 O 1 No pair data is stored. Normally use without parameters: <a class="el" href="classOpenBabel_1_1OBMol.shtml#a997bc4b84a93d285f63efa60cbb8ee8d">GetSpacedFormula()</a> </p><dl class="section since"><dt>Since</dt><dd>version 2.1 </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a id="a4dcfbb9780f44d5fca2effbc30b17ce0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4dcfbb9780f44d5fca2effbc30b17ce0">&sect;&nbsp;</a></span>GetEnergy() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double GetEnergy </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the heat of formation for this molecule (in kcal/mol) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="a77cd52b60b431c19aa7debcd0d92e07d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77cd52b60b431c19aa7debcd0d92e07d">&sect;&nbsp;</a></span>GetMolWt()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetMolWt </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>implicitH</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the standard molar mass given by IUPAC atomic masses (amu) </dd></dl>

</div>
</div>
<a id="a7cac960f30506aa53d083983845032df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7cac960f30506aa53d083983845032df">&sect;&nbsp;</a></span>GetExactMass()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetExactMass </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>implicitH</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the mass given by isotopes (or most abundant isotope, if not specified) </dd></dl>

</div>
</div>
<a id="ab78d46b60f04702fa6f450ef6f8dae62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab78d46b60f04702fa6f450ef6f8dae62">&sect;&nbsp;</a></span>GetTotalCharge()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int GetTotalCharge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the total charge on this molecule (i.e., 0 = neutral, +1, -1...)</dd></dl>
<p>Returns the total molecular charge &ndash; if it has not previously been set it is calculated from the atomic formal charge information. (This may or may not be correct!) If you set atomic charges with <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aa1d084182d025e6fa000b928807d7689" title="Set the formal charge of the atom to fcharge. ">OBAtom::SetFormalCharge()</a> you really should set the molecular charge with <a class="el" href="classOpenBabel_1_1OBMol.shtml#a58b360590ab212860dc26812ce38057d" title="Set the total charge of this molecule to charge. ">OBMol::SetTotalCharge()</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62429f9b662a5d62b500ec2fedf7f67c">OBMol::AssignTotalChargeToAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="aa431b859ed26f5a45e6ddc3448da1d1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa431b859ed26f5a45e6ddc3448da1d1f">&sect;&nbsp;</a></span>GetTotalSpinMultiplicity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int GetTotalSpinMultiplicity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the total spin on this molecule (i.e., 1 = singlet, 2 = doublet...)</dd></dl>
<p>Returns the total spin multiplicity &ndash; if it has not previously been set It is calculated from the atomic spin multiplicity information assuming the high-spin case (i.e. it simply sums the number of unpaired electrons assuming no further pairing of spins. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="ad646045c7f735c9ef05ba9e4bb768b7c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad646045c7f735c9ef05ba9e4bb768b7c">&sect;&nbsp;</a></span>GetDimension()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int GetDimension </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the dimensionality of coordinates (i.e., 0 = unknown or no coord, 2=2D, 3=3D) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="ad11003513310725bd54265ef5bf004c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad11003513310725bd54265ef5bf004c0">&sect;&nbsp;</a></span>GetCoordinates()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double* GetCoordinates </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the set of all atomic coordinates. See OBAtom::GetCoordPtr for more </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBScoreGrid.shtml#a17b8bb0e69ea72ff166768a24f84a03f">OBScoreGrid::Eval()</a>, <a class="el" href="classOpenBabel_1_1OBEnergyConformerScore.shtml#af1228b5c549dc40002a6c2919b5c9cef">OBEnergyConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBMinimizingEnergyConformerScore.shtml#af1228b5c549dc40002a6c2919b5c9cef">OBMinimizingEnergyConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBMinimizingRMSDConformerScore.shtml#af1228b5c549dc40002a6c2919b5c9cef">OBMinimizingRMSDConformerScore::Score()</a>, <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a769b901b37f0d05c32169473653d639a">OBRotamerList::SetCurrentCoordinates()</a>, and <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>.</p>

</div>
</div>
<a id="a0f6bce457ef6f963b8e4ba7c4be23775"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f6bce457ef6f963b8e4ba7c4be23775">&sect;&nbsp;</a></span>GetSSSR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp; GetSSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Implements <a href="http://qsar.sourceforge.net/dicts/blue-obelisk/index.xhtml#findSmallestSetOfSmallestRings">blue-obelisk:findSmallestSetOfSmallestRings</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>the Smallest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception. ">OBRing</a> class) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#a87fc3915905cbeea2a56569bf0a69fd5">OBBond::FindSmallestRing()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aefc6f8e669a1810e383ab1459324c38e">OBAtom::IsInRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aef9a302705cda0731e77f82f3b1483a0">OBAtom::MemberOfRingCount()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af4a516c81946e3a8c0ca80420358dbe2">OBAtom::MemberOfRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBRotor.shtml#acb9d5eae290fae3460fc7e91a943ff15">OBRotor::SetRings()</a>.</p>

</div>
</div>
<a id="a762b79fd52bbaf0f4444f0308654dab1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a762b79fd52bbaf0f4444f0308654dab1">&sect;&nbsp;</a></span>GetLSSR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classOpenBabel_1_1OBRing.shtml">OBRing</a> * &gt; &amp; GetLSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the Largest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception. ">OBRing</a> class) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aebb6df8ada02a3046ee20ad777c99ad7">OBMol::AreInSameRing()</a>, and <a class="el" href="namespaceOpenBabel.shtml#a7e62ffcac6073c5fb792d2f5bc62c522">OpenBabel::potentialAromaticBonds()</a>.</p>

</div>
</div>
<a id="a9f801729475d1d17415af6376458c81e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f801729475d1d17415af6376458c81e">&sect;&nbsp;</a></span>AutomaticFormalCharge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool AutomaticFormalCharge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current flag for whether formal charges are set with pH correction. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>.</p>

</div>
</div>
<a id="af2ee11d3efe6526c2eb352bb67684e6c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af2ee11d3efe6526c2eb352bb67684e6c">&sect;&nbsp;</a></span>AutomaticPartialCharge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool AutomaticPartialCharge </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current flag for whether partial charges are auto-determined. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae078817f50ab066f54fe58eb3d0dfd63">OBPhModel::AssignSeedPartialCharge()</a>.</p>

</div>
</div>
<a id="acfe3b729dc90c4c5e21684e3a60653af"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acfe3b729dc90c4c5e21684e3a60653af">&sect;&nbsp;</a></span>SetTitle() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetTitle </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the title of this molecule to <code>title</code>. </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#a366c8a142b8c16554597e82320dfd0e0">OBBase</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>.</p>

</div>
</div>
<a id="a667324c365d3b6f20d17221295c3a89e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a667324c365d3b6f20d17221295c3a89e">&sect;&nbsp;</a></span>SetTitle() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTitle </td>
          <td>(</td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>title</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the title of this molecule to <code>title</code>. </p>

</div>
</div>
<a id="a0a4b32a3135f26595bdd260539256c67"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a4b32a3135f26595bdd260539256c67">&sect;&nbsp;</a></span>SetFormula()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetFormula </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>molFormula</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the stochiometric formula for this molecule. </p>

</div>
</div>
<a id="ab78fa0a100d47ad2beb88c7cabb80e62"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab78fa0a100d47ad2beb88c7cabb80e62">&sect;&nbsp;</a></span>SetEnergy()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnergy </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>energy</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the heat of formation for this molecule (in kcal/mol) </p>

</div>
</div>
<a id="adc2702cffcab0a0d6907958e3327284b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adc2702cffcab0a0d6907958e3327284b">&sect;&nbsp;</a></span>SetDimension()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetDimension </td>
          <td>(</td>
          <td class="paramtype">unsigned short int&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the dimension of this molecule (i.e., 0, 1 , 2, 3) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>.</p>

</div>
</div>
<a id="a58b360590ab212860dc26812ce38057d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a58b360590ab212860dc26812ce38057d">&sect;&nbsp;</a></span>SetTotalCharge()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTotalCharge </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>charge</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the total charge of this molecule to <code>charge</code>. </p>

</div>
</div>
<a id="a537e4f9fec95b76ae84e5e9c8eb7d192"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a537e4f9fec95b76ae84e5e9c8eb7d192">&sect;&nbsp;</a></span>SetTotalSpinMultiplicity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTotalSpinMultiplicity </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>spinMultiplicity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the total spin multiplicity of this molecule to <code>spinMultiplicity</code> Overrides the calculation from spin multiplicity of OBAtoms </p>

</div>
</div>
<a id="a49b0e7a728429a4482c47127538f0fa6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49b0e7a728429a4482c47127538f0fa6">&sect;&nbsp;</a></span>SetInternalCoord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetInternalCoord </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt;&#160;</td>
          <td class="paramname"><em>int_coord</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the internal coordinates to <code>int_coord</code> (Does not call InternalToCartesian to update the 3D cartesian coordinates). The size of the <code>int_coord</code> has to be the same as the number of atoms in molecule (+ NULL at the beginning). </p>

</div>
</div>
<a id="a31e0990c833c415708b3fc515dbb35d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31e0990c833c415708b3fc515dbb35d5">&sect;&nbsp;</a></span>SetAutomaticFormalCharge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAutomaticFormalCharge </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag for determining automatic formal charges with pH (default=true) </p>

</div>
</div>
<a id="aa8df95db3695e5e7ce263c484ce5533d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa8df95db3695e5e7ce263c484ce5533d">&sect;&nbsp;</a></span>SetAutomaticPartialCharge()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAutomaticPartialCharge </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>val</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the flag for determining partial charges automatically (default=true) </p>

</div>
</div>
<a id="aecd431b2cfaefa64d54c2dc4088551fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aecd431b2cfaefa64d54c2dc4088551fb">&sect;&nbsp;</a></span>SetAromaticPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromaticPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that aromaticity has been perceived for this molecule (see <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml" title="Assigns aromatic typing to atoms and bonds. ">OBAromaticTyper</a>) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, and <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a id="aba303a094727738eb901cafbecd7c196"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba303a094727738eb901cafbecd7c196">&sect;&nbsp;</a></span>SetSSSRPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetSSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that Smallest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception. ">OBRing</a> class) </p>

</div>
</div>
<a id="a4641fea7bd6513949147bb7a53b6a7e1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4641fea7bd6513949147bb7a53b6a7e1">&sect;&nbsp;</a></span>SetLSSRPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetLSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that Largest Set of Smallest Rings has been run (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception. ">OBRing</a> class) </p>

</div>
</div>
<a id="a0656401ba8b19bc9b9f2d3e8e833d3aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0656401ba8b19bc9b9f2d3e8e833d3aa">&sect;&nbsp;</a></span>SetRingAtomsAndBondsPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetRingAtomsAndBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that rings have been perceived (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception. ">OBRing</a> class for details) </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac194707d84ac9327fe56e70b3cd1b0ee">OpenBabel::FindRingAtomsAndBonds2()</a>.</p>

</div>
</div>
<a id="aa809ea95ee07e61c6dc00ae710d8a749"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa809ea95ee07e61c6dc00ae710d8a749">&sect;&nbsp;</a></span>SetAtomTypesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAtomTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that atom types have been perceived (see <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a> for details) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>.</p>

</div>
</div>
<a id="a08b5caf5aa6fc21e7b6fcd44e3d32f58"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a08b5caf5aa6fc21e7b6fcd44e3d32f58">&sect;&nbsp;</a></span>SetRingTypesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetRingTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that ring types have been perceived (see <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml" title="Assigns ring types. ">OBRingTyper</a> for details) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBRingTyper::AssignTypes()</a>.</p>

</div>
</div>
<a id="a537294f8e96a7ec5263a79de7454326e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a537294f8e96a7ec5263a79de7454326e">&sect;&nbsp;</a></span>SetChainsPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetChainsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that chains and residues have been perceived (see <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol. ">OBChainsParser</a>) </p>

</div>
</div>
<a id="a608e6f965afea1f4f64cb0f499a0cb27"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a608e6f965afea1f4f64cb0f499a0cb27">&sect;&nbsp;</a></span>SetChiralityPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetChiralityPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that chirality has been perceived. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>.</p>

</div>
</div>
<a id="a00fd4c76a7513a9c8087d975f5d8a51b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a00fd4c76a7513a9c8087d975f5d8a51b">&sect;&nbsp;</a></span>SetPartialChargesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetPartialChargesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that partial charges have been assigned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#ae078817f50ab066f54fe58eb3d0dfd63">OBPhModel::AssignSeedPartialCharge()</a>.</p>

</div>
</div>
<a id="a4b93b72694e8a9a970eee7f0b65ecf9a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4b93b72694e8a9a970eee7f0b65ecf9a">&sect;&nbsp;</a></span>SetHybridizationPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetHybridizationPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that hybridization of all atoms has been assigned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#ac543a42f2765cba8535d145519372bc5">OBBuilder::Build()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="a9ecfb96410199c294c003f975d870832"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9ecfb96410199c294c003f975d870832">&sect;&nbsp;</a></span>SetImplicitValencePerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetImplicitValencePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that the implicit hydrogen valence of all atoms has been assigned. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a id="a1e298bbe286ab2c5a6f3b086a07b1a2b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e298bbe286ab2c5a6f3b086a07b1a2b">&sect;&nbsp;</a></span>SetKekulePerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetKekulePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that Kekule forms have been assigned by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a457c69b9a377efcbdb9e8be871f17fc2" title="Transform to standard Kekule bond structure (presumably from an aromatic form) ">Kekulize()</a> </p>

</div>
</div>
<a id="a7900736a9f73a041ab8bade19be84cc9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7900736a9f73a041ab8bade19be84cc9">&sect;&nbsp;</a></span>SetClosureBondsPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetClosureBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that ring closure bonds have been assigned by graph traversal. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac194707d84ac9327fe56e70b3cd1b0ee">OpenBabel::FindRingAtomsAndBonds2()</a>.</p>

</div>
</div>
<a id="a47b63124c405f9c2ecdb766c6de9c56e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a47b63124c405f9c2ecdb766c6de9c56e">&sect;&nbsp;</a></span>SetHydrogensAdded()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetHydrogensAdded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that explicit hydrogen atoms have been added. </p>

</div>
</div>
<a id="af56db37c6a9f7049ed16469ab0a270c2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af56db37c6a9f7049ed16469ab0a270c2">&sect;&nbsp;</a></span>SetCorrectedForPH()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetCorrectedForPH </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>.</p>

</div>
</div>
<a id="a6438e097839dbc98916fb00a3dc67305"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6438e097839dbc98916fb00a3dc67305">&sect;&nbsp;</a></span>SetAromaticCorrected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetAromaticCorrected </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a0d8f018cbaaa9d313b45e468f77afea2">OBAtomTyper::CorrectAromaticNitrogens()</a>.</p>

</div>
</div>
<a id="a2c81eeba803bc59d6c40f97b0e0e17fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2c81eeba803bc59d6c40f97b0e0e17fd">&sect;&nbsp;</a></span>SetSpinMultiplicityAssigned()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetSpinMultiplicityAssigned </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ab0922e1fa0939499c024e1006433adf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab0922e1fa0939499c024e1006433adf3">&sect;&nbsp;</a></span>SetFlags()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetFlags </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flags</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>.</p>

</div>
</div>
<a id="a88f39becfe74f62c9d0ffedfb4098b77"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a88f39becfe74f62c9d0ffedfb4098b77">&sect;&nbsp;</a></span>UnsetAromaticPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetAromaticPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a116f93a9700551794731bf71cd17345a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a116f93a9700551794731bf71cd17345a">&sect;&nbsp;</a></span>UnsetSSSRPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetSSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="aa21ddf3d7c7164e6e72d0228d75b974c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa21ddf3d7c7164e6e72d0228d75b974c">&sect;&nbsp;</a></span>UnsetLSSRPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetLSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Mark that Largest Set of Smallest Rings will need to be run again if required (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception. ">OBRing</a> class) </p>

</div>
</div>
<a id="a7d0001f1af294a0d5676a70e12115b43"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7d0001f1af294a0d5676a70e12115b43">&sect;&nbsp;</a></span>UnsetRingTypesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetRingTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a0b8a9f6292b91ec5c4022a487e9d6092"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b8a9f6292b91ec5c4022a487e9d6092">&sect;&nbsp;</a></span>UnsetPartialChargesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetPartialChargesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="af673e91c4869ca8c1057f006d4f06dae"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af673e91c4869ca8c1057f006d4f06dae">&sect;&nbsp;</a></span>UnsetImplicitValencePerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetImplicitValencePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBChemTsfm.shtml#a1df01dc22c67cc084e1c82b8f9333cab">OBChemTsfm::Apply()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62429f9b662a5d62b500ec2fedf7f67c">OBMol::AssignTotalChargeToAtoms()</a>.</p>

</div>
</div>
<a id="ac6df023071b8d662aa513a00579f076d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6df023071b8d662aa513a00579f076d">&sect;&nbsp;</a></span>UnsetHydrogensAdded()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetHydrogensAdded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="a401b99defa8a57195dc40a2604cee115"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a401b99defa8a57195dc40a2604cee115">&sect;&nbsp;</a></span>UnsetFlag()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void UnsetFlag </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>flag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62429f9b662a5d62b500ec2fedf7f67c">OBMol::AssignTotalChargeToAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a id="a6b78f4cdf91366de39994ade8edc9775"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b78f4cdf91366de39994ade8edc9775">&sect;&nbsp;</a></span>DoTransformations()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBase.shtml">OBBase</a> * DoTransformations </td>
          <td>(</td>
          <td class="paramtype">const std::map&lt; std::string, std::string &gt; *&#160;</td>
          <td class="paramname">, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBConversion.shtml">OBConversion</a> *&#160;</td>
          <td class="paramname">&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Perform a set of transformations specified by the user</p>
<p>Typically these are program options to filter or modify an object For example, see <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6b78f4cdf91366de39994ade8edc9775">OBMol::DoTransformations()</a> and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab72bba66cc9e40fb3b657a30d87bbe6d">OBMol::ClassDescription()</a> Base type does nothing </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#abdc8ffeb0749b563e1108a9ceaa0b394">OBBase</a>.</p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a id="ab72bba66cc9e40fb3b657a30d87bbe6d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab72bba66cc9e40fb3b657a30d87bbe6d">&sect;&nbsp;</a></span>ClassDescription()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * ClassDescription </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

</div>
</div>
<a id="ad12fd937da5f4b0c4562888252fe214b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad12fd937da5f4b0c4562888252fe214b">&sect;&nbsp;</a></span>Clear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Clear </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clear all information from a molecule except OB_PATTERN_STRUCTURE left unchanged. </p>

<p>Reimplemented from <a class="el" href="classOpenBabel_1_1OBBase.shtml#ad12fd937da5f4b0c4562888252fe214b">OBBase</a>.</p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#adaa889d3747ea9e2ba1a83207556dce3">OpenBabel::addFragment()</a>, <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2881c699e6a370c350ca135f51797839">OBMoleculeFormat::ReadNameIndex()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">OBMol::Separate()</a>.</p>

</div>
</div>
<a id="a0a2d560c7f2e4a9fdd1814ed8e09bd02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0a2d560c7f2e4a9fdd1814ed8e09bd02">&sect;&nbsp;</a></span>RenumberAtoms() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RenumberAtoms </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Renumber the atoms of this molecule according to the order in the supplied vector. </p>
<p>Renumber the atoms in this molecule according to the order in the supplied vector. This will return without action if the supplied vector is empty or does not have the same number of atoms as the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a id="a1a93cc61677782c2b8800a12c6af5675"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a93cc61677782c2b8800a12c6af5675">&sect;&nbsp;</a></span>RenumberAtoms() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void RenumberAtoms </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Renumber the atoms of this molecule using the initial indexes in the supplied vector. </p>
<p>Renumber the atoms according to the order of indexes in the supplied vector This with assemble an atom vector and call RenumberAtoms(vector&lt;OBAtom*&gt;) It will return without action if the supplied vector is empty or does not have the same number of atoms as the molecule.</p>
<dl class="section since"><dt>Since</dt><dd>version 2.3 </dd></dl>

</div>
</div>
<a id="a10c76fe88720e6ca2e17865b847edbf7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a10c76fe88720e6ca2e17865b847edbf7">&sect;&nbsp;</a></span>SetCoordinates()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetCoordinates </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the coordinates for all atoms in this conformer. </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#ad11003513310725bd54265ef5bf004c0">OBMol::GetCoordinates()</a> </dd></dl>

</div>
</div>
<a id="a751725f02bf62696515d79608198cd59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a751725f02bf62696515d79608198cd59">&sect;&nbsp;</a></span>ToInertialFrame() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToInertialFrame </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>conf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>rmat</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translate one conformer and rotate by a rotation matrix (which is returned) to the inertial frame-of-reference. </p>

</div>
</div>
<a id="a8122f52665d60a1e5e56578561bd36b3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8122f52665d60a1e5e56578561bd36b3">&sect;&nbsp;</a></span>ToInertialFrame() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ToInertialFrame </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translate all conformers to the inertial frame-of-reference. </p>

</div>
</div>
<a id="a6ac0385e87d0a56901913e5f8049e45f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ac0385e87d0a56901913e5f8049e45f">&sect;&nbsp;</a></span>Translate() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates all conformers in the molecule by the supplied vector. </p>
<p>this method adds the vector v to all atom positions in all conformers </p>

</div>
</div>
<a id="adad8d93db1fadf354b6f51687335fcb9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adad8d93db1fadf354b6f51687335fcb9">&sect;&nbsp;</a></span>Translate() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translates one conformer in the molecule by the supplied vector. </p>
<p>this method adds the vector v to all atom positions in the conformer nconf. If nconf == OB_CURRENT_CONFORMER, then the atom positions in the current conformer are translated. </p>

</div>
</div>
<a id="ae330819c26c418de3a2c995fd191807b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae330819c26c418de3a2c995fd191807b">&sect;&nbsp;</a></span>Rotate() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>u</em>[3][3]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rotate all conformers using the supplied matrix <code>u</code> (a 3x3 array of double) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3494940b2239a5f427061d2902573efd">OBMol::Rotate()</a>.</p>

</div>
</div>
<a id="a3494940b2239a5f427061d2902573efd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3494940b2239a5f427061d2902573efd">&sect;&nbsp;</a></span>Rotate() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>m</em>[9]</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rotate all conformers using the supplied matrix <code>m</code> (a linear 3x3 row-major array of double) </p>

</div>
</div>
<a id="a7a6cf5e812be471e72ecac3ee5d0bc46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a6cf5e812be471e72ecac3ee5d0bc46">&sect;&nbsp;</a></span>Rotate() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Rotate </td>
          <td>(</td>
          <td class="paramtype">const double&#160;</td>
          <td class="paramname"><em>m</em>[9], </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rotate a specific conformer <code>nconf</code> using the supplied rotation matrix <code>m</code>. </p>

</div>
</div>
<a id="ab9f6ba6fae7e12d0f61f5fd8e746aaf3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab9f6ba6fae7e12d0f61f5fd8e746aaf3">&sect;&nbsp;</a></span>Center() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Center </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Translate to the center of all coordinates (for this conformer) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPointGroup.shtml#a1937f7e0578fb48f62a8ffea39db33a0">OBPointGroup::Setup()</a>.</p>

</div>
</div>
<a id="a457c69b9a377efcbdb9e8be871f17fc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a457c69b9a377efcbdb9e8be871f17fc2">&sect;&nbsp;</a></span>Kekulize()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Kekulize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Transform to standard Kekule bond structure (presumably from an aromatic form) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="a1e9f06170626de367fba48ebbacd6f0e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e9f06170626de367fba48ebbacd6f0e">&sect;&nbsp;</a></span>PerceiveKekuleBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool PerceiveKekuleBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a id="ab74a82552a9576514b189e2a265d5f5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab74a82552a9576514b189e2a265d5f5a">&sect;&nbsp;</a></span>NewPerceiveKekuleBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void NewPerceiveKekuleBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Kekulize aromatic rings without using implicit valence. </p>
<p>This new perceive kekule bonds function has been designed to handle molecule files without explicit hydrogens such as pdb or xyz. (It can, of course, easily handle explicit hydrogens too.) The function does not rely on GetImplicitValence function The function looks for groups of aromatic cycle For each group it tries to guess the number of electrons given by each atom in order to satisfy the huckel (4n+2) rule If the huckel rule cannot be satisfied the algorithm try with its best alternative guess Then it recursively walk on the atoms of the cycle and assign single and double bonds </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000086">Deprecated:</a></b></dt><dd>Will no longer be a public, visible method </dd></dl>

</div>
</div>
<a id="a4e2ddc39752d20fabcda1afc1cc4e8e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4e2ddc39752d20fabcda1afc1cc4e8e4">&sect;&nbsp;</a></span>DeleteHydrogens() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Delete all hydrogens from the molecule </p><dl class="section return"><dt>Returns</dt><dd>Success </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="ace02501ed235e4e6c37dca0585bb46bf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ace02501ed235e4e6c37dca0585bb46bf">&sect;&nbsp;</a></span>DeleteHydrogens() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogens </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Delete all hydrogens from the supplied atom </p><dl class="section return"><dt>Returns</dt><dd>Success </dd></dl>

</div>
</div>
<a id="a43904e621e60855bc1818b56a7bd4b93"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a43904e621e60855bc1818b56a7bd4b93">&sect;&nbsp;</a></span>DeletePolarHydrogens()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeletePolarHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Delete all hydrogen atoms connected to a polar atom </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBAtom.shtml#a6da4cfc5bbc2e4c9b358bccd5d97e51f">OBAtom::IsPolarHydrogen</a> </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.4 </dd></dl>

</div>
</div>
<a id="a2993ead33ec2a4b15dd536d798ff844d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2993ead33ec2a4b15dd536d798ff844d">&sect;&nbsp;</a></span>DeleteNonPolarHydrogens()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteNonPolarHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Delete all hydrogen atoms connected to a non-polar atom </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae519982c28911c0906e9181c46d7bdbc">OBAtom::IsNonPolarHydrogen</a> </dd></dl>

</div>
</div>
<a id="a925b41d42ddf14c12b675d32bdf5e948"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a925b41d42ddf14c12b675d32bdf5e948">&sect;&nbsp;</a></span>DeleteHydrogen()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteHydrogen </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Delete the supplied atom if it is a hydrogen (Helper function for DeleteHydrogens) </p>

</div>
</div>
<a id="ad3bab31bf64ff6cb18f6ee259b3b8c11"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3bab31bf64ff6cb18f6ee259b3b8c11">&sect;&nbsp;</a></span>AddHydrogens() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddHydrogens </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>polaronly</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>correctForPH</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pH</em> = <code>7.4</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add hydrogens to the entire molecule to fill out implicit valence spots </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">polaronly</td><td>Whether to add hydrogens only to polar atoms (i.e., not to C atoms) </td></tr>
    <tr><td class="paramname">correctForPH</td><td>Whether to call <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669" title="Correct for pH by applying the OBPhModel transformations. ">CorrectForPH()</a> first </td></tr>
    <tr><td class="paramname">pH</td><td>The pH to use for <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7af037d80801b43ae5450bd74004d669" title="Correct for pH by applying the OBPhModel transformations. ">CorrectForPH()</a> modification </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Whether any hydrogens were added </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBSmartsPattern.shtml#adda681cbeb3f22e43d35105ad4608b91">OBSmartsPattern::Match()</a>.</p>

</div>
</div>
<a id="a1befb9ee43954207d09e3229e4b5753b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1befb9ee43954207d09e3229e4b5753b">&sect;&nbsp;</a></span>AddHydrogens() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddHydrogens </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>atom</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add hydrogens only to the supplied atom to fill out implicit valence. </p>

</div>
</div>
<a id="a9c3e3f1fa320501c56cb2b7fe4d6be34"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c3e3f1fa320501c56cb2b7fe4d6be34">&sect;&nbsp;</a></span>AddPolarHydrogens()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddPolarHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Add only polar hydrogens (i.e., attached to polar atoms, not C) </p>

</div>
</div>
<a id="a37a58fb7e196c942085787cbde86fae8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37a58fb7e196c942085787cbde86fae8">&sect;&nbsp;</a></span>AddNonPolarHydrogens()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddNonPolarHydrogens </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add only nonpolar hydrogens (i.e., attached to C) </p><dl class="section since"><dt>Since</dt><dd>version 2.4 </dd></dl>

</div>
</div>
<a id="a7acd1c4965f682ab6f25f7cfa30f34dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7acd1c4965f682ab6f25f7cfa30f34dd">&sect;&nbsp;</a></span>AddNewHydrogens()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AddNewHydrogens </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#ac39166fa6f7c8df04002d2a94043d74c">HydrogenType</a>&#160;</td>
          <td class="paramname"><em>whichHydrogen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>correctForPH</em> = <code>false</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pH</em> = <code>7.4</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Add polar and/or nonpolar hydrogens </p><dl class="section since"><dt>Since</dt><dd>verison 2.4 </dd></dl>

</div>
</div>
<a id="a89743304090380b06c920530f919a2fe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a89743304090380b06c920530f919a2fe">&sect;&nbsp;</a></span>StripSalts()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool StripSalts </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>threshold</em> = <code>0</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>If <code>threshold</code> is not specified or is zero, remove all but the largest contiguous fragment. If <code>threshold</code> is non-zero, remove any fragments with fewer than <code>threshold</code> atoms. </p>

</div>
</div>
<a id="a1e5c6955a32c0ec2317a8de12ab7ba5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1e5c6955a32c0ec2317a8de12ab7ba5a">&sect;&nbsp;</a></span>Separate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; <a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &gt; Separate </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>StartIndex</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies each disconnected fragment as a separate <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>.</p>

</div>
</div>
<a id="ad711b0ce04370b50be246e7b859d1f99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad711b0ce04370b50be246e7b859d1f99">&sect;&nbsp;</a></span>GetNextFragment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetNextFragment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMolAtomDFSIter.shtml">OpenBabel::OBMolAtomDFSIter</a> &amp;&#160;</td>
          <td class="paramname"><em>iter</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBMol.shtml">OBMol</a> &amp;&#160;</td>
          <td class="paramname"><em>newMol</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Iterative component of Separate to copy one fragment at a time. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1e5c6955a32c0ec2317a8de12ab7ba5a">OBMol::Separate()</a>.</p>

</div>
</div>
<a id="acba192e5cf0db39c2ed6af7ba05328dc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acba192e5cf0db39c2ed6af7ba05328dc">&sect;&nbsp;</a></span>ConvertDativeBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ConvertDativeBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts the charged form of coordinate bonds, e.g.[N+]([O-])=O to N(=O)=O. </p>
<p>Converts for instance [N+]([O-])=O to N(=O)=O. </p>

</div>
</div>
<a id="a54b6a6c4fabf98535ff08b25ea9b0bfc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a54b6a6c4fabf98535ff08b25ea9b0bfc">&sect;&nbsp;</a></span>MakeDativeBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool MakeDativeBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Converts 5-valent N and P only. Return true if conversion occurred. </p><dl class="section return"><dt>Returns</dt><dd>has charged form of dative bonds(e.g.[N+]([O-])=O from N(=O)=O). </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.4 </dd></dl>
<p>Converts 5-valent N to charged form of dative bonds, e.g. -N(=O)=O converted to -[N+]([O-])=O. Returns true if conversion occurs. </p>

</div>
</div>
<a id="abcf2e89fef03dd291e22507c51af8965"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abcf2e89fef03dd291e22507c51af8965">&sect;&nbsp;</a></span>ConvertZeroBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool ConvertZeroBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Convert zero-order bonds to single or double bonds and adjust adjacent atom charges in an attempt to achieve the correct valence state. </p><dl class="section return"><dt>Returns</dt><dd>Whether any modifications were made </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.4</dd></dl>
<p>This function is useful when writing to legacy formats (such as MDL MOL) that do not support zero-order bonds. It is worth noting that some compounds cannot be well represented using just single, double and triple bonds, even with adjustments to adjacent charges. In these cases, simply converting zero-order bonds to single bonds is all that can be done.</p>
<pre class="fragment">Algorithm from:
Clark, A. M. Accurate Specification of Molecular Structures: The Case for
Zero-Order Bonds and Explicit Hydrogen Counting. Journal of Chemical Information
and Modeling, 51, 3149-3157 (2011). http://pubs.acs.org/doi/abs/10.1021/ci200488k
</pre> 
</div>
</div>
<a id="a7af037d80801b43ae5450bd74004d669"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7af037d80801b43ae5450bd74004d669">&sect;&nbsp;</a></span>CorrectForPH()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool CorrectForPH </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>pH</em> = <code>7.4</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Correct for pH by applying the <a class="el" href="classOpenBabel_1_1OBPhModel.shtml" title="Corrections for pH used by OBMol::CorrectForPH() ">OBPhModel</a> transformations. </p>

</div>
</div>
<a id="ad85ec95d1f909843737b67d70638f3c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad85ec95d1f909843737b67d70638f3c9">&sect;&nbsp;</a></span>AssignSpinMultiplicity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AssignSpinMultiplicity </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>NoImplicitH</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>set spin multiplicity for H-deficient atoms </p>
<p>If NoImplicitH is true then the molecule has no implicit hydrogens. Individual atoms on which ForceNoH() has been called also have no implicit hydrogens. If NoImplicitH is false (the default), then if there are any explicit hydrogens on an atom then they constitute all the hydrogen on that atom. However, a hydrogen atom with its _isotope!=0 is not considered explicit hydrogen for this purpose. In addition, an atom which has had ForceImplH()called for it is never considered hydrogen deficient, e.g. unbracketed atoms in SMILES. Any discrepancy with the expected atom valency is interpreted as the atom being a radical of some sort and iits _spinMultiplicity is set to 2 when it is one hydrogen short and 3 when it is two hydrogens short and similarly for greater hydrogen deficiency.</p>
<p>So SMILES C[CH] is interpreted as methyl carbene, CC[H][H] as ethane, and CC[2H] as CH3CH2D. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a62429f9b662a5d62b500ec2fedf7f67c">OBMol::AssignTotalChargeToAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="a62429f9b662a5d62b500ec2fedf7f67c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62429f9b662a5d62b500ec2fedf7f67c">&sect;&nbsp;</a></span>AssignTotalChargeToAtoms()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool AssignTotalChargeToAtoms </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>charge</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Put the specified molecular charge on appropriate atoms. Assumes all the hydrogen is explicitly included in the molecule. </p><dl class="section since"><dt>Since</dt><dd>version 2.4 </dd></dl>

</div>
</div>
<a id="a0f0310aa379033994230e29e206106c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0f0310aa379033994230e29e206106c7">&sect;&nbsp;</a></span>SetIsPatternStructure()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetIsPatternStructure </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> is a pattern, not a complete molecule. Left unchanged by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad12fd937da5f4b0c4562888252fe214b" title="Clear all information from a molecule except OB_PATTERN_STRUCTURE left unchanged. ...">Clear()</a>. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a656a12d74df6452be30fd76d3860bca6">OpenBabel::alternate()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a9e896374801d7ea5f8986ecb2b54d65b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9e896374801d7ea5f8986ecb2b54d65b">&sect;&nbsp;</a></span>Center() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> Center </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the center of the supplied conformer <code>nconf</code> </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3" title="Translate to the center of all coordinates (for this conformer) ">Center()</a> to actually center all conformers at the origin </dd></dl>

</div>
</div>
<a id="a501e76993e9deb8ec8ab24c464d4ed3c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a501e76993e9deb8ec8ab24c464d4ed3c">&sect;&nbsp;</a></span>SetTorsion()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetTorsion </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>b</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>d</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>ang</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the torsion defined by these atoms, rotating bonded neighbors </p><dl class="section user"><dt>ang The torsion angle in radians</dt><dd>WARNING: SetTorsion takes an angle in radians while GetTorsion returns it in degrees </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#abe40cdbb1abc8939273d9cde6b7b638a">OBBuilder::Connect()</a>, and <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3280c4291f365e26ad615eb38c877b25">OBBuilder::CorrectStereoBonds()</a>.</p>

</div>
</div>
<a id="ad4e3eab0d027bd8e503d02e7261ca477"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4e3eab0d027bd8e503d02e7261ca477">&sect;&nbsp;</a></span>FindSSSR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindSSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find Smallest Set of Smallest Rings (see <a class="el" href="classOpenBabel_1_1OBRing.shtml" title="Stores information on rings in a molecule from SSSR perception. ">OBRing</a> class for more details) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aefc6f8e669a1810e383ab1459324c38e">OBAtom::IsInRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aef9a302705cda0731e77f82f3b1483a0">OBAtom::MemberOfRingCount()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af4a516c81946e3a8c0ca80420358dbe2">OBAtom::MemberOfRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="a39a5ee36b2320d9191dac24acf90b03e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39a5ee36b2320d9191dac24acf90b03e">&sect;&nbsp;</a></span>FindLSSR()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindLSSR </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find Largest Set of Smallest Rings. </p>

</div>
</div>
<a id="ae58b3f3da59d333ffa0d5b0f005f3526"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae58b3f3da59d333ffa0d5b0f005f3526">&sect;&nbsp;</a></span>FindRingAtomsAndBonds()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindRingAtomsAndBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Find all ring atoms and bonds. Does not need to call <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad4e3eab0d027bd8e503d02e7261ca477" title="Find Smallest Set of Smallest Rings (see OBRing class for more details) ">FindSSSR()</a>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ae016e13adf41d7c12a3d22147f0b870e">OBBond::IsInRing()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae016e13adf41d7c12a3d22147f0b870e">OBAtom::IsInRing()</a>.</p>

</div>
</div>
<a id="a3368586a5a86bd9684f4b25ac53d2e44"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3368586a5a86bd9684f4b25ac53d2e44">&sect;&nbsp;</a></span>FindChiralCenters()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void FindChiralCenters </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Find all chiral atom centers. See <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a63258442848bd8e29e0d5224e145ad83">OBAtom::IsChiral()</a> for more details </p><dl class="deprecated"><dt><b><a class="el" href="deprecated.shtml#_deprecated000062">Deprecated:</a></b></dt><dd>See FindStereogenicUnits </dd></dl>

</div>
</div>
<a id="ae12d082d7bc7adb2e9fd621adf27ccb6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae12d082d7bc7adb2e9fd621adf27ccb6">&sect;&nbsp;</a></span>FindChildren() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChildren </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>children</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>first</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>second</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>locates all atoms for which there exists a path to 'second' without going through 'first' children must not include 'second' </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a56bd19e6ce3d11cd0ccdc0420e91ada3">OpenBabel::ApplyRotMatToBond()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#a1d06cdda315ea9b96d14aeb10d352e61">OBRotorList::AssignTorVals()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a7baa4d72adf170defdf09a225b3edf57">OBBuilder::IsSpiroAtom()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#ac7d5e7adb0a537d92a628c811148dc21">OBBond::SetLength()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#ac08d1221790bd6f14418e3f77e6e725a">OBRotorList::SetRotAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#af216aef19cf7a82fb1e57504b39f9329">OBRotorList::SetRotAtomsByFix()</a>, and <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#afd34dcbc8bd8c0fba2433b39f1e1d61b">OBRotamerList::Setup()</a>.</p>

</div>
</div>
<a id="aab919f74b99e785e8b70b3c8908d50ca"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aab919f74b99e785e8b70b3c8908d50ca">&sect;&nbsp;</a></span>FindChildren() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindChildren </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>children</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>bgn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>locates all atoms for which there exists a path to 'end' without going through 'bgn' children must not include 'end' </p>

</div>
</div>
<a id="aa797df5bf72cb5e220e13171dd9c7d4a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa797df5bf72cb5e220e13171dd9c7d4a">&sect;&nbsp;</a></span>FindLargestFragment()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindLargestFragment </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBBitVec.shtml">OBBitVec</a> &amp;&#160;</td>
          <td class="paramname"><em>frag</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Find the largest fragment in <a class="el" href="classOpenBabel_1_1OBMol.shtml" title="Molecule Class. ">OBMol</a> (which may include multiple non-connected fragments) </p><dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">frag</td><td>Return (by reference) a bit vector indicating the atoms in the largest fragment </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af74913b3d793c41d1f005afdba11da35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af74913b3d793c41d1f005afdba11da35">&sect;&nbsp;</a></span>ContigFragList()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ContigFragList </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>cfl</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Sort a list of contig fragments by size from largest to smallest Each vector&lt;int&gt; contains the atom numbers of a contig fragment </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#abcf2e89fef03dd291e22507c51af8965">OBMol::ConvertZeroBonds()</a>.</p>

</div>
</div>
<a id="a228de88f48ee3ca6a11554b74d82dedd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a228de88f48ee3ca6a11554b74d82dedd">&sect;&nbsp;</a></span>Align()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Align </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> *&#160;</td>
          <td class="paramname"><em>a2</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>p1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1vector3.shtml">vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>p2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Aligns atom a on p1 and atom b along p1-&gt;p2 vector. </p>

</div>
</div>
<a id="a31d05972f7454e791641c4a7d0071d12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31d05972f7454e791641c4a7d0071d12">&sect;&nbsp;</a></span>ConnectTheDots()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void ConnectTheDots </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds single bonds based on atom proximity. </p>
<p>This method adds single bonds between all atoms closer than their combined atomic covalent radii, then "cleans up" making sure bonded atoms are not closer than 0.4A and the atom does not exceed its valence. It implements blue-obelisk:rebondFrom3DCoordinates. </p>

</div>
</div>
<a id="ac749cfb04173f6f35ef64b1ac1d87178"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac749cfb04173f6f35ef64b1ac1d87178">&sect;&nbsp;</a></span>PerceiveBondOrders()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PerceiveBondOrders </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Attempts to perceive multiple bonds based on geometries. </p>
<p>This method uses bond angles and geometries from current connectivity to guess atom types and then filling empty valences with multiple bonds. It currently has a pass to detect some frequent functional groups. It still needs a pass to detect aromatic rings to "clean up." AssignSpinMultiplicity(true) is called at the end of the function. The true states that there are no implict hydrogens in the molecule. </p>

</div>
</div>
<a id="abee51ea4be988357bb17c4e5fd3d7e12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abee51ea4be988357bb17c4e5fd3d7e12">&sect;&nbsp;</a></span>FindAngles()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindAngles </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills out an <a class="el" href="classOpenBabel_1_1OBAngleData.shtml" title="Used to hold all angles in a molecule as generic data for OBMol. ">OBAngleData</a> with angles from the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml#a48b73b591ecad6e541b5ceedb6618715">OBMolAngleIter::OBMolAngleIter()</a>.</p>

</div>
</div>
<a id="a1ce9b09fb625faffaae648d7beae9598"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1ce9b09fb625faffaae648d7beae9598">&sect;&nbsp;</a></span>FindTorsions()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void FindTorsions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Fills out an <a class="el" href="classOpenBabel_1_1OBTorsionData.shtml" title="Used to hold torsions as generic data for OBMol. ">OBTorsionData</a> with angles from the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a7746689f376b4b9f2fc6a103dc101d38">OBMolTorsionIter::OBMolTorsionIter()</a>.</p>

</div>
</div>
<a id="ac4260148aa21c7ada7d625bc0c6f2f7a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4260148aa21c7ada7d625bc0c6f2f7a">&sect;&nbsp;</a></span>GetGTDVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool GetGTDVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>gtd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates the graph theoretical distance (GTD) of each atom. </p>
<p>Creates a vector (indexed from zero) containing, for each atom in the molecule, the number of bonds plus one to the most distant non-H atom.</p>
<p>For example, for the molecule H3CC(=O)Cl the GTD value for C1 would be 3, as the most distant non-H atom (either Cl or O) is 2 bonds away.</p>
<p>Since the GTD measures the distance to non-H atoms, the GTD values for terminal H atoms tend to be larger than for non-H terminal atoms. In the example above, the GTD values for the H atoms are all 4. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>, and <a class="el" href="namespaceOpenBabel.shtml#ae4c78efdf4d582451d8d0c323d98f205">OpenBabel::intToStr()</a>.</p>

</div>
</div>
<a id="a94276831221d5693b3017da7fab3ccc8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a94276831221d5693b3017da7fab3ccc8">&sect;&nbsp;</a></span>GetGIVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetGIVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a set of graph invariant indexes using the graph theoretical distance, number of connected heavy atoms, aromatic boolean, ring boolean, atomic number, and summation of bond orders connected to the atom. Vector is indexed from zero. </p>

</div>
</div>
<a id="ade880e97f2bdf3c90e91375aec12aaf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ade880e97f2bdf3c90e91375aec12aaf0">&sect;&nbsp;</a></span>GetGIDVector()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void GetGIDVector </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; unsigned int &gt; &amp;&#160;</td>
          <td class="paramname"><em>vgid</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Calculates a set of symmetry identifiers for a molecule. Atoms with the same symmetry ID are symmetrically equivalent. Vector is indexed from zero. </p>

</div>
</div>
<a id="afbf33662dacd733285409dfd85696457"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbf33662dacd733285409dfd85696457">&sect;&nbsp;</a></span>Has2D()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Has2D </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Not3D</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Are there non-zero coordinates in two dimensions (i.e. X and Y)- and, if Not3D is true, no Z coordinates? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a4aaa8b5151395ad66ecfe896ca8a0114"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4aaa8b5151395ad66ecfe896ca8a0114">&sect;&nbsp;</a></span>Has3D()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Has3D </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Are there non-zero coordinates in all three dimensions (i.e. X, Y, Z)? </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, and <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="abdda89a787d7ae0639d5127c2f6a4dfb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdda89a787d7ae0639d5127c2f6a4dfb">&sect;&nbsp;</a></span>HasNonZeroCoords()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool HasNonZeroCoords </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Are there any non-zero coordinates? </p>

</div>
</div>
<a id="a783c51919c69da3287d51f34b2fa53a0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a783c51919c69da3287d51f34b2fa53a0">&sect;&nbsp;</a></span>HasAromaticPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAromaticPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has aromatic perception been performed? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBBond.shtml#aeda62da8823b248654404fb15f314a66">OBBond::IsAromatic()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aeda62da8823b248654404fb15f314a66">OBAtom::IsAromatic()</a>.</p>

</div>
</div>
<a id="aac2c45d000ac10ad770ec5e5eff97f30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac2c45d000ac10ad770ec5e5eff97f30">&sect;&nbsp;</a></span>HasSSSRPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasSSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has the smallest set of smallest rings (FindSSSR) been performed? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aefc6f8e669a1810e383ab1459324c38e">OBAtom::IsInRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aef9a302705cda0731e77f82f3b1483a0">OBAtom::MemberOfRingCount()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af4a516c81946e3a8c0ca80420358dbe2">OBAtom::MemberOfRingSize()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="a3771eaf33a336f55348f80ca857a159f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3771eaf33a336f55348f80ca857a159f">&sect;&nbsp;</a></span>HasLSSRPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasLSSRPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has the largest set of smallest rings (FindLSSR) been performed? </p>

</div>
</div>
<a id="a0329d4256b426a4967afa867f415d06b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0329d4256b426a4967afa867f415d06b">&sect;&nbsp;</a></span>HasRingAtomsAndBondsPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasRingAtomsAndBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have ring atoms and bonds been assigned? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBBond.shtml#ae016e13adf41d7c12a3d22147f0b870e">OBBond::IsInRing()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ae016e13adf41d7c12a3d22147f0b870e">OBAtom::IsInRing()</a>.</p>

</div>
</div>
<a id="a0ba2ebe76f1b15c48a8f1538efc8f9b4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0ba2ebe76f1b15c48a8f1538efc8f9b4">&sect;&nbsp;</a></span>HasAtomTypesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAtomTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have atom types been assigned by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBAtom::GetType()</a>.</p>

</div>
</div>
<a id="adfe42a839d62e3d8f31ce3c28dc2e4e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adfe42a839d62e3d8f31ce3c28dc2e4e0">&sect;&nbsp;</a></span>HasRingTypesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasRingTypesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have ring types been assigned by <a class="el" href="classOpenBabel_1_1OBRingTyper.shtml" title="Assigns ring types. ">OBRingTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRing.shtml#a7f02f5442f2ed3aa2045587d3319ab7e">OBRing::GetType()</a>.</p>

</div>
</div>
<a id="a39df67d7e225b9dd721b9b8c7df809ce"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a39df67d7e225b9dd721b9b8c7df809ce">&sect;&nbsp;</a></span>HasChiralityPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasChiralityPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has atom chirality been assigned? </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="a87c2cd2043f749d5433a98df4ad8277d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87c2cd2043f749d5433a98df4ad8277d">&sect;&nbsp;</a></span>HasPartialChargesPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasPartialChargesPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have atomic Gasteiger partial charges been assigned by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml" title="Assigns Gasteiger partial charges. ">OBGastChrg</a>? </p>

</div>
</div>
<a id="a908e2d394d3a47cf821014899344ca37"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a908e2d394d3a47cf821014899344ca37">&sect;&nbsp;</a></span>HasHybridizationPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasHybridizationPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has atomic hybridization been assigned by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a5cfb24ccc82420ec902371aafa91d67e">OBAtom::GetHyb()</a>.</p>

</div>
</div>
<a id="a7fe699ef7fee62ca46743d6aa78bdea5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7fe699ef7fee62ca46743d6aa78bdea5">&sect;&nbsp;</a></span>HasImplicitValencePerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasImplicitValencePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has implicit hydrogen valence been assigned by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml" title="Assigns atom types, hybridization, implicit valence and formal charges. ">OBAtomTyper</a>? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#ad9f36aa26768975a23a6c7b819e79cc0">OBAtom::GetImplicitValence()</a>, and <a class="el" href="classOpenBabel_1_1OBAtom.shtml#a7f16ab619578cd847cd1fa024f4ee708">OBAtom::ImplicitHydrogenCount()</a>.</p>

</div>
</div>
<a id="aafddb1ded7f589afbdd56062368602db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafddb1ded7f589afbdd56062368602db">&sect;&nbsp;</a></span>HasKekulePerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasKekulePerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has aromaticity and Kekule forms been assigned by Kekulize? </p>

</div>
</div>
<a id="afb25b05d950ca109bf9c6333b906a9ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb25b05d950ca109bf9c6333b906a9ee">&sect;&nbsp;</a></span>HasClosureBondsPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasClosureBondsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have ring "closure" bonds been assigned? (e.g., <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>) </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, and <a class="el" href="classOpenBabel_1_1OBBond.shtml#ab91f9d866c216bcb3ffc5aa0774b5177">OBBond::IsClosure()</a>.</p>

</div>
</div>
<a id="ac31a6af8f2b96fa35170523b6318c459"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac31a6af8f2b96fa35170523b6318c459">&sect;&nbsp;</a></span>HasChainsPerceived()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasChainsPerceived </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have biomolecule chains and residues been assigned by <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml" title="Perceives peptide or nucleotide chains and residues in an OBMol. ">OBChainsParser</a>? </p>

</div>
</div>
<a id="aefc6e71556f0cd4afdd34e4a99d06025"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aefc6e71556f0cd4afdd34e4a99d06025">&sect;&nbsp;</a></span>HasHydrogensAdded()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasHydrogensAdded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have hydrogens been added to the molecule? </p>

</div>
</div>
<a id="ab57a4b5dd9752e593e2fdb80f48909d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab57a4b5dd9752e593e2fdb80f48909d8">&sect;&nbsp;</a></span>HasAromaticCorrected()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasAromaticCorrected </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Have aromatic nitrogens been "corrected?" (deprecated) </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>, and <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#a0d8f018cbaaa9d313b45e468f77afea2">OBAtomTyper::CorrectAromaticNitrogens()</a>.</p>

</div>
</div>
<a id="afc44b8ad27a62b9cfc670d4fd29bb52f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc44b8ad27a62b9cfc670d4fd29bb52f">&sect;&nbsp;</a></span>IsCorrectedForPH()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool IsCorrectedForPH </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has the molecule been corrected for pH by CorrectForPH? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBPhModel.shtml#aae3bb8e98c90f3eb77b8654341eef135">OBPhModel::CorrectForPH()</a>.</p>

</div>
</div>
<a id="a4a45f2c821b749250e070c3594289103"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a45f2c821b749250e070c3594289103">&sect;&nbsp;</a></span>HasSpinMultiplicityAssigned()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasSpinMultiplicityAssigned </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Has total spin multiplicity been assigned? </p>

</div>
</div>
<a id="a63258442848bd8e29e0d5224e145ad83"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63258442848bd8e29e0d5224e145ad83">&sect;&nbsp;</a></span>IsChiral()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool IsChiral </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this molecule chiral? </p>

</div>
</div>
<a id="a31d1053aee208079bcc3c5e1884774df"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a31d1053aee208079bcc3c5e1884774df">&sect;&nbsp;</a></span>Empty()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool Empty </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Are there any atoms in this molecule? </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBSSMatch.shtml#ad5689e6c79e3e599e863a2e8020fc58c">OBSSMatch::OBSSMatch()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1a93cc61677782c2b8800a12c6af5675">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a id="a37e5c0caf3b51ae81d8d3abc6ffb1a9c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a37e5c0caf3b51ae81d8d3abc6ffb1a9c">&sect;&nbsp;</a></span>NumConformers()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int NumConformers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of conformers in this molecule </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ab9f6ba6fae7e12d0f61f5fd8e746aaf3">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae330819c26c418de3a2c995fd191807b">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac271a3bf117a79400817b696d11ea4a7">OBForceField::SetConformers()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a6ac0385e87d0a56901913e5f8049e45f">OBMol::Translate()</a>.</p>

</div>
</div>
<a id="a24d0394eb0ad10ca4241da6d6916f0a8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a24d0394eb0ad10ca4241da6d6916f0a8">&sect;&nbsp;</a></span>SetConformers()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConformers </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double *&gt; &amp;&#160;</td>
          <td class="paramname"><em>v</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the entire set of conformers for this molecule to <code>v</code>. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBConformerSearch.shtml#a908a9729ddc64dd383f093ab30a0aae3">OBConformerSearch::GetConformers()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>.</p>

</div>
</div>
<a id="a7b80e7015d000221e0cc92fd3cf6f9e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7b80e7015d000221e0cc92fd3cf6f9e4">&sect;&nbsp;</a></span>AddConformer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void AddConformer </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Add a new set of coordinates <code>f</code> as a new conformer. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#afa641f7ef2f87464db0231f320116ecb">OpenBabel::UpdateConformersFromTree()</a>.</p>

</div>
</div>
<a id="ae4c349e7e3920df72134c0c940318997"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4c349e7e3920df72134c0c940318997">&sect;&nbsp;</a></span>SetConformer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetConformer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the molecule's current conformer to <code>i</code> Does nothing if <code>i</code> is less than 0 or i is larger than <a class="el" href="classOpenBabel_1_1OBMol.shtml#a37e5c0caf3b51ae81d8d3abc6ffb1a9c">NumConformers()</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a5800be99903abff0efbad8937f492bc4">OBMoleculeFormat::DoOutputOptions()</a>, and <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>.</p>

</div>
</div>
<a id="af06dcff6ea883886d4d48bad4cc69156"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af06dcff6ea883886d4d48bad4cc69156">&sect;&nbsp;</a></span>CopyConformer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void CopyConformer </td>
          <td>(</td>
          <td class="paramtype">double *&#160;</td>
          <td class="paramname"><em>c</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Copy the conformer <code>nconf</code> into the array <code>c</code> </p><dl class="section warning"><dt>Warning</dt><dd>Does no checking to see if <code>c</code> is large enough </dd></dl>

</div>
</div>
<a id="a21951fddd6c8a35b21769a1d08718581"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21951fddd6c8a35b21769a1d08718581">&sect;&nbsp;</a></span>DeleteConformer()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteConformer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>nconf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Delete the conformer <code>nconf</code>. </p>

</div>
</div>
<a id="aeae833c9dcc30e182f18554bd40242d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeae833c9dcc30e182f18554bd40242d6">&sect;&nbsp;</a></span>GetConformer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double* GetConformer </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the coordinates to conformer <code>i</code> </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ac271a3bf117a79400817b696d11ea4a7">OBForceField::SetConformers()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>.</p>

</div>
</div>
<a id="a22a1e9fe8d4ef1bebf8e9d9aa2cacc12"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">&sect;&nbsp;</a></span>SetEnergies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void SetEnergies </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>energies</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the entire set of conformer energies. </p>

</div>
</div>
<a id="aa04bad1a38d0d3bff9930e332f460dc2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa04bad1a38d0d3bff9930e332f460dc2">&sect;&nbsp;</a></span>GetEnergies()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt; double &gt; GetEnergies </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Set the entire set of conformer energies. </p>

</div>
</div>
<a id="a5ba177c97c9b16781c3e87833359730c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5ba177c97c9b16781c3e87833359730c">&sect;&nbsp;</a></span>GetEnergy() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double GetEnergy </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>ci</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Get the energy for conformer ci </p><dl class="section user"><dt>ci conformer index </dt><dd></dd></dl>

</div>
</div>
<a id="a3726424b4f6e52a0af2b63da9e2e19f7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3726424b4f6e52a0af2b63da9e2e19f7">&sect;&nbsp;</a></span>BeginConformer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double* BeginConformer </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double *&gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the iterator to the beginning of the conformer list </p><dl class="section return"><dt>Returns</dt><dd>the array of coordinates for the first conformer </dd></dl>

</div>
</div>
<a id="a684fbfa582ca28f08da6fa19bb6d2596"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a684fbfa582ca28f08da6fa19bb6d2596">&sect;&nbsp;</a></span>NextConformer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double* NextConformer </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; double *&gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Advance the iterator to the next confomer, if possible </p><dl class="section return"><dt>Returns</dt><dd>The array of coordinates for the next conformer, or NULL if none exist </dd></dl>

</div>
</div>
<a id="a5246a44bf82aa31c2f428665db94bfb8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5246a44bf82aa31c2f428665db94bfb8">&sect;&nbsp;</a></span>GetConformers()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double*&gt;&amp; GetConformers </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the entire set of conformers for this molecule as a vector of floating point arrays </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBRotamerList.shtml#a91c3efe37db1542a2f553440143915f9">OBRotamerList::SetBaseCoordinateSets()</a>.</p>

</div>
</div>
<a id="ae3b07b388e733d5a0e9ee9654a4411a1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3b07b388e733d5a0e9ee9654a4411a1">&sect;&nbsp;</a></span>BeginAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> BeginAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An atom iterator pointing to the beginning of the atom list </dd></dl>

</div>
</div>
<a id="a81afb84c73fe3e57e8edd5a472e175f6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a81afb84c73fe3e57e8edd5a472e175f6">&sect;&nbsp;</a></span>EndAtoms()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> EndAtoms </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An atom iterator pointing to the end of the atom list </dd></dl>

</div>
</div>
<a id="ac4ea48df79e239b506d3501dd42adde9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac4ea48df79e239b506d3501dd42adde9">&sect;&nbsp;</a></span>BeginBonds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> BeginBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A bond iterator pointing to the beginning of the bond list </dd></dl>

</div>
</div>
<a id="a87859f951e8ea33345b76d93014486c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87859f951e8ea33345b76d93014486c9">&sect;&nbsp;</a></span>EndBonds()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> EndBonds </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A bond iterator pointing to the end of the bond list </dd></dl>

</div>
</div>
<a id="a35e5693cfdc3b993440d29540ab0509d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35e5693cfdc3b993440d29540ab0509d">&sect;&nbsp;</a></span>BeginResidues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> BeginResidues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A residue iterator pointing to the beginning of the residue list </dd></dl>

</div>
</div>
<a id="a62b81baba8ee7151f0aae8fb01e90358"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62b81baba8ee7151f0aae8fb01e90358">&sect;&nbsp;</a></span>EndResidues()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> EndResidues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>A residue iterator pointing to the end of the residue list </dd></dl>

</div>
</div>
<a id="abceac189ade32ef3a6c5f3d13fc38db4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abceac189ade32ef3a6c5f3d13fc38db4">&sect;&nbsp;</a></span>BeginAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * BeginAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the iterator <code>i</code> to the beginning of the atom list </p><dl class="section return"><dt>Returns</dt><dd>the first atom (or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">OpenBabel::construct_c_matrix()</a>, <a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">OpenBabel::construct_g_matrix()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5230bf1636e0f8f7f3113bb335123558">OBAromaticTyper::ExcludeSmallRing()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aefec0fbdf06bb4199614da22f1a9deee">OBChargeModel::FillChargeVectors()</a>, <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">OpenBabel::GetChirality()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aeccf78db112723467e7756a5734c82b9">OBAtom::GetPartialCharge()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">OBMol::Has2D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">OBMol::Has3D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">OBMol::HasNonZeroCoords()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#ac64ef48829b8b0825d823194065a813e">OBGrid::Init()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">OpenBabel::InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63258442848bd8e29e0d5224e145ad83">OBMol::IsChiral()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMolAtomIter.shtml#aea06b6f6c208a5a2f16a8f25889486a4">OBMolAtomIter::OBMolAtomIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a19ad5800c1b20981621429c4c16a845e">OBMolPairIter::OBMolPairIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a82f19c09f49162a5d747e6d302f2bd74">OBMolPairIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="ac8ca499b39cdd5f4a2fc76e7d50deaa9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac8ca499b39cdd5f4a2fc76e7d50deaa9">&sect;&nbsp;</a></span>NextAtom()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a> * NextAtom </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aed11ccd81d7abaccbdf10486a5ae0402">OBAtomIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Advance the iterator <code>i</code> to the next atom in the molecule </p><dl class="section return"><dt>Returns</dt><dd>the next atom (if any, or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBResidueData.shtml#a61ad927515ed6a722fd90d3610759197">OBResidueData::AssignBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ae773554c61c3b4f4c855ead5bec93ee6">OBAtomTyper::AssignHyb()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad63a6fe97b17d6de0522747fc6fbf86f">OBAtomTyper::AssignImplicitValence()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBAtomTyper.shtml#ad7c6f09e6720f6041c81097b407d0961">OBAtomTyper::AssignTypes()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#aac15077eefb9e377d3c400f1f2273826">OpenBabel::CartesianToInternal()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9e896374801d7ea5f8986ecb2b54d65b">OBMol::Center()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="namespaceOpenBabel.shtml#ae050b0cbe133308c07688d2438155504">OpenBabel::construct_c_matrix()</a>, <a class="el" href="namespaceOpenBabel.shtml#a49d9094d3843107b37a072e7e4597fc3">OpenBabel::construct_g_matrix()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#acba192e5cf0db39c2ed6af7ba05328dc">OBMol::ConvertDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5230bf1636e0f8f7f3113bb335123558">OBAromaticTyper::ExcludeSmallRing()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a7f1d7465125c206ca70c21ab5db30560">OBSmartsMatcher::FastSingleMatch()</a>, <a class="el" href="classOpenBabel_1_1OBChargeModel.shtml#aefec0fbdf06bb4199614da22f1a9deee">OBChargeModel::FillChargeVectors()</a>, <a class="el" href="namespaceOpenBabel.shtml#ad7009a91e72c28783be5346611efde3e">OpenBabel::GetChirality()</a>, <a class="el" href="namespaceOpenBabel.shtml#a534fe2a629963b79ffbd499f461ca5df">OpenBabel::GetDFFVector()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#aeccf78db112723467e7756a5734c82b9">OBAtom::GetPartialCharge()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#afbf33662dacd733285409dfd85696457">OBMol::Has2D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a4aaa8b5151395ad66ecfe896ca8a0114">OBMol::Has3D()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#abdda89a787d7ae0639d5127c2f6a4dfb">OBMol::HasNonZeroCoords()</a>, <a class="el" href="classOpenBabel_1_1OBGrid.shtml#ac64ef48829b8b0825d823194065a813e">OBGrid::Init()</a>, <a class="el" href="namespaceOpenBabel.shtml#a3be6b6496e799b9308b6c1beb927c265">OpenBabel::InternalToCartesian()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a63258442848bd8e29e0d5224e145ad83">OBMol::IsChiral()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a54b6a6c4fabf98535ff08b25ea9b0bfc">OBMol::MakeDativeBonds()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a19ad5800c1b20981621429c4c16a845e">OBMolPairIter::OBMolPairIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolPairIter.shtml#a82f19c09f49162a5d747e6d302f2bd74">OBMolPairIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBProxGrid.shtml#a396800b8a8f488a60854d5ae69c89658">OBProxGrid::Setup()</a>, <a class="el" href="classOpenBabel_1_1OBSmartsMatcher.shtml#a2530846ca78e83a8050a28ccbbc76059">OBSmartsMatcher::SetupAtomMatchTable()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="ad9d21c9b65678905c6d7d461160fcd9f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad9d21c9b65678905c6d7d461160fcd9f">&sect;&nbsp;</a></span>BeginBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * BeginBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Set the iterator <code>i</code> to the beginning of the bond list </p><dl class="section return"><dt>Returns</dt><dd>the first bond (or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBAtomBondIter.shtml#a1e72a6b50b1b53a7d3c4b96ea26bd76a">OBAtomBondIter::OBAtomBondIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml#a05b5a8858b706d1046f933c51daa8727">OBMolBondIter::OBMolBondIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="a133c681e9534e7255b1fae272c40a511"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a133c681e9534e7255b1fae272c40a511">&sect;&nbsp;</a></span>NextBond()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a> * NextBond </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a54495d3eb8f9749d0237e6bda59e0abe">OBBondIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Advance the iterator <code>i</code> to the next bond in the molecule </p><dl class="section return"><dt>Returns</dt><dd>the next bond (if any, or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a5efe4ccada855f2e0c4b0f57614f8607">OBAromaticTyper::AssignAromaticFlags()</a>, <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#a387eb9209ded6f58de6c672c06121ec8">OpenBabel::DetermineFRJ()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBRotorList.shtml#abd5c2d1e536989dc3b180c7ebd79dc7c">OBRotorList::FindRotors()</a>, <a class="el" href="classOpenBabel_1_1OBMolBondIter.shtml#ad17af958901317fceb246b53b90a376d">OBMolBondIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBAtomBondIter.shtml#ad5bb33e493787775e92d38f36da65a0d">OBAtomBondIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ab4077f1ebf77386df177be76a63b6b10">OBChainsParser::PerceiveChains()</a>, <a class="el" href="classOpenBabel_1_1OBAromaticTyper.shtml#a0c70c9a0eec26db77fb26931fafab63b">OBAromaticTyper::SelectRootAtoms()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="a49f6fa37f54e72323ae1b9597fdca02e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a49f6fa37f54e72323ae1b9597fdca02e">&sect;&nbsp;</a></span>BeginResidue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* BeginResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the iterator <code>i</code> to the beginning of the resdiue list </p><dl class="section return"><dt>Returns</dt><dd>the first residue (or NULL if none exist) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidueIter.shtml#a0801e9aa4fb67ccecfb66998108bf2c1">OBResidueIter::OBResidueIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="af3747253310ab328967a8bcaf32842d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3747253310ab328967a8bcaf32842d3">&sect;&nbsp;</a></span>NextResidue()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>* NextResidue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#aa52bc907b6b29c913a85671c48ff8ad7">OBResidueIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Advance the iterator <code>i</code> to the next residue in the molecule </p><dl class="section return"><dt>Returns</dt><dd>the next residue (if any, or NULL if not possible) </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBResidueIter.shtml#ae34efedb2d6054469da00761bbb73e16">OBResidueIter::operator++()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>, <a class="el" href="classOpenBabel_1_1OBChainsParser.shtml#ac717b59426373eedc1ebb4442b3d7b3e">OBChainsParser::~OBChainsParser()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="aa335b17e7c11424cf44f3420de73b8cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa335b17e7c11424cf44f3420de73b8cf">&sect;&nbsp;</a></span>BeginInternalCoord()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>* BeginInternalCoord </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Set the iterator to the beginning of the internal coordinate list </p><dl class="section return"><dt>Returns</dt><dd>the first internal coordinate record, or NULL if none exist </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a49b0e7a728429a4482c47127538f0fa6">SetInternalCoord</a> </dd></dl>

</div>
</div>
<a id="a63bf8bb4886f7062b3a6b99c77a14d30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a63bf8bb4886f7062b3a6b99c77a14d30">&sect;&nbsp;</a></span>NextInternalCoord()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>* NextInternalCoord </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a> *&gt;::iterator &amp;&#160;</td>
          <td class="paramname"><em>i</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Advance the iterator to the next internal coordinate record </p><dl class="section return"><dt>Returns</dt><dd>the next first internal coordinate record, or NULL if none exist </dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="classOpenBabel_1_1OBMol.shtml#a49b0e7a728429a4482c47127538f0fa6">SetInternalCoord</a> </dd></dl>

</div>
</div>
<a id="ab2f0cea1c162bbe8dd603528a3da5c87"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab2f0cea1c162bbe8dd603528a3da5c87">&sect;&nbsp;</a></span>CastAndClear()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">T* CastAndClear </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>clear</em> = <code>true</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>By default clears the object. Called from ReadMolecule of most format classes. </p>

</div>
</div>
<a id="a86dd58fc1da5652d70e823fa77cc1637"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a86dd58fc1da5652d70e823fa77cc1637">&sect;&nbsp;</a></span>HasData() <span class="overload">[1/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether the generic attribute/value pair exists </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a4e794d96851deaad479e17b30928a3cd">OBDescriptor::MatchPairData()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#a2a5208bfd803385534526eea570bf6b0">OBMoleculeFormat::ReadChemObjectImpl()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a id="a01b429ffcaf47cf265acd439ed2faca0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a01b429ffcaf47cf265acd439ed2faca0">&sect;&nbsp;</a></span>HasData() <span class="overload">[2/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether the generic attribute/value pair exists </dd></dl>

</div>
</div>
<a id="a6cb103f12f49d86132ece200000da830"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6cb103f12f49d86132ece200000da830">&sect;&nbsp;</a></span>HasData() <span class="overload">[3/3]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool HasData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>whether the generic attribute/value pair exists, for a given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> </dd></dl>

</div>
</div>
<a id="a797e5b4d20b6233062d2fdba78a08e06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a797e5b4d20b6233062d2fdba78a08e06">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete any data matching the given <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a>. </p>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1a089d9c827830b5a9a2e644b267e510">OBDescriptor::DeleteProperties()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5531433a3edb03cf74aecd1ffadfe3a7">OpenBabel::DeleteStereoOnAtom()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a id="ab586df65e3f115b69510820b34098ce9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab586df65e3f115b69510820b34098ce9">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>gd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete the given generic data from this object. </p>

</div>
</div>
<a id="a030adad5b052ff3d390f13e1f981201e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a030adad5b052ff3d390f13e1f981201e">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void DeleteData </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&gt; &amp;&#160;</td>
          <td class="paramname"><em>vg</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Delete all of the given generic data from this object. </p>

</div>
</div>
<a id="aa068a2a7b64d2ee73aedb8c6e3cf0c4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa068a2a7b64d2ee73aedb8c6e3cf0c4c">&sect;&nbsp;</a></span>DeleteData() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool DeleteData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deletes the generic data with the specified attribute, returning false if not found. </p>

</div>
</div>
<a id="adb6b0ec89bfea783825b3b466e4dbc00"></a>
<h2 class="memtitle"><span class="permalink"><a href="#adb6b0ec89bfea783825b3b466e4dbc00">&sect;&nbsp;</a></span>SetData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void SetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a data object; does nothing if d==NULL. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBGastChrg.shtml#a1c145997cdde372b0d870cabc0aede0a">OBGastChrg::AssignPartialCharges()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ac14285658929bd5af45a1560cb1ec15b">AliasData::RevertToAliasForm()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a id="aa6f692332837387535e337413d0100de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6f692332837387535e337413d0100de">&sect;&nbsp;</a></span>CloneData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void CloneData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> *&#160;</td>
          <td class="paramname"><em>d</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Adds a copy of a data object; does nothing if d == NULL </p><dl class="section since"><dt>Since</dt><dd>version 2.2 </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>.</p>

</div>
</div>
<a id="a2de970fc10391cb7f06c77e3b492f582"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2de970fc10391cb7f06c77e3b492f582">&sect;&nbsp;</a></span>DataSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">size_t DataSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the number of <a class="el" href="classOpenBabel_1_1OBGenericData.shtml" title="Base class for generic data. ">OBGenericData</a> items attached to this molecule. </dd></dl>

</div>
</div>
<a id="aee672d91b694547fb072fdaa8e03cfe9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee672d91b694547fb072fdaa8e03cfe9">&sect;&nbsp;</a></span>GetData() <span class="overload">[1/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the first matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> or NULL if nothing matches </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBDepict.shtml#ab88f0bdd58be5fe56020b4502bbfb837">OBDepict::AddAtomLabels()</a>, <a class="el" href="namespaceOpenBabel.shtml#ac8f591b34d70fd0063b836ddf6d8cdbc">OpenBabel::CalcSignedVolume()</a>, <a class="el" href="namespaceOpenBabel.shtml#abefbf418290927a56b3d124d3cc646d7">OpenBabel::CorrectChirality()</a>, <a class="el" href="classOpenBabel_1_1OBDepict.shtml#a9ef29e99771a1932b2c28b34533a3e96">OBDepict::DrawMolecule()</a>, <a class="el" href="classOpenBabel_1_1AliasData.shtml#ae9370e865e83b4dfefbb8b6cb2c15535">AliasData::Expand()</a>, <a class="el" href="namespaceOpenBabel.shtml#a632be87a51811b515f7e9a5fc18e4476">OpenBabel::extract_thermochemistry()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a1d0907c6fab9cdb01ce11858eb5f0860">OBDescriptor::FilterCompare()</a>, <a class="el" href="namespaceOpenBabel.shtml#a394447ad37adaf40565f53d07f5eed17">OpenBabel::GetAtomSymClass()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#aa41fd7cce6a9cf2e56ca603de7fbc507">OBForceField::GetAtomTypes()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#ad2cdc7a2d0f83221e9536d391032c6ea">OBForceField::GetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a8be38bcae14834b6849d777e19885955">OBForceField::GetCoordinates()</a>, <a class="el" href="classOpenBabel_1_1OBForceField.shtml#a06280807851159ac893d3391400861d3">OBForceField::GetPartialCharges()</a>, <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a789fe3d5cae737f1caa28590fe29f460">OBDescriptor::GetValues()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, <a class="el" href="classOpenBabel_1_1OBMolAngleIter.shtml#a48b73b591ecad6e541b5ceedb6618715">OBMolAngleIter::OBMolAngleIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolRingIter.shtml#a15547553c4072355819acbcf350dde77">OBMolRingIter::OBMolRingIter()</a>, <a class="el" href="classOpenBabel_1_1OBMolTorsionIter.shtml#a7746689f376b4b9f2fc6a103dc101d38">OBMolTorsionIter::OBMolTorsionIter()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, and <a class="el" href="classOpenBabel_1_1OBDescriptor.shtml#a3a6e9ddee5b20a8911bc9f6e407d1abd">OBDescriptor::PredictAndSave()</a>.</p>

</div>
</div>
<a id="a22f0eade8b5924eec28ad50f0ce2031f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a22f0eade8b5924eec28ad50f0ce2031f">&sect;&nbsp;</a></span>GetData() <span class="overload">[2/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a id="a483b277678a8ca48998742c80985fd0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a483b277678a8ca48998742c80985fd0b">&sect;&nbsp;</a></span>GetData() <span class="overload">[3/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * GetData </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>any data matching the given attribute name or NULL if nothing matches</dd>
<dd>
the value given an attribute name </dd></dl>

</div>
</div>
<a id="a90a551ff0a0ed3fa58745dff0ecacdaa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90a551ff0a0ed3fa58745dff0ecacdaa">&sect;&nbsp;</a></span>GetData() <span class="overload">[4/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt;&amp; GetData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>all data, suitable for iterating </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aa04bad1a38d0d3bff9930e332f460dc2">OBMol::GetEnergies()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a5ba177c97c9b16781c3e87833359730c">OBMol::GetEnergy()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a22a1e9fe8d4ef1bebf8e9d9aa2cacc12">OBMol::SetEnergies()</a>.</p>

</div>
</div>
<a id="aa959146c3f7b458009dc04f61b5a2e7f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa959146c3f7b458009dc04f61b5a2e7f">&sect;&nbsp;</a></span>GetData() <span class="overload">[5/5]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceOpenBabel.shtml#a87d90c5296e904e126b8520e1daacc14">DataOrigin</a>&#160;</td>
          <td class="paramname"><em>source</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>all data with a specific origin, suitable for iterating </dd></dl>

</div>
</div>
<a id="afb56decc1b824c9fad980fc22e1d778c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb56decc1b824c9fad980fc22e1d778c">&sect;&nbsp;</a></span>GetAllData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt; <a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a> * &gt; GetAllData </td>
          <td>(</td>
          <td class="paramtype">const unsigned int&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>the all matching data for a given type from <a class="el" href="namespaceOpenBabel_1_1OBGenericDataType.shtml" title="Classification of data stored via OBGenericData class and subclasses. ">OBGenericDataType</a> or an empty vector if nothing matches </dd></dl>
<dl class="section since"><dt>Since</dt><dd>version 2.2 </dd></dl>

<p>Referenced by <a class="el" href="namespaceOpenBabel.shtml#a62d602f9ffb93ae1f37c2d3bbf010d77">OpenBabel::CanonicalLabels()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3258f54a86ddc9ebb8968ebdb2aeab37">OBBuilder::CorrectStereoAtoms()</a>, <a class="el" href="classOpenBabel_1_1OBBuilder.shtml#a3280c4291f365e26ad615eb38c877b25">OBBuilder::CorrectStereoBonds()</a>, <a class="el" href="namespaceOpenBabel.shtml#a5531433a3edb03cf74aecd1ffadfe3a7">OpenBabel::DeleteStereoOnAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad711b0ce04370b50be246e7b859d1f99">OBMol::GetNextFragment()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a3f9d2bbe4ae3f85ddca39be0a8ff4971">OBMol::operator+=()</a>.</p>

</div>
</div>
<a id="a15b47c65393d46fde62d1f0a19bcf9fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a15b47c65393d46fde62d1f0a19bcf9fa">&sect;&nbsp;</a></span>BeginData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> BeginData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing to the beginning of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<a id="a117c836710dd3aaa8748509262a5c280"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a117c836710dd3aaa8748509262a5c280">&sect;&nbsp;</a></span>EndData()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceOpenBabel.shtml#ad5ca88aa35c43da1b791c7703ec8978d">OBDataIterator</a> EndData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section return"><dt>Returns</dt><dd>An iterator pointing to the end of the data </dd></dl>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac92c32a100a07407535d5412d1a3b3ae">OBMol::AddBond()</a>, <a class="el" href="classOpenBabel_1_1OBAtom.shtml#af2ee969f23433f548e39a909547869c7">OBAtom::Duplicate()</a>, <a class="el" href="classOpenBabel_1_1OBMoleculeFormat.shtml#ae40f23c84fd00ee442effa0c543a43c3">OBMoleculeFormat::MakeCombinedMolecule()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a id="aa4a61b1d913f2bee1e0ed5d9daf26549"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa4a61b1d913f2bee1e0ed5d9daf26549">&sect;&nbsp;</a></span>_flags</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int _flags</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>bitfield of flags </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="ac23878536c8da0ff97c0985627dd5646"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac23878536c8da0ff97c0985627dd5646">&sect;&nbsp;</a></span>_autoPartialCharge</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool _autoPartialCharge</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assign partial charges automatically. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="ae1c74119422bd6a52bb7c384b42dca4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1c74119422bd6a52bb7c384b42dca4c">&sect;&nbsp;</a></span>_autoFormalCharge</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool _autoFormalCharge</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Assign formal charges automatically. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="a1dda4ed41c70aef0a361682dd9b2b0f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1dda4ed41c70aef0a361682dd9b2b0f9">&sect;&nbsp;</a></span>_title</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::string _title</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Molecule title. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="ad3bcdbfad8eedc0452fe543badd080d5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad3bcdbfad8eedc0452fe543badd080d5">&sect;&nbsp;</a></span>_vatom</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*&gt; _vatom</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>vector of atoms </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#abceac189ade32ef3a6c5f3d13fc38db4">OBMol::BeginAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac8ca499b39cdd5f4a2fc76e7d50deaa9">OBMol::NextAtom()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a0a2d560c7f2e4a9fdd1814ed8e09bd02">OBMol::RenumberAtoms()</a>.</p>

</div>
</div>
<a id="aba8a1b036f4544f328db00b0939cbaf0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba8a1b036f4544f328db00b0939cbaf0">&sect;&nbsp;</a></span>_atomIds</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBAtom.shtml">OBAtom</a>*&gt; _atomIds</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>vector of atoms indexed by id </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="a3c7208419c7703e947e9a1c365838b98"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3c7208419c7703e947e9a1c365838b98">&sect;&nbsp;</a></span>_vbond</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*&gt; _vbond</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>vector of bonds </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#ad9d21c9b65678905c6d7d461160fcd9f">OBMol::BeginBond()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a133c681e9534e7255b1fae272c40a511">OBMol::NextBond()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="ad07702b91130d560479a679ae1a536d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad07702b91130d560479a679ae1a536d2">&sect;&nbsp;</a></span>_bondIds</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBBond.shtml">OBBond</a>*&gt; _bondIds</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>vector of bonds </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="a601fbf5c8e5b7d92281dbe6a124d7f2c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a601fbf5c8e5b7d92281dbe6a124d7f2c">&sect;&nbsp;</a></span>_dimension</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int _dimension</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Dimensionality of coordinates. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="aaaeee07c1d80b2638b8b9ace0095c9cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaaeee07c1d80b2638b8b9ace0095c9cd">&sect;&nbsp;</a></span>_totalCharge</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">int _totalCharge</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Total charge on the molecule. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#ac749cfb04173f6f35ef64b1ac1d87178">OBMol::PerceiveBondOrders()</a>.</p>

</div>
</div>
<a id="a7a92cb97f8aa52f145b2e928cf480a07"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a92cb97f8aa52f145b2e928cf480a07">&sect;&nbsp;</a></span>_totalSpin</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int _totalSpin</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Total spin on the molecule (if not specified, assumes lowest possible spin) </p>

</div>
</div>
<a id="a706bc4f751bf06cf864893451a7d21e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a706bc4f751bf06cf864893451a7d21e4">&sect;&nbsp;</a></span>_c</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double* _c</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>coordinate array </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a9d63c24cbe9dc1f6e82d58da2b67dafa">OBMol::operator=()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a7a6cf5e812be471e72ecac3ee5d0bc46">OBMol::Rotate()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae4c349e7e3920df72134c0c940318997">OBMol::SetConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a24d0394eb0ad10ca4241da6d6916f0a8">OBMol::SetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#adad8d93db1fadf354b6f51687335fcb9">OBMol::Translate()</a>.</p>

</div>
</div>
<a id="a6fb1d704dcaeb179720ac771745850b1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6fb1d704dcaeb179720ac771745850b1">&sect;&nbsp;</a></span>_vconf</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;double*&gt; _vconf</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>vector of conformers </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#af06dcff6ea883886d4d48bad4cc69156">OBMol::CopyConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a21951fddd6c8a35b21769a1d08718581">OBMol::DeleteConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#ae4c349e7e3920df72134c0c940318997">OBMol::SetConformer()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a24d0394eb0ad10ca4241da6d6916f0a8">OBMol::SetConformers()</a>, <a class="el" href="classOpenBabel_1_1OBMol.shtml#a10c76fe88720e6ca2e17865b847edbf7">OBMol::SetCoordinates()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#a8df0dd71ac1dba7f7876d6671279d087">OBMol::~OBMol()</a>.</p>

</div>
</div>
<a id="ad93165c379393f8eb17506f1f9820a1a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad93165c379393f8eb17506f1f9820a1a">&sect;&nbsp;</a></span>_energy</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double _energy</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>heat of formation </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="a370c739afb1e8ed20a96680ec9f1b219"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a370c739afb1e8ed20a96680ec9f1b219">&sect;&nbsp;</a></span>_natoms</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int _natoms</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of atoms. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#a31d05972f7454e791641c4a7d0071d12">OBMol::ConnectTheDots()</a>, and <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="a35a920486c1a28ca09de0eeb9dbb174c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35a920486c1a28ca09de0eeb9dbb174c">&sect;&nbsp;</a></span>_nbonds</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int _nbonds</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of bonds. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="ae1c29d0efe6187e8726962008c81e956"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae1c29d0efe6187e8726962008c81e956">&sect;&nbsp;</a></span>_residue</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBResidue.shtml">OBResidue</a>*&gt; _residue</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Residue information (if applicable) </p>

</div>
</div>
<a id="a6c2a9726c57abf03a40339776f5d9a0b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6c2a9726c57abf03a40339776f5d9a0b">&sect;&nbsp;</a></span>_internals</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBInternalCoord.shtml">OBInternalCoord</a>*&gt; _internals</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Internal Coordinates (if applicable) </p>

</div>
</div>
<a id="a5db8eb0124fad1bf66ddaf930b4840f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5db8eb0124fad1bf66ddaf930b4840f0">&sect;&nbsp;</a></span>_mod</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short int _mod</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Number of nested calls to <a class="el" href="classOpenBabel_1_1OBMol.shtml#a1b5760b4c75b7631fffb54f84140b3e3">BeginModify()</a> </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<a id="af7811cf8aadbf3b3477c560b0ef2f797"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7811cf8aadbf3b3477c560b0ef2f797">&sect;&nbsp;</a></span>_vdata</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classOpenBabel_1_1OBGenericData.shtml">OBGenericData</a>*&gt; _vdata</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">inherited</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Custom data. </p>

<p>Referenced by <a class="el" href="classOpenBabel_1_1OBMol.shtml#aafa7e4623d4c3c0305b5523ca8a77e14">OBMol::OBMol()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="mol_8h_source.shtml">mol.h</a></li>
<li><a class="el" href="kekulize_8cpp.shtml">kekulize.cpp</a></li>
<li><a class="el" href="mol_8cpp.shtml">mol.cpp</a></li>
<li><a class="el" href="ring_8cpp.shtml">ring.cpp</a></li>
<li><a class="el" href="transform_8cpp.shtml">transform.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- end content -->
<!--#include file="footer.html" -->
<div id="footer">
<hr size="1">
<img src="http://openbabel.org/babel256.png" width="136" height="127" alt="" style="float: left;" />
<p>This file is part of the documentation for <a href="http://openbabel.org/wiki/">Open Babel</a>, version 2.4.1.</p>
<div class="bottom">
Documentation copyright &copy; 1998-2007, the <a href="http://openbabel.org/wiki/THANKS">Open Babel Developers</a>.<br>
Open Babel is hosted by: <a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=40728" 
width="88" height="31" border="0" alt="SourceForge Logo"></a><br>
Generated on Mon Oct 10 2016 12:39:31 by&nbsp;<a href="http://www.doxygen.org/"><img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.8.12.
</div>
</body>
</html>
